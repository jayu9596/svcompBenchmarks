var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]i32;

var $M.3: [ref]i32;

var $M.4: [ref]i16;

var $M.5: [ref]i16;

var $M.6: [ref]i16;

var $M.7: [ref]i16;

var $M.8: [ref]i16;

var $M.9: [ref]i16;

var $M.10: [ref]i16;

var $M.11: [ref]i16;

var $M.12: [ref]i16;

var $M.13: i16;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]i8;

var $M.18: [ref]i32;

var $M.19: i8;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]i24;

var $M.25: [ref]i8;

var $M.26: [ref]i16;

var $M.27: [ref]i32;

var $M.28: [ref]i32;

var $M.29: [ref]i64;

var $M.30: [ref]i16;

var $M.31: [ref]i64;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]ref;

var $M.35: [ref]i32;

var $M.36: [ref]i8;

var $M.37: i16;

var $M.38: [ref]i32;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]i24;

var $M.44: [ref]i8;

var $M.45: [ref]ref;

var $M.46: [ref]i32;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]ref;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i16;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.218: [ref]i8;

var $M.219: [ref]i8;

var $M.220: [ref]i8;

var $M.221: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 917028);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 25689);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_nct6775_data: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_nct6775_data == $sub.ref(0, 26714);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 27754);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 28794);

const ldv_thread_10: ref;

axiom ldv_thread_10 == $sub.ref(0, 29834);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 30874);

const ldv_thread_12: ref;

axiom ldv_thread_12 == $sub.ref(0, 31914);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 32954);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 33994);

const ldv_thread_15: ref;

axiom ldv_thread_15 == $sub.ref(0, 35034);

const ldv_thread_16: ref;

axiom ldv_thread_16 == $sub.ref(0, 36074);

const ldv_thread_17: ref;

axiom ldv_thread_17 == $sub.ref(0, 37114);

const ldv_thread_18: ref;

axiom ldv_thread_18 == $sub.ref(0, 38154);

const ldv_thread_19: ref;

axiom ldv_thread_19 == $sub.ref(0, 39194);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 40234);

const ldv_thread_20: ref;

axiom ldv_thread_20 == $sub.ref(0, 41274);

const ldv_thread_21: ref;

axiom ldv_thread_21 == $sub.ref(0, 42314);

const ldv_thread_22: ref;

axiom ldv_thread_22 == $sub.ref(0, 43354);

const ldv_thread_23: ref;

axiom ldv_thread_23 == $sub.ref(0, 44394);

const ldv_thread_24: ref;

axiom ldv_thread_24 == $sub.ref(0, 45434);

const ldv_thread_25: ref;

axiom ldv_thread_25 == $sub.ref(0, 46474);

const ldv_thread_26: ref;

axiom ldv_thread_26 == $sub.ref(0, 47514);

const ldv_thread_27: ref;

axiom ldv_thread_27 == $sub.ref(0, 48554);

const ldv_thread_28: ref;

axiom ldv_thread_28 == $sub.ref(0, 49594);

const ldv_thread_29: ref;

axiom ldv_thread_29 == $sub.ref(0, 50634);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 51674);

const ldv_thread_30: ref;

axiom ldv_thread_30 == $sub.ref(0, 52714);

const ldv_thread_31: ref;

axiom ldv_thread_31 == $sub.ref(0, 53754);

const ldv_thread_32: ref;

axiom ldv_thread_32 == $sub.ref(0, 54794);

const ldv_thread_33: ref;

axiom ldv_thread_33 == $sub.ref(0, 55834);

const ldv_thread_36: ref;

axiom ldv_thread_36 == $sub.ref(0, 56874);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 57914);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 58954);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 59994);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 61034);

const ldv_thread_8: ref;

axiom ldv_thread_8 == $sub.ref(0, 62074);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 63114);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 64142);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 65170);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 66198);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 67226);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 68254);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 69282);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 70310);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 71338);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 72363);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 73391);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 74419);

const sensor_dev_attr_beep_enable: ref;

axiom sensor_dev_attr_beep_enable == $sub.ref(0, 75499);

const sensor_dev_attr_intrusion1_beep: ref;

axiom sensor_dev_attr_intrusion1_beep == $sub.ref(0, 76579);

const sensor_dev_attr_intrusion0_beep: ref;

axiom sensor_dev_attr_intrusion0_beep == $sub.ref(0, 77659);

const sensor_dev_attr_intrusion1_alarm: ref;

axiom sensor_dev_attr_intrusion1_alarm == $sub.ref(0, 78739);

const sensor_dev_attr_intrusion0_alarm: ref;

axiom sensor_dev_attr_intrusion0_alarm == $sub.ref(0, 79819);

const dev_attr_cpu0_vid: ref;

axiom dev_attr_cpu0_vid == $sub.ref(0, 80891);

const {:count 7} nct6775_attributes_other: ref;

axiom nct6775_attributes_other == $sub.ref(0, 81971);

const nct6775_group_other: ref;

axiom nct6775_group_other == $sub.ref(0, 83027);

const sensor_dev_template_temp_type: ref;

axiom sensor_dev_template_temp_type == $sub.ref(0, 84107);

const sensor_dev_template_temp_offset: ref;

axiom sensor_dev_template_temp_offset == $sub.ref(0, 85187);

const sensor_dev_template_temp_lcrit: ref;

axiom sensor_dev_template_temp_lcrit == $sub.ref(0, 86267);

const sensor_dev_template_temp_crit: ref;

axiom sensor_dev_template_temp_crit == $sub.ref(0, 87347);

const sensor_dev_template_temp_max_hyst: ref;

axiom sensor_dev_template_temp_max_hyst == $sub.ref(0, 88427);

const sensor_dev_template_temp_max: ref;

axiom sensor_dev_template_temp_max == $sub.ref(0, 89507);

const sensor_dev_template_temp_beep: ref;

axiom sensor_dev_template_temp_beep == $sub.ref(0, 90587);

const sensor_dev_template_temp_alarm: ref;

axiom sensor_dev_template_temp_alarm == $sub.ref(0, 91667);

const sensor_dev_template_temp_label: ref;

axiom sensor_dev_template_temp_label == $sub.ref(0, 92747);

const sensor_dev_template_temp_input: ref;

axiom sensor_dev_template_temp_input == $sub.ref(0, 93827);

const {:count 11} nct6775_attributes_temp_template: ref;

axiom nct6775_attributes_temp_template == $sub.ref(0, 94939);

const nct6775_temp_template_group: ref;

axiom nct6775_temp_template_group == $sub.ref(0, 95987);

const sensor_dev_template_fan_div: ref;

axiom sensor_dev_template_fan_div == $sub.ref(0, 97067);

const sensor_dev_template_fan_min: ref;

axiom sensor_dev_template_fan_min == $sub.ref(0, 98147);

const sensor_dev_template_fan_pulses: ref;

axiom sensor_dev_template_fan_pulses == $sub.ref(0, 99227);

const sensor_dev_template_fan_beep: ref;

axiom sensor_dev_template_fan_beep == $sub.ref(0, 100307);

const sensor_dev_template_fan_alarm: ref;

axiom sensor_dev_template_fan_alarm == $sub.ref(0, 101387);

const sensor_dev_template_fan_input: ref;

axiom sensor_dev_template_fan_input == $sub.ref(0, 102467);

const {:count 7} nct6775_attributes_fan_template: ref;

axiom nct6775_attributes_fan_template == $sub.ref(0, 103547);

const nct6775_fan_template_group: ref;

axiom nct6775_fan_template_group == $sub.ref(0, 104595);

const sensor_dev_template_in_max: ref;

axiom sensor_dev_template_in_max == $sub.ref(0, 105675);

const sensor_dev_template_in_min: ref;

axiom sensor_dev_template_in_min == $sub.ref(0, 106755);

const sensor_dev_template_in_beep: ref;

axiom sensor_dev_template_in_beep == $sub.ref(0, 107835);

const sensor_dev_template_in_alarm: ref;

axiom sensor_dev_template_in_alarm == $sub.ref(0, 108915);

const sensor_dev_template_in_input: ref;

axiom sensor_dev_template_in_input == $sub.ref(0, 109995);

const {:count 6} nct6775_attributes_in_template: ref;

axiom nct6775_attributes_in_template == $sub.ref(0, 111067);

const nct6775_in_template_group: ref;

axiom nct6775_in_template_group == $sub.ref(0, 112115);

const sensor_dev_template_pwm_auto_point7_temp: ref;

axiom sensor_dev_template_pwm_auto_point7_temp == $sub.ref(0, 113195);

const sensor_dev_template_pwm_auto_point7_pwm: ref;

axiom sensor_dev_template_pwm_auto_point7_pwm == $sub.ref(0, 114275);

const sensor_dev_template_pwm_auto_point6_temp: ref;

axiom sensor_dev_template_pwm_auto_point6_temp == $sub.ref(0, 115355);

const sensor_dev_template_pwm_auto_point6_pwm: ref;

axiom sensor_dev_template_pwm_auto_point6_pwm == $sub.ref(0, 116435);

const sensor_dev_template_pwm_auto_point5_temp: ref;

axiom sensor_dev_template_pwm_auto_point5_temp == $sub.ref(0, 117515);

const sensor_dev_template_pwm_auto_point5_pwm: ref;

axiom sensor_dev_template_pwm_auto_point5_pwm == $sub.ref(0, 118595);

const sensor_dev_template_pwm_auto_point4_temp: ref;

axiom sensor_dev_template_pwm_auto_point4_temp == $sub.ref(0, 119675);

const sensor_dev_template_pwm_auto_point4_pwm: ref;

axiom sensor_dev_template_pwm_auto_point4_pwm == $sub.ref(0, 120755);

const sensor_dev_template_pwm_auto_point3_temp: ref;

axiom sensor_dev_template_pwm_auto_point3_temp == $sub.ref(0, 121835);

const sensor_dev_template_pwm_auto_point3_pwm: ref;

axiom sensor_dev_template_pwm_auto_point3_pwm == $sub.ref(0, 122915);

const sensor_dev_template_pwm_auto_point2_temp: ref;

axiom sensor_dev_template_pwm_auto_point2_temp == $sub.ref(0, 123995);

const sensor_dev_template_pwm_auto_point2_pwm: ref;

axiom sensor_dev_template_pwm_auto_point2_pwm == $sub.ref(0, 125075);

const sensor_dev_template_pwm_auto_point1_temp: ref;

axiom sensor_dev_template_pwm_auto_point1_temp == $sub.ref(0, 126155);

const sensor_dev_template_pwm_auto_point1_pwm: ref;

axiom sensor_dev_template_pwm_auto_point1_pwm == $sub.ref(0, 127235);

const sensor_dev_template_pwm_weight_duty_base: ref;

axiom sensor_dev_template_pwm_weight_duty_base == $sub.ref(0, 128315);

const sensor_dev_template_pwm_step: ref;

axiom sensor_dev_template_pwm_step == $sub.ref(0, 129395);

const sensor_dev_template_pwm_max: ref;

axiom sensor_dev_template_pwm_max == $sub.ref(0, 130475);

const sensor_dev_template_pwm_weight_duty_step: ref;

axiom sensor_dev_template_pwm_weight_duty_step == $sub.ref(0, 131555);

const sensor_dev_template_pwm_weight_temp_step_base: ref;

axiom sensor_dev_template_pwm_weight_temp_step_base == $sub.ref(0, 132635);

const sensor_dev_template_pwm_weight_temp_step_tol: ref;

axiom sensor_dev_template_pwm_weight_temp_step_tol == $sub.ref(0, 133715);

const sensor_dev_template_pwm_weight_temp_step: ref;

axiom sensor_dev_template_pwm_weight_temp_step == $sub.ref(0, 134795);

const sensor_dev_template_pwm_weight_temp_sel: ref;

axiom sensor_dev_template_pwm_weight_temp_sel == $sub.ref(0, 135875);

const sensor_dev_template_pwm_floor: ref;

axiom sensor_dev_template_pwm_floor == $sub.ref(0, 136955);

const sensor_dev_template_pwm_start: ref;

axiom sensor_dev_template_pwm_start == $sub.ref(0, 138035);

const sensor_dev_template_pwm_step_down_time: ref;

axiom sensor_dev_template_pwm_step_down_time == $sub.ref(0, 139115);

const sensor_dev_template_pwm_step_up_time: ref;

axiom sensor_dev_template_pwm_step_up_time == $sub.ref(0, 140195);

const sensor_dev_template_pwm_stop_time: ref;

axiom sensor_dev_template_pwm_stop_time == $sub.ref(0, 141275);

const sensor_dev_template_fan_tolerance: ref;

axiom sensor_dev_template_fan_tolerance == $sub.ref(0, 142355);

const sensor_dev_template_fan_target: ref;

axiom sensor_dev_template_fan_target == $sub.ref(0, 143435);

const sensor_dev_template_pwm_target_temp: ref;

axiom sensor_dev_template_pwm_target_temp == $sub.ref(0, 144515);

const sensor_dev_template_pwm_crit_temp_tolerance: ref;

axiom sensor_dev_template_pwm_crit_temp_tolerance == $sub.ref(0, 145595);

const sensor_dev_template_pwm_temp_tolerance: ref;

axiom sensor_dev_template_pwm_temp_tolerance == $sub.ref(0, 146675);

const sensor_dev_template_pwm_temp_sel: ref;

axiom sensor_dev_template_pwm_temp_sel == $sub.ref(0, 147755);

const sensor_dev_template_pwm_enable: ref;

axiom sensor_dev_template_pwm_enable == $sub.ref(0, 148835);

const sensor_dev_template_pwm_mode: ref;

axiom sensor_dev_template_pwm_mode == $sub.ref(0, 149915);

const sensor_dev_template_pwm: ref;

axiom sensor_dev_template_pwm == $sub.ref(0, 150995);

const {:count 37} nct6775_attributes_pwm_template: ref;

axiom nct6775_attributes_pwm_template == $sub.ref(0, 152315);

const nct6775_pwm_template_group: ref;

axiom nct6775_pwm_template_group == $sub.ref(0, 153363);

const fan_debounce: ref;

axiom fan_debounce == $sub.ref(0, 154389);

const {:count 6} NCT6792_REG_TEMP_MON: ref;

axiom NCT6792_REG_TEMP_MON == $sub.ref(0, 155425);

const {:count 5} NCT6792_REG_BEEP: ref;

axiom NCT6792_REG_BEEP == $sub.ref(0, 156459);

const {:count 7} NCT6791_REG_ALARM: ref;

axiom NCT6791_REG_ALARM == $sub.ref(0, 157497);

const {:count 6} NCT6791_REG_WEIGHT_TEMP_BASE: ref;

axiom NCT6791_REG_WEIGHT_TEMP_BASE == $sub.ref(0, 158533);

const {:count 6} NCT6791_REG_WEIGHT_TEMP_STEP_TOL: ref;

axiom NCT6791_REG_WEIGHT_TEMP_STEP_TOL == $sub.ref(0, 159569);

const {:count 6} NCT6791_REG_WEIGHT_TEMP_STEP: ref;

axiom NCT6791_REG_WEIGHT_TEMP_STEP == $sub.ref(0, 160605);

const {:count 6} NCT6791_REG_WEIGHT_TEMP_SEL: ref;

axiom NCT6791_REG_WEIGHT_TEMP_SEL == $sub.ref(0, 161641);

const {:count 6} NCT6791_REG_WEIGHT_DUTY_BASE: ref;

axiom NCT6791_REG_WEIGHT_DUTY_BASE == $sub.ref(0, 162677);

const {:count 6} NCT6791_REG_WEIGHT_DUTY_STEP: ref;

axiom NCT6791_REG_WEIGHT_DUTY_STEP == $sub.ref(0, 163713);

const {:count 32} NCT6791_ALARM_BITS: ref;

axiom NCT6791_ALARM_BITS == $sub.ref(0, 164769);

const {:count 26} NCT6779_REG_TEMP_CRIT: ref;

axiom NCT6779_REG_TEMP_CRIT == $sub.ref(0, 165845);

const {:count 26} NCT6779_REG_TEMP_ALTERNATE: ref;

axiom NCT6779_REG_TEMP_ALTERNATE == $sub.ref(0, 166921);

const {:count 2} NCT6779_REG_TEMP_CONFIG: ref;

axiom NCT6779_REG_TEMP_CONFIG == $sub.ref(0, 167949);

const {:count 2} NCT6779_REG_TEMP_HYST: ref;

axiom NCT6779_REG_TEMP_HYST == $sub.ref(0, 168977);

const {:count 2} NCT6779_REG_TEMP_OVER: ref;

axiom NCT6779_REG_TEMP_OVER == $sub.ref(0, 170005);

const {:count 5} NCT6779_REG_TEMP_MON: ref;

axiom NCT6779_REG_TEMP_MON == $sub.ref(0, 171039);

const {:count 2} NCT6779_REG_TEMP: ref;

axiom NCT6779_REG_TEMP == $sub.ref(0, 172067);

const {:count 7} NCT6779_REG_ALARM: ref;

axiom NCT6779_REG_ALARM == $sub.ref(0, 173105);

const {:count 6} NCT6779_REG_TEMP_OFFSET: ref;

axiom NCT6779_REG_TEMP_OFFSET == $sub.ref(0, 174141);

const {:count 6} NCT6779_REG_CRITICAL_PWM: ref;

axiom NCT6779_REG_CRITICAL_PWM == $sub.ref(0, 175177);

const {:count 6} NCT6779_REG_CRITICAL_PWM_ENABLE: ref;

axiom NCT6779_REG_CRITICAL_PWM_ENABLE == $sub.ref(0, 176213);

const {:count 6} NCT6779_REG_FAN_PULSES: ref;

axiom NCT6779_REG_FAN_PULSES == $sub.ref(0, 177249);

const {:count 6} NCT6779_REG_FAN: ref;

axiom NCT6779_REG_FAN == $sub.ref(0, 178285);

const {:count 15} NCT6779_REG_IN: ref;

axiom NCT6779_REG_IN == $sub.ref(0, 179339);

const {:count 27} nct6779_temp_label: ref;

axiom nct6779_temp_label == $sub.ref(0, 180579);

const {:count 32} NCT6779_BEEP_BITS: ref;

axiom NCT6779_BEEP_BITS == $sub.ref(0, 181635);

const {:count 32} NCT6779_ALARM_BITS: ref;

axiom NCT6779_ALARM_BITS == $sub.ref(0, 182691);

const {:count 22} NCT6776_REG_TEMP_CRIT: ref;

axiom NCT6776_REG_TEMP_CRIT == $sub.ref(0, 183759);

const {:count 22} NCT6776_REG_TEMP_ALTERNATE: ref;

axiom NCT6776_REG_TEMP_ALTERNATE == $sub.ref(0, 184827);

const {:count 6} NCT6776_REG_TEMP_CONFIG: ref;

axiom NCT6776_REG_TEMP_CONFIG == $sub.ref(0, 185863);

const {:count 5} NCT6776_REG_BEEP: ref;

axiom NCT6776_REG_BEEP == $sub.ref(0, 186897);

const {:count 6} NCT6776_PWM_MODE_MASK: ref;

axiom NCT6776_PWM_MODE_MASK == $sub.ref(0, 187927);

const {:count 6} NCT6776_REG_PWM_MODE: ref;

axiom NCT6776_REG_PWM_MODE == $sub.ref(0, 188957);

const {:count 6} NCT6776_REG_WEIGHT_DUTY_BASE: ref;

axiom NCT6776_REG_WEIGHT_DUTY_BASE == $sub.ref(0, 189993);

const {:count 6} NCT6776_REG_TOLERANCE_H: ref;

axiom NCT6776_REG_TOLERANCE_H == $sub.ref(0, 191029);

const {:count 5} NCT6776_REG_FAN_PULSES: ref;

axiom NCT6776_REG_FAN_PULSES == $sub.ref(0, 192063);

const {:count 5} NCT6776_REG_FAN_MIN: ref;

axiom NCT6776_REG_FAN_MIN == $sub.ref(0, 193097);

const {:count 32} NCT6776_BEEP_BITS: ref;

axiom NCT6776_BEEP_BITS == $sub.ref(0, 194153);

const {:count 32} NCT6776_ALARM_BITS: ref;

axiom NCT6776_ALARM_BITS == $sub.ref(0, 195209);

const {:count 20} NCT6775_REG_TEMP_CRIT: ref;

axiom NCT6775_REG_TEMP_CRIT == $sub.ref(0, 196273);

const {:count 20} NCT6775_REG_TEMP_ALTERNATE: ref;

axiom NCT6775_REG_TEMP_ALTERNATE == $sub.ref(0, 197337);

const {:count 6} NCT6775_REG_TEMP_CONFIG: ref;

axiom NCT6775_REG_TEMP_CONFIG == $sub.ref(0, 198373);

const {:count 6} NCT6775_REG_TEMP_HYST: ref;

axiom NCT6775_REG_TEMP_HYST == $sub.ref(0, 199409);

const {:count 6} NCT6775_REG_TEMP_OVER: ref;

axiom NCT6775_REG_TEMP_OVER == $sub.ref(0, 200445);

const {:count 3} NCT6775_REG_TEMP_MON: ref;

axiom NCT6775_REG_TEMP_MON == $sub.ref(0, 201475);

const {:count 6} NCT6775_REG_TEMP: ref;

axiom NCT6775_REG_TEMP == $sub.ref(0, 202511);

const {:count 5} NCT6775_REG_BEEP: ref;

axiom NCT6775_REG_BEEP == $sub.ref(0, 203545);

const {:count 7} NCT6775_REG_ALARM: ref;

axiom NCT6775_REG_ALARM == $sub.ref(0, 204583);

const {:count 6} NCT6775_REG_WEIGHT_TEMP_BASE: ref;

axiom NCT6775_REG_WEIGHT_TEMP_BASE == $sub.ref(0, 205619);

const {:count 6} NCT6775_REG_WEIGHT_TEMP_STEP_TOL: ref;

axiom NCT6775_REG_WEIGHT_TEMP_STEP_TOL == $sub.ref(0, 206655);

const {:count 6} NCT6775_REG_WEIGHT_TEMP_STEP: ref;

axiom NCT6775_REG_WEIGHT_TEMP_STEP == $sub.ref(0, 207691);

const {:count 6} NCT6775_REG_WEIGHT_TEMP_SEL: ref;

axiom NCT6775_REG_WEIGHT_TEMP_SEL == $sub.ref(0, 208727);

const {:count 6} NCT6775_REG_TEMP_SEL: ref;

axiom NCT6775_REG_TEMP_SEL == $sub.ref(0, 209763);

const {:count 6} NCT6775_REG_TEMP_SOURCE: ref;

axiom NCT6775_REG_TEMP_SOURCE == $sub.ref(0, 210799);

const {:count 3} NCT6775_REG_TEMP_OFFSET: ref;

axiom NCT6775_REG_TEMP_OFFSET == $sub.ref(0, 211829);

const {:count 6} NCT6775_REG_CRITICAL_TEMP_TOLERANCE: ref;

axiom NCT6775_REG_CRITICAL_TEMP_TOLERANCE == $sub.ref(0, 212865);

const {:count 6} NCT6775_REG_CRITICAL_TEMP: ref;

axiom NCT6775_REG_CRITICAL_TEMP == $sub.ref(0, 213901);

const {:count 6} NCT6775_REG_AUTO_PWM: ref;

axiom NCT6775_REG_AUTO_PWM == $sub.ref(0, 214937);

const {:count 6} NCT6775_REG_AUTO_TEMP: ref;

axiom NCT6775_REG_AUTO_TEMP == $sub.ref(0, 215973);

const {:count 3} NCT6775_PWM_MODE_MASK: ref;

axiom NCT6775_PWM_MODE_MASK == $sub.ref(0, 217000);

const {:count 3} NCT6775_REG_PWM_MODE: ref;

axiom NCT6775_REG_PWM_MODE == $sub.ref(0, 218027);

const {:count 6} NCT6775_REG_PWM_READ: ref;

axiom NCT6775_REG_PWM_READ == $sub.ref(0, 219063);

const {:count 6} NCT6775_REG_WEIGHT_DUTY_STEP: ref;

axiom NCT6775_REG_WEIGHT_DUTY_STEP == $sub.ref(0, 220099);

const {:count 3} NCT6775_REG_FAN_STEP_OUTPUT: ref;

axiom NCT6775_REG_FAN_STEP_OUTPUT == $sub.ref(0, 221129);

const {:count 3} NCT6775_REG_FAN_MAX_OUTPUT: ref;

axiom NCT6775_REG_FAN_MAX_OUTPUT == $sub.ref(0, 222159);

const {:count 6} NCT6775_REG_FAN_STOP_OUTPUT: ref;

axiom NCT6775_REG_FAN_STOP_OUTPUT == $sub.ref(0, 223195);

const {:count 6} NCT6775_REG_FAN_START_OUTPUT: ref;

axiom NCT6775_REG_FAN_START_OUTPUT == $sub.ref(0, 224231);

const {:count 6} NCT6775_REG_PWM: ref;

axiom NCT6775_REG_PWM == $sub.ref(0, 225267);

const {:count 6} NCT6775_REG_FAN_STEP_DOWN_TIME: ref;

axiom NCT6775_REG_FAN_STEP_DOWN_TIME == $sub.ref(0, 226303);

const {:count 6} NCT6775_REG_FAN_STEP_UP_TIME: ref;

axiom NCT6775_REG_FAN_STEP_UP_TIME == $sub.ref(0, 227339);

const {:count 6} NCT6775_REG_FAN_STOP_TIME: ref;

axiom NCT6775_REG_FAN_STOP_TIME == $sub.ref(0, 228375);

const {:count 6} NCT6775_FAN_PULSE_SHIFT: ref;

axiom NCT6775_FAN_PULSE_SHIFT == $sub.ref(0, 229411);

const {:count 5} NCT6775_REG_FAN_PULSES: ref;

axiom NCT6775_REG_FAN_PULSES == $sub.ref(0, 230445);

const {:count 3} NCT6775_REG_FAN_MIN: ref;

axiom NCT6775_REG_FAN_MIN == $sub.ref(0, 231475);

const {:count 6} NCT6775_REG_FAN_MODE: ref;

axiom NCT6775_REG_FAN_MODE == $sub.ref(0, 232511);

const {:count 5} NCT6775_REG_FAN: ref;

axiom NCT6775_REG_FAN == $sub.ref(0, 233545);

const {:count 6} NCT6775_REG_TARGET: ref;

axiom NCT6775_REG_TARGET == $sub.ref(0, 234581);

const {:count 15} NCT6775_REG_IN_MAX: ref;

axiom NCT6775_REG_IN_MAX == $sub.ref(0, 235635);

const {:count 15} NCT6775_REG_IN_MIN: ref;

axiom NCT6775_REG_IN_MIN == $sub.ref(0, 236689);

const {:count 10} NCT6775_REG_IN: ref;

axiom NCT6775_REG_IN == $sub.ref(0, 237733);

const {:count 21} nct6775_temp_label: ref;

axiom nct6775_temp_label == $sub.ref(0, 238925);

const {:count 32} NCT6775_BEEP_BITS: ref;

axiom NCT6775_BEEP_BITS == $sub.ref(0, 239981);

const {:count 32} NCT6775_ALARM_BITS: ref;

axiom NCT6775_ALARM_BITS == $sub.ref(0, 241037);

const {:count 6} NCT6106_REG_TEMP_CRIT_H: ref;

axiom NCT6106_REG_TEMP_CRIT_H == $sub.ref(0, 242073);

const {:count 6} NCT6106_REG_TEMP_CRIT_L: ref;

axiom NCT6106_REG_TEMP_CRIT_L == $sub.ref(0, 243109);

const {:count 22} NCT6106_REG_TEMP_CRIT: ref;

axiom NCT6106_REG_TEMP_CRIT == $sub.ref(0, 244177);

const {:count 22} NCT6106_REG_TEMP_ALTERNATE: ref;

axiom NCT6106_REG_TEMP_ALTERNATE == $sub.ref(0, 245245);

const {:count 6} NCT6106_REG_TEMP_CONFIG: ref;

axiom NCT6106_REG_TEMP_CONFIG == $sub.ref(0, 246281);

const {:count 6} NCT6106_REG_TEMP_HYST: ref;

axiom NCT6106_REG_TEMP_HYST == $sub.ref(0, 247317);

const {:count 6} NCT6106_REG_TEMP_OVER: ref;

axiom NCT6106_REG_TEMP_OVER == $sub.ref(0, 248353);

const {:count 3} NCT6106_REG_TEMP_MON: ref;

axiom NCT6106_REG_TEMP_MON == $sub.ref(0, 249383);

const {:count 6} NCT6106_REG_TEMP: ref;

axiom NCT6106_REG_TEMP == $sub.ref(0, 250419);

const {:count 32} NCT6106_BEEP_BITS: ref;

axiom NCT6106_BEEP_BITS == $sub.ref(0, 251475);

const {:count 5} NCT6106_REG_BEEP: ref;

axiom NCT6106_REG_BEEP == $sub.ref(0, 252509);

const {:count 32} NCT6106_ALARM_BITS: ref;

axiom NCT6106_ALARM_BITS == $sub.ref(0, 253565);

const {:count 7} NCT6106_REG_ALARM: ref;

axiom NCT6106_REG_ALARM == $sub.ref(0, 254603);

const {:count 3} NCT6106_REG_WEIGHT_TEMP_BASE: ref;

axiom NCT6106_REG_WEIGHT_TEMP_BASE == $sub.ref(0, 255633);

const {:count 3} NCT6106_REG_WEIGHT_TEMP_STEP_TOL: ref;

axiom NCT6106_REG_WEIGHT_TEMP_STEP_TOL == $sub.ref(0, 256663);

const {:count 3} NCT6106_REG_WEIGHT_TEMP_STEP: ref;

axiom NCT6106_REG_WEIGHT_TEMP_STEP == $sub.ref(0, 257693);

const {:count 3} NCT6106_REG_WEIGHT_TEMP_SEL: ref;

axiom NCT6106_REG_WEIGHT_TEMP_SEL == $sub.ref(0, 258723);

const {:count 3} NCT6106_REG_TEMP_SEL: ref;

axiom NCT6106_REG_TEMP_SEL == $sub.ref(0, 259753);

const {:count 6} NCT6106_REG_TEMP_SOURCE: ref;

axiom NCT6106_REG_TEMP_SOURCE == $sub.ref(0, 260789);

const {:count 3} NCT6106_REG_TEMP_OFFSET: ref;

axiom NCT6106_REG_TEMP_OFFSET == $sub.ref(0, 261819);

const {:count 3} NCT6106_REG_CRITICAL_PWM: ref;

axiom NCT6106_REG_CRITICAL_PWM == $sub.ref(0, 262849);

const {:count 3} NCT6106_REG_CRITICAL_PWM_ENABLE: ref;

axiom NCT6106_REG_CRITICAL_PWM_ENABLE == $sub.ref(0, 263879);

const {:count 3} NCT6106_REG_CRITICAL_TEMP_TOLERANCE: ref;

axiom NCT6106_REG_CRITICAL_TEMP_TOLERANCE == $sub.ref(0, 264909);

const {:count 3} NCT6106_REG_CRITICAL_TEMP: ref;

axiom NCT6106_REG_CRITICAL_TEMP == $sub.ref(0, 265939);

const {:count 3} NCT6106_REG_AUTO_PWM: ref;

axiom NCT6106_REG_AUTO_PWM == $sub.ref(0, 266969);

const {:count 3} NCT6106_REG_AUTO_TEMP: ref;

axiom NCT6106_REG_AUTO_TEMP == $sub.ref(0, 267999);

const {:count 3} NCT6106_PWM_MODE_MASK: ref;

axiom NCT6106_PWM_MODE_MASK == $sub.ref(0, 269026);

const {:count 3} NCT6106_REG_PWM_MODE: ref;

axiom NCT6106_REG_PWM_MODE == $sub.ref(0, 270053);

const {:count 3} NCT6106_REG_PWM_READ: ref;

axiom NCT6106_REG_PWM_READ == $sub.ref(0, 271083);

const {:count 3} NCT6106_REG_WEIGHT_DUTY_BASE: ref;

axiom NCT6106_REG_WEIGHT_DUTY_BASE == $sub.ref(0, 272113);

const {:count 3} NCT6106_REG_WEIGHT_DUTY_STEP: ref;

axiom NCT6106_REG_WEIGHT_DUTY_STEP == $sub.ref(0, 273143);

const {:count 3} NCT6106_REG_FAN_STOP_OUTPUT: ref;

axiom NCT6106_REG_FAN_STOP_OUTPUT == $sub.ref(0, 274173);

const {:count 3} NCT6106_REG_FAN_START_OUTPUT: ref;

axiom NCT6106_REG_FAN_START_OUTPUT == $sub.ref(0, 275203);

const {:count 3} NCT6106_REG_PWM: ref;

axiom NCT6106_REG_PWM == $sub.ref(0, 276233);

const {:count 3} NCT6106_REG_FAN_STEP_DOWN_TIME: ref;

axiom NCT6106_REG_FAN_STEP_DOWN_TIME == $sub.ref(0, 277263);

const {:count 3} NCT6106_REG_FAN_STEP_UP_TIME: ref;

axiom NCT6106_REG_FAN_STEP_UP_TIME == $sub.ref(0, 278293);

const {:count 3} NCT6106_REG_FAN_STOP_TIME: ref;

axiom NCT6106_REG_FAN_STOP_TIME == $sub.ref(0, 279323);

const {:count 5} NCT6106_FAN_PULSE_SHIFT: ref;

axiom NCT6106_FAN_PULSE_SHIFT == $sub.ref(0, 280357);

const {:count 5} NCT6106_REG_FAN_PULSES: ref;

axiom NCT6106_REG_FAN_PULSES == $sub.ref(0, 281391);

const {:count 3} NCT6106_REG_FAN_MIN: ref;

axiom NCT6106_REG_FAN_MIN == $sub.ref(0, 282421);

const {:count 3} NCT6106_REG_FAN_MODE: ref;

axiom NCT6106_REG_FAN_MODE == $sub.ref(0, 283451);

const {:count 3} NCT6106_REG_FAN: ref;

axiom NCT6106_REG_FAN == $sub.ref(0, 284481);

const {:count 3} NCT6106_REG_TARGET: ref;

axiom NCT6106_REG_TARGET == $sub.ref(0, 285511);

const {:count 9} NCT6106_REG_IN_MAX: ref;

axiom NCT6106_REG_IN_MAX == $sub.ref(0, 286553);

const {:count 9} NCT6106_REG_IN_MIN: ref;

axiom NCT6106_REG_IN_MIN == $sub.ref(0, 287595);

const {:count 9} NCT6106_REG_IN: ref;

axiom NCT6106_REG_IN == $sub.ref(0, 288637);

const {:count 23} nct6776_temp_label: ref;

axiom nct6776_temp_label == $sub.ref(0, 289845);

const {:count 6} nct6775_device_names: ref;

axiom nct6775_device_names == $sub.ref(0, 290917);

const {:count 2} NCT6775_CR_CASEOPEN_CLR_MASK: ref;

axiom NCT6775_CR_CASEOPEN_CLR_MASK == $sub.ref(0, 291943);

const {:count 2} NCT6775_REG_CR_CASEOPEN_CLR: ref;

axiom NCT6775_REG_CR_CASEOPEN_CLR == $sub.ref(0, 292969);

const {:count 15} scale_in: ref;

axiom scale_in == $sub.ref(0, 294023);

const {:count 3} NCT6775_REG_CRITICAL_ENAB: ref;

axiom NCT6775_REG_CRITICAL_ENAB == $sub.ref(0, 295053);

const {:count 6} nct6775_sio_names: ref;

axiom nct6775_sio_names == $sub.ref(0, 296125);

const force_id: ref;

axiom force_id == $sub.ref(0, 297151);

const nct6775_dev_pm_ops: ref;

axiom nct6775_dev_pm_ops == $sub.ref(0, 298359);

const nct6775_driver: ref;

axiom nct6775_driver == $sub.ref(0, 299559);

const {:count 2} pdev: ref;

axiom pdev == $sub.ref(0, 300599);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 301631);

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 19} .str.29: ref;

axiom .str.29 == $sub.ref(0, 302674);

const {:count 85} .str.30: ref;

axiom .str.30 == $sub.ref(0, 303783);

const {:count 34} .str.31: ref;

axiom .str.31 == $sub.ref(0, 304841);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 62} .str.9: ref;

axiom .str.9 == $sub.ref(0, 305927);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 23} .str.17: ref;

axiom .str.17 == $sub.ref(0, 306974);

const {:count 24} .str.3: ref;

axiom .str.3 == $sub.ref(0, 308022);

const {:count 45} .str.18: ref;

axiom .str.18 == $sub.ref(0, 309091);

const {:count 9} .str.10: ref;

axiom .str.10 == $sub.ref(0, 310124);

const {:count 9} .str.11: ref;

axiom .str.11 == $sub.ref(0, 311157);

const {:count 11} .str.12: ref;

axiom .str.12 == $sub.ref(0, 312192);

const {:count 9} .str.13: ref;

axiom .str.13 == $sub.ref(0, 313225);

const {:count 9} .str.14: ref;

axiom .str.14 == $sub.ref(0, 314258);

const {:count 9} .str.15: ref;

axiom .str.15 == $sub.ref(0, 315291);

const {:count 8} .str.32: ref;

axiom .str.32 == $sub.ref(0, 316323);

const {:count 8} .str.33: ref;

axiom .str.33 == $sub.ref(0, 317355);

const {:count 8} .str.34: ref;

axiom .str.34 == $sub.ref(0, 318387);

const {:count 8} .str.35: ref;

axiom .str.35 == $sub.ref(0, 319419);

const {:count 8} .str.36: ref;

axiom .str.36 == $sub.ref(0, 320451);

const .str: ref;

axiom .str == $sub.ref(0, 321476);

const {:count 7} .str.37: ref;

axiom .str.37 == $sub.ref(0, 322507);

const {:count 7} .str.38: ref;

axiom .str.38 == $sub.ref(0, 323538);

const {:count 7} .str.39: ref;

axiom .str.39 == $sub.ref(0, 324569);

const {:count 14} .str.40: ref;

axiom .str.40 == $sub.ref(0, 325607);

const {:count 14} .str.41: ref;

axiom .str.41 == $sub.ref(0, 326645);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 327683);

const {:count 14} .str.43: ref;

axiom .str.43 == $sub.ref(0, 328721);

const {:count 14} .str.44: ref;

axiom .str.44 == $sub.ref(0, 329759);

const {:count 14} .str.45: ref;

axiom .str.45 == $sub.ref(0, 330797);

const {:count 14} .str.46: ref;

axiom .str.46 == $sub.ref(0, 331835);

const {:count 14} .str.47: ref;

axiom .str.47 == $sub.ref(0, 332873);

const {:count 13} .str.48: ref;

axiom .str.48 == $sub.ref(0, 333910);

const {:count 13} .str.49: ref;

axiom .str.49 == $sub.ref(0, 334947);

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 335993);

const {:count 14} .str.51: ref;

axiom .str.51 == $sub.ref(0, 337031);

const {:count 13} .str.52: ref;

axiom .str.52 == $sub.ref(0, 338068);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 339105);

const {:count 14} .str.54: ref;

axiom .str.54 == $sub.ref(0, 340143);

const {:count 14} .str.55: ref;

axiom .str.55 == $sub.ref(0, 341181);

const {:count 14} .str.56: ref;

axiom .str.56 == $sub.ref(0, 342219);

const {:count 14} .str.57: ref;

axiom .str.57 == $sub.ref(0, 343257);

const {:count 10} .str.58: ref;

axiom .str.58 == $sub.ref(0, 344291);

const {:count 11} .str.59: ref;

axiom .str.59 == $sub.ref(0, 345326);

const {:count 13} .str.60: ref;

axiom .str.60 == $sub.ref(0, 346363);

const {:count 13} .str.61: ref;

axiom .str.61 == $sub.ref(0, 347400);

const {:count 13} .str.62: ref;

axiom .str.62 == $sub.ref(0, 348437);

const {:count 13} .str.63: ref;

axiom .str.63 == $sub.ref(0, 349474);

const {:count 13} .str.64: ref;

axiom .str.64 == $sub.ref(0, 350511);

const {:count 13} .str.65: ref;

axiom .str.65 == $sub.ref(0, 351548);

const {:count 8} .str.66: ref;

axiom .str.66 == $sub.ref(0, 352580);

const {:count 8} .str.67: ref;

axiom .str.67 == $sub.ref(0, 353612);

const {:count 8} .str.68: ref;

axiom .str.68 == $sub.ref(0, 354644);

const {:count 8} .str.69: ref;

axiom .str.69 == $sub.ref(0, 355676);

const {:count 6} .str.70: ref;

axiom .str.70 == $sub.ref(0, 356706);

const {:count 4} .str.16: ref;

axiom .str.16 == $sub.ref(0, 357734);

const {:count 11} .str.72: ref;

axiom .str.72 == $sub.ref(0, 358769);

const {:count 13} .str.73: ref;

axiom .str.73 == $sub.ref(0, 359806);

const {:count 61} .str.20: ref;

axiom .str.20 == $sub.ref(0, 360891);

const {:count 34} .str.21: ref;

axiom .str.21 == $sub.ref(0, 361949);

const {:count 15} .str.74: ref;

axiom .str.74 == $sub.ref(0, 362988);

const {:count 21} .str.75: ref;

axiom .str.75 == $sub.ref(0, 364033);

const {:count 26} .str.77: ref;

axiom .str.77 == $sub.ref(0, 365083);

const {:count 18} .str.79: ref;

axiom .str.79 == $sub.ref(0, 366125);

const {:count 13} .str.80: ref;

axiom .str.80 == $sub.ref(0, 367162);

const {:count 16} .str.81: ref;

axiom .str.81 == $sub.ref(0, 368202);

const {:count 16} .str.82: ref;

axiom .str.82 == $sub.ref(0, 369242);

const {:count 19} .str.84: ref;

axiom .str.84 == $sub.ref(0, 370285);

const {:count 21} .str.86: ref;

axiom .str.86 == $sub.ref(0, 371330);

const {:count 12} .str.88: ref;

axiom .str.88 == $sub.ref(0, 372366);

const {:count 12} .str.90: ref;

axiom .str.90 == $sub.ref(0, 373402);

const {:count 22} .str.92: ref;

axiom .str.92 == $sub.ref(0, 374448);

const {:count 23} .str.93: ref;

axiom .str.93 == $sub.ref(0, 375495);

const {:count 27} .str.95: ref;

axiom .str.95 == $sub.ref(0, 376546);

const {:count 28} .str.97: ref;

axiom .str.97 == $sub.ref(0, 377598);

const {:count 23} .str.99: ref;

axiom .str.99 == $sub.ref(0, 378645);

const {:count 10} .str.101: ref;

axiom .str.101 == $sub.ref(0, 379679);

const {:count 11} .str.103: ref;

axiom .str.103 == $sub.ref(0, 380714);

const {:count 23} .str.105: ref;

axiom .str.105 == $sub.ref(0, 381761);

const {:count 22} .str.107: ref;

axiom .str.107 == $sub.ref(0, 382807);

const {:count 23} .str.109: ref;

axiom .str.109 == $sub.ref(0, 383854);

const {:count 22} .str.111: ref;

axiom .str.111 == $sub.ref(0, 384900);

const {:count 23} .str.113: ref;

axiom .str.113 == $sub.ref(0, 385947);

const {:count 22} .str.115: ref;

axiom .str.115 == $sub.ref(0, 386993);

const {:count 23} .str.117: ref;

axiom .str.117 == $sub.ref(0, 388040);

const {:count 22} .str.119: ref;

axiom .str.119 == $sub.ref(0, 389086);

const {:count 23} .str.121: ref;

axiom .str.121 == $sub.ref(0, 390133);

const {:count 22} .str.123: ref;

axiom .str.123 == $sub.ref(0, 391179);

const {:count 23} .str.125: ref;

axiom .str.125 == $sub.ref(0, 392226);

const {:count 22} .str.127: ref;

axiom .str.127 == $sub.ref(0, 393272);

const {:count 23} .str.129: ref;

axiom .str.129 == $sub.ref(0, 394319);

const {:count 22} .str.131: ref;

axiom .str.131 == $sub.ref(0, 395365);

const {:count 23} .str.133: ref;

axiom .str.133 == $sub.ref(0, 396412);

const {:count 11} .str.135: ref;

axiom .str.135 == $sub.ref(0, 397447);

const {:count 5} .str.19: ref;

axiom .str.19 == $sub.ref(0, 398476);

const {:count 11} .str.137: ref;

axiom .str.137 == $sub.ref(0, 399511);

const {:count 4} .str.22: ref;

axiom .str.22 == $sub.ref(0, 400539);

const {:count 10} .str.138: ref;

axiom .str.138 == $sub.ref(0, 401573);

const {:count 9} .str.139: ref;

axiom .str.139 == $sub.ref(0, 402606);

const {:count 9} .str.141: ref;

axiom .str.141 == $sub.ref(0, 403639);

const {:count 12} .str.143: ref;

axiom .str.143 == $sub.ref(0, 404675);

const {:count 12} .str.144: ref;

axiom .str.144 == $sub.ref(0, 405711);

const {:count 11} .str.145: ref;

axiom .str.145 == $sub.ref(0, 406746);

const {:count 13} .str.146: ref;

axiom .str.146 == $sub.ref(0, 407783);

const {:count 10} .str.147: ref;

axiom .str.147 == $sub.ref(0, 408817);

const {:count 36} .str.24: ref;

axiom .str.24 == $sub.ref(0, 409877);

const {:count 54} .str.25: ref;

axiom .str.25 == $sub.ref(0, 410955);

const {:count 54} .str.26: ref;

axiom .str.26 == $sub.ref(0, 412033);

const {:count 14} .str.27: ref;

axiom .str.27 == $sub.ref(0, 413071);

const {:count 43} .str.28: ref;

axiom .str.28 == $sub.ref(0, 414138);

const {:count 10} .str.148: ref;

axiom .str.148 == $sub.ref(0, 415172);

const {:count 13} .str.149: ref;

axiom .str.149 == $sub.ref(0, 416209);

const {:count 13} .str.151: ref;

axiom .str.151 == $sub.ref(0, 417246);

const {:count 4} .str.23: ref;

axiom .str.23 == $sub.ref(0, 418274);

const {:count 13} .str.152: ref;

axiom .str.152 == $sub.ref(0, 419311);

const {:count 12} .str.153: ref;

axiom .str.153 == $sub.ref(0, 420347);

const {:count 11} .str.154: ref;

axiom .str.154 == $sub.ref(0, 421382);

const {:count 16} .str.156: ref;

axiom .str.156 == $sub.ref(0, 422422);

const {:count 12} .str.158: ref;

axiom .str.158 == $sub.ref(0, 423458);

const {:count 13} .str.160: ref;

axiom .str.160 == $sub.ref(0, 424495);

const {:count 14} .str.162: ref;

axiom .str.162 == $sub.ref(0, 425533);

const {:count 12} .str.163: ref;

axiom .str.163 == $sub.ref(0, 426569);

const {:count 9} .str.164: ref;

axiom .str.164 == $sub.ref(0, 427602);

const {:count 17} .str.165: ref;

axiom .str.165 == $sub.ref(0, 428643);

const {:count 17} .str.166: ref;

axiom .str.166 == $sub.ref(0, 429684);

const {:count 16} .str.167: ref;

axiom .str.167 == $sub.ref(0, 430724);

const {:count 16} .str.168: ref;

axiom .str.168 == $sub.ref(0, 431764);

const {:count 12} .str.169: ref;

axiom .str.169 == $sub.ref(0, 432800);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 433837);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 434890);

const {:count 38} .str.5: ref;

axiom .str.5 == $sub.ref(0, 435952);

const {:count 72} .str.6: ref;

axiom .str.6 == $sub.ref(0, 437048);

const {:count 69} .str.7: ref;

axiom .str.7 == $sub.ref(0, 438141);

const {:count 50} .str.8: ref;

axiom .str.8 == $sub.ref(0, 439215);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 440247);

const {:count 3} .str.1.214: ref;

axiom .str.1.214 == $sub.ref(0, 441274);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 442312);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 443340);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 444372);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const nct6775_probe: ref;

axiom nct6775_probe == $sub.ref(0, 445404);

procedure nct6775_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $CurrAddr;



implementation nct6775_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $p234: ref;
  var $p236: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p260: ref;
  var $p262: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p306: ref;
  var $p308: ref;
  var $p310: ref;
  var $p312: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p330: ref;
  var $p332: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $p371: ref;
  var $p373: ref;
  var $p374: ref;
  var $p376: ref;
  var $p378: ref;
  var $p380: ref;
  var $p382: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p400: ref;
  var $p402: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i1;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $i415: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p416: ref;
  var $i417: i8;
  var $i418: i32;
  var $i419: i32;
  var $i420: i16;
  var $i421: i32;
  var $i422: i32;
  var $i423: i16;
  var $p424: ref;
  var $p425: ref;
  var $i426: i1;
  var $i428: i64;
  var $p429: ref;
  var $i430: i16;
  var $i431: i32;
  var $i432: i1;
  var $p434: ref;
  var $p435: ref;
  var $i436: i64;
  var $p437: ref;
  var $i438: i16;
  var $i439: i32;
  var $i440: i16;
  var $i441: i16;
  var $i442: i32;
  var $i443: i32;
  var $i444: i1;
  var $i445: i32;
  var $i446: i32;
  var $i447: i32;
  var $i448: i1;
  var $i449: i32;
  var $i450: i32;
  var $i451: i32;
  var $i452: i32;
  var $i453: i32;
  var $i454: i32;
  var $i455: i32;
  var $i433: i32;
  var $i456: i32;
  var $i457: i1;
  var $i427: i32;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $i462: i1;
  var $i466: i64;
  var $p467: ref;
  var $i468: i16;
  var $i469: i32;
  var $i470: i1;
  var $p473: ref;
  var $p474: ref;
  var $i475: i64;
  var $p476: ref;
  var $i477: i16;
  var $i478: i32;
  var $i479: i16;
  var $i480: i16;
  var $i481: i32;
  var $i482: i32;
  var $i483: i1;
  var $i484: i32;
  var $i485: i32;
  var $i486: i32;
  var $i487: i1;
  var $p488: ref;
  var $i489: i32;
  var $i490: i1;
  var $p491: ref;
  var $p492: ref;
  var $i493: i64;
  var $p494: ref;
  var $i495: i16;
  var $i496: i32;
  var $i497: i64;
  var $p498: ref;
  var $i499: i16;
  var $i500: i32;
  var $p501: ref;
  var $p502: ref;
  var $i503: i64;
  var $p504: ref;
  var $p505: ref;
  var $i506: i64;
  var $i507: i1;
  var $p508: ref;
  var $p509: ref;
  var $i510: i64;
  var $p511: ref;
  var $i512: i16;
  var $i513: i32;
  var $i514: i64;
  var $p515: ref;
  var $i516: i16;
  var $i517: i32;
  var $i518: i32;
  var $i519: i32;
  var $i520: i32;
  var $p521: ref;
  var $i522: i8;
  var $i523: i32;
  var $i524: i1;
  var $p525: ref;
  var $i526: i16;
  var $i527: i32;
  var $i528: i32;
  var $i529: i32;
  var $i530: i16;
  var $i531: i32;
  var $i532: i32;
  var $i533: i16;
  var $p534: ref;
  var $p535: ref;
  var $i536: i16;
  var $i537: i32;
  var $i538: i32;
  var $i539: i32;
  var $i540: i16;
  var $i541: i32;
  var $i542: i32;
  var $i543: i16;
  var $p544: ref;
  var $i545: i64;
  var $p546: ref;
  var $i547: i16;
  var $i548: i32;
  var $i549: i64;
  var $p552: ref;
  var $i553: i64;
  var $p554: ref;
  var $i555: i16;
  var $i556: i32;
  var $i557: i64;
  var $p560: ref;
  var $i561: i64;
  var $p562: ref;
  var $i563: i16;
  var $i564: i32;
  var $i565: i64;
  var $p568: ref;
  var $i569: i64;
  var $i570: i1;
  var $i571: i64;
  var $p572: ref;
  var $i573: i16;
  var $i574: i32;
  var $i575: i1;
  var $i576: i64;
  var $p577: ref;
  var $i578: i16;
  var $i579: i32;
  var $i580: i64;
  var $p583: ref;
  var $i584: i64;
  var $i585: i64;
  var $p586: ref;
  var $i587: i16;
  var $i588: i32;
  var $i589: i1;
  var $i590: i64;
  var $i591: i64;
  var $p592: ref;
  var $i593: i16;
  var $i594: i32;
  var $i595: i64;
  var $p598: ref;
  var $i599: i64;
  var $i600: i1;
  var $i601: i64;
  var $p602: ref;
  var $i603: i16;
  var $i604: i32;
  var $i605: i1;
  var $i606: i64;
  var $p607: ref;
  var $i608: i16;
  var $i609: i32;
  var $i610: i64;
  var $p613: ref;
  var $i614: i64;
  var $p615: ref;
  var $i616: i16;
  var $i617: i32;
  var $i618: i64;
  var $p620: ref;
  var $i621: i8;
  var $i622: i32;
  var $i623: i64;
  var $p625: ref;
  var $i626: i1;
  var $p627: ref;
  var $i628: i16;
  var $i629: i32;
  var $i630: i32;
  var $i631: i16;
  var $i632: i32;
  var $i633: i32;
  var $i634: i16;
  var $p635: ref;
  var $i636: i64;
  var $p637: ref;
  var $i638: i16;
  var $i639: i64;
  var $p642: ref;
  var $i643: i64;
  var $p644: ref;
  var $i645: i16;
  var $i646: i64;
  var $p649: ref;
  var $i650: i64;
  var $p651: ref;
  var $i652: i16;
  var $i653: i64;
  var $p656: ref;
  var $i657: i64;
  var $p658: ref;
  var $i659: i16;
  var $i660: i64;
  var $p662: ref;
  var $i663: i64;
  var $i664: i1;
  var $i665: i64;
  var $p666: ref;
  var $i667: i16;
  var $i668: i32;
  var $i669: i1;
  var $i670: i64;
  var $p671: ref;
  var $i672: i16;
  var $i673: i64;
  var $p676: ref;
  var $i678: i64;
  var $i679: i64;
  var $p680: ref;
  var $i681: i16;
  var $i682: i32;
  var $i683: i1;
  var $i684: i64;
  var $i685: i64;
  var $p686: ref;
  var $i687: i16;
  var $i688: i64;
  var $p691: ref;
  var $i677: i32;
  var $i692: i64;
  var $i693: i1;
  var $i694: i64;
  var $p695: ref;
  var $i696: i16;
  var $i697: i32;
  var $i698: i1;
  var $i699: i64;
  var $p700: ref;
  var $i701: i16;
  var $i702: i64;
  var $p705: ref;
  var $i706: i8;
  var $i707: i64;
  var $p709: ref;
  var $i710: i32;
  var $i471: i32;
  var $i472: i32;
  var $i711: i32;
  var $i712: i1;
  var $i464: i32;
  var $i465: i32;
  var $i713: i32;
  var $i463: i32;
  var $i714: i1;
  var $i718: i64;
  var $p719: ref;
  var $i720: i16;
  var $i721: i32;
  var $i722: i1;
  var $p724: ref;
  var $p725: ref;
  var $i726: i64;
  var $p727: ref;
  var $i728: i16;
  var $i729: i32;
  var $i730: i16;
  var $i731: i16;
  var $i732: i32;
  var $i733: i32;
  var $i734: i1;
  var $i735: i32;
  var $i736: i32;
  var $i737: i32;
  var $i738: i1;
  var $p739: ref;
  var $i740: i32;
  var $i741: i1;
  var $p742: ref;
  var $p743: ref;
  var $i744: i64;
  var $p745: ref;
  var $i746: i16;
  var $i747: i32;
  var $i748: i64;
  var $p749: ref;
  var $i750: i16;
  var $i751: i32;
  var $p752: ref;
  var $p753: ref;
  var $i754: i64;
  var $p755: ref;
  var $p756: ref;
  var $i757: i64;
  var $i758: i1;
  var $p759: ref;
  var $p760: ref;
  var $i761: i64;
  var $p762: ref;
  var $i763: i16;
  var $i764: i32;
  var $i765: i64;
  var $p766: ref;
  var $i767: i16;
  var $i768: i32;
  var $i769: i32;
  var $i770: i32;
  var $i771: i32;
  var $p772: ref;
  var $i773: i8;
  var $i774: i32;
  var $i775: i1;
  var $p776: ref;
  var $i777: i16;
  var $i778: i32;
  var $i779: i32;
  var $i780: i32;
  var $i781: i32;
  var $i782: i1;
  var $p783: ref;
  var $i784: i16;
  var $i785: i32;
  var $i786: i32;
  var $i787: i32;
  var $i788: i16;
  var $i789: i32;
  var $i790: i32;
  var $i791: i16;
  var $p792: ref;
  var $p793: ref;
  var $i794: i16;
  var $i795: i32;
  var $i796: i32;
  var $i797: i32;
  var $i798: i16;
  var $i799: i32;
  var $i800: i32;
  var $i801: i16;
  var $p802: ref;
  var $i803: i64;
  var $p804: ref;
  var $i805: i16;
  var $i806: i32;
  var $i807: i64;
  var $p810: ref;
  var $i811: i8;
  var $i812: i32;
  var $i813: i64;
  var $p815: ref;
  var $i816: i1;
  var $p817: ref;
  var $i818: i16;
  var $i819: i32;
  var $i820: i32;
  var $i821: i16;
  var $i822: i32;
  var $i823: i32;
  var $i824: i16;
  var $p825: ref;
  var $i826: i64;
  var $p827: ref;
  var $i828: i16;
  var $i829: i64;
  var $p832: ref;
  var $i833: i8;
  var $i834: i64;
  var $p836: ref;
  var $i837: i32;
  var $i723: i32;
  var $i838: i32;
  var $i839: i1;
  var $i716: i32;
  var $i717: i32;
  var $i840: i32;
  var $i715: i32;
  var $p841: ref;
  var $i842: i32;
  var $i843: i32;
  var $i844: i1;
  var $i847: i64;
  var $p848: ref;
  var $i849: i16;
  var $i850: i32;
  var $i851: i1;
  var $i854: i32;
  var $i855: i32;
  var $i856: i32;
  var $i857: i32;
  var $i858: i1;
  var $p859: ref;
  var $i860: i8;
  var $i861: i32;
  var $i862: i1;
  var $p863: ref;
  var $i864: i16;
  var $i865: i32;
  var $i866: i32;
  var $i867: i32;
  var $i868: i1;
  var $p869: ref;
  var $i870: i16;
  var $i871: i32;
  var $i872: i32;
  var $i873: i16;
  var $i874: i32;
  var $i875: i32;
  var $i876: i16;
  var $p877: ref;
  var $p878: ref;
  var $i879: i16;
  var $i880: i32;
  var $i881: i32;
  var $i882: i16;
  var $i883: i32;
  var $i884: i32;
  var $i885: i16;
  var $p886: ref;
  var $i887: i64;
  var $p888: ref;
  var $i889: i16;
  var $i890: i64;
  var $p893: ref;
  var $i894: i1;
  var $i895: i64;
  var $p896: ref;
  var $i897: i16;
  var $i898: i64;
  var $p901: ref;
  var $i902: i64;
  var $p903: ref;
  var $i904: i16;
  var $i905: i64;
  var $p908: ref;
  var $i909: i8;
  var $i910: i32;
  var $i911: i32;
  var $i912: i8;
  var $i913: i64;
  var $p915: ref;
  var $i916: i1;
  var $p917: ref;
  var $i918: i16;
  var $i919: i32;
  var $i920: i32;
  var $i921: i16;
  var $i922: i32;
  var $i923: i32;
  var $i924: i16;
  var $p925: ref;
  var $i926: i64;
  var $p927: ref;
  var $i928: i16;
  var $i929: i64;
  var $p932: ref;
  var $i933: i8;
  var $i934: i32;
  var $i935: i32;
  var $i936: i8;
  var $i937: i64;
  var $p939: ref;
  var $i940: i32;
  var $i852: i32;
  var $i853: i32;
  var $i941: i32;
  var $i942: i32;
  var $i943: i32;
  var $i944: i1;
  var $i845: i32;
  var $i846: i32;
  var $p945: ref;
  var $i946: i32;
  var $i947: i32;
  var $i948: i1;
  var $p949: ref;
  var $i950: i32;
  var $i951: i32;
  var $i952: i8;
  var $p953: ref;
  var $i954: i32;
  var $i955: i1;
  var $p956: ref;
  var $i957: i32;
  var $i958: i1;
  var $p959: ref;
  var $i960: i32;
  var $i961: i1;
  var $p962: ref;
  var $i963: i32;
  var $i964: i1;
  var $p965: ref;
  var $i966: i32;
  var $i967: i1;
  var $p968: ref;
  var $i969: i32;
  var $i970: i1;
  var $i971: i32;
  var $i972: i32;
  var $i973: i1;
  var $p974: ref;
  var $i975: i8;
  var $i976: i32;
  var $i977: i32;
  var $i978: i1;
  var $p979: ref;
  var $i980: i8;
  var $p981: ref;
  var $i982: i8;
  var $i983: i1;
  var $p984: ref;
  var $i985: i32;
  var $p986: ref;
  var $i987: i32;
  var $i988: i32;
  var $i989: i8;
  var $p990: ref;
  var $i991: i8;
  var $p992: ref;
  var $i993: i16;
  var $i994: i32;
  var $i995: i1;
  var $p996: ref;
  var $i997: i32;
  var $p998: ref;
  var $i999: i32;
  var $i1000: i32;
  var $i1001: i8;
  var $p1002: ref;
  var $i1003: i32;
  var $i1004: i1;
  var $p1005: ref;
  var $i1006: i32;
  var $i1007: i1;
  var $p1008: ref;
  var $i1009: i32;
  var $i1010: i1;
  var $p1011: ref;
  var $i1012: i32;
  var $i1013: i1;
  var $p1014: ref;
  var $i1015: i32;
  var $i1016: i1;
  var $p1017: ref;
  var $i1018: i32;
  var $i1019: i1;
  var $i1020: i32;
  var $i1021: i32;
  var $i1022: i8;
  var $i1024: i32;
  var $i1025: i32;
  var $i1026: i8;
  var $i1027: i32;
  var $i1028: i32;
  var $i1029: i8;
  var $i1030: i32;
  var $i1031: i32;
  var $i1032: i8;
  var $i1023: i8;
  var $p1033: ref;
  var $i1034: i32;
  var $i1035: i32;
  var $p1036: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $i1040: i32;
  var $p1041: ref;
  var $i1042: i8;
  var $i1043: i32;
  var $p1044: ref;
  var $p1045: ref;
  var $i1046: i1;
  var $i1047: i8;
  var $i1048: i1;
  var $p1049: ref;
  var $i1050: i64;
  var $i1051: i32;
  var $i1052: i32;
  var $i1053: i64;
  var $p1055: ref;
  var $p1056: ref;
  var $i1057: i16;
  var $i1058: i32;
  var $i1059: i32;
  var $p1060: ref;
  var $p1061: ref;
  var $i1062: i1;
  var $i1063: i8;
  var $i1064: i1;
  var $p1065: ref;
  var $i1066: i64;
  var $i1067: i32;
  var $i1068: i32;
  var $i1069: i64;
  var $p1071: ref;
  var $p1072: ref;
  var $i1073: i8;
  var $i1074: i32;
  var $i1075: i32;
  var $p1076: ref;
  var $p1077: ref;
  var $i1078: i1;
  var $i1079: i8;
  var $i1080: i1;
  var $p1081: ref;
  var $i1082: i64;
  var $i1083: i32;
  var $i1084: i32;
  var $i1085: i64;
  var $p1087: ref;
  var $p1088: ref;
  var $i1089: i16;
  var $i1090: i32;
  var $i1091: i32;
  var $p1092: ref;
  var $p1093: ref;
  var $i1094: i1;
  var $i1095: i8;
  var $i1096: i1;
  var $p1097: ref;
  var $i1098: i64;
  var $i1099: i32;
  var $i1100: i32;
  var $i1101: i64;
  var $p1103: ref;
  var $i1104: i64;
  var $p1106: ref;
  var $p1107: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $p1110: ref;
  var $p1111: ref;
  var $p1112: ref;
  var $p1113: ref;
  var $i1114: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p5 := dev_get_platdata($p4);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p7 := platform_get_resource($p0, 256, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p11 := __devm_request_region($p8, ioport_resource, $i10, 2, .str.1);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p16 := devm_kzalloc($p15, 1280, 208);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} __mutex_init($p30, .str.29, $p3);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref(nct6775_device_names, $mul.ref(0, 48)), $mul.ref($i33, 8));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(16, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p35);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(752, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $sub.i8(0, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p17);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} platform_set_drvdata($p0, $p38);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 3);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 4);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 5);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb28:
    assume $i56 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p337, 15);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p338, 6);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p339, 4);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p340, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p341, 6);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p342, 2);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p343, 2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p344, NCT6791_ALARM_BITS);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p345, NCT6779_BEEP_BITS);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p346, fan_from_reg13);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p347, fan_from_reg13);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p348, $sub.i8(0, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p349, 7);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1116, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p350, 63);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p351, nct6779_temp_label);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p352, 27);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p353, 64);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p354, 93);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p355, 94);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p356, 2);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p357, NCT6779_REG_IN);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p359, NCT6775_REG_IN_MIN);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p361, NCT6775_REG_IN_MAX);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p362, NCT6775_REG_TARGET);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p363, NCT6779_REG_FAN);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p364, NCT6775_REG_FAN_MODE);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p365, NCT6776_REG_FAN_MIN);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p366, NCT6779_REG_FAN_PULSES);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p367, NCT6775_FAN_PULSE_SHIFT);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p369, NCT6775_REG_FAN_STOP_TIME);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p371, NCT6775_REG_FAN_STEP_UP_TIME);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p373, NCT6775_REG_FAN_STEP_DOWN_TIME);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p374, NCT6776_REG_TOLERANCE_H);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p376, NCT6775_REG_PWM);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p378, NCT6775_REG_FAN_START_OUTPUT);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p380, NCT6775_REG_FAN_STOP_OUTPUT);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p382, NCT6791_REG_WEIGHT_DUTY_STEP);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p384, NCT6791_REG_WEIGHT_DUTY_BASE);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(424, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p385, NCT6775_REG_PWM_READ);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p386, NCT6776_REG_PWM_MODE);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p387, NCT6776_PWM_MODE_MASK);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p388, NCT6775_REG_AUTO_TEMP);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p389, NCT6775_REG_AUTO_PWM);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p390, NCT6775_REG_CRITICAL_TEMP);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p391, NCT6775_REG_CRITICAL_TEMP_TOLERANCE);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p392, NCT6779_REG_CRITICAL_PWM_ENABLE);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p393, 1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(448, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p394, NCT6779_REG_CRITICAL_PWM);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p395, NCT6779_REG_TEMP_OFFSET);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p396, NCT6775_REG_TEMP_SOURCE);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p397, NCT6775_REG_TEMP_SEL);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p398, NCT6791_REG_WEIGHT_TEMP_SEL);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p400, NCT6791_REG_WEIGHT_TEMP_STEP);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p402, NCT6791_REG_WEIGHT_TEMP_STEP_TOL);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p404, NCT6791_REG_WEIGHT_TEMP_BASE);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p405, NCT6791_REG_ALARM);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.0, $p406);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 4);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i408 == 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p410, NCT6792_REG_BEEP);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i412 := $load.i32($M.0, $p411);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 4);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    $p414, $i415 := NCT6792_REG_TEMP_MON, 6;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $i130, $i131 := $0.ref, NCT6779_REG_TEMP_CRIT, NCT6779_REG_TEMP_ALTERNATE, $p414, NCT6779_REG_TEMP_CONFIG, NCT6779_REG_TEMP_HYST, NCT6779_REG_TEMP_OVER, NCT6779_REG_TEMP, $0.ref, 2, $i415;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.0, $p416);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i418 := $zext.i8.i32($i417);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i419 := $shl.i32(1, $i418);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i32.i16($i419);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i421 := $zext.i16.i32($i420);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i422 := $add.i32($i421, 65535);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i423 := $trunc.i32.i16($i422);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p424, $i423);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p425, 0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p1, 0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p2, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i426 := $slt.i32(0, $i130);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} add_temp_sensors($p17, $p459, $p2, $p1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p461 := $load.ref($M.0, $p460);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} add_temp_sensors($p17, $p461, $p2, $p1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p1, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i462 := $slt.i32(0, $i130);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i463 := 6;
    assume {:branchcond $i462} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i714 := $slt.i32(0, $i131);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i715 := $i463;
    assume {:branchcond $i714} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i714 == 1);
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i842 := $load.i32($M.0, $p841);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i843 := $add.i32($i842, $sub.i32(0, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i844 := $slt.i32(0, $i843);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i844} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i844 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} nct6775_init_device($p17);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i946 := $load.i32($M.0, $p945);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i947 := superio_enter($i946);
    call {:si_unique_call 36} {:cexpr "err"} boogie_si_record_i32($i947);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i948 := $ne.i32($i947, 0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i948} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i948 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i950 := $load.i32($M.0, $p949);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i951 := superio_inb($i950, 42);
    call {:si_unique_call 39} {:cexpr "tmp___7"} boogie_si_record_i32($i951);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i952 := $trunc.i32.i8($i951);
    call {:si_unique_call 40} {:cexpr "cr2a"} boogie_si_record_i8($i952);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i954 := $load.i32($M.0, $p953);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i955 := $eq.i32($i954, 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i955} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i955 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i957 := $load.i32($M.0, $p956);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i958 := $eq.i32($i957, 2);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i958} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i958 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i960 := $load.i32($M.0, $p959);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i961 := $eq.i32($i960, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i961} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i963 := $load.i32($M.0, $p962);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i964 := $eq.i32($i963, 3);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i964} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i964 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i966 := $load.i32($M.0, $p965);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i967 := $eq.i32($i966, 4);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i967} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i967 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p968 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i969 := $load.i32($M.0, $p968);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i970 := $eq.i32($i969, 5);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i970} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i970 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1268, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i982 := $load.i8($M.0, $p981);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i983 := $trunc.i8.i1($i982);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i983} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i983 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i993 := $M.13;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i994 := $zext.i16.i32($i993);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i995 := $ne.i32($i994, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i995} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i995 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} nct6775_check_fan_inputs($p17);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p1039 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i1040 := $load.i32($M.0, $p1039);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} superio_exit($i1040);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} nct6775_init_fan_common($p4, $p17);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i1042 := $load.i8($M.0, $p1041);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i1043 := $zext.i8.i32($i1042);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p1044 := nct6775_create_attr_group($p4, nct6775_pwm_template_group, $i1043);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p1045 := $bitcast.ref.ref($p1044);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i1046 := IS_ERR($p1045);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i1047 := $zext.i1.i8($i1046);
    call {:si_unique_call 60} {:cexpr "tmp___12"} boogie_si_record_i8($i1047);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i1048 := $trunc.i8.i1($i1047);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1048} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i1048 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i1052 := $add.i32(0, 1);
    call {:si_unique_call 63} {:cexpr "num_attr_groups"} boogie_si_record_i32($i1052);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i1053 := $sext.i32.i64(0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p1055 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(24, 1)), $mul.ref($i1053, 8));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1055, $p1044);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i1057 := $load.i16($M.0, $p1056);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i1058 := $zext.i16.i32($i1057);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i1059 := fls($i1058);
    call {:si_unique_call 65} {:cexpr "tmp___14"} boogie_si_record_i32($i1059);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p1060 := nct6775_create_attr_group($p4, nct6775_in_template_group, $i1059);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p1061 := $bitcast.ref.ref($p1060);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i1062 := IS_ERR($p1061);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i1063 := $zext.i1.i8($i1062);
    call {:si_unique_call 68} {:cexpr "tmp___16"} boogie_si_record_i8($i1063);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i1064 := $trunc.i8.i1($i1063);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1064} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i1064 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $i1068 := $add.i32($i1052, 1);
    call {:si_unique_call 71} {:cexpr "num_attr_groups"} boogie_si_record_i32($i1068);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i1069 := $sext.i32.i64($i1052);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(24, 1)), $mul.ref($i1069, 8));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1071, $p1060);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p1072 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i1073 := $load.i8($M.0, $p1072);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i1074 := $zext.i8.i32($i1073);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i1075 := fls($i1074);
    call {:si_unique_call 73} {:cexpr "tmp___18"} boogie_si_record_i32($i1075);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p1076 := nct6775_create_attr_group($p4, nct6775_fan_template_group, $i1075);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p1077 := $bitcast.ref.ref($p1076);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i1078 := IS_ERR($p1077);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i1079 := $zext.i1.i8($i1078);
    call {:si_unique_call 76} {:cexpr "tmp___20"} boogie_si_record_i8($i1079);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i1080 := $trunc.i8.i1($i1079);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1080} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i1080 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i1084 := $add.i32($i1068, 1);
    call {:si_unique_call 79} {:cexpr "num_attr_groups"} boogie_si_record_i32($i1084);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i1085 := $sext.i32.i64($i1068);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(24, 1)), $mul.ref($i1085, 8));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1087, $p1076);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p1088 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i1089 := $load.i16($M.0, $p1088);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i1090 := $zext.i16.i32($i1089);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i1091 := fls($i1090);
    call {:si_unique_call 81} {:cexpr "tmp___22"} boogie_si_record_i32($i1091);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p1092 := nct6775_create_attr_group($p4, nct6775_temp_template_group, $i1091);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p1093 := $bitcast.ref.ref($p1092);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i1094 := IS_ERR($p1093);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i1095 := $zext.i1.i8($i1094);
    call {:si_unique_call 84} {:cexpr "tmp___24"} boogie_si_record_i8($i1095);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i1096 := $trunc.i8.i1($i1095);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1096} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i1096 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i1100 := $add.i32($i1084, 1);
    call {:si_unique_call 87} {:cexpr "num_attr_groups"} boogie_si_record_i32($i1100);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i1101 := $sext.i32.i64($i1084);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(24, 1)), $mul.ref($i1101, 8));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1103, $p1092);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i1104 := $sext.i32.i64($i1100);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p1106 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(24, 1)), $mul.ref($i1104, 8));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1106, nct6775_group_other);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(16, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p1108 := $load.ref($M.0, $p1107);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p1109 := $bitcast.ref.ref($p17);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p1110 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(24, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p1111 := $bitcast.ref.ref($p1110);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p1112 := devm_hwmon_device_register_with_groups($p4, $p1108, $p1109, $p1111);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p1113 := $bitcast.ref.ref($p1112);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i1114 := PTR_ERR_OR_ZERO($p1113);
    call {:si_unique_call 90} {:cexpr "tmp___27"} boogie_si_record_i32($i1114);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i14 := $i1114;
    goto $bb3;

  $bb250:
    assume $i1096 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p1097 := $bitcast.ref.ref($p1092);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i1098 := PTR_ERR($p1097);
    call {:si_unique_call 86} {:cexpr "tmp___23"} boogie_si_record_i64($i1098);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i1099 := $trunc.i64.i32($i1098);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i14 := $i1099;
    goto $bb3;

  $bb247:
    assume $i1080 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p1081 := $bitcast.ref.ref($p1076);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i1082 := PTR_ERR($p1081);
    call {:si_unique_call 78} {:cexpr "tmp___19"} boogie_si_record_i64($i1082);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i1083 := $trunc.i64.i32($i1082);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i14 := $i1083;
    goto $bb3;

  $bb244:
    assume $i1064 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p1065 := $bitcast.ref.ref($p1060);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i1066 := PTR_ERR($p1065);
    call {:si_unique_call 70} {:cexpr "tmp___15"} boogie_si_record_i64($i1066);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i1067 := $trunc.i64.i32($i1066);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i14 := $i1067;
    goto $bb3;

  $bb241:
    assume $i1048 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p1049 := $bitcast.ref.ref($p1044);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i1050 := PTR_ERR($p1049);
    call {:si_unique_call 62} {:cexpr "tmp___11"} boogie_si_record_i64($i1050);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i1051 := $trunc.i64.i32($i1050);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i14 := $i1051;
    goto $bb3;

  $bb212:
    assume $i995 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i997 := $load.i32($M.0, $p996);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} superio_select($i997, 11);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i999 := $load.i32($M.0, $p998);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i1000 := superio_inb($i999, 240);
    call {:si_unique_call 47} {:cexpr "tmp___10"} boogie_si_record_i32($i1000);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i1001 := $trunc.i32.i8($i1000);
    call {:si_unique_call 48} {:cexpr "tmp___9"} boogie_si_record_i8($i1001);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i1003 := $load.i32($M.0, $p1002);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i1004 := $eq.i32($i1003, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1004} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i1004 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p1005 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i1006 := $load.i32($M.0, $p1005);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i1007 := $eq.i32($i1006, 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1007} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i1007 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i1009 := $load.i32($M.0, $p1008);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i1010 := $eq.i32($i1009, 2);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1010} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i1010 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i1012 := $load.i32($M.0, $p1011);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i1013 := $eq.i32($i1012, 3);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1013} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i1013 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i1015 := $load.i32($M.0, $p1014);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i1016 := $eq.i32($i1015, 4);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1016} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i1016 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i1018 := $load.i32($M.0, $p1017);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i1019 := $eq.i32($i1018, 5);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1019} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i1019 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i1023 := $i1001;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i1034 := $load.i32($M.0, $p1033);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i1035 := $zext.i8.i32($i1023);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} superio_outb($i1034, 240, $i1035);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(16, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p1038 := $load.ref($M.0, $p1037);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} _dev_info.ref.ref.ref($p1036, .str.31, $p1038);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb234:
    assume $i1019 == 1;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i1030 := $zext.i8.i32($i1001);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i1031 := $or.i32($i1030, 126);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i1032 := $trunc.i32.i8($i1031);
    call {:si_unique_call 52} {:cexpr "tmp___9"} boogie_si_record_i8($i1032);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i1023 := $i1032;
    goto $bb239;

  $bb230:
    assume $i1016 == 1;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb226:
    assume $i1013 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i1027 := $zext.i8.i32($i1001);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i1028 := $or.i32($i1027, 62);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i1029 := $trunc.i32.i8($i1028);
    call {:si_unique_call 51} {:cexpr "tmp___9"} boogie_si_record_i8($i1029);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i1023 := $i1029;
    goto $bb239;

  $bb222:
    assume $i1010 == 1;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb218:
    assume $i1007 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i1024 := $zext.i8.i32($i1001);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i1025 := $or.i32($i1024, 30);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i1026 := $trunc.i32.i8($i1025);
    call {:si_unique_call 50} {:cexpr "tmp___9"} boogie_si_record_i8($i1026);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i1023 := $i1026;
    goto $bb239;

  $bb214:
    assume $i1004 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i1020 := $zext.i8.i32($i1001);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i1021 := $or.i32($i1020, 224);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i1022 := $trunc.i32.i8($i1021);
    call {:si_unique_call 49} {:cexpr "tmp___9"} boogie_si_record_i8($i1022);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i1023 := $i1022;
    goto $bb239;

  $bb209:
    assume $i983 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i985 := $load.i32($M.0, $p984);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} superio_select($i985, 13);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i987 := $load.i32($M.0, $p986);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i988 := superio_inb($i987, 227);
    call {:si_unique_call 43} {:cexpr "tmp___8"} boogie_si_record_i32($i988);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i989 := $trunc.i32.i8($i988);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1266, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p990, $i989);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i991 := vid_which_vrm();
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1267, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p992, $i991);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb203:
    assume $i970 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb199:
    assume $i967 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb195:
    assume $i964 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb191:
    assume $i961 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb187:
    assume $i958 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i976 := $zext.i8.i32($i952);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i977 := $and.i32($i976, 96);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i978 := $eq.i32($i977, 64);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p979 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1268, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i980 := $zext.i1.i8($i978);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p979, $i980);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb183:
    assume $i955 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i971 := $zext.i8.i32($i952);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i972 := $and.i32($i971, 64);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i973 := $ne.i32($i972, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1268, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i975 := $zext.i1.i8($i973);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p974, $i975);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb180:
    assume $i948 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i14 := $i947;
    goto $bb3;

  $bb152:
    assume $i844 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i845, $i846 := 0, $i715;
    goto $bb155;

  $bb155:
    call $i847, $p848, $i849, $i850, $i851, $i854, $i855, $i856, $i857, $i858, $p859, $i860, $i861, $i862, $p863, $i864, $i865, $i866, $i867, $i868, $p869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $p877, $p878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $p886, $i887, $p888, $i889, $i890, $p893, $i894, $i895, $p896, $i897, $i898, $p901, $i902, $p903, $i904, $i905, $p908, $i909, $i910, $i911, $i912, $i913, $p915, $i916, $p917, $i918, $i919, $i920, $i921, $i922, $i923, $i924, $p925, $i926, $p927, $i928, $i929, $p932, $i933, $i934, $i935, $i936, $i937, $p939, $i940, $i852, $i853, $i941, $i942, $i943, $i944, $i845, $i846 := nct6775_probe_loop_$bb155($p1, $p17, $p123, $p126, $p127, $i130, $p841, $i847, $p848, $i849, $i850, $i851, $i854, $i855, $i856, $i857, $i858, $p859, $i860, $i861, $i862, $p863, $i864, $i865, $i866, $i867, $i868, $p869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $p877, $p878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $p886, $i887, $p888, $i889, $i890, $p893, $i894, $i895, $p896, $i897, $i898, $p901, $i902, $p903, $i904, $i905, $p908, $i909, $i910, $i911, $i912, $i913, $p915, $i916, $p917, $i918, $i919, $i920, $i921, $i922, $i923, $i924, $p925, $i926, $p927, $i928, $i929, $p932, $i933, $i934, $i935, $i936, $i937, $p939, $i940, $i852, $i853, $i941, $i942, $i943, $i944, $i845, $i846);
    goto $bb155_last;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i847 := $sext.i32.i64($i845);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($p123, $mul.ref($i847, 2));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i849 := $load.i16($M.12, $p848);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i850 := $zext.i16.i32($i849);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i850, 0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i851 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i854 := $load.i32($M.2, $p1);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i855 := $add.i32($i845, 1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i856 := $ashr.i32($i854, $i855);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i857 := $and.i32($i856, 1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i858 := $ne.i32($i857, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i860 := $load.i8($M.0, $p859);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i861 := $zext.i8.i32($i860);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i862 := $slt.i32($i845, $i861);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i916 := $sgt.i32($i846, 9);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i916 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i918 := $load.i16($M.0, $p917);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i919 := $sext.i16.i32($i918);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i920 := $shl.i32(1, $i846);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i921 := $trunc.i32.i16($i920);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i922 := $sext.i16.i32($i921);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i923 := $or.i32($i919, $i922);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i924 := $trunc.i32.i16($i923);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p925, $i924);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i926 := $sext.i32.i64($i845);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($p123, $mul.ref($i926, 2));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i928 := $load.i16($M.12, $p927);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i929 := $sext.i32.i64($i846);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref($i929, 2));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p932, $i928);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i933 := $trunc.i32.i8($i845);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i934 := $zext.i8.i32($i933);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i935 := $add.i32($i934, 1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i936 := $trunc.i32.i8($i935);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i937 := $sext.i32.i64($i846);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i937, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p939, $i936);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i940 := $add.i32($i846, 1);
    call {:si_unique_call 37} {:cexpr "s"} boogie_si_record_i32($i940);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i852, $i853 := $i845, $i940;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i941 := $add.i32($i852, 1);
    call {:si_unique_call 33} {:cexpr "i"} boogie_si_record_i32($i941);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i942 := $load.i32($M.0, $p841);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i943 := $add.i32($i942, $sub.i32(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i944 := $slt.i32($i941, $i943);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i944 == 1);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb177:
    assume $i944 == 1;
    assume {:verifier.code 0} true;
    $i845, $i846 := $i941, $i853;
    goto $bb177_dummy;

  $bb173:
    assume $i916 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb164:
    assume $i862 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i864 := $load.i16($M.0, $p863);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i865 := $zext.i16.i32($i864);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i866 := $ashr.i32($i865, $i845);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i867 := $and.i32($i866, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i868 := $ne.i32($i867, 0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i870 := $load.i16($M.0, $p869);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i871 := $sext.i16.i32($i870);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i872 := $shl.i32(1, $i845);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i873 := $trunc.i32.i16($i872);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i874 := $sext.i16.i32($i873);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i875 := $or.i32($i871, $i874);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i876 := $trunc.i32.i16($i875);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p877, $i876);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i879 := $load.i16($M.0, $p878);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i880 := $sext.i16.i32($i879);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i881 := $shl.i32(1, $i845);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i882 := $trunc.i32.i16($i881);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i883 := $sext.i16.i32($i882);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i884 := $or.i32($i880, $i883);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i885 := $trunc.i32.i16($i884);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p886, $i885);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i887 := $sext.i32.i64($i845);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($p123, $mul.ref($i887, 2));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i889 := $load.i16($M.12, $p888);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i890 := $sext.i32.i64($i845);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref($i890, 2));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p893, $i889);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i894 := $slt.i32($i845, $i130);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i909 := $trunc.i32.i8($i845);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i910 := $zext.i8.i32($i909);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i911 := $add.i32($i910, 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i912 := $trunc.i32.i8($i911);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i913 := $sext.i32.i64($i845);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i913, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p915, $i912);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i852, $i853 := $i845, $i846;
    goto $bb159;

  $bb169:
    assume $i894 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i895 := $sext.i32.i64($i845);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($p127, $mul.ref($i895, 2));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i897 := $load.i16($M.5, $p896);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i898 := $sext.i32.i64($i845);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref($i898, 2));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p901, $i897);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i902 := $sext.i32.i64($i845);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($p126, $mul.ref($i902, 2));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i904 := $load.i16($M.6, $p903);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i905 := $sext.i32.i64($i845);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref($i905, 2));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p908, $i904);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume $i868 == 1;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i852, $i853 := $i845, $i846;
    goto $bb159;

  $bb161:
    assume $i858 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i852, $i853 := $i845, $i846;
    goto $bb159;

  $bb157:
    assume $i851 == 1;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i852, $i853 := $i845, $i846;
    goto $bb159;

  $bb119:
    assume $i714 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i716, $i717 := 0, $i463;
    goto $bb122;

  $bb122:
    call $i718, $p719, $i720, $i721, $i722, $p724, $p725, $i726, $p727, $i728, $i729, $i730, $i731, $i732, $i733, $i734, $i735, $i736, $i737, $i738, $p739, $i740, $i741, $p742, $p743, $i744, $p745, $i746, $i747, $i748, $p749, $i750, $i751, $p752, $p753, $i754, $p755, $p756, $i757, $i758, $p759, $p760, $i761, $p762, $i763, $i764, $i765, $p766, $i767, $i768, $i769, $i770, $i771, $p772, $i773, $i774, $i775, $p776, $i777, $i778, $i779, $i780, $i781, $i782, $p783, $i784, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $p792, $p793, $i794, $i795, $i796, $i797, $i798, $i799, $i800, $i801, $p802, $i803, $p804, $i805, $i806, $i807, $p810, $i811, $i812, $i813, $p815, $i816, $p817, $i818, $i819, $i820, $i821, $i822, $i823, $i824, $p825, $i826, $p827, $i828, $i829, $p832, $i833, $i834, $p836, $i837, $i723, $i838, $i839, $i716, $i717, $i840 := nct6775_probe_loop_$bb122($p1, $p4, $p17, $p124, $i131, $i718, $p719, $i720, $i721, $i722, $p724, $p725, $i726, $p727, $i728, $i729, $i730, $i731, $i732, $i733, $i734, $i735, $i736, $i737, $i738, $p739, $i740, $i741, $p742, $p743, $i744, $p745, $i746, $i747, $i748, $p749, $i750, $i751, $p752, $p753, $i754, $p755, $p756, $i757, $i758, $p759, $p760, $i761, $p762, $i763, $i764, $i765, $p766, $i767, $i768, $i769, $i770, $i771, $p772, $i773, $i774, $i775, $p776, $i777, $i778, $i779, $i780, $i781, $i782, $p783, $i784, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $p792, $p793, $i794, $i795, $i796, $i797, $i798, $i799, $i800, $i801, $p802, $i803, $p804, $i805, $i806, $i807, $p810, $i811, $i812, $i813, $p815, $i816, $p817, $i818, $i819, $i820, $i821, $i822, $i823, $i824, $p825, $i826, $p827, $i828, $i829, $p832, $i833, $i834, $p836, $i837, $i723, $i838, $i839, $i716, $i717, $i840);
    goto $bb122_last;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i718 := $sext.i32.i64($i716);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($p124, $mul.ref($i718, 2));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i720 := $load.i16($M.11, $p719);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i721 := $zext.i16.i32($i720);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i721, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p725 := $load.ref($M.0, $p724);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i726 := $sext.i32.i64($i716);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($p725, $mul.ref($i726, 2));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i728 := $load.i16($M.0, $p727);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i729 := $zext.i16.i32($i728);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i730 := $trunc.i32.i16($i729);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i731 := nct6775_read_value($p17, $i730);
    call {:si_unique_call 26} {:cexpr "tmp___5"} boogie_si_record_i16($i731);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i732 := $zext.i16.i32($i731);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i733 := $and.i32($i732, 31);
    call {:si_unique_call 27} {:cexpr "src"} boogie_si_record_i32($i733);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i733, 0);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb130;

  $bb130:
    assume !($i734 == 1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i735 := $load.i32($M.2, $p1);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i736 := $ashr.i32($i735, $i733);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i737 := $and.i32($i736, 1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i738 := $ne.i32($i737, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i740 := $load.i32($M.0, $p739);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i741 := $sge.i32($i733, $i740);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i741 == 1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p753 := $load.ref($M.0, $p752);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i754 := $sext.i32.i64($i733);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($p753, $mul.ref($i754, 8));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p756 := $load.ref($M.0, $p755);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i757 := strlen($p756);
    call {:si_unique_call 30} {:cexpr "tmp___6"} boogie_si_record_i64($i757);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i758 := $eq.i64($i757, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i769 := $load.i32($M.2, $p1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i770 := $shl.i32(1, $i733);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i771 := $or.i32($i769, $i770);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p1, $i771);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i773 := $load.i8($M.0, $p772);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i774 := $zext.i8.i32($i773);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i775 := $sle.i32($i733, $i774);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i816 := $sgt.i32($i717, 9);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i818 := $load.i16($M.0, $p817);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i819 := $sext.i16.i32($i818);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i820 := $shl.i32(1, $i717);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i821 := $trunc.i32.i16($i820);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i822 := $sext.i16.i32($i821);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i823 := $or.i32($i819, $i822);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i824 := $trunc.i32.i16($i823);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p825, $i824);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i826 := $sext.i32.i64($i716);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($p124, $mul.ref($i826, 2));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i828 := $load.i16($M.11, $p827);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i829 := $sext.i32.i64($i717);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref($i829, 2));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p832, $i828);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i833 := $trunc.i32.i8($i733);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i834 := $sext.i32.i64($i717);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i834, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p836, $i833);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i837 := $add.i32($i717, 1);
    call {:si_unique_call 32} {:cexpr "s"} boogie_si_record_i32($i837);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i723 := $i837;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i838 := $add.i32($i716, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32($i838);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i839 := $slt.i32($i838, $i131);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i840 := $i723;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i839 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i715 := $i840;
    goto $bb121;

  $bb149:
    assume $i839 == 1;
    assume {:verifier.code 0} true;
    $i716, $i717 := $i838, $i723;
    goto $bb149_dummy;

  $bb146:
    assume $i816 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb140:
    assume $i775 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i777 := $load.i16($M.0, $p776);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i778 := $zext.i16.i32($i777);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i779 := $add.i32($i733, $sub.i32(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i780 := $ashr.i32($i778, $i779);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i781 := $and.i32($i780, 1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i782 := $ne.i32($i781, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i784 := $load.i16($M.0, $p783);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i785 := $sext.i16.i32($i784);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i786 := $add.i32($i733, $sub.i32(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i787 := $shl.i32(1, $i786);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i788 := $trunc.i32.i16($i787);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i789 := $sext.i16.i32($i788);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i790 := $or.i32($i785, $i789);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i791 := $trunc.i32.i16($i790);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p792, $i791);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i794 := $load.i16($M.0, $p793);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i795 := $sext.i16.i32($i794);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i796 := $add.i32($i733, $sub.i32(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i797 := $shl.i32(1, $i796);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i798 := $trunc.i32.i16($i797);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i799 := $sext.i16.i32($i798);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i800 := $or.i32($i795, $i799);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i801 := $trunc.i32.i16($i800);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p802, $i801);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i803 := $sext.i32.i64($i716);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($p124, $mul.ref($i803, 2));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i805 := $load.i16($M.11, $p804);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i806 := $add.i32($i733, $sub.i32(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i807 := $sext.i32.i64($i806);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref($i807, 2));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p810, $i805);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i811 := $trunc.i32.i8($i733);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i812 := $add.i32($i733, $sub.i32(0, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i813 := $sext.i32.i64($i812);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i813, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p815, $i811);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb142:
    assume $i782 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb136:
    assume $i758 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p760 := $load.ref($M.0, $p759);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i761 := $sext.i32.i64($i716);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($p760, $mul.ref($i761, 2));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i763 := $load.i16($M.0, $p762);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i764 := $zext.i16.i32($i763);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i765 := $sext.i32.i64($i716);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($p124, $mul.ref($i765, 2));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i767 := $load.i16($M.11, $p766);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i768 := $zext.i16.i32($i767);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} _dev_info.ref.ref.i32.i32.i32.i32($p4, .str.30, $i733, $i716, $i764, $i768);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb134:
    assume $i741 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.0, $p742);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i744 := $sext.i32.i64($i716);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($p743, $mul.ref($i744, 2));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i746 := $load.i16($M.0, $p745);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i747 := $zext.i16.i32($i746);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i748 := $sext.i32.i64($i716);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($p124, $mul.ref($i748, 2));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i750 := $load.i16($M.11, $p749);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i751 := $zext.i16.i32($i750);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} _dev_info.ref.ref.i32.i32.i32.i32($p4, .str.30, $i733, $i716, $i747, $i751);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i738 == 1;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i734 == 1;
    goto $bb129;

  $bb124:
    assume $i722 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i723 := $i717;
    goto $bb126;

  $bb59:
    assume $i462 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i464, $i465 := 0, 6;
    goto $bb62;

  $bb62:
    call $i466, $p467, $i468, $i469, $i470, $p473, $p474, $i475, $p476, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $i484, $i485, $i486, $i487, $p488, $i489, $i490, $p491, $p492, $i493, $p494, $i495, $i496, $i497, $p498, $i499, $i500, $p501, $p502, $i503, $p504, $p505, $i506, $i507, $p508, $p509, $i510, $p511, $i512, $i513, $i514, $p515, $i516, $i517, $i518, $i519, $i520, $p521, $i522, $i523, $i524, $p525, $i526, $i527, $i528, $i529, $i530, $i531, $i532, $i533, $p534, $p535, $i536, $i537, $i538, $i539, $i540, $i541, $i542, $i543, $p544, $i545, $p546, $i547, $i548, $i549, $p552, $i553, $p554, $i555, $i556, $i557, $p560, $i561, $p562, $i563, $i564, $i565, $p568, $i569, $i570, $i571, $p572, $i573, $i574, $i575, $i576, $p577, $i578, $i579, $i580, $p583, $i584, $i585, $p586, $i587, $i588, $i589, $i590, $i591, $p592, $i593, $i594, $i595, $p598, $i599, $i600, $i601, $p602, $i603, $i604, $i605, $i606, $p607, $i608, $i609, $i610, $p613, $i614, $p615, $i616, $i617, $i618, $p620, $i621, $i622, $i623, $p625, $i626, $p627, $i628, $i629, $i630, $i631, $i632, $i633, $i634, $p635, $i636, $p637, $i638, $i639, $p642, $i643, $p644, $i645, $i646, $p649, $i650, $p651, $i652, $i653, $p656, $i657, $p658, $i659, $i660, $p662, $i663, $i664, $i665, $p666, $i667, $i668, $i669, $i670, $p671, $i672, $i673, $p676, $i678, $i679, $p680, $i681, $i682, $i683, $i684, $i685, $p686, $i687, $i688, $p691, $i677, $i692, $i693, $i694, $p695, $i696, $i697, $i698, $i699, $p700, $i701, $i702, $p705, $i706, $i707, $p709, $i710, $i471, $i472, $i711, $i712, $i464, $i465, $i713 := nct6775_probe_loop_$bb62($p1, $p4, $p17, $p121, $p122, $p125, $p126, $p127, $p128, $p129, $i130, $i466, $p467, $i468, $i469, $i470, $p473, $p474, $i475, $p476, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $i484, $i485, $i486, $i487, $p488, $i489, $i490, $p491, $p492, $i493, $p494, $i495, $i496, $i497, $p498, $i499, $i500, $p501, $p502, $i503, $p504, $p505, $i506, $i507, $p508, $p509, $i510, $p511, $i512, $i513, $i514, $p515, $i516, $i517, $i518, $i519, $i520, $p521, $i522, $i523, $i524, $p525, $i526, $i527, $i528, $i529, $i530, $i531, $i532, $i533, $p534, $p535, $i536, $i537, $i538, $i539, $i540, $i541, $i542, $i543, $p544, $i545, $p546, $i547, $i548, $i549, $p552, $i553, $p554, $i555, $i556, $i557, $p560, $i561, $p562, $i563, $i564, $i565, $p568, $i569, $i570, $i571, $p572, $i573, $i574, $i575, $i576, $p577, $i578, $i579, $i580, $p583, $i584, $i585, $p586, $i587, $i588, $i589, $i590, $i591, $p592, $i593, $i594, $i595, $p598, $i599, $i600, $i601, $p602, $i603, $i604, $i605, $i606, $p607, $i608, $i609, $i610, $p613, $i614, $p615, $i616, $i617, $i618, $p620, $i621, $i622, $i623, $p625, $i626, $p627, $i628, $i629, $i630, $i631, $i632, $i633, $i634, $p635, $i636, $p637, $i638, $i639, $p642, $i643, $p644, $i645, $i646, $p649, $i650, $p651, $i652, $i653, $p656, $i657, $p658, $i659, $i660, $p662, $i663, $i664, $i665, $p666, $i667, $i668, $i669, $i670, $p671, $i672, $i673, $p676, $i678, $i679, $p680, $i681, $i682, $i683, $i684, $i685, $p686, $i687, $i688, $p691, $i677, $i692, $i693, $i694, $p695, $i696, $i697, $i698, $i699, $p700, $i701, $i702, $p705, $i706, $i707, $p709, $i710, $i471, $i472, $i711, $i712, $i464, $i465, $i713);
    goto $bb62_last;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i466 := $sext.i32.i64($i464);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($p128, $mul.ref($i466, 2));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i468 := $load.i16($M.4, $p467);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i469 := $zext.i16.i32($i468);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, 0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.0, $p473);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i475 := $sext.i32.i64($i464);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($p474, $mul.ref($i475, 2));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i477 := $load.i16($M.0, $p476);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i478 := $zext.i16.i32($i477);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i479 := $trunc.i32.i16($i478);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i480 := nct6775_read_value($p17, $i479);
    call {:si_unique_call 17} {:cexpr "tmp___3"} boogie_si_record_i16($i480);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i481 := $zext.i16.i32($i480);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i482 := $and.i32($i481, 31);
    call {:si_unique_call 18} {:cexpr "src"} boogie_si_record_i32($i482);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i482, 0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb70;

  $bb70:
    assume !($i483 == 1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i484 := $load.i32($M.2, $p1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i485 := $ashr.i32($i484, $i482);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i486 := $and.i32($i485, 1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i489 := $load.i32($M.0, $p488);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i490 := $sge.i32($i482, $i489);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i490 == 1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.0, $p501);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i503 := $sext.i32.i64($i482);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($p502, $mul.ref($i503, 8));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.0, $p504);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i506 := strlen($p505);
    call {:si_unique_call 21} {:cexpr "tmp___4"} boogie_si_record_i64($i506);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i507 := $eq.i64($i506, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i518 := $load.i32($M.2, $p1);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i519 := $shl.i32(1, $i482);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i520 := $or.i32($i518, $i519);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p1, $i520);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i522 := $load.i8($M.0, $p521);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i523 := $zext.i8.i32($i522);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i524 := $sle.i32($i482, $i523);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i626 := $sgt.i32($i465, 9);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i628 := $load.i16($M.0, $p627);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i629 := $sext.i16.i32($i628);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i630 := $shl.i32(1, $i465);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i631 := $trunc.i32.i16($i630);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i632 := $sext.i16.i32($i631);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i633 := $or.i32($i629, $i632);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i634 := $trunc.i32.i16($i633);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p635, $i634);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i636 := $sext.i32.i64($i464);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($p128, $mul.ref($i636, 2));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i638 := $load.i16($M.4, $p637);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i639 := $sext.i32.i64($i465);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref($i639, 2));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p642, $i638);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i643 := $sext.i32.i64($i464);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($p127, $mul.ref($i643, 2));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i645 := $load.i16($M.5, $p644);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i646 := $sext.i32.i64($i465);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref($i646, 2));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p649, $i645);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i650 := $sext.i32.i64($i464);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($p126, $mul.ref($i650, 2));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i652 := $load.i16($M.6, $p651);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i653 := $sext.i32.i64($i465);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref($i653, 2));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p656, $i652);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i657 := $sext.i32.i64($i464);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($p125, $mul.ref($i657, 2));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i659 := $load.i16($M.10, $p658);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i660 := $sext.i32.i64($i465);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref($i660, 2));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p662, $i659);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i663 := $p2i.ref.i64($p129);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i664 := $ne.i64($i663, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i664 == 1);
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i678 := $sext.i32.i64($i482);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i679 := $add.i64($i678, $sub.i64(0, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($p122, $mul.ref($i679, 2));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i681 := $load.i16($M.8, $p680);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i682 := $zext.i16.i32($i681);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i683 := $ne.i32($i682, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i677 := $i465;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i692 := $p2i.ref.i64($p121);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i693 := $ne.i64($i692, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i693 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i706 := $trunc.i32.i8($i482);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i707 := $sext.i32.i64($i677);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i707, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p709, $i706);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i710 := $add.i32($i677, 1);
    call {:si_unique_call 23} {:cexpr "s"} boogie_si_record_i32($i710);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i710;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i711 := $add.i32($i471, 1);
    call {:si_unique_call 15} {:cexpr "i"} boogie_si_record_i32($i711);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i712 := $slt.i32($i711, $i130);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i713 := $i472;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i463 := $i713;
    goto $bb61;

  $bb116:
    assume $i712 == 1;
    assume {:verifier.code 0} true;
    $i464, $i465 := $i711, $i472;
    goto $bb116_dummy;

  $bb110:
    assume $i693 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i694 := $sext.i32.i64($i464);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($p121, $mul.ref($i694, 2));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i696 := $load.i16($M.9, $p695);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i697 := $zext.i16.i32($i696);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i698 := $ne.i32($i697, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i698 == 1);
    goto $bb112;

  $bb113:
    assume $i698 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i699 := $sext.i32.i64($i464);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($p121, $mul.ref($i699, 2));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i701 := $load.i16($M.9, $p700);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i702 := $sext.i32.i64($i677);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref($i702, 2));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p705, $i701);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb107:
    assume $i683 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i684 := $sext.i32.i64($i482);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i685 := $add.i64($i684, $sub.i64(0, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($p122, $mul.ref($i685, 2));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i687 := $load.i16($M.8, $p686);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i688 := $sext.i32.i64($i465);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i688, 2));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p691, $i687);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb101:
    assume $i664 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i665 := $sext.i32.i64($i464);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($p129, $mul.ref($i665, 2));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i667 := $load.i16($M.7, $p666);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i668 := $zext.i16.i32($i667);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i669 := $ne.i32($i668, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i669 == 1);
    goto $bb103;

  $bb104:
    assume $i669 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i670 := $sext.i32.i64($i464);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($p129, $mul.ref($i670, 2));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i672 := $load.i16($M.7, $p671);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i673 := $sext.i32.i64($i465);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i673, 2));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p676, $i672);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i677 := $i465;
    goto $bb106;

  $bb98:
    assume $i626 == 1;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i465;
    goto $bb66;

  $bb80:
    assume $i524 == 1;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i526 := $load.i16($M.0, $p525);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i527 := $sext.i16.i32($i526);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i528 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i529 := $shl.i32(1, $i528);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i530 := $trunc.i32.i16($i529);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i531 := $sext.i16.i32($i530);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i532 := $or.i32($i527, $i531);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i533 := $trunc.i32.i16($i532);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p534, $i533);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i536 := $load.i16($M.0, $p535);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i537 := $sext.i16.i32($i536);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i538 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i539 := $shl.i32(1, $i538);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i540 := $trunc.i32.i16($i539);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i541 := $sext.i16.i32($i540);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i542 := $or.i32($i537, $i541);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i543 := $trunc.i32.i16($i542);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p544, $i543);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i545 := $sext.i32.i64($i464);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($p128, $mul.ref($i545, 2));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i547 := $load.i16($M.4, $p546);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i548 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i549 := $sext.i32.i64($i548);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref($i549, 2));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p552, $i547);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i553 := $sext.i32.i64($i464);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($p127, $mul.ref($i553, 2));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i555 := $load.i16($M.5, $p554);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i556 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i557 := $sext.i32.i64($i556);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref($i557, 2));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p560, $i555);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i561 := $sext.i32.i64($i464);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($p126, $mul.ref($i561, 2));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i563 := $load.i16($M.6, $p562);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i564 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i565 := $sext.i32.i64($i564);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref($i565, 2));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p568, $i563);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i569 := $p2i.ref.i64($p129);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i570 := $ne.i64($i569, 0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i570 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i584 := $sext.i32.i64($i482);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i585 := $add.i64($i584, $sub.i64(0, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($p122, $mul.ref($i585, 2));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i587 := $load.i16($M.8, $p586);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i588 := $zext.i16.i32($i587);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i589 := $ne.i32($i588, 0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i599 := $p2i.ref.i64($p121);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i600 := $ne.i64($i599, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i600 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i614 := $sext.i32.i64($i464);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($p125, $mul.ref($i614, 2));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i616 := $load.i16($M.10, $p615);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i617 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i618 := $sext.i32.i64($i617);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref($i618, 2));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p620, $i616);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i621 := $trunc.i32.i8($i482);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i622 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i623 := $sext.i32.i64($i622);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i623, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p625, $i621);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i465;
    goto $bb66;

  $bb91:
    assume $i600 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i601 := $sext.i32.i64($i464);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($p121, $mul.ref($i601, 2));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i603 := $load.i16($M.9, $p602);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i604 := $zext.i16.i32($i603);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i605 := $ne.i32($i604, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i605 == 1);
    goto $bb93;

  $bb94:
    assume $i605 == 1;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i606 := $sext.i32.i64($i464);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($p121, $mul.ref($i606, 2));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i608 := $load.i16($M.9, $p607);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i609 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i610 := $sext.i32.i64($i609);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref($i610, 2));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p613, $i608);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb88:
    assume $i589 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i590 := $sext.i32.i64($i482);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i591 := $add.i64($i590, $sub.i64(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($p122, $mul.ref($i591, 2));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i593 := $load.i16($M.8, $p592);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i594 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i595 := $sext.i32.i64($i594);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i595, 2));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p598, $i593);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i570 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i571 := $sext.i32.i64($i464);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($p129, $mul.ref($i571, 2));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i573 := $load.i16($M.7, $p572);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i574 := $zext.i16.i32($i573);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i575 := $ne.i32($i574, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb84;

  $bb85:
    assume $i575 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i576 := $sext.i32.i64($i464);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($p129, $mul.ref($i576, 2));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i578 := $load.i16($M.7, $p577);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i579 := $add.i32($i482, $sub.i32(0, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i580 := $sext.i32.i64($i579);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i580, 2));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p583, $i578);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb76:
    assume $i507 == 1;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p509 := $load.ref($M.0, $p508);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i510 := $sext.i32.i64($i464);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($p509, $mul.ref($i510, 2));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i512 := $load.i16($M.0, $p511);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i513 := $zext.i16.i32($i512);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i514 := $sext.i32.i64($i464);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($p128, $mul.ref($i514, 2));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i516 := $load.i16($M.4, $p515);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i517 := $zext.i16.i32($i516);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} _dev_info.ref.ref.i32.i32.i32.i32($p4, .str.30, $i482, $i464, $i513, $i517);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i465;
    goto $bb66;

  $bb74:
    assume $i490 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i493 := $sext.i32.i64($i464);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($p492, $mul.ref($i493, 2));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i495 := $load.i16($M.0, $p494);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i496 := $zext.i16.i32($i495);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i497 := $sext.i32.i64($i464);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($p128, $mul.ref($i497, 2));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i499 := $load.i16($M.4, $p498);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i500 := $zext.i16.i32($i499);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} _dev_info.ref.ref.i32.i32.i32.i32($p4, .str.30, $i482, $i464, $i496, $i500);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i465;
    goto $bb66;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i487 == 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i465;
    goto $bb66;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb69;

  $bb64:
    assume $i470 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i471, $i472 := $i464, $i465;
    goto $bb66;

  $bb41:
    assume $i426 == 1;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i427 := 0;
    goto $bb44;

  $bb44:
    call $i428, $p429, $i430, $i431, $i432, $p434, $p435, $i436, $p437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i433, $i456, $i457, $i427 := nct6775_probe_loop_$bb44($p1, $p2, $p17, $p128, $i130, $i428, $p429, $i430, $i431, $i432, $p434, $p435, $i436, $p437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i433, $i456, $i457, $i427);
    goto $bb44_last;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i427);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($p128, $mul.ref($i428, 2));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i430 := $load.i16($M.4, $p429);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i431 := $zext.i16.i32($i430);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.0, $p434);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i436 := $sext.i32.i64($i427);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($p435, $mul.ref($i436, 2));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i438 := $load.i16($M.0, $p437);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i439 := $zext.i16.i32($i438);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i16($i439);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i441 := nct6775_read_value($p17, $i440);
    call {:si_unique_call 11} {:cexpr "tmp___2"} boogie_si_record_i16($i441);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i442 := $zext.i16.i32($i441);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i443 := $and.i32($i442, 31);
    call {:si_unique_call 12} {:cexpr "src"} boogie_si_record_i32($i443);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i444 == 1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.2, $p1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i446 := $ashr.i32($i445, $i443);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i447 := $and.i32($i446, 1);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i448 := $ne.i32($i447, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    $i452 := $i427;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i453 := $load.i32($M.2, $p1);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i454 := $shl.i32(1, $i443);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i455 := $or.i32($i453, $i454);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p1, $i455);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i433 := $i452;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i456 := $add.i32($i433, 1);
    call {:si_unique_call 9} {:cexpr "i"} boogie_si_record_i32($i456);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i457 := $slt.i32($i456, $i130);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i457 == 1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb56:
    assume $i457 == 1;
    assume {:verifier.code 0} true;
    $i427 := $i456;
    goto $bb56_dummy;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i449 := $load.i32($M.3, $p2);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i450 := $shl.i32(1, $i427);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i451 := $or.i32($i449, $i450);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p2, $i451);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i452 := $i427;
    goto $bb55;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb51;

  $bb46:
    assume $i432 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i433 := $i427;
    goto $bb48;

  $bb37:
    assume $i413 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p414, $i415 := NCT6779_REG_TEMP_MON, 5;
    goto $bb39;

  $bb34:
    assume $i408 == 1;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p409, NCT6776_REG_BEEP);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb24:
    assume $i53 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p267, 15);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p268, 5);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p269, 4);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p270, 0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p271, 6);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p272, 2);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p273, 2);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p274, NCT6779_ALARM_BITS);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p275, NCT6779_BEEP_BITS);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p276, fan_from_reg13);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p277, fan_from_reg13);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p278, $sub.i8(0, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p279, 7);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1116, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p280, 63);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p281, nct6779_temp_label);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p282, 27);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, 64);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p284, 93);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p285, 94);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p286, 2);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p287, NCT6779_REG_IN);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p289, NCT6775_REG_IN_MIN);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p291, NCT6775_REG_IN_MAX);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p292, NCT6775_REG_TARGET);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p293, NCT6779_REG_FAN);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p294, NCT6775_REG_FAN_MODE);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p295, NCT6776_REG_FAN_MIN);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p296, NCT6779_REG_FAN_PULSES);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p297, NCT6775_FAN_PULSE_SHIFT);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p299, NCT6775_REG_FAN_STOP_TIME);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p301, NCT6775_REG_FAN_STEP_UP_TIME);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p303, NCT6775_REG_FAN_STEP_DOWN_TIME);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p304, NCT6776_REG_TOLERANCE_H);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p306, NCT6775_REG_PWM);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p308, NCT6775_REG_FAN_START_OUTPUT);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p310, NCT6775_REG_FAN_STOP_OUTPUT);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p312, NCT6775_REG_WEIGHT_DUTY_STEP);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p314, NCT6776_REG_WEIGHT_DUTY_BASE);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(424, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p315, NCT6775_REG_PWM_READ);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p316, NCT6776_REG_PWM_MODE);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p317, NCT6776_PWM_MODE_MASK);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p318, NCT6775_REG_AUTO_TEMP);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p319, NCT6775_REG_AUTO_PWM);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p320, NCT6775_REG_CRITICAL_TEMP);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p321, NCT6775_REG_CRITICAL_TEMP_TOLERANCE);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p322, NCT6779_REG_CRITICAL_PWM_ENABLE);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p323, 1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(448, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p324, NCT6779_REG_CRITICAL_PWM);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p325, NCT6779_REG_TEMP_OFFSET);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p326, NCT6775_REG_TEMP_SOURCE);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p327, NCT6775_REG_TEMP_SEL);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p328, NCT6775_REG_WEIGHT_TEMP_SEL);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p330, NCT6775_REG_WEIGHT_TEMP_STEP);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p332, NCT6775_REG_WEIGHT_TEMP_STEP_TOL);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p334, NCT6775_REG_WEIGHT_TEMP_BASE);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p335, NCT6779_REG_ALARM);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p336, NCT6776_REG_BEEP);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $i130, $i131 := $0.ref, NCT6779_REG_TEMP_CRIT, NCT6779_REG_TEMP_ALTERNATE, NCT6779_REG_TEMP_MON, NCT6779_REG_TEMP_CONFIG, NCT6779_REG_TEMP_HYST, NCT6779_REG_TEMP_OVER, NCT6779_REG_TEMP, $0.ref, 2, 5;
    goto $bb33;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p200, 9);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p201, 3);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p202, 4);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, 3);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, 3);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p206, 6);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p207, NCT6776_ALARM_BITS);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, NCT6776_BEEP_BITS);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, fan_from_reg13);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p210, fan_from_reg13);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, $sub.i8(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p212, 7);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1116, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p213, 63);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p214, nct6776_temp_label);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, 23);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p216, 64);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, 93);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p218, 94);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p219, 2);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p220, NCT6775_REG_IN);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p222, NCT6775_REG_IN_MIN);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, NCT6775_REG_IN_MAX);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, NCT6775_REG_TARGET);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p226, NCT6775_REG_FAN);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p227, NCT6775_REG_FAN_MODE);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p228, NCT6776_REG_FAN_MIN);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p229, NCT6776_REG_FAN_PULSES);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p230, NCT6775_FAN_PULSE_SHIFT);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p232, NCT6775_REG_FAN_STOP_TIME);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p234, NCT6775_REG_FAN_STEP_UP_TIME);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p236, NCT6775_REG_FAN_STEP_DOWN_TIME);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p237, NCT6776_REG_TOLERANCE_H);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p239, NCT6775_REG_PWM);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p241, NCT6775_REG_FAN_START_OUTPUT);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p243, NCT6775_REG_FAN_STOP_OUTPUT);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p245, NCT6775_REG_WEIGHT_DUTY_STEP);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p247, NCT6776_REG_WEIGHT_DUTY_BASE);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(424, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p248, NCT6775_REG_PWM_READ);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p249, NCT6776_REG_PWM_MODE);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p250, NCT6776_PWM_MODE_MASK);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p251, NCT6775_REG_AUTO_TEMP);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p252, NCT6775_REG_AUTO_PWM);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p253, NCT6775_REG_CRITICAL_TEMP);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p254, NCT6775_REG_CRITICAL_TEMP_TOLERANCE);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p255, NCT6775_REG_TEMP_OFFSET);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p256, NCT6775_REG_TEMP_SOURCE);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p257, NCT6775_REG_TEMP_SEL);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p258, NCT6775_REG_WEIGHT_TEMP_SEL);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p260, NCT6775_REG_WEIGHT_TEMP_STEP);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p262, NCT6775_REG_WEIGHT_TEMP_STEP_TOL);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p264, NCT6775_REG_WEIGHT_TEMP_BASE);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, NCT6775_REG_ALARM);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p266, NCT6776_REG_BEEP);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $i130, $i131 := $0.ref, NCT6776_REG_TEMP_CRIT, NCT6776_REG_TEMP_ALTERNATE, NCT6775_REG_TEMP_MON, NCT6776_REG_TEMP_CONFIG, NCT6775_REG_TEMP_HYST, NCT6775_REG_TEMP_OVER, NCT6775_REG_TEMP, $0.ref, 6, 3;
    goto $bb33;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 9);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 3);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, 6);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 3);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, 3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, 3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, NCT6775_ALARM_BITS);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p140, NCT6775_BEEP_BITS);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p141, fan_from_reg16);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, fan_from_reg8);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 127);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, 15);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1116, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 15);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p146, nct6775_temp_label);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, 21);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, 64);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, 93);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, 94);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, NCT6775_REG_IN);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p154, NCT6775_REG_IN_MIN);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, NCT6775_REG_IN_MAX);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p157, NCT6775_REG_TARGET);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p158, NCT6775_REG_FAN);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p159, NCT6775_REG_FAN_MODE);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p160, NCT6775_REG_FAN_MIN);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p161, NCT6775_REG_FAN_PULSES);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p162, NCT6775_FAN_PULSE_SHIFT);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p164, NCT6775_REG_FAN_STOP_TIME);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p166, NCT6775_REG_FAN_STEP_UP_TIME);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p168, NCT6775_REG_FAN_STEP_DOWN_TIME);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, NCT6775_REG_PWM);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, NCT6775_REG_FAN_START_OUTPUT);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p174, NCT6775_REG_FAN_STOP_OUTPUT);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p176, NCT6775_REG_FAN_MAX_OUTPUT);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p178, NCT6775_REG_FAN_STEP_OUTPUT);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, NCT6775_REG_WEIGHT_DUTY_STEP);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(424, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, NCT6775_REG_PWM_READ);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, NCT6775_REG_PWM_MODE);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p183, NCT6775_PWM_MODE_MASK);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, NCT6775_REG_AUTO_TEMP);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p185, NCT6775_REG_AUTO_PWM);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p186, NCT6775_REG_CRITICAL_TEMP);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p187, NCT6775_REG_CRITICAL_TEMP_TOLERANCE);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p188, NCT6775_REG_TEMP_OFFSET);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, NCT6775_REG_TEMP_SOURCE);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p190, NCT6775_REG_TEMP_SEL);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, NCT6775_REG_WEIGHT_TEMP_SEL);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, NCT6775_REG_WEIGHT_TEMP_STEP);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p195, NCT6775_REG_WEIGHT_TEMP_STEP_TOL);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p197, NCT6775_REG_WEIGHT_TEMP_BASE);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p198, NCT6775_REG_ALARM);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, NCT6775_REG_BEEP);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $i130, $i131 := $0.ref, NCT6775_REG_TEMP_CRIT, NCT6775_REG_TEMP_ALTERNATE, NCT6775_REG_TEMP_MON, NCT6775_REG_TEMP_CONFIG, NCT6775_REG_TEMP_HYST, NCT6775_REG_TEMP_OVER, NCT6775_REG_TEMP, $0.ref, 6, 3;
    goto $bb33;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 9);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 3);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 4);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 3);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 6);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 6);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, fan_from_reg13);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, fan_from_reg13);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, nct6776_temp_label);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 23);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, 792);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, 793);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 1);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, NCT6106_REG_IN);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, NCT6106_REG_IN_MIN);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, NCT6106_REG_IN_MAX);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, NCT6106_REG_TARGET);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, NCT6106_REG_FAN);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, NCT6106_REG_FAN_MODE);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, NCT6106_REG_FAN_MIN);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, NCT6106_REG_FAN_PULSES);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, NCT6106_FAN_PULSE_SHIFT);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, NCT6106_REG_FAN_STOP_TIME);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, NCT6106_REG_FAN_STEP_UP_TIME);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, NCT6106_REG_FAN_STEP_DOWN_TIME);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, NCT6106_REG_PWM);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, NCT6106_REG_FAN_START_OUTPUT);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, NCT6106_REG_FAN_STOP_OUTPUT);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, NCT6106_REG_WEIGHT_DUTY_STEP);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, NCT6106_REG_WEIGHT_DUTY_BASE);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(424, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, NCT6106_REG_PWM_READ);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, NCT6106_REG_PWM_MODE);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, NCT6106_PWM_MODE_MASK);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, NCT6106_REG_AUTO_TEMP);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, NCT6106_REG_AUTO_PWM);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, NCT6106_REG_CRITICAL_TEMP);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, NCT6106_REG_CRITICAL_TEMP_TOLERANCE);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, NCT6106_REG_CRITICAL_PWM_ENABLE);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 16);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(448, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, NCT6106_REG_CRITICAL_PWM);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, NCT6106_REG_TEMP_OFFSET);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p108, NCT6106_REG_TEMP_SOURCE);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, NCT6106_REG_TEMP_SEL);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, NCT6106_REG_WEIGHT_TEMP_SEL);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p112, NCT6106_REG_WEIGHT_TEMP_STEP);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, NCT6106_REG_WEIGHT_TEMP_STEP_TOL);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, NCT6106_REG_WEIGHT_TEMP_BASE);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, NCT6106_REG_ALARM);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, NCT6106_ALARM_BITS);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, NCT6106_REG_BEEP);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, NCT6106_BEEP_BITS);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $i130, $i131 := NCT6106_REG_TEMP_CRIT_L, NCT6106_REG_TEMP_CRIT, NCT6106_REG_TEMP_ALTERNATE, NCT6106_REG_TEMP_MON, NCT6106_REG_TEMP_CONFIG, NCT6106_REG_TEMP_HYST, NCT6106_REG_TEMP_OVER, NCT6106_REG_TEMP, NCT6106_REG_TEMP_CRIT_H, 6, 3;
    goto $bb33;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb3;

  $bb177_dummy:
    assume false;
    return;

  $bb155_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  $bb149_dummy:
    assume false;
    return;

  $bb122_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  $bb116_dummy:
    assume false;
    return;

  $bb62_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  $bb56_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 446436);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(504, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 447468);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 92} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p3 := external_alloc();
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __devm_request_region: ref;

axiom __devm_request_region == $sub.ref(0, 448500);

procedure __devm_request_region($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __devm_request_region($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "__devm_request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 95} {:cexpr "__devm_request_region:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p5 := external_alloc();
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 449532);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 98} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 450564);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 451596);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;
}



const fan_from_reg13: ref;

axiom fan_from_reg13 == $sub.ref(0, 452628);

procedure fan_from_reg13($i0: i16, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fan_from_reg13($i0: i16, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "fan_from_reg13:arg:reg"} boogie_si_record_i16($i0);
    call {:si_unique_call 102} {:cexpr "fan_from_reg13:arg:divreg"} boogie_si_record_i32($i1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 65311);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 65311);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i32($i0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 31);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i0);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 65280);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 3);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i12 := $sext.i16.i32($i11);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i7, $i12);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 103} {:cexpr "reg"} boogie_si_record_i16($i14);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i14);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32(1350000, $i17);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const fan_from_reg16: ref;

axiom fan_from_reg16 == $sub.ref(0, 453660);

procedure fan_from_reg16($i0: i16, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fan_from_reg16($i0: i16, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "fan_from_reg16:arg:reg"} boogie_si_record_i16($i0);
    call {:si_unique_call 105} {:cexpr "fan_from_reg16:arg:divreg"} boogie_si_record_i32($i1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 65533);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, $i1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32(1350000, $i7);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const fan_from_reg8: ref;

axiom fan_from_reg8 == $sub.ref(0, 454692);

procedure fan_from_reg8($i0: i16, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fan_from_reg8($i0: i16, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "fan_from_reg8:arg:reg"} boogie_si_record_i16($i0);
    call {:si_unique_call 107} {:cexpr "fan_from_reg8:arg:divreg"} boogie_si_record_i32($i1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 255);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, $i1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32(1350000, $i8);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const nct6775_read_value: ref;

axiom nct6775_read_value == $sub.ref(0, 455724);

procedure nct6775_read_value($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_read_value($p0: ref, $i1: i16) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "nct6775_read_value:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i4 := is_word_sized($p0, $i3);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 110} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 111} {:cexpr "word_sized"} boogie_si_record_i32($i7);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} nct6775_set_bank($p0, $i9);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i16.i8($i1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} outb_p($i12, $i14);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i18 := inb_p($i17);
    call {:si_unique_call 115} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    call {:si_unique_call 116} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i7, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i16.i8($i1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} outb_p($i24, $i26);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i30 := inb_p($i29);
    call {:si_unique_call 119} {:cexpr "tmp___1"} boogie_si_record_i8($i30);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32($i19, 8);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i30);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i31, $i32);
    call {:si_unique_call 120} {:cexpr "res"} boogie_si_record_i32($i33);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb3;
}



const add_temp_sensors: ref;

axiom add_temp_sensors == $sub.ref(0, 456756);

procedure add_temp_sensors($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2, $M.0;



implementation add_temp_sensors($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $i8: i32;
  var $i68: i32;
  var $i69: i1;
  var vslice_dummy_var_2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32(0, $i6);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $i9, $p10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i8, $i68, $i69, vslice_dummy_var_2 := add_temp_sensors_loop_$bb4($p0, $p1, $p2, $p3, $p4, $i9, $p10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i8, $i68, $i69, vslice_dummy_var_2);
    goto $bb4_last;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.3, $p2);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24:
    assume $i69 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref($i9, 2));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i8);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref($i14, 2));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i19 := nct6775_read_value($p0, $i18);
    call {:si_unique_call 123} {:cexpr "tmp"} boogie_si_record_i16($i19);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i16.i8($i19);
    call {:si_unique_call 124} {:cexpr "src"} boogie_si_record_i8($i20);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 31);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    call {:si_unique_call 125} {:cexpr "src"} boogie_si_record_i8($i23);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p3);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i23);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i26, $i27);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i23);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i34 := $sge.i32($i31, $i33);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i23);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 8));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i40 := strlen($p39);
    call {:si_unique_call 127} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.3, $p2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i44 := __ffs($i43);
    call {:si_unique_call 129} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    call {:si_unique_call 130} {:cexpr "index"} boogie_si_record_i32($i45);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 2));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i23);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_2 := nct6775_write_value($p0, $i52, $i54);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.3, $p2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32(1, $i45);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i58 := $xor.i32($i57, $sub.i32(0, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i56, $i58);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p2, $i59);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.2, $p3);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i23);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32(1, $i61);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i60, $i62);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p3, $i63);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i8, 1);
    call {:si_unique_call 121} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p4);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i64, $i66);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i64;
    goto $bb22_dummy;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 457788);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 458820);

procedure strlen($p0: ref) returns ($r: i64);



const nct6775_init_device: ref;

axiom nct6775_init_device == $sub.ref(0, 459852);

procedure nct6775_init_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_init_device($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $i55: i16;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i16;
  var $i72: i16;
  var $i73: i8;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i64;
  var $p106: ref;
  var $i107: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $i78: i32;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i1;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i16;
  var $i130: i16;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p136: ref;
  var $i137: i16;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $p144: ref;
  var $i145: i16;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p151: ref;
  var $i152: i16;
  var $i153: i32;
  var $i154: i1;
  var $p156: ref;
  var $i157: i16;
  var $i158: i32;
  var $i159: i16;
  var $i160: i16;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $i169: i16;
  var $i170: i32;
  var $i171: i32;
  var $i172: i16;
  var $p174: ref;
  var $i175: i16;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $p181: ref;
  var $i182: i16;
  var $i183: i32;
  var $i184: i1;
  var $p186: ref;
  var $i187: i16;
  var $i188: i32;
  var $i189: i16;
  var $i190: i16;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $p196: ref;
  var $i197: i16;
  var $i198: i32;
  var $i199: i16;
  var $i200: i32;
  var $i201: i32;
  var $i202: i16;
  var $p204: ref;
  var $i205: i16;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $p211: ref;
  var $i212: i16;
  var $i213: i32;
  var $i214: i1;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i16;
  var $i220: i16;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p226: ref;
  var $i227: i16;
  var $i228: i32;
  var $i229: i16;
  var $i230: i32;
  var $i231: i32;
  var $i232: i16;
  var $p234: ref;
  var $i235: i16;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $p241: ref;
  var $i242: i16;
  var $i243: i32;
  var $i244: i1;
  var $p246: ref;
  var $i247: i16;
  var $i248: i32;
  var $i249: i16;
  var $i250: i16;
  var $i251: i8;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $p256: ref;
  var $i257: i16;
  var $i258: i32;
  var $i259: i16;
  var $i260: i32;
  var $i261: i32;
  var $i262: i16;
  var $p264: ref;
  var $i265: i16;
  var $i266: i32;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $p271: ref;
  var $i272: i16;
  var $i273: i32;
  var $i274: i1;
  var $p276: ref;
  var $i277: i16;
  var $i278: i32;
  var $i279: i16;
  var $i280: i16;
  var $i281: i8;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $p286: ref;
  var $i287: i16;
  var $i288: i32;
  var $i289: i16;
  var $i290: i32;
  var $i291: i32;
  var $i292: i16;
  var $p294: ref;
  var $i295: i16;
  var $i296: i32;
  var $i297: i32;
  var $i298: i32;
  var $i299: i1;
  var $p301: ref;
  var $i302: i16;
  var $i303: i32;
  var $i304: i1;
  var $p306: ref;
  var $i307: i16;
  var $i308: i32;
  var $i309: i16;
  var $i310: i16;
  var $i311: i8;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $p316: ref;
  var $i317: i16;
  var $i318: i32;
  var $i319: i16;
  var $i320: i32;
  var $i321: i32;
  var $i322: i16;
  var $p324: ref;
  var $i325: i16;
  var $i326: i32;
  var $i327: i32;
  var $i328: i32;
  var $i329: i1;
  var $p331: ref;
  var $i332: i16;
  var $i333: i32;
  var $i334: i1;
  var $p336: ref;
  var $i337: i16;
  var $i338: i32;
  var $i339: i16;
  var $i340: i16;
  var $i341: i8;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $p346: ref;
  var $i347: i16;
  var $i348: i32;
  var $i349: i16;
  var $i350: i32;
  var $i351: i32;
  var $i352: i16;
  var $p354: ref;
  var $i355: i16;
  var $i356: i32;
  var $i357: i32;
  var $i358: i32;
  var $i359: i1;
  var $p361: ref;
  var $i362: i16;
  var $i363: i32;
  var $i364: i1;
  var $p366: ref;
  var $i367: i16;
  var $i368: i32;
  var $i369: i16;
  var $i370: i16;
  var $i371: i8;
  var $i372: i32;
  var $i373: i32;
  var $i374: i1;
  var $p376: ref;
  var $i377: i16;
  var $i378: i32;
  var $i379: i16;
  var $i380: i32;
  var $i381: i32;
  var $i382: i16;
  var vslice_dummy_var_3: i32;
  var vslice_dummy_var_4: i32;
  var vslice_dummy_var_5: i32;
  var vslice_dummy_var_6: i32;
  var vslice_dummy_var_7: i32;
  var vslice_dummy_var_8: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(0, 2));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(0, 2));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i37 := nct6775_read_value($p0, $i36);
    call {:si_unique_call 137} {:cexpr "tmp___1"} boogie_si_record_i16($i37);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i16.i8($i37);
    call {:si_unique_call 138} {:cexpr "tmp"} boogie_si_record_i8($i38);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i117 := $ashr.i32($i116, 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(1, 2));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(1, 2));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i130 := nct6775_read_value($p0, $i129);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i16.i8($i130);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i145 := $load.i16($M.0, $p144);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i145);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i147 := $ashr.i32($i146, 2);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(2, 2));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.0, $p151);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(2, 2));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i160 := nct6775_read_value($p0, $i159);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i16.i8($i160);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i175 := $load.i16($M.0, $p174);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i176 := $zext.i16.i32($i175);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i177 := $ashr.i32($i176, 3);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 1);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(3, 2));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i182 := $load.i16($M.0, $p181);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i183 := $zext.i16.i32($i182);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(3, 2));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.0, $p186);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i187);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i16($i188);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i190 := nct6775_read_value($p0, $i189);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i16.i8($i190);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i193 := $and.i32($i192, 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i205 := $load.i16($M.0, $p204);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i206 := $zext.i16.i32($i205);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i207 := $ashr.i32($i206, 4);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(4, 2));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.0, $p211);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i32($i212);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(4, 2));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.0, $p216);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i16($i218);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i220 := nct6775_read_value($p0, $i219);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i16.i8($i220);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i235 := $load.i16($M.0, $p234);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i235);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i237 := $ashr.i32($i236, 5);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, 1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(5, 2));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i242 := $load.i16($M.0, $p241);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i243 := $zext.i16.i32($i242);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(5, 2));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i247 := $load.i16($M.0, $p246);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i248 := $zext.i16.i32($i247);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i249 := $trunc.i32.i16($i248);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i250 := nct6775_read_value($p0, $i249);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i16.i8($i250);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i32($i251);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i253 := $and.i32($i252, 1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i265 := $load.i16($M.0, $p264);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i265);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i267 := $ashr.i32($i266, 6);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i268 := $and.i32($i267, 1);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(6, 2));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i272 := $load.i16($M.0, $p271);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i272);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(6, 2));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i277 := $load.i16($M.0, $p276);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i278 := $zext.i16.i32($i277);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i16($i278);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i280 := nct6775_read_value($p0, $i279);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i16.i8($i280);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i281);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i283 := $and.i32($i282, 1);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i295 := $load.i16($M.0, $p294);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i296 := $zext.i16.i32($i295);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i297 := $ashr.i32($i296, 7);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i297, 1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(7, 2));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i302 := $load.i16($M.0, $p301);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i303 := $zext.i16.i32($i302);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(7, 2));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i307 := $load.i16($M.0, $p306);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i308 := $zext.i16.i32($i307);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i309 := $trunc.i32.i16($i308);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i310 := nct6775_read_value($p0, $i309);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i16.i8($i310);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i32($i311);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 1);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i325 := $load.i16($M.0, $p324);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i326 := $zext.i16.i32($i325);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i327 := $ashr.i32($i326, 8);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i328 := $and.i32($i327, 1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(8, 2));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i332 := $load.i16($M.0, $p331);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i333 := $zext.i16.i32($i332);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(8, 2));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i337 := $load.i16($M.0, $p336);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i338 := $zext.i16.i32($i337);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i16($i338);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i340 := nct6775_read_value($p0, $i339);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i341 := $trunc.i16.i8($i340);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i32($i341);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i343 := $and.i32($i342, 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i355 := $load.i16($M.0, $p354);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i356 := $zext.i16.i32($i355);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i357 := $ashr.i32($i356, 9);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i358 := $and.i32($i357, 1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 0);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(9, 2));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i362 := $load.i16($M.0, $p361);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i363 := $zext.i16.i32($i362);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(9, 2));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i367 := $load.i16($M.0, $p366);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i368 := $zext.i16.i32($i367);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i369 := $trunc.i32.i16($i368);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i370 := nct6775_read_value($p0, $i369);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i16.i8($i370);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i32($i371);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i373 := $and.i32($i372, 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i55 := nct6775_read_value($p0, $i54);
    call {:si_unique_call 141} {:cexpr "tmp___2"} boogie_si_record_i16($i55);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i16.i8($i55);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i8($i56);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 1);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i72 := nct6775_read_value($p0, $i71);
    call {:si_unique_call 145} {:cexpr "tmp___3"} boogie_si_record_i16($i72);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i16.i8($i72);
    call {:si_unique_call 146} {:cexpr "diode"} boogie_si_record_i8($i73);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32(0, $i76);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i77 == 1;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb27;

  $bb27:
    call $p79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p106, $i107, $p109, $i110, $i111, $i112, $i113, $i78 := nct6775_init_device_loop_$bb27($p0, $i56, $i73, $p74, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p106, $i107, $p109, $i110, $i111, $i112, $i113, $i78);
    goto $bb27_last;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i82 := $ashr.i32($i81, $i78);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i56);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i89 := $shl.i32($i88, $i78);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i85, $i89);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i91 == 1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i78);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(855, 1)), $mul.ref($i107, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 4);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i78, 1);
    call {:si_unique_call 147} {:cexpr "i"} boogie_si_record_i32($i110);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p74);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i110, $i112);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i113 == 1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i78 := $i110;
    goto $bb36_dummy;

  $bb33:
    assume $i91 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i73);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i93 := $ashr.i32($i92, $i78);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i95 := $sext.i8.i32($i94);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i98 := $sext.i8.i32($i97);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i95, $i98);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(3, $i101);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i78);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(855, 1)), $mul.ref($i104, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i103);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i56);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_5 := nct6775_write_value($p0, $i63, $i66);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb133:
    assume $i374 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(9, 2));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i377 := $load.i16($M.0, $p376);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i378 := $zext.i16.i32($i377);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i16($i378);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i380 := $zext.i8.i32($i371);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i381 := $and.i32($i380, 254);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i382 := $trunc.i32.i16($i381);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_14 := nct6775_write_value($p0, $i379, $i382);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i364 == 1;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb127:
    assume $i359 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb122:
    assume $i344 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(8, 2));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i347 := $load.i16($M.0, $p346);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i348 := $zext.i16.i32($i347);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i32.i16($i348);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i341);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i351 := $and.i32($i350, 254);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i32.i16($i351);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_13 := nct6775_write_value($p0, $i349, $i352);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i334 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb116:
    assume $i329 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb111:
    assume $i314 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(7, 2));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i317 := $load.i16($M.0, $p316);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i318 := $zext.i16.i32($i317);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i32.i16($i318);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i311);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i321 := $and.i32($i320, 254);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i322 := $trunc.i32.i16($i321);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_12 := nct6775_write_value($p0, $i319, $i322);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i304 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb105:
    assume $i299 == 1;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb100:
    assume $i284 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(6, 2));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i287 := $load.i16($M.0, $p286);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i288 := $zext.i16.i32($i287);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i16($i288);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i32($i281);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i291 := $and.i32($i290, 254);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_11 := nct6775_write_value($p0, $i289, $i292);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i274 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb94:
    assume $i269 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb89:
    assume $i254 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(5, 2));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i257 := $load.i16($M.0, $p256);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i258 := $zext.i16.i32($i257);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i32.i16($i258);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i251);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i261 := $and.i32($i260, 254);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i262 := $trunc.i32.i16($i261);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_10 := nct6775_write_value($p0, $i259, $i262);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i244 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb83:
    assume $i239 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb78:
    assume $i224 == 1;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(4, 2));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.0, $p226);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i227);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i32.i16($i228);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i221);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 254);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i16($i231);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_9 := nct6775_write_value($p0, $i229, $i232);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i214 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb72:
    assume $i209 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb67:
    assume $i194 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(3, 2));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i197 := $load.i16($M.0, $p196);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i197);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i16($i198);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i191);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i201 := $and.i32($i200, 254);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i201);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_8 := nct6775_write_value($p0, $i199, $i202);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i184 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb61:
    assume $i179 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb56:
    assume $i164 == 1;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(2, 2));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.0, $p166);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i167);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i161);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 254);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_7 := nct6775_write_value($p0, $i169, $i172);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i154 == 1;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb50:
    assume $i149 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb45:
    assume $i134 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(1, 2));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i137 := $load.i16($M.0, $p136);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i131);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 254);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_6 := nct6775_write_value($p0, $i139, $i142);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i124 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb39:
    assume $i119 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(0, 2));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i38);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 254);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_4 := nct6775_write_value($p0, $i46, $i49);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i9 := nct6775_read_value($p0, $i8);
    call {:si_unique_call 133} {:cexpr "tmp___0"} boogie_si_record_i16($i9);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i16.i8($i9);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(220, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i10);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_3 := nct6775_write_value($p0, $i17, $i20);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb36_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;
}



const superio_enter: ref;

axiom superio_enter == $sub.ref(0, 460884);

procedure superio_enter($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation superio_enter($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "superio_enter:arg:ioreg"} boogie_si_record_i32($i0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p2 := __request_region(ioport_resource, $i1, 2, .str.1, 4194304);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} outb($sub.i8(0, 121), $i0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} outb($sub.i8(0, 121), $i0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 16);
    goto $bb3;
}



const superio_inb: ref;

axiom superio_inb == $sub.ref(0, 461916);

procedure superio_inb($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation superio_inb($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "superio_inb:arg:ioreg"} boogie_si_record_i32($i0);
    call {:si_unique_call 171} {:cexpr "superio_inb:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} outb($i4, $i0);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i0, 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i6 := inb($i5);
    call {:si_unique_call 174} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const superio_select: ref;

axiom superio_select == $sub.ref(0, 462948);

procedure superio_select($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation superio_select($i0: i32, $i1: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "superio_select:arg:ioreg"} boogie_si_record_i32($i0);
    call {:si_unique_call 176} {:cexpr "superio_select:arg:ld"} boogie_si_record_i32($i1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} outb(7, $i0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i0, 1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} outb($i4, $i5);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    return;
}



const vid_which_vrm: ref;

axiom vid_which_vrm == $sub.ref(0, 463980);

procedure vid_which_vrm() returns ($r: i8);
  free requires assertsPassed;



implementation vid_which_vrm() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i0 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const superio_outb: ref;

axiom superio_outb == $sub.ref(0, 465012);

procedure superio_outb($i0: i32, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation superio_outb($i0: i32, $i1: i32, $i2: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "superio_outb:arg:ioreg"} boogie_si_record_i32($i0);
    call {:si_unique_call 182} {:cexpr "superio_outb:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 183} {:cexpr "superio_outb:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} outb($i5, $i0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i2);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i0, 1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} outb($i8, $i9);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    return;
}



const nct6775_check_fan_inputs: ref;

axiom nct6775_check_fan_inputs == $sub.ref(0, 466044);

procedure nct6775_check_fan_inputs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_check_fan_inputs($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i38: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i47: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i8;
  var $i56: i8;
  var $i61: i1;
  var $i62: i8;
  var $i63: i1;
  var $i64: i8;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $i99: i8;
  var $i100: i32;
  var $i101: i1;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $i105: i8;
  var $i106: i32;
  var $i107: i1;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $i111: i8;
  var $i112: i1;
  var $i113: i8;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i124: i8;
  var $i125: i8;
  var $i126: i8;
  var $i84: i8;
  var $i85: i8;
  var $i86: i8;
  var $i87: i8;
  var $i88: i8;
  var $i89: i8;
  var $i90: i8;
  var $i91: i8;
  var $i92: i8;
  var $i65: i8;
  var $i66: i8;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i8;
  var $i73: i8;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i8;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i32;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i8;
  var $p152: ref;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $p172: ref;
  var $i173: i1;
  var $i174: i32;
  var $i175: i32;
  var $i176: i8;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i8;
  var $p198: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 186} {:cexpr "sioreg"} boogie_si_record_i32($i2);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i76 == 1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i93 := superio_inb($i2, 28);
    call {:si_unique_call 219} {:cexpr "regval"} boogie_si_record_i32($i93);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 32);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i8($i95);
    call {:si_unique_call 220} {:cexpr "fan3pin"} boogie_si_record_i8($i96);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i93, 64);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i8($i98);
    call {:si_unique_call 221} {:cexpr "fan4pin"} boogie_si_record_i8($i99);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i93, 128);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i8($i101);
    call {:si_unique_call 222} {:cexpr "fan5pin"} boogie_si_record_i8($i102);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i93, 1);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i8($i104);
    call {:si_unique_call 223} {:cexpr "pwm3pin"} boogie_si_record_i8($i105);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i93, 2);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i8($i107);
    call {:si_unique_call 224} {:cexpr "pwm4pin"} boogie_si_record_i8($i108);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i93, 4);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i8($i110);
    call {:si_unique_call 225} {:cexpr "pwm5pin"} boogie_si_record_i8($i111);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i99);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i8($i112);
    call {:si_unique_call 226} {:cexpr "fan4min"} boogie_si_record_i8($i113);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i115, 4);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i117 := $ule.i32($i116, 1);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i125, $i126 := 0, 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92 := $i125, $i111, $i108, $i105, $i126, $i102, $i113, $i99, $i96;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73 := $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i25);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i129 := $shl.i32($i128, 2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i131 := $sext.i8.i32($i130);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i131, 3);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i8.i1($i24);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i134 := $zext.i1.i32($i133);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i135 := $shl.i32($i134, 3);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i137 := $sext.i8.i32($i136);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i138 := $or.i32($i132, $i137);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i22);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i140 := $zext.i1.i32($i139);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i141 := $shl.i32($i140, 4);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i8($i141);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i143 := $sext.i8.i32($i142);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i144 := $or.i32($i138, $i143);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i21);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i146 := $zext.i1.i32($i145);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i147 := $shl.i32($i146, 5);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i147);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i149 := $sext.i8.i32($i148);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i144, $i149);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i8($i150);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, $i151);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i8.i1($i25);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i154 := $zext.i1.i32($i153);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i155 := $shl.i32($i154, 2);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i157 := $sext.i8.i32($i156);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i158 := $or.i32($i157, 3);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i8.i1($i23);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i160 := $zext.i1.i32($i159);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i161 := $shl.i32($i160, 3);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i8($i161);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i163 := $sext.i8.i32($i162);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i164 := $or.i32($i158, $i163);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i22);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i166 := $zext.i1.i32($i165);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i167 := $shl.i32($i166, 4);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i8($i167);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i169 := $sext.i8.i32($i168);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i170 := $or.i32($i164, $i169);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i8($i170);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p172, $i171);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i8.i1($i20);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i174 := $zext.i1.i32($i173);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i175 := $shl.i32($i174, 2);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i8($i175);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i177 := $sext.i8.i32($i176);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i177, 3);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i8.i1($i19);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i180 := $zext.i1.i32($i179);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i181 := $shl.i32($i180, 3);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i183 := $sext.i8.i32($i182);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i184 := $or.i32($i178, $i183);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i8.i1($i18);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i186 := $zext.i1.i32($i185);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i187 := $shl.i32($i186, 4);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i8($i187);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i189 := $sext.i8.i32($i188);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i190 := $or.i32($i184, $i189);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i8.i1($i17);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i192 := $zext.i1.i32($i191);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i193 := $shl.i32($i192, 5);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i195 := $sext.i8.i32($i194);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i196 := $or.i32($i190, $i195);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i8($i196);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(848, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p198, $i197);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i117 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i118 := superio_inb($i2, 45);
    call {:si_unique_call 228} {:cexpr "regval"} boogie_si_record_i32($i118);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 2);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i8($i120);
    call {:si_unique_call 229} {:cexpr "fan6pin"} boogie_si_record_i8($i121);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i118, 1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i124 := $zext.i1.i8($i123);
    call {:si_unique_call 230} {:cexpr "pwm6pin"} boogie_si_record_i8($i124);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i125, $i126 := $i124, $i121;
    goto $bb21;

  $bb16:
    assume $i76 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i77 := superio_inb($i2, 36);
    call {:si_unique_call 215} {:cexpr "regval"} boogie_si_record_i32($i77);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 128);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i8($i79);
    call {:si_unique_call 216} {:cexpr "fan3pin"} boogie_si_record_i8($i80);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i77, 8);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i8($i82);
    call {:si_unique_call 217} {:cexpr "pwm3pin"} boogie_si_record_i8($i83);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92 := 0, 0, 0, $i83, 0, 0, 0, 0, $i80;
    goto $bb18;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i29 := superio_inb($i2, 39);
    call {:si_unique_call 195} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 128);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 196} {:cexpr "gpok"} boogie_si_record_i8($i32);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} superio_select($i2, 11);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i33 := superio_inb($i2, 48);
    call {:si_unique_call 199} {:cexpr "regval"} boogie_si_record_i32($i33);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 128);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i39 := superio_inb($i2, 36);
    call {:si_unique_call 202} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 64);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i41);
    call {:si_unique_call 203} {:cexpr "fan3pin"} boogie_si_record_i8($i42);
    assume {:verifier.code 0} true;
    $i38 := $i42;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i33, 64);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i48 := superio_inb($i2, 28);
    call {:si_unique_call 206} {:cexpr "tmp___2"} boogie_si_record_i32($i48);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 207} {:cexpr "fan4pin"} boogie_si_record_i8($i51);
    assume {:verifier.code 0} true;
    $i47 := $i51;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i33, 32);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i57 := superio_inb($i2, 28);
    call {:si_unique_call 210} {:cexpr "tmp___3"} boogie_si_record_i32($i57);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 2);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i8($i59);
    call {:si_unique_call 211} {:cexpr "fan5pin"} boogie_si_record_i8($i60);
    assume {:verifier.code 0} true;
    $i56 := $i60;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i47);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i8($i61);
    call {:si_unique_call 212} {:cexpr "fan4min"} boogie_si_record_i8($i62);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i38);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    call {:si_unique_call 213} {:cexpr "pwm3pin"} boogie_si_record_i8($i64);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73 := 0, 0, 0, $i64, 0, $i56, $i62, $i47, $i38;
    goto $bb15;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i32);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 208} {:cexpr "fan5pin"} boogie_si_record_i8($i55);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb14;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i32);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 204} {:cexpr "fan4pin"} boogie_si_record_i8($i46);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb11;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i32);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 200} {:cexpr "fan3pin"} boogie_si_record_i8($i37);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i6 := superio_inb($i2, 44);
    call {:si_unique_call 188} {:cexpr "regval"} boogie_si_record_i32($i6);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 64);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 189} {:cexpr "fan3pin"} boogie_si_record_i8($i9);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i6, 128);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 190} {:cexpr "pwm3pin"} boogie_si_record_i8($i12);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i13 := superio_inb($i2, 42);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 128);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 193} {:cexpr "fan4pin"} boogie_si_record_i8($i16);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := 0, 0, 0, $i12, 0, 0, 0, $i16, $i9;
    goto $bb3;
}



const superio_exit: ref;

axiom superio_exit == $sub.ref(0, 467076);

procedure superio_exit($i0: i32);
  free requires assertsPassed;



implementation superio_exit($i0: i32)
{
  var $i1: i32;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "superio_exit:arg:ioreg"} boogie_si_record_i32($i0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} outb($sub.i8(0, 86), $i0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} outb(2, $i0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} outb(2, $i1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __release_region(ioport_resource, $i2, 2);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    return;
}



const nct6775_init_fan_common: ref;

axiom nct6775_init_fan_common == $sub.ref(0, 468108);

procedure nct6775_init_fan_common($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_init_fan_common($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i16;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $i42: i16;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i16;
  var $p52: ref;
  var $i53: i8;
  var $i54: i1;
  var $i55: i32;
  var $i56: i16;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $i70: i16;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $p80: ref;
  var $i81: i8;
  var $i82: i1;
  var $i83: i32;
  var $i84: i16;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i16;
  var $i98: i16;
  var $i99: i8;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $p108: ref;
  var $i109: i8;
  var $i110: i1;
  var $i111: i32;
  var $i112: i16;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i16;
  var $i126: i16;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i16;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $i137: i8;
  var $i138: i1;
  var $i139: i32;
  var $i140: i16;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $i153: i16;
  var $i154: i16;
  var $i155: i8;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i16;
  var $i162: i32;
  var $i163: i16;
  var $p164: ref;
  var $i165: i8;
  var $i166: i1;
  var $i167: i32;
  var $i168: i16;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i33 := $ashr.i32($i32, 1);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i61 := $ashr.i32($i60, 2);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i89 := $ashr.i32($i88, 3);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i117 := $ashr.i32($i116, 4);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 1);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i145 := $ashr.i32($i144, 5);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 1);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i147 == 1;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p149, $mul.ref(5, 2));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p150);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i151);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i16($i152);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i154 := nct6775_read_value($p1, $i153);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i16.i8($i154);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i157 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p159, $mul.ref(5, 2));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i161 := $load.i16($M.0, $p160);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i161);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.0, $p164);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i8.i1($i165);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i167 := (if $i166 == 1 then 255 else 65311);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_20 := nct6775_write_value($p1, $i163, $i168);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume $i119 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref(4, 2));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.0, $p122);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i126 := nct6775_read_value($p1, $i125);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i16.i8($i126);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i129 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p131, $mul.ref(4, 2));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p132);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i8.i1($i137);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i139 := (if $i138 == 1 then 255 else 65311);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_19 := nct6775_write_value($p1, $i135, $i140);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i91 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(3, 2));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i98 := nct6775_read_value($p1, $i97);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i16.i8($i98);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i101 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(3, 2));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.0, $p104);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i109);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i111 := (if $i110 == 1 then 255 else 65311);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_18 := nct6775_write_value($p1, $i107, $i112);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(2, 2));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i70 := nct6775_read_value($p1, $i69);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i16.i8($i70);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24:
    assume $i73 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(2, 2));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i83 := (if $i82 == 1 then 255 else 65311);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_17 := nct6775_write_value($p1, $i79, $i84);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(1, 2));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i42 := nct6775_read_value($p1, $i41);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i16.i8($i42);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(1, 2));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i55 := (if $i54 == 1 then 255 else 65311);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} vslice_dummy_var_16 := nct6775_write_value($p1, $i51, $i56);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i15 := nct6775_read_value($p1, $i14);
    call {:si_unique_call 238} {:cexpr "tmp"} boogie_si_record_i16($i15);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i16.i8($i15);
    call {:si_unique_call 239} {:cexpr "reg"} boogie_si_record_i8($i16);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 255 else 65311);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_15 := nct6775_write_value($p1, $i23, $i28);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} nct6775_init_fan_div($p1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nct6775_create_attr_group: ref;

axiom nct6775_create_attr_group == $sub.ref(0, 469140);

procedure nct6775_create_attr_group($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_create_attr_group($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i13: i32;
  var $p14: ref;
  var $i20: i32;
  var $i12: i32;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $i111: i16;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p145: ref;
  var $i146: i16;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p170: ref;
  var $p171: ref;
  var $p63: ref;
  var $p64: ref;
  var $i172: i32;
  var $i173: i1;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p6: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "nct6775_create_attr_group:arg:repeat"} boogie_si_record_i32($i2);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.14, $p7);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.15, $p8);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i12, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p24 := devm_kzalloc($p0, 32, 208);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i2, $i12);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i33 := $mul.i64($i32, 8);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p34 := devm_kzalloc($p0, $i33, 208);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i2);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i12);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i42 := $mul.i64($i40, $i41);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i43 := $mul.i64($i42, 88);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p44 := devm_kzalloc($p0, $i43, 208);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p34);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.16, $p51);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p52);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32(0, $i2);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p6 := $p24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb25:
    assume $i54 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i55, $p56, $p57 := 0, $p34, $p44;
    goto $bb28;

  $bb28:
    call $p58, $p59, $p60, $i61, $i62, $p68, $p69, $p70, $p73, $p74, $p75, $i76, $i77, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $i105, $p106, $p107, $p110, $i111, $p114, $p115, $p117, $p118, $p120, $p121, $p123, $p124, $p126, $p129, $p130, $p131, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p145, $i146, $p149, $p150, $p152, $p153, $p155, $p156, $p158, $p159, $p161, $p164, $p165, $p166, $p167, $i168, $i169, $p65, $p66, $p67, $p170, $p171, $p63, $p64, $i172, $i173, $i55, $p56, $p57, vslice_dummy_var_21 := nct6775_create_attr_group_loop_$bb28($p1, $i2, $p58, $p59, $p60, $i61, $i62, $p68, $p69, $p70, $p73, $p74, $p75, $i76, $i77, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $i105, $p106, $p107, $p110, $i111, $p114, $p115, $p117, $p118, $p120, $p121, $p123, $p124, $p126, $p129, $p130, $p131, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p145, $i146, $p149, $p150, $p152, $p153, $p155, $p156, $p158, $p159, $p161, $p164, $p165, $p166, $p167, $i168, $i169, $p65, $p66, $p67, $p170, $p171, $p63, $p64, $i172, $i173, $i55, $p56, $p57, vslice_dummy_var_21);
    goto $bb28_last;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.14, $p58);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.15, $p59);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p57, $p56;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i55, 1);
    call {:si_unique_call 262} {:cexpr "i"} boogie_si_record_i32($i172);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i172, $i2);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i173 == 1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb41:
    assume $i173 == 1;
    assume {:verifier.code 0} true;
    $i55, $p56, $p57 := $i172, $p64, $p63;
    goto $bb41_dummy;

  $bb30:
    assume $i62 == 1;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p65, $p66, $p67 := $p59, $p56, $p57;
    goto $bb33;

  $bb33:
    call $p68, $p69, $p70, $p73, $p74, $p75, $i76, $i77, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $i105, $p106, $p107, $p110, $i111, $p114, $p115, $p117, $p118, $p120, $p121, $p123, $p124, $p126, $p129, $p130, $p131, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p145, $i146, $p149, $p150, $p152, $p153, $p155, $p156, $p158, $p159, $p161, $p164, $p165, $p166, $p167, $i168, $i169, $p65, $p66, $p67, $p170, $p171, vslice_dummy_var_21 := nct6775_create_attr_group_loop_$bb33($p1, $p68, $p69, $p70, $p73, $p74, $p75, $i76, $i77, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $i105, $p106, $p107, $p110, $i111, $p114, $p115, $p117, $p118, $p120, $p121, $p123, $p124, $p126, $p129, $p130, $p131, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p145, $i146, $p149, $p150, $p152, $p153, $p155, $p156, $p158, $p159, $p161, $p164, $p165, $p166, $p167, $i168, $i169, $p65, $p66, $p67, $p170, $p171, $i55, vslice_dummy_var_21);
    goto $bb33_last;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.15, $p65);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p70, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.17, $p73);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.18, $p75);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, $i55);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} vslice_dummy_var_21 := snprintf.ref.i64.ref.i32($p69, 32, $p74, $i77);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.15, $p65);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.17, $p80);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i82 == 1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p67, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p131);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.15, $p65);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.17, $p138);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i139, $i55);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i140);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.15, $p65);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p142, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.17, $p145);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, $i146);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.15, $p65);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.17, $p152);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, $p153);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.15, $p65);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p156, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.17, $p158);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p161, $p159);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p67);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p66, $mul.ref(1, 8));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p67, $mul.ref(1, 88));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p65, $mul.ref(1, 8));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.15, $p166);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p170, $p171 := $p165, $p164;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p170, $p171;
    goto $bb32;

  $bb38:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $p65, $p66, $p67 := $p166, $p164, $p165;
    goto $bb38_dummy;

  $bb35:
    assume $i82 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p67, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p85);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.15, $p65);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.17, $p93);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i55);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i95, $i97);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $i99);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.15, $p65);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.17, $p104);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i105);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.15, $p65);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p107, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.17, $p110);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p114, $i111);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.15, $p65);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p115, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.17, $p117);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p118);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.15, $p65);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.17, $p123);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p124);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p67);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p48 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p6 := $p48;
    goto $bb3;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p38 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p6 := $p38;
    goto $bb3;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p28 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p6 := $p28;
    goto $bb3;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p22 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p6 := $p22;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i13, $p14 := 0, $p8;
    goto $bb8;

  $bb8:
    call $p15, $i16, $p17, $i18, $i19, $i13, $p14, $i20 := nct6775_create_attr_group_loop_$bb8($p15, $i16, $p17, $i18, $i19, $i13, $p14, $i20);
    goto $bb8_last;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1, 8));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i13, 1);
    call {:si_unique_call 253} {:cexpr "count"} boogie_si_record_i32($i16);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.15, $p15);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i20 := $i16;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb7;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i13, $p14 := $i16, $p15;
    goto $bb10_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p4 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p6 := $p4;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  $bb41_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 470172);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 471204);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 472236);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 268} $i1 := devirtbounce(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 269} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_hwmon_device_register_with_groups: ref;

axiom devm_hwmon_device_register_with_groups == $sub.ref(0, 473268);

procedure devm_hwmon_device_register_with_groups($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_hwmon_device_register_with_groups($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p4 := external_alloc();
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const PTR_ERR_OR_ZERO: ref;

axiom PTR_ERR_OR_ZERO == $sub.ref(0, 474300);

procedure PTR_ERR_OR_ZERO($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PTR_ERR_OR_ZERO($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i1 := IS_ERR($p0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 272} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i4 := PTR_ERR($p0);
    call {:si_unique_call 274} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 475332);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 275} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 276} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 476364);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 477396);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 278} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 478428);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 479460);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 480492);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const nct6775_init_fan_div: ref;

axiom nct6775_init_fan_div == $sub.ref(0, 481524);

procedure nct6775_init_fan_div($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_init_fan_div($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} nct6775_update_fan_div_common($p0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(0, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(1, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i29 := $ashr.i32($i28, 2);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(2, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i42 := $ashr.i32($i41, 3);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(3, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 4);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 1);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(4, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i68 := $ashr.i32($i67, 5);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(5, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i75 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(5, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 7);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} nct6775_write_fan_div_common($p0, 5);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i70 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume $i62 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(4, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 7);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} nct6775_write_fan_div_common($p0, 4);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i49 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(3, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 7);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} nct6775_write_fan_div_common($p0, 3);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i44 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(2, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 7);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} nct6775_write_fan_div_common($p0, 2);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(1, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 7);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} nct6775_write_fan_div_common($p0, 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(0, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 7);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} nct6775_write_fan_div_common($p0, 0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nct6775_write_value: ref;

axiom nct6775_write_value == $sub.ref(0, 482556);

procedure nct6775_write_value($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_write_value($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i16;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "nct6775_write_value:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 290} {:cexpr "nct6775_write_value:arg:value"} boogie_si_record_i16($i2);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i5 := is_word_sized($p0, $i4);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 292} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 293} {:cexpr "word_sized"} boogie_si_record_i32($i8);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} nct6775_set_bank($p0, $i10);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i1);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} outb_p($i13, $i15);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i8, 0);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i16.i8($i2);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} outb_p($i33, $i36);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i2);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i17, 8);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} outb_p($i21, $i24);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i16.i8($i1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} outb_p($i28, $i30);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_word_sized: ref;

axiom is_word_sized == $sub.ref(0, 483588);

procedure is_word_sized($p0: ref, $i1: i16) returns ($r: i1);
  free requires assertsPassed;



implementation is_word_sized($p0: ref, $i1: i16) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i22: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i49: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i86: i1;
  var $i114: i32;
  var $i115: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i150: i32;
  var $i151: i1;
  var $i149: i1;
  var $i116: i1;
  var $i39: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} {:cexpr "is_word_sized:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 3);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 4);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb21:
    assume $i19 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 336);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i115} true;
    goto $bb104, $bb106;

  $bb106:
    assume !($i115 == 1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 339);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i118} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i118 == 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i1);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 341);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i120 == 1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 65520);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1200);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1026);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i128 == 1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1594);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i130} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i130 == 1);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i1);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 1596);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i132} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i132 == 1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 1598);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i134} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i134 == 1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1600);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i136 == 1);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1602);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i138} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i138 == 1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 115);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i140} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i140 == 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 117);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i142} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i142 == 1);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i1);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 119);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i144 == 1);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 121);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i146} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i146 == 1);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 123);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i149 := 1;
    assume true;
    goto $bb136, $bb138;

  $bb138:
    assume !($i148 == 1);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i1);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 125);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i149 := $i151;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i116 := $i149;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i39 := $i116;
    goto $bb43;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb137;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb105;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb105;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb105;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb105;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb105;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb105;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb105;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb105;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb105;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb105;

  $bb111:
    assume $i123 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 15);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i126 := $sle.i32($i125, 10);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i116 := 1;
    assume {:branchcond $i126} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb113;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb105;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb105;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb105;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 65280);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 256);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i79 == 1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i1);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 65280);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 512);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 65520);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1584);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i95 == 1);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i1);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1026);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i97} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i97 == 1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 1600);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i99} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i99 == 1);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1602);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i101} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i101 == 1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 65520);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1616);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i1);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 115);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i109} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i109 == 1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 117);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i111} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i111 == 1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 119);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i86 := $i113;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i39 := $i86;
    goto $bb43;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb81;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb81;

  $bb95:
    assume $i104 == 1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 15);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i106, 5);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb97;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb81;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb81;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb81;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb81;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb81;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i1);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 255);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 80);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i85} true;
    goto $bb80, $bb82;

  $bb82:
    assume !($i85 == 1);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 255);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 83);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i89} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i89 == 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i1);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 255);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 85);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i92} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb79;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb81;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb81;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb75;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 65280);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 256);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume !($i42 == 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i1);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 65280);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 512);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 65520);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1584);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume {:branchcond $i58} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i58 == 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1600);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i60 == 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1602);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i62 == 1);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i1);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1634);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i64 == 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i1);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 65520);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1616);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 115);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i72 == 1);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 117);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume {:branchcond $i74} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i74 == 1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 119);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i49 := $i76;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i39 := $i49;
    goto $bb43;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb51;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb51;

  $bb65:
    assume $i67 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 15);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i69, 5);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume {:branchcond $i70} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb67;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb51;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb51;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb51;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb51;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb51;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 255);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 80);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i48 == 1);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i1);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 255);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 83);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i52 == 1);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 255);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 85);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume {:branchcond $i55} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb49;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb51;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb51;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb45;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 32);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i21 == 1);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 34);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i24 == 1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 36);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i26 == 1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 224);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i28 == 1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 226);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i30 == 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 228);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i1);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 273);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i34 == 1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 289);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume {:branchcond $i36} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i36 == 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i1);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 305);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i22 := $i38;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i39 := $i22;
    goto $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb27;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb27;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb27;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb27;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb27;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb27;
}



const nct6775_set_bank: ref;

axiom nct6775_set_bank == $sub.ref(0, 484620);

procedure nct6775_set_bank($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_set_bank($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "nct6775_set_bank:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i2, 8);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 301} {:cexpr "bank"} boogie_si_record_i8($i4);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(752, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i4);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i7, $i8);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} outb_p(78, $i11);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i4);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(0, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} outb_p($i13, $i16);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(752, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i4);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const outb_p: ref;

axiom outb_p == $sub.ref(0, 485652);

procedure outb_p($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb_p($i0: i8, $i1: i32)
{
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "outb_p:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 305} {:cexpr "outb_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} outb($i3, $i1);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} slow_down_io();
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 486684);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 309} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 310} devirtbounce.1(0, $i0, $i1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    return;
}



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 487716);

procedure slow_down_io();
  free requires assertsPassed;



implementation slow_down_io()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(208, 1)));
    call {:si_unique_call 311} devirtbounce.2($p0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    return;
}



const nct6775_update_fan_div_common: ref;

axiom nct6775_update_fan_div_common == $sub.ref(0, 488748);

procedure nct6775_update_fan_div_common($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_update_fan_div_common($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} nct6775_update_fan_div($p0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nct6775_write_fan_div_common: ref;

axiom nct6775_write_fan_div_common == $sub.ref(0, 489780);

procedure nct6775_write_fan_div_common($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_write_fan_div_common($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "nct6775_write_fan_div_common:arg:nr"} boogie_si_record_i32($i1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} nct6775_write_fan_div($p0, $i1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nct6775_write_fan_div: ref;

axiom nct6775_write_fan_div == $sub.ref(0, 490812);

procedure nct6775_write_fan_div($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_write_fan_div($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i16;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i16;
  var $i20: i16;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i16;
  var $i37: i16;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i16;
  var $i51: i16;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i16;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "nct6775_write_fan_div:arg:nr"} boogie_si_record_i32($i1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 3);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i5 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i51 := nct6775_read_value($p0, 1287);
    call {:si_unique_call 329} {:cexpr "tmp___2"} boogie_si_record_i16($i51);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i16.i8($i51);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i53 := $sext.i8.i32($i52);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 7);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(3, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32($i58, 4);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i61 := $sext.i8.i32($i60);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 112);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i54, $i62);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    call {:si_unique_call 330} {:cexpr "reg"} boogie_si_record_i8($i64);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_25 := nct6775_write_value($p0, 1287, $i66);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i37 := nct6775_read_value($p0, 1287);
    call {:si_unique_call 325} {:cexpr "tmp___1"} boogie_si_record_i16($i37);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i16.i8($i37);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 112);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(2, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 7);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i40, $i45);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    call {:si_unique_call 326} {:cexpr "reg"} boogie_si_record_i8($i47);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_24 := nct6775_write_value($p0, 1287, $i49);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i20 := nct6775_read_value($p0, 1286);
    call {:si_unique_call 321} {:cexpr "tmp___0"} boogie_si_record_i16($i20);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i16.i8($i20);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 7);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(1, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i27, 4);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 112);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i23, $i31);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    call {:si_unique_call 322} {:cexpr "reg"} boogie_si_record_i8($i33);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_23 := nct6775_write_value($p0, 1286, $i35);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i6 := nct6775_read_value($p0, 1286);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i16($i6);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i16.i8($i6);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 112);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(0, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 7);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i9, $i14);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 318} {:cexpr "reg"} boogie_si_record_i8($i16);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_22 := nct6775_write_value($p0, 1286, $i18);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const nct6775_update_fan_div: ref;

axiom nct6775_update_fan_div == $sub.ref(0, 491844);

procedure nct6775_update_fan_div($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_update_fan_div($p0: ref)
{
  var $i1: i16;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $i14: i16;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i1 := nct6775_read_value($p0, 1286);
    call {:si_unique_call 333} {:cexpr "tmp"} boogie_si_record_i16($i1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i16.i8($i1);
    call {:si_unique_call 334} {:cexpr "i"} boogie_si_record_i8($i2);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 7);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(0, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i5);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 112);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 4);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(1, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i11);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i14 := nct6775_read_value($p0, 1287);
    call {:si_unique_call 336} {:cexpr "tmp___0"} boogie_si_record_i16($i14);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i16.i8($i14);
    call {:si_unique_call 337} {:cexpr "i"} boogie_si_record_i8($i15);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 7);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(2, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i18);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i15);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 112);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i27, 4);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(3, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i29);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 492876);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 339} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 493908);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 341} $i1 := devirtbounce.3(0, $i0);
    call {:si_unique_call 342} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 494940);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 344} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 345} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p5 := external_alloc();
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __ffs: ref;

axiom __ffs == $sub.ref(0, 495972);

procedure __ffs($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __ffs($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} {:cexpr "__ffs:arg:word"} boogie_si_record_i64($i0);
    call {:si_unique_call 348} $i1 := devirtbounce.4(0, $i0);
    call {:si_unique_call 349} {:cexpr "word"} boogie_si_record_i64($i1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 497004);

procedure inb_p($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb_p($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "inb_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i1 := inb($i0);
    call {:si_unique_call 352} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} slow_down_io();
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 498036);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 499068);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 355} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p3 := external_alloc();
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const nct6775_suspend: ref;

axiom nct6775_suspend == $sub.ref(0, 500100);

procedure nct6775_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation nct6775_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $i7: i16;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i16;
  var $i14: i8;
  var $p15: ref;
  var $i16: i16;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p1 := nct6775_update_device($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} ldv_mutex_lock_142($p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i7 := nct6775_read_value($p1, $i6);
    call {:si_unique_call 360} {:cexpr "tmp___0"} boogie_si_record_i16($i7);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i16.i8($i7);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(1276, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} ldv_mutex_unlock_143($p19);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i13 := nct6775_read_value($p1, 1286);
    call {:si_unique_call 362} {:cexpr "tmp___1"} boogie_si_record_i16($i13);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i16.i8($i13);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(1277, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i16 := nct6775_read_value($p1, 1287);
    call {:si_unique_call 364} {:cexpr "tmp___2"} boogie_si_record_i16($i16);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i16.i8($i16);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(1278, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const nct6775_resume: ref;

axiom nct6775_resume == $sub.ref(0, 501132);

procedure nct6775_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, assertsPassed;



implementation nct6775_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $i38: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $i54: i64;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i16;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i23: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i16;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i16;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i90: i64;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i1;
  var $i97: i64;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $i104: i64;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i16;
  var $i89: i32;
  var $i112: i32;
  var $i113: i1;
  var $i82: i32;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i16;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i16;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i16;
  var $i13: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $i145: i64;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i16;
  var $i152: i64;
  var $p155: ref;
  var $i156: i16;
  var $i157: i32;
  var $i158: i16;
  var $i160: i64;
  var $p163: ref;
  var $i164: i16;
  var $i165: i32;
  var $i166: i1;
  var $i167: i64;
  var $p170: ref;
  var $i171: i16;
  var $i172: i32;
  var $i173: i16;
  var $i174: i64;
  var $p177: ref;
  var $i178: i16;
  var $i179: i32;
  var $i180: i16;
  var $i182: i64;
  var $p185: ref;
  var $i186: i16;
  var $i187: i32;
  var $i188: i1;
  var $i189: i64;
  var $p192: ref;
  var $i193: i16;
  var $i194: i32;
  var $i195: i16;
  var $i196: i64;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i16;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i16;
  var $i214: i32;
  var $i215: i16;
  var $p217: ref;
  var $i218: i16;
  var $i219: i32;
  var $i220: i16;
  var $p222: ref;
  var $i223: i8;
  var $i224: i32;
  var $i225: i32;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i16;
  var $i232: i32;
  var $i233: i16;
  var $p235: ref;
  var $i236: i16;
  var $i237: i32;
  var $i238: i16;
  var $p240: ref;
  var $i241: i8;
  var $i242: i32;
  var $i243: i32;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i16;
  var $i250: i32;
  var $i251: i16;
  var $p253: ref;
  var $i254: i16;
  var $i255: i32;
  var $i256: i16;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i16;
  var $i268: i32;
  var $i269: i16;
  var $p271: ref;
  var $i272: i16;
  var $i273: i32;
  var $i274: i16;
  var $p276: ref;
  var $i277: i8;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i16;
  var $i286: i32;
  var $i287: i16;
  var $p289: ref;
  var $i290: i16;
  var $i291: i32;
  var $i292: i16;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} ldv_mutex_lock_144($p3);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(752, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $sub.i8(0, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 4);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, 1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32(0, $i21);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(0, 2));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_28 := nct6775_write_value($p2, $i75, $i80);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i207 := $ashr.i32($i206, 1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p211, $mul.ref(1, 2));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i213 := $load.i16($M.0, $p212);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(1, 2));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i218 := $load.i16($M.0, $p217);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i219 := $zext.i16.i32($i218);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i16($i219);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_36 := nct6775_write_value($p2, $i215, $i220);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i32($i223);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i225 := $ashr.i32($i224, 2);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i225, 1);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p229, $mul.ref(2, 2));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.0, $p230);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i16($i232);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(2, 2));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.0, $p235);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i32.i16($i237);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_37 := nct6775_write_value($p2, $i233, $i238);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.0, $p240);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i241);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i243 := $ashr.i32($i242, 3);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i244 := $and.i32($i243, 1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p247, $mul.ref(3, 2));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i249 := $load.i16($M.0, $p248);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i250 := $zext.i16.i32($i249);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i16($i250);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(3, 2));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i254 := $load.i16($M.0, $p253);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i255 := $zext.i16.i32($i254);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i32.i16($i255);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_38 := nct6775_write_value($p2, $i251, $i256);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i261 := $ashr.i32($i260, 4);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i262 := $and.i32($i261, 1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($p265, $mul.ref(4, 2));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i267 := $load.i16($M.0, $p266);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i268 := $zext.i16.i32($i267);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i269 := $trunc.i32.i16($i268);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(4, 2));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i272 := $load.i16($M.0, $p271);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i272);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i274 := $trunc.i32.i16($i273);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_39 := nct6775_write_value($p2, $i269, $i274);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.0, $p276);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i279 := $ashr.i32($i278, 5);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i280 := $and.i32($i279, 1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p283, $mul.ref(5, 2));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i285 := $load.i16($M.0, $p284);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i286 := $zext.i16.i32($i285);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i32.i16($i286);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(5, 2));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i290 := $load.i16($M.0, $p289);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i290);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_40 := nct6775_write_value($p2, $i287, $i292);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb28;

  $bb28:
    call $p83, $i84, $i85, $i86, $i87, $i88, $i90, $p93, $i94, $i95, $i96, $i97, $p100, $i101, $i102, $i103, $i104, $p107, $i108, $i109, $i110, $i89, $i112, $i113, $i82, $i138, $p141, $i142, $i143, $i144, $i145, $p148, $i149, $i150, $i151, $i152, $p155, $i156, $i157, $i158, $i160, $p163, $i164, $i165, $i166, $i167, $p170, $i171, $i172, $i173, $i174, $p177, $i178, $i179, $i180, $i182, $p185, $i186, $i187, $i188, $i189, $p192, $i193, $i194, $i195, $i196, $p199, $i200, $i201, $i202, vslice_dummy_var_29, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35 := nct6775_resume_loop_$bb28($p2, $p83, $i84, $i85, $i86, $i87, $i88, $i90, $p93, $i94, $i95, $i96, $i97, $p100, $i101, $i102, $i103, $i104, $p107, $i108, $i109, $i110, $i89, $i112, $i113, $i82, $i138, $p141, $i142, $i143, $i144, $i145, $p148, $i149, $i150, $i151, $i152, $p155, $i156, $i157, $i158, $i160, $p163, $i164, $i165, $i166, $i167, $p170, $i171, $i172, $i173, $i174, $p177, $i178, $i179, $i180, $i182, $p185, $i186, $i187, $i188, $i189, $p192, $i193, $i194, $i195, $i196, $p199, $i200, $i201, $i202, vslice_dummy_var_29, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35);
    goto $bb28_last;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i86 := $ashr.i32($i85, $i82);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 1);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i82);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref($i90, 2));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i82);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref($i138, 2));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i82);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i160, 2));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i164 := $load.i16($M.0, $p163);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i82);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref($i182, 2));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i186 := $load.i16($M.0, $p185);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i186);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i89 := $i82;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i89, 1);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32($i112);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i113 := $sle.i32($i112, 9);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1276, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_30 := nct6775_write_value($p2, $i117, $i121);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(736, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ldv_mutex_unlock_145($p137);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i125 == 1;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1277, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_31 := nct6775_write_value($p2, 1286, $i129);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1278, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i16($i133);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_32 := nct6775_write_value($p2, 1287, $i134);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i82 := $i112;
    goto $bb41_dummy;

  $bb55:
    assume $i188 == 1;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i82);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref($i189, 2));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i193 := $load.i16($M.0, $p192);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i194 := $zext.i16.i32($i193);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i16($i194);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i82);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(4, 20)), $mul.ref($i196, 2));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p199);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i201);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_35 := nct6775_write_temp($p2, $i195, $i202);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i166 == 1;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i82);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i167, 2));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.0, $p170);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i171);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i82);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(3, 20)), $mul.ref($i174, 2));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i178 := $load.i16($M.0, $p177);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i179 := $zext.i16.i32($i178);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i16($i179);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_34 := nct6775_write_temp($p2, $i173, $i180);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i144 == 1;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i82);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref($i145, 2));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i16($i150);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i82);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(2, 20)), $mul.ref($i152, 2));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i156 := $load.i16($M.0, $p155);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i156);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_33 := nct6775_write_temp($p2, $i151, $i158);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb36:
    assume $i96 == 1;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i82);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref($i97, 2));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i82);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(1, 20)), $mul.ref($i104, 2));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_29 := nct6775_write_temp($p2, $i103, $i110);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i88 == 1;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i89 := $i82;
    goto $bb32;

  $bb78:
    assume $i281 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb73:
    assume $i263 == 1;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb68:
    assume $i245 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb63:
    assume $i227 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb58:
    assume $i209 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb11;

  $bb11:
    call $p24, $i25, $i26, $i27, $i28, $i29, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p41, $i42, $i43, $i44, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $p57, $i58, $i59, $i60, $i62, $i63, $i64, $i65, $i23, vslice_dummy_var_26, vslice_dummy_var_27 := nct6775_resume_loop_$bb11($p2, $p19, $p24, $i25, $i26, $i27, $i28, $i29, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p41, $i42, $i43, $i44, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $p57, $i58, $i59, $i60, $i62, $i63, $i64, $i65, $i23, vslice_dummy_var_26, vslice_dummy_var_27);
    goto $bb11_last;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i27 := $ashr.i32($i26, $i23);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i23);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 2));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i23);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i38, 3)), $mul.ref(1, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_26 := nct6775_write_value($p2, $i37, $i44);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i23);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 2));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i23);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i54, 3)), $mul.ref(2, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_27 := nct6775_write_value($p2, $i53, $i60);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i23, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p19);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i62, $i64);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i65 == 1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i62;
    goto $bb17_dummy;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i11 := superio_enter($i10);
    call {:si_unique_call 369} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} nct6791_enable_io_mapping($i15);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} superio_exit($i17);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i18 := $i11;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb5;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb41_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3690;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 502164);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_144: ref;

axiom ldv_mutex_lock_144 == $sub.ref(0, 503196);

procedure ldv_mutex_lock_144($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_144($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const nct6791_enable_io_mapping: ref;

axiom nct6791_enable_io_mapping == $sub.ref(0, 504228);

procedure nct6791_enable_io_mapping($i0: i32);
  free requires assertsPassed;



implementation nct6791_enable_io_mapping($i0: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "nct6791_enable_io_mapping:arg:sioaddr"} boogie_si_record_i32($i0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i1 := superio_inb($i0, 40);
    call {:si_unique_call 393} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_41 := printk.ref(.str.9);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, $sub.i32(0, 17));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} superio_outb($i0, 40, $i5);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nct6775_write_temp: ref;

axiom nct6775_write_temp == $sub.ref(0, 505260);

procedure nct6775_write_temp($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_write_temp($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i16;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} {:cexpr "nct6775_write_temp:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 397} {:cexpr "nct6775_write_temp:arg:value"} boogie_si_record_i16($i2);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i5 := is_word_sized($p0, $i4);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 399} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i13);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i18 := nct6775_write_value($p0, $i15, $i17);
    call {:si_unique_call 402} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i2);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 8);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 400} {:cexpr "value"} boogie_si_record_i16($i12);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ldv_mutex_unlock_145: ref;

axiom ldv_mutex_unlock_145 == $sub.ref(0, 506292);

procedure ldv_mutex_unlock_145($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_145($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data == $sub.ref(0, 507324);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i1 := $M.19;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 405} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_nct6775_data"} boogie_si_record_i8(0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 508356);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 407} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 509388);

procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 1} true;
    call {:si_unique_call 408} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 409} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data == $sub.ref(0, 510420);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i1 := $M.19;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 413} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_nct6775_data"} boogie_si_record_i8(1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 511452);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} __VERIFIER_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nct6775_update_device: ref;

axiom nct6775_update_device == $sub.ref(0, 512484);

procedure nct6775_update_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation nct6775_update_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i16;
  var $i32: i8;
  var $i33: i64;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i16;
  var $i46: i8;
  var $i47: i64;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i16;
  var $i59: i16;
  var $i60: i8;
  var $i61: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i17: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i16;
  var $i84: i16;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i16;
  var $i89: i64;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i16;
  var $i111: i16;
  var $i112: i64;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $i121: i16;
  var $i122: i16;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i32;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $i135: i64;
  var $p137: ref;
  var $i138: i32;
  var $i139: i16;
  var $i76: i32;
  var $i140: i32;
  var $i141: i1;
  var $i69: i32;
  var $p143: ref;
  var $i144: i16;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i151: i64;
  var $i152: i64;
  var $p155: ref;
  var $i156: i16;
  var $i157: i32;
  var $i158: i1;
  var $i159: i64;
  var $i160: i64;
  var $p163: ref;
  var $i164: i16;
  var $i165: i32;
  var $i166: i16;
  var $i167: i16;
  var $i168: i64;
  var $i169: i64;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $i150: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $i186: i16;
  var $i187: i32;
  var $i188: i16;
  var $i189: i16;
  var $i190: i8;
  var $i191: i64;
  var $p193: ref;
  var $i149: i32;
  var $i194: i32;
  var $i195: i1;
  var $i142: i32;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i16;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $p203: ref;
  var $i204: i16;
  var $i205: i32;
  var $i206: i16;
  var $i207: i16;
  var $i208: i8;
  var $p209: ref;
  var $i210: i64;
  var $i211: i64;
  var $i212: i64;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $i224: i16;
  var $i225: i16;
  var $i226: i8;
  var $p227: ref;
  var $i228: i64;
  var $i229: i64;
  var $i230: i64;
  var $p231: ref;
  var $i232: i64;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i16;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i16;
  var $i246: i32;
  var $i247: i16;
  var $i248: i16;
  var $i249: i8;
  var $p250: ref;
  var $i251: i64;
  var $i252: i64;
  var $i253: i64;
  var $i254: i64;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i16;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i16;
  var $i266: i32;
  var $i267: i16;
  var $i268: i16;
  var $i269: i8;
  var $p270: ref;
  var $i271: i64;
  var $i272: i64;
  var $i273: i64;
  var $i274: i64;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i16;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i16;
  var $i286: i32;
  var $i287: i16;
  var $i288: i16;
  var $i289: i8;
  var $p290: ref;
  var $i291: i64;
  var $i292: i64;
  var $i293: i64;
  var $i294: i64;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i16;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $i305: i16;
  var $i306: i32;
  var $i307: i16;
  var $i308: i16;
  var $i309: i8;
  var $p310: ref;
  var $i311: i64;
  var $i312: i64;
  var $i313: i64;
  var $i314: i64;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i16;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i16;
  var $i326: i32;
  var $i327: i16;
  var $i328: i16;
  var $i329: i8;
  var $p330: ref;
  var $i331: i64;
  var $i332: i64;
  var $i333: i64;
  var $i334: i64;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $i339: i16;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i16;
  var $i346: i32;
  var $i347: i16;
  var $i348: i16;
  var $i349: i8;
  var $p350: ref;
  var $i351: i64;
  var $i352: i64;
  var $i353: i64;
  var $i354: i64;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i16;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $i365: i16;
  var $i366: i32;
  var $i367: i16;
  var $i368: i16;
  var $i369: i8;
  var $p370: ref;
  var $i371: i64;
  var $i372: i64;
  var $i373: i64;
  var $i374: i64;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $i379: i16;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $i385: i16;
  var $i386: i32;
  var $i387: i16;
  var $i388: i16;
  var $i389: i8;
  var $p390: ref;
  var $i391: i64;
  var $i392: i64;
  var $i393: i64;
  var $i394: i64;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i16;
  var $i400: i32;
  var $i401: i1;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $i405: i16;
  var $i406: i32;
  var $i407: i16;
  var $i408: i16;
  var $i409: i8;
  var $p410: ref;
  var $i411: i64;
  var $i412: i64;
  var $i413: i64;
  var $i414: i64;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $i419: i16;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $i425: i16;
  var $i426: i32;
  var $i427: i16;
  var $i428: i16;
  var $i429: i8;
  var $p430: ref;
  var $i431: i64;
  var $i432: i64;
  var $i433: i64;
  var $i434: i64;
  var $p435: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} ldv_mutex_lock_96($p3);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(744, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i5, $i6);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 375);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i9 := $slt.i64($i8, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(736, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} nct6775_update_fan_div_common($p2);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(753, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32(0, $i15);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb18;

  $bb18:
    call $p70, $i71, $i72, $i73, $i74, $i75, $p77, $p78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $p91, $i92, $i93, $i94, $i95, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $p104, $p105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $p114, $p115, $p116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $p124, $p125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p137, $i138, $i139, $i76, $i140, $i141, $i69 := nct6775_update_device_loop_$bb18($p0, $p2, $p70, $i71, $i72, $i73, $i74, $i75, $p77, $p78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $p91, $i92, $i93, $i94, $i95, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $p104, $p105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $p114, $p115, $p116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $p124, $p125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p137, $i138, $i139, $i76, $i140, $i141, $i69);
    goto $bb18_last;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i73 := $ashr.i32($i72, $i69);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 1);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i69);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p78, $mul.ref($i79, 2));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i84 := nct6775_read_value($p2, $i83);
    call {:si_unique_call 428} {:cexpr "reg"} boogie_si_record_i16($i84);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i84);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i69);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i89, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    call {:si_unique_call 429} $i94 := devirtbounce.5($p86, $i88, $i93);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i69);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(800, 1)), $mul.ref($i95, 4));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i94);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i101 := $ashr.i32($i100, $i69);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i69);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p116, $mul.ref($i117, 2));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.0, $p118);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i122 := nct6775_read_value($p2, $i121);
    call {:si_unique_call 432} {:cexpr "tmp___3"} boogie_si_record_i16($i122);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i69);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p125, $mul.ref($i126, 2));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.0, $p127);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i130 := $ashr.i32($i123, $i129);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 3);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i69);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(836, 1)), $mul.ref($i135, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, $i134);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i84);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} nct6775_select_fan_div($p0, $p2, $i69, $i139);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i76 := $i69;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i76, 1);
    call {:si_unique_call 426} {:cexpr "i"} boogie_si_record_i32($i140);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i141 := $ule.i32($i140, 5);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} nct6775_update_pwm($p0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} nct6775_update_pwm_limits($p0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i142 := 0;
    goto $bb30;

  $bb30:
    call $p143, $i144, $i145, $i146, $i147, $i148, $i151, $i152, $p155, $i156, $i157, $i158, $i159, $i160, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $p172, $i173, $i174, $i150, $i175, $p176, $i177, $i178, $i179, $i180, $i181, $p182, $p183, $i184, $p185, $i186, $i187, $i188, $i189, $i190, $i191, $p193, $i149, $i194, $i195, $i142 := nct6775_update_device_loop_$bb30($p2, $p143, $i144, $i145, $i146, $i147, $i148, $i151, $i152, $p155, $i156, $i157, $i158, $i159, $i160, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $p172, $i173, $i174, $i150, $i175, $p176, $i177, $i178, $i179, $i180, $i181, $p182, $p183, $i184, $p185, $i186, $i187, $i188, $i189, $i190, $i191, $p193, $i149, $i194, $i195, $i142);
    goto $bb30_last;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.0, $p143);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i146 := $ashr.i32($i145, $i142);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i150 := 0;
    goto $bb36;

  $bb36:
    call $i151, $i152, $p155, $i156, $i157, $i158, $i159, $i160, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $p172, $i173, $i174, $i150 := nct6775_update_device_loop_$bb36($p2, $i151, $i152, $p155, $i156, $i157, $i158, $i159, $i160, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $p172, $i173, $i174, $i150, $i142);
    goto $bb36_last;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i142);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i150);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref($i152, 20)), $mul.ref($i151, 2));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i156 := $load.i16($M.0, $p155);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i156);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i150, 1);
    call {:si_unique_call 439} {:cexpr "j"} boogie_si_record_i32($i173);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i174 := $ule.i32($i173, 4);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i175 := $sgt.i32($i142, 5);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume !($i175 == 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.0, $p176);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i177);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i179 := $ashr.i32($i178, $i142);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 1);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i142);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p183, $mul.ref($i184, 2));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i186 := $load.i16($M.0, $p185);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i186);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i16($i187);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i189 := nct6775_read_value($p2, $i188);
    call {:si_unique_call 441} {:cexpr "tmp___5"} boogie_si_record_i16($i189);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i16.i8($i189);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i142);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(861, 1)), $mul.ref($i191, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, $i190);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i149 := $i142;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i149, 1);
    call {:si_unique_call 436} {:cexpr "i"} boogie_si_record_i32($i194);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i195 := $sle.i32($i194, 9);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p196, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i199 := $load.i16($M.0, $p198);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i200 := $zext.i16.i32($i199);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i204 := $load.i16($M.0, $p203);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i204);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i16($i205);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i207 := nct6775_read_value($p2, $i206);
    call {:si_unique_call 443} {:cexpr "tmp___6"} boogie_si_record_i16($i207);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i16.i8($i207);
    call {:si_unique_call 444} {:cexpr "alarm"} boogie_si_record_i8($i208);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i64($i208);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i212 := $or.i64($i210, $i211);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p213, $i212);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p317, $mul.ref(1, 2));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i319 := $load.i16($M.0, $p318);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i320 := $zext.i16.i32($i319);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 0);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($p323, $mul.ref(1, 2));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i325 := $load.i16($M.0, $p324);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i326 := $zext.i16.i32($i325);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i16($i326);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i328 := nct6775_read_value($p2, $i327);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i16.i8($i328);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.0, $p330);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i332 := $zext.i8.i64($i329);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i333 := $shl.i64($i332, 8);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i334 := $or.i64($i331, $i333);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p335, $i334);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p337, $mul.ref(2, 2));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i339 := $load.i16($M.0, $p338);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i340 := $zext.i16.i32($i339);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 0);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p343, $mul.ref(2, 2));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i345 := $load.i16($M.0, $p344);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i346 := $zext.i16.i32($i345);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i32.i16($i346);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i348 := nct6775_read_value($p2, $i347);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i16.i8($i348);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.0, $p350);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i352 := $zext.i8.i64($i349);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i353 := $shl.i64($i352, 16);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i354 := $or.i64($i351, $i353);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p355, $i354);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($p357, $mul.ref(3, 2));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i359 := $load.i16($M.0, $p358);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i360 := $zext.i16.i32($i359);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($p363, $mul.ref(3, 2));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i365 := $load.i16($M.0, $p364);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i366 := $zext.i16.i32($i365);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i16($i366);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i368 := nct6775_read_value($p2, $i367);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i369 := $trunc.i16.i8($i368);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i371 := $load.i64($M.0, $p370);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i64($i369);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i373 := $shl.i64($i372, 24);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i374 := $or.i64($i371, $i373);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p375, $i374);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.0, $p376);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($p377, $mul.ref(4, 2));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i379 := $load.i16($M.0, $p378);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i380 := $zext.i16.i32($i379);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.0, $p382);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p383, $mul.ref(4, 2));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i385 := $load.i16($M.0, $p384);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i386 := $zext.i16.i32($i385);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i32.i16($i386);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i388 := nct6775_read_value($p2, $i387);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i389 := $trunc.i16.i8($i388);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i391 := $load.i64($M.0, $p390);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i392 := $zext.i8.i64($i389);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i393 := $shl.i64($i392, 32);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i394 := $or.i64($i391, $i393);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p395, $i394);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.0, $p396);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($p397, $mul.ref(5, 2));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i399 := $load.i16($M.0, $p398);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i400 := $zext.i16.i32($i399);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p403 := $load.ref($M.0, $p402);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($p403, $mul.ref(5, 2));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i405 := $load.i16($M.0, $p404);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i406 := $zext.i16.i32($i405);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i407 := $trunc.i32.i16($i406);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i408 := nct6775_read_value($p2, $i407);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i409 := $trunc.i16.i8($i408);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i411 := $load.i64($M.0, $p410);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i64($i409);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i413 := $shl.i64($i412, 40);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i414 := $or.i64($i411, $i413);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p415, $i414);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p417 := $load.ref($M.0, $p416);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($p417, $mul.ref(6, 2));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i419 := $load.i16($M.0, $p418);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i420 := $zext.i16.i32($i419);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i420, 0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(544, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p423 := $load.ref($M.0, $p422);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p423, $mul.ref(6, 2));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i425 := $load.i16($M.0, $p424);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i426 := $zext.i16.i32($i425);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i16($i426);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i428 := nct6775_read_value($p2, $i427);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i429 := $trunc.i16.i8($i428);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i431 := $load.i64($M.0, $p430);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i432 := $zext.i8.i64($i429);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i433 := $shl.i64($i432, 48);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i434 := $or.i64($i431, $i433);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p435, $i434);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p214, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.0, $p216);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.0, $p221);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i225 := nct6775_read_value($p2, $i224);
    call {:si_unique_call 446} {:cexpr "tmp___7"} boogie_si_record_i16($i225);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i16.i8($i225);
    call {:si_unique_call 447} {:cexpr "beep"} boogie_si_record_i8($i226);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i228 := $load.i64($M.0, $p227);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i64($i226);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i230 := $or.i64($i228, $i229);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p231, $i230);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p237, $mul.ref(1, 2));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i239 := $load.i16($M.0, $p238);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i239);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p243, $mul.ref(1, 2));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i245 := $load.i16($M.0, $p244);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i245);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i16($i246);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i248 := nct6775_read_value($p2, $i247);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i249 := $trunc.i16.i8($i248);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.0, $p250);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i64($i249);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i253 := $shl.i64($i252, 8);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i254 := $or.i64($i251, $i253);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p255, $i254);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p257, $mul.ref(2, 2));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i259 := $load.i16($M.0, $p258);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i260 := $zext.i16.i32($i259);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($p263, $mul.ref(2, 2));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i265 := $load.i16($M.0, $p264);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i265);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i16($i266);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i268 := nct6775_read_value($p2, $i267);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i269 := $trunc.i16.i8($i268);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i271 := $load.i64($M.0, $p270);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i64($i269);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i273 := $shl.i64($i272, 16);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i274 := $or.i64($i271, $i273);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p275, $i274);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p277, $mul.ref(3, 2));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i279 := $load.i16($M.0, $p278);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i279);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p283, $mul.ref(3, 2));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i285 := $load.i16($M.0, $p284);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i286 := $zext.i16.i32($i285);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i32.i16($i286);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i288 := nct6775_read_value($p2, $i287);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i16.i8($i288);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i291 := $load.i64($M.0, $p290);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i64($i289);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i293 := $shl.i64($i292, 24);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i294 := $or.i64($i291, $i293);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p295, $i294);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p297, $mul.ref(4, 2));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i299 := $load.i16($M.0, $p298);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i300 := $zext.i16.i32($i299);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.0, $p302);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($p303, $mul.ref(4, 2));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i305 := $load.i16($M.0, $p304);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i306 := $zext.i16.i32($i305);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i16($i306);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i308 := nct6775_read_value($p2, $i307);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i309 := $trunc.i16.i8($i308);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i311 := $load.i64($M.0, $p310);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i64($i309);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i313 := $shl.i64($i312, 32);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i314 := $or.i64($i311, $i313);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p315, $i314);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i232 := $load.i64($M.0, jiffies);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(744, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p233, $i232);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(736, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p234, 1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ldv_mutex_unlock_97($p235);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i301 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb80:
    assume $i281 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb75:
    assume $i261 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb70:
    assume $i241 == 1;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb63:
    assume $i219 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb114:
    assume $i421 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume $i401 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb104:
    assume $i381 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i361 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb94:
    assume $i341 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb89:
    assume $i321 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb55:
    assume $i201 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb50:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i142 := $i194;
    goto $bb50_dummy;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i149 := $i142;
    goto $bb34;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb45;

  $bb41:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $i150 := $i173;
    goto $bb41_dummy;

  $bb38:
    assume $i158 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i142);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i150);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref($i160, 20)), $mul.ref($i159, 2));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i164 := $load.i16($M.0, $p163);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i167 := nct6775_read_temp($p2, $i166);
    call {:si_unique_call 438} {:cexpr "tmp___4"} boogie_si_record_i16($i167);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i142);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i150);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref($i169, 20)), $mul.ref($i168, 2));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, $i167);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i148 == 1;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i149 := $i142;
    goto $bb34;

  $bb27:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i69 := $i140;
    goto $bb27_dummy;

  $bb24:
    assume $i103 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i69);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p105, $mul.ref($i106, 2));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i111 := nct6775_read_value($p2, $i110);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i69);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i112, 2));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p114, $i111);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i75 == 1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i76 := $i69;
    goto $bb22;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb9:
    call $p18, $i19, $i20, $i21, $i22, $i23, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $p36, $p38, $p39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $p50, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $p64, $i65, $i66, $i67, $i68, $i17 := nct6775_update_device_loop_$bb9($p2, $p13, $p18, $i19, $i20, $i21, $i22, $i23, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $p36, $p38, $p39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $p50, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $p64, $i65, $i66, $i67, $i68, $i17);
    goto $bb9_last;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i21 := $ashr.i32($i20, $i17);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 2));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i31 := nct6775_read_value($p2, $i30);
    call {:si_unique_call 421} {:cexpr "tmp___0"} boogie_si_record_i16($i31);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i16.i8($i31);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i17);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i33, 3)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i32);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i17);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 2));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i45 := nct6775_read_value($p2, $i44);
    call {:si_unique_call 423} {:cexpr "tmp___1"} boogie_si_record_i16($i45);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i16.i8($i45);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i17);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i47, 3)), $mul.ref(1, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i46);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i17);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 2));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i59 := nct6775_read_value($p2, $i58);
    call {:si_unique_call 425} {:cexpr "tmp___2"} boogie_si_record_i16($i59);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i16.i8($i59);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i17);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i61, 3)), $mul.ref(2, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i60);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i17, 1);
    call {:si_unique_call 419} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p13);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i65, $i67);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i68 == 1);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i65;
    goto $bb15_dummy;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb41_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4160;

  $bb50_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4145;

  $bb27_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4061;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;
}



const ldv_mutex_lock_142: ref;

axiom ldv_mutex_lock_142 == $sub.ref(0, 513516);

procedure ldv_mutex_lock_142($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_142($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_143: ref;

axiom ldv_mutex_unlock_143 == $sub.ref(0, 514548);

procedure ldv_mutex_unlock_143($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_143($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_96: ref;

axiom ldv_mutex_lock_96 == $sub.ref(0, 515580);

procedure ldv_mutex_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const nct6775_select_fan_div: ref;

axiom nct6775_select_fan_div == $sub.ref(0, 516612);

procedure nct6775_select_fan_div($p0: ref, $p1: ref, $i2: i32, $i3: i16);
  free requires assertsPassed;
  modifies $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.0, $CurrAddr;



implementation nct6775_select_fan_div($p0: ref, $p1: ref, $i2: i32, $i3: i16)
{
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i8;
  var $i19: i8;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i64;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $i87: i16;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i1;
  var $i96: i16;
  var $i97: i16;
  var $i88: i16;
  var $i98: i32;
  var $i99: i64;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $i105: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i118: i64;
  var $p120: ref;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 463} {:cexpr "nct6775_select_fan_div:arg:nr"} boogie_si_record_i32($i2);
    call {:si_unique_call 464} {:cexpr "nct6775_select_fan_div:arg:reg"} boogie_si_record_i16($i3);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i5, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 465} {:cexpr "fan_div"} boogie_si_record_i8($i8);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i3);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i3);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 46);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $i8;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i19);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i2);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i30, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i29, $i34);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p36, .str.1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p37, .str.17);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p38, .str.3);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p39, .str.18);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.24, $p41);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 1254);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.24 := $store.i24($M.24, $p41, $i44);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p45, 1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.25, $p46);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 469} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i66 := $ashr.i32($i65, $i2);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i2);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i118, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i19);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} nct6775_write_fan_div_common($p1, $i2);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i2);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i69, 2));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    call {:si_unique_call 475} {:cexpr "fan_min"} boogie_si_record_i16($i72);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i19);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i2);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i74, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i73, $i78);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i72);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 255);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i72;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i88 := $i97;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i88);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i2);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i99, 2));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i98, $i103);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i104 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i2);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i105, 2));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p107, $i88);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i2);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p109, $mul.ref($i110, 2));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.0, $p111);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i88);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_42 := nct6775_write_value($p1, $i114, $i116);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i90 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i72);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i92 := $shl.i32($i91, 1);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    call {:si_unique_call 477} {:cexpr "fan_min"} boogie_si_record_i16($i93);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 254);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i93;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb38;

  $bb35:
    assume $i95 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i96 := 254;
    goto $bb37;

  $bb24:
    assume $i79 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i72);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 255);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i87 := $i72;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i88 := $i87;
    goto $bb32;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i72);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i83 := $ugt.i32($i82, 1);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb28;

  $bb29:
    assume $i83 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i72);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i85 := $ashr.i32($i84, 1);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    call {:si_unique_call 476} {:cexpr "fan_min"} boogie_si_record_i16($i86);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb31;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i19);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i54 := div_from_reg($i53);
    call {:si_unique_call 471} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i2);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i55, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i61 := div_from_reg($i60);
    call {:si_unique_call 473} {:cexpr "tmp___0"} boogie_si_record_i32($i61);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i2, 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p4, $p0, .str.18, $i62, $i61, $i54);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i8);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i8);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 467} {:cexpr "fan_div"} boogie_si_record_i8($i27);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i8);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i15 := $ule.i32($i14, 6);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i8);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 466} {:cexpr "fan_div"} boogie_si_record_i8($i18);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb10;
}



const nct6775_update_pwm: ref;

axiom nct6775_update_pwm == $sub.ref(0, 517644);

procedure nct6775_update_pwm($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_update_pwm($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i43: i1;
  var $i44: i8;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $i55: i16;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i16;
  var $i78: i16;
  var $i79: i8;
  var $i80: i64;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i64;
  var $p95: ref;
  var $i96: i64;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i103: i64;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i8;
  var $i112: i64;
  var $p115: ref;
  var $i116: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i8;
  var $i127: i32;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i16;
  var $i141: i16;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i8;
  var $i150: i8;
  var $i151: i32;
  var $i152: i64;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i16;
  var $i162: i16;
  var $i163: i8;
  var $i164: i64;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i16;
  var $i175: i16;
  var $i176: i32;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i8;
  var $i181: i64;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $i186: i64;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $i201: i16;
  var $i202: i32;
  var $i203: i16;
  var $i204: i16;
  var $i205: i32;
  var $i206: i8;
  var $i207: i32;
  var $i208: i32;
  var $i209: i8;
  var $i210: i64;
  var $p212: ref;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i64;
  var $p218: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i64;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $i226: i16;
  var $i227: i16;
  var $i228: i8;
  var $i229: i64;
  var $p232: ref;
  var $i14: i32;
  var $i233: i32;
  var $i234: i8;
  var $i235: i32;
  var $i236: i1;
  var $i7: i32;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $p246: ref;
  var $i247: i16;
  var $i248: i32;
  var $i249: i1;
  var $p251: ref;
  var $p252: ref;
  var $i253: i64;
  var $p254: ref;
  var $i255: i16;
  var $i256: i32;
  var $i257: i16;
  var $i258: i16;
  var $i259: i8;
  var $i260: i64;
  var $p263: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i64;
  var $i268: i1;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $p273: ref;
  var $i274: i16;
  var $i275: i32;
  var $i276: i1;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $p281: ref;
  var $i282: i16;
  var $i283: i32;
  var $i284: i16;
  var $i285: i16;
  var $i286: i8;
  var $i287: i64;
  var $p290: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i64;
  var $i295: i1;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $p300: ref;
  var $i301: i16;
  var $i302: i32;
  var $i303: i1;
  var $p305: ref;
  var $p306: ref;
  var $i307: i64;
  var $p308: ref;
  var $i309: i16;
  var $i310: i32;
  var $i311: i16;
  var $i312: i16;
  var $i313: i8;
  var $i314: i64;
  var $p317: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i1;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $p327: ref;
  var $i328: i16;
  var $i329: i32;
  var $i330: i1;
  var $p332: ref;
  var $p333: ref;
  var $i334: i64;
  var $p335: ref;
  var $i336: i16;
  var $i337: i32;
  var $i338: i16;
  var $i339: i16;
  var $i340: i8;
  var $i341: i64;
  var $p344: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i64;
  var $i349: i1;
  var $p351: ref;
  var $p352: ref;
  var $i353: i64;
  var $p354: ref;
  var $i355: i16;
  var $i356: i32;
  var $i357: i1;
  var $p359: ref;
  var $p360: ref;
  var $i361: i64;
  var $p362: ref;
  var $i363: i16;
  var $i364: i32;
  var $i365: i16;
  var $i366: i16;
  var $i367: i8;
  var $i368: i64;
  var $p371: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $p381: ref;
  var $i382: i16;
  var $i383: i32;
  var $i384: i1;
  var $p386: ref;
  var $p387: ref;
  var $i388: i64;
  var $p389: ref;
  var $i390: i16;
  var $i391: i32;
  var $i392: i16;
  var $i393: i16;
  var $i394: i8;
  var $i395: i64;
  var $p398: ref;
  var $p400: ref;
  var $p401: ref;
  var $i402: i64;
  var $p403: ref;
  var $i404: i16;
  var $i405: i32;
  var $i406: i16;
  var $i407: i16;
  var $i408: i8;
  var $i409: i64;
  var $p412: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i64;
  var $p417: ref;
  var $i418: i16;
  var $i419: i32;
  var $i420: i16;
  var $i421: i16;
  var $i422: i8;
  var $i423: i64;
  var $p426: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $p58, $p59, $i60, $i61, $p63, $p64, $i65, $p66, $i67, $i68, $i69, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $p83, $i84, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $p95, $i96, $p99, $i100, $i101, $i102, $i103, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p115, $i116, $p118, $i119, $i120, $i121, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $p134, $p135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $p154, $p155, $p156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $p167, $p168, $p169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $p183, $i184, $i185, $i186, $p189, $p190, $p191, $i192, $p193, $i194, $i195, $i196, $p197, $p198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p212, $i213, $i214, $i215, $i216, $p218, $p220, $p221, $i222, $p223, $i224, $i225, $i226, $i227, $i228, $i229, $p232, $i14, $i233, $i234, $i235, $i236, $i7, $p238, $p239, $i240, $i241, $p243, $p244, $i245, $p246, $i247, $i248, $i249, $p251, $p252, $i253, $p254, $i255, $i256, $i257, $i258, $i259, $i260, $p263, $p265, $p266, $i267, $i268, $p270, $p271, $i272, $p273, $i274, $i275, $i276, $p278, $p279, $i280, $p281, $i282, $i283, $i284, $i285, $i286, $i287, $p290, $p292, $p293, $i294, $i295, $p297, $p298, $i299, $p300, $i301, $i302, $i303, $p305, $p306, $i307, $p308, $i309, $i310, $i311, $i312, $i313, $i314, $p317, $p319, $p320, $i321, $i322, $p324, $p325, $i326, $p327, $i328, $i329, $i330, $p332, $p333, $i334, $p335, $i336, $i337, $i338, $i339, $i340, $i341, $p344, $p346, $p347, $i348, $i349, $p351, $p352, $i353, $p354, $i355, $i356, $i357, $p359, $p360, $i361, $p362, $i363, $i364, $i365, $i366, $i367, $i368, $p371, $p373, $p374, $i375, $i376, $p378, $p379, $i380, $p381, $i382, $i383, $i384, $p386, $p387, $i388, $p389, $i390, $i391, $i392, $i393, $i394, $i395, $p398, $p400, $p401, $i402, $p403, $i404, $i405, $i406, $i407, $i408, $i409, $p412, $p414, $p415, $i416, $p417, $i418, $i419, $i420, $i421, $i422, $i423, $p426 := nct6775_update_pwm_loop_$bb4($p2, $p3, $p8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $p58, $p59, $i60, $i61, $p63, $p64, $i65, $p66, $i67, $i68, $i69, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $p83, $i84, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $p95, $i96, $p99, $i100, $i101, $i102, $i103, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p115, $i116, $p118, $i119, $i120, $i121, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $p134, $p135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $p154, $p155, $p156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $p167, $p168, $p169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $p183, $i184, $i185, $i186, $p189, $p190, $p191, $i192, $p193, $i194, $i195, $i196, $p197, $p198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p212, $i213, $i214, $i215, $i216, $p218, $p220, $p221, $i222, $p223, $i224, $i225, $i226, $i227, $i228, $i229, $p232, $i14, $i233, $i234, $i235, $i236, $i7, $p238, $p239, $i240, $i241, $p243, $p244, $i245, $p246, $i247, $i248, $i249, $p251, $p252, $i253, $p254, $i255, $i256, $i257, $i258, $i259, $i260, $p263, $p265, $p266, $i267, $i268, $p270, $p271, $i272, $p273, $i274, $i275, $i276, $p278, $p279, $i280, $p281, $i282, $i283, $i284, $i285, $i286, $i287, $p290, $p292, $p293, $i294, $i295, $p297, $p298, $i299, $p300, $i301, $i302, $i303, $p305, $p306, $i307, $p308, $i309, $i310, $i311, $i312, $i313, $i314, $p317, $p319, $p320, $i321, $i322, $p324, $p325, $i326, $p327, $i328, $i329, $i330, $p332, $p333, $i334, $p335, $i336, $i337, $i338, $i339, $i340, $i341, $p344, $p346, $p347, $i348, $i349, $p351, $p352, $i353, $p354, $i355, $i356, $i357, $p359, $p360, $i361, $p362, $i363, $i364, $i365, $i366, $i367, $i368, $p371, $p373, $p374, $i375, $i376, $p378, $p379, $i380, $p381, $i382, $i383, $i384, $p386, $p387, $i388, $p389, $i390, $i391, $i392, $i393, $i394, $i395, $p398, $p400, $p401, $i402, $p403, $i404, $i405, $i406, $i407, $i408, $i409, $p412, $p414, $p415, $i416, $p417, $i418, $i419, $i420, $i421, $i422, $i423, $p426);
    goto $bb4_last;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(848, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, $i7);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i7);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i41);
    call {:si_unique_call 484} {:cexpr "duty_is_dc"} boogie_si_record_i8($i42);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i7);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(985, 1)), $mul.ref($i45, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i44);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i7);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref($i50, 2));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i55 := nct6775_read_value($p2, $i54);
    call {:si_unique_call 486} {:cexpr "tmp___2"} boogie_si_record_i16($i55);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    call {:si_unique_call 487} {:cexpr "fanmodecfg"} boogie_si_record_i32($i56);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i241 := $ne.i64($i240, 0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.0, $p292);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p293);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i295 := $ne.i64($i294, 0);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p320);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i322 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i348 := $p2i.ref.i64($p347);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i349 := $ne.i64($i348, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.0, $p373);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p374);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i376 := $ne.i64($i375, 0);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i376 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i7);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(0, 6)), $mul.ref($i84, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i90 := $ashr.i32($i56, 4);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 7);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i92 := reg_to_pwm_enable($i89, $i91);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i7);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i93, 4));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i92);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i7);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(0, 6)), $mul.ref($i96, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i102 == 1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i7);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i103, 4));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 3);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i7);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i116, 4));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i120 == 1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i7);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i121, 4));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 3);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i7);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p156, $mul.ref($i157, 2));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.0, $p158);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i16($i160);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i162 := nct6775_read_value($p2, $i161);
    call {:si_unique_call 496} {:cexpr "tmp___5"} boogie_si_record_i16($i162);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i16.i8($i162);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i7);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(1, 6)), $mul.ref($i164, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, $i163);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i7);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p169, $mul.ref($i170, 2));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i16($i173);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i175 := nct6775_read_value($p2, $i174);
    call {:si_unique_call 498} {:cexpr "tmp___6"} boogie_si_record_i16($i175);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i176 := $zext.i16.i32($i175);
    call {:si_unique_call 499} {:cexpr "reg"} boogie_si_record_i32($i176);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i8($i176);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i179 := $and.i32($i178, 31);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i8($i179);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64($i7);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1236, 1)), $mul.ref($i181, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, $i180);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i176, 128);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i7);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p191, $mul.ref($i192, 2));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i199 := $sext.i32.i64($i7);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p198, $mul.ref($i199, 2));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i201 := $load.i16($M.0, $p200);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i202 := $zext.i16.i32($i201);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i16($i202);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i204 := nct6775_read_value($p2, $i203);
    call {:si_unique_call 501} {:cexpr "tmp___7"} boogie_si_record_i16($i204);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i204);
    call {:si_unique_call 502} {:cexpr "reg"} boogie_si_record_i32($i205);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i8($i205);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 31);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i7);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref($i210, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p212, $i209);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32(7, 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i7);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p221, $mul.ref($i222, 2));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.0, $p223);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i224);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i32.i16($i225);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i227 := nct6775_read_value($p2, $i226);
    call {:si_unique_call 504} {:cexpr "tmp___8"} boogie_si_record_i16($i227);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i16.i8($i227);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i7);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref(0, 6)), $mul.ref($i229, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, $i228);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i402 := $sext.i32.i64($i7);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($p401, $mul.ref($i402, 2));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i404 := $load.i16($M.0, $p403);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i405 := $zext.i16.i32($i404);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i406 := $trunc.i32.i16($i405);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i407 := nct6775_read_value($p2, $i406);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i408 := $trunc.i16.i8($i407);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i409 := $sext.i32.i64($i7);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref(1, 6)), $mul.ref($i409, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p412, $i408);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.0, $p414);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i416 := $sext.i32.i64($i7);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($p415, $mul.ref($i416, 2));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i418 := $load.i16($M.0, $p417);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i419 := $zext.i16.i32($i418);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i32.i16($i419);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i421 := nct6775_read_value($p2, $i420);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i422 := $trunc.i16.i8($i421);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i7);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref(2, 6)), $mul.ref($i423, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p426, $i422);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i14, 1);
    call {:si_unique_call 481} {:cexpr "i"} boogie_si_record_i32($i233);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.0, $p3);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i234);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i233, $i235);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i236 == 1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb57:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i233;
    goto $bb57_dummy;

  $bb47:
    assume $i213 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i205, 128);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb49;

  $bb50:
    assume $i215 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i216 := $sext.i32.i64($i7);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref($i216, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p218, 0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i196 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb8;

  $bb41:
    assume $i185 == 1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64($i7);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(2, 6)), $mul.ref($i186, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p189, 0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i56);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 15);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    call {:si_unique_call 491} {:cexpr "t"} boogie_si_record_i8($i129);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i150 := $i129;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i7);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i152, 4));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, $i151);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i133 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i7);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p135, $mul.ref($i136, 2));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.0, $p137);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i141 := nct6775_read_value($p2, $i140);
    call {:si_unique_call 493} {:cexpr "tmp___4"} boogie_si_record_i16($i141);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i142 := $sext.i8.i32($i129);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i141);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 112);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i145 := $ashr.i32($i144, 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i8($i145);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i147 := $sext.i8.i32($i146);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i148 := $or.i32($i142, $i147);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    call {:si_unique_call 494} {:cexpr "t"} boogie_si_record_i8($i149);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i150 := $i149;
    goto $bb39;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb33;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i56);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 15);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i7);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(0, 6)), $mul.ref($i112, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, $i111);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb27;

  $bb95:
    assume $i376 == 1;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.0, $p378);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i380 := $sext.i32.i64($i7);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($p379, $mul.ref($i380, 2));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i382 := $load.i16($M.0, $p381);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i383 := $zext.i16.i32($i382);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i384 := $ne.i32($i383, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i384 == 1);
    goto $bb97;

  $bb98:
    assume $i384 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i388 := $sext.i32.i64($i7);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($p387, $mul.ref($i388, 2));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i390 := $load.i16($M.0, $p389);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i391 := $zext.i16.i32($i390);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i392 := $trunc.i32.i16($i391);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i393 := nct6775_read_value($p2, $i392);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i394 := $trunc.i16.i8($i393);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i395 := $sext.i32.i64($i7);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(6, 6)), $mul.ref($i395, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p398, $i394);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb88:
    assume $i349 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i353 := $sext.i32.i64($i7);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p352, $mul.ref($i353, 2));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i355 := $load.i16($M.0, $p354);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i356 := $zext.i16.i32($i355);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i357 == 1);
    goto $bb90;

  $bb91:
    assume $i357 == 1;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i361 := $sext.i32.i64($i7);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p360, $mul.ref($i361, 2));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i363 := $load.i16($M.0, $p362);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i364 := $zext.i16.i32($i363);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i16($i364);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i366 := nct6775_read_value($p2, $i365);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i16.i8($i366);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i368 := $sext.i32.i64($i7);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(5, 6)), $mul.ref($i368, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p371, $i367);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb81:
    assume $i322 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i7);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p325, $mul.ref($i326, 2));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i328 := $load.i16($M.0, $p327);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i329 := $zext.i16.i32($i328);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb83;

  $bb84:
    assume $i330 == 1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.0, $p332);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i334 := $sext.i32.i64($i7);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($p333, $mul.ref($i334, 2));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i336 := $load.i16($M.0, $p335);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i337 := $zext.i16.i32($i336);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i16($i337);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i339 := nct6775_read_value($p2, $i338);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i16.i8($i339);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i341 := $sext.i32.i64($i7);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(4, 6)), $mul.ref($i341, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p344, $i340);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb74:
    assume $i295 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i7);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($p298, $mul.ref($i299, 2));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i301 := $load.i16($M.0, $p300);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i301);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i303 := $ne.i32($i302, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb76;

  $bb77:
    assume $i303 == 1;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i307 := $sext.i32.i64($i7);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p306, $mul.ref($i307, 2));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i309 := $load.i16($M.0, $p308);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i310 := $zext.i16.i32($i309);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i32.i16($i310);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i312 := nct6775_read_value($p2, $i311);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i16.i8($i312);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i314 := $sext.i32.i64($i7);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(3, 6)), $mul.ref($i314, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p317, $i313);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb67:
    assume $i268 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i272 := $sext.i32.i64($i7);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p271, $mul.ref($i272, 2));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i274 := $load.i16($M.0, $p273);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i275 := $zext.i16.i32($i274);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb69;

  $bb70:
    assume $i276 == 1;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i280 := $sext.i32.i64($i7);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p279, $mul.ref($i280, 2));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i282 := $load.i16($M.0, $p281);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i283 := $zext.i16.i32($i282);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i32.i16($i283);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i285 := nct6775_read_value($p2, $i284);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i16.i8($i285);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i287 := $sext.i32.i64($i7);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(2, 6)), $mul.ref($i287, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p290, $i286);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb60:
    assume $i241 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i245 := $sext.i32.i64($i7);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p244, $mul.ref($i245, 2));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i247 := $load.i16($M.0, $p246);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i248 := $zext.i16.i32($i247);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i249 := $ne.i32($i248, 0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb62;

  $bb63:
    assume $i249 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i253 := $sext.i32.i64($i7);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p252, $mul.ref($i253, 2));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i255 := $load.i16($M.0, $p254);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i256 := $zext.i16.i32($i255);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i16($i256);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i258 := nct6775_read_value($p2, $i257);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i16.i8($i258);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i7);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(1, 6)), $mul.ref($i260, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p263, $i259);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i7);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p64, $mul.ref($i65, 2));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb20;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i7);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p72, $mul.ref($i73, 2));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i78 := nct6775_read_value($p2, $i77);
    call {:si_unique_call 489} {:cexpr "tmp___3"} boogie_si_record_i16($i78);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i16.i8($i78);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i7);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(0, 6)), $mul.ref($i80, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, $i79);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i7);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i29 := nct6775_read_value($p2, $i28);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i16($i29);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i7);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i30, $i36);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb15;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb14;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb8;

  $bb57_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4692;
}



const nct6775_update_pwm_limits: ref;

axiom nct6775_update_pwm_limits == $sub.ref(0, 518676);

procedure nct6775_update_pwm_limits($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_update_pwm_limits($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i16;
  var $i24: i8;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $i36: i16;
  var $i37: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $i55: i64;
  var $p57: ref;
  var $i58: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i16;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i16;
  var $i88: i16;
  var $i89: i32;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i16;
  var $i107: i16;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i16;
  var $i121: i32;
  var $i122: i32;
  var $i123: i16;
  var $i124: i16;
  var $i125: i8;
  var $i126: i64;
  var $i127: i64;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i96: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i16;
  var $i141: i16;
  var $i142: i8;
  var $p143: ref;
  var $i144: i32;
  var $i145: i64;
  var $i146: i64;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i64;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i16;
  var $i173: i16;
  var $i174: i8;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i8;
  var $p180: ref;
  var $i181: i32;
  var $i182: i64;
  var $i183: i64;
  var $p186: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $i191: i64;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p198: ref;
  var $i199: i16;
  var $i200: i32;
  var $i201: i16;
  var $i202: i16;
  var $i203: i8;
  var $i204: i32;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $p213: ref;
  var $i214: i16;
  var $i215: i32;
  var $i216: i16;
  var $i217: i16;
  var $i218: i8;
  var $i219: i8;
  var $p220: ref;
  var $i221: i32;
  var $i222: i64;
  var $i223: i64;
  var $p226: ref;
  var $i187: i32;
  var $i14: i32;
  var $i227: i32;
  var $i228: i8;
  var $i229: i32;
  var $i230: i1;
  var $i7: i32;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $p235: ref;
  var $i236: i16;
  var $i237: i32;
  var $i238: i16;
  var $i239: i16;
  var $i240: i8;
  var $i241: i64;
  var $p244: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i64;
  var $p249: ref;
  var $i250: i16;
  var $i251: i32;
  var $i252: i16;
  var $i253: i16;
  var $i254: i8;
  var $i255: i64;
  var $p258: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(984, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $i12, $i13, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $p57, $i58, $p60, $i61, $i62, $i63, $p65, $i66, $i67, $p68, $p69, $i70, $i71, $p72, $p73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p92, $p93, $i94, $i95, $p97, $p98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p113, $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p130, $i131, $i132, $i133, $i96, $p134, $p135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $p143, $i144, $i145, $i146, $p149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $p186, $p188, $i189, $i190, $i191, $p194, $p195, $p196, $i197, $p198, $i199, $i200, $i201, $i202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $p210, $p211, $i212, $p213, $i214, $i215, $i216, $i217, $i218, $i219, $p220, $i221, $i222, $i223, $p226, $i187, $i14, $i227, $i228, $i229, $i230, $i7, $p232, $p233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $p244, $p246, $p247, $i248, $p249, $i250, $i251, $i252, $i253, $i254, $i255, $p258 := nct6775_update_pwm_limits_loop_$bb4($p2, $p3, $p8, $i9, $i10, $i11, $i12, $i13, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $p57, $i58, $p60, $i61, $i62, $i63, $p65, $i66, $i67, $p68, $p69, $i70, $i71, $p72, $p73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p92, $p93, $i94, $i95, $p97, $p98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p113, $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p130, $i131, $i132, $i133, $i96, $p134, $p135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $p143, $i144, $i145, $i146, $p149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $p186, $p188, $i189, $i190, $i191, $p194, $p195, $p196, $i197, $p198, $i199, $i200, $i201, $i202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $p210, $p211, $i212, $p213, $i214, $i215, $i216, $i217, $i218, $i219, $p220, $i221, $i222, $i223, $p226, $i187, $i14, $i227, $i228, $i229, $i230, $i7, $p232, $p233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $p244, $p246, $p247, $i248, $p249, $i250, $i251, $i252, $i253, $i254, $i255, $p258);
    goto $bb4_last;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(848, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, $i7);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i7);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 2));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i23 := nct6775_read_value($p2, $i22);
    call {:si_unique_call 516} {:cexpr "tmp___0"} boogie_si_record_i16($i23);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i16.i8($i23);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i7);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref(0, 6)), $mul.ref($i25, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i24);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i234 := $sext.i32.i64($i7);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p233, $mul.ref($i234, 2));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.0, $p235);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i32.i16($i237);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i239 := nct6775_read_value($p2, $i238);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i16.i8($i239);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i7);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref(1, 6)), $mul.ref($i241, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p244, $i240);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i248 := $sext.i32.i64($i7);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p247, $mul.ref($i248, 2));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i250 := $load.i16($M.0, $p249);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i251 := $zext.i16.i32($i250);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i16($i251);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i253 := nct6775_read_value($p2, $i252);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i254 := $trunc.i16.i8($i253);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i7);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref(2, 6)), $mul.ref($i255, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p258, $i254);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i7);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 2));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i36 := nct6775_read_value($p2, $i35);
    call {:si_unique_call 519} {:cexpr "reg_t"} boogie_si_record_i16($i36);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i7);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref($i37, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i7);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i43, 4));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i7);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i58, 4));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i62 == 1);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i7);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i63, 4));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 3);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32(0, $i94);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i7);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p135, $mul.ref($i136, 2));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.0, $p137);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i141 := nct6775_read_value($p2, $i140);
    call {:si_unique_call 529} {:cexpr "tmp___4"} boogie_si_record_i16($i141);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i16.i8($i141);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i144);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i7);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i146, 7)), $mul.ref($i145, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, $i142);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 1);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 2);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 4);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 5);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i187 := $i7;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i14 := $i187;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i227 := $add.i32($i14, 1);
    call {:si_unique_call 514} {:cexpr "i"} boogie_si_record_i32($i227);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.0, $p3);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i230 := $slt.i32($i227, $i229);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i230 == 1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb66:
    assume $i230 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i227;
    goto $bb66_dummy;

  $bb57:
    assume $i167 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i7);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p196, $mul.ref($i197, 2));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i199 := $load.i16($M.0, $p198);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i200 := $zext.i16.i32($i199);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i202 := nct6775_read_value($p2, $i201);
    call {:si_unique_call 534} {:cexpr "tmp___6"} boogie_si_record_i16($i202);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i16.i8($i202);
    call {:si_unique_call 535} {:cexpr "reg"} boogie_si_record_i8($i203);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.0, $p205);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i204, $i207);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i219 := $sub.i8(0, 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i221);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i7);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i223, 7)), $mul.ref($i222, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p226, $i219);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i187 := $i7;
    goto $bb62;

  $bb63:
    assume $i209 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(448, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i212 := $sext.i32.i64($i7);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p211, $mul.ref($i212, 2));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i214 := $load.i16($M.0, $p213);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i215 := $zext.i16.i32($i214);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i16($i215);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i217 := nct6775_read_value($p2, $i216);
    call {:si_unique_call 537} {:cexpr "tmp___7"} boogie_si_record_i16($i217);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i16.i8($i217);
    call {:si_unique_call 538} {:cexpr "reg"} boogie_si_record_i8($i218);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i219 := $i218;
    goto $bb65;

  $bb53:
    assume $i164 == 1;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb49:
    assume $i161 == 1;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i158 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb41:
    assume $i155 == 1;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i189);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i7);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i191, 7)), $mul.ref($i190, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p194, $sub.i8(0, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i187 := $i7;
    goto $bb62;

  $bb37:
    assume $i152 == 1;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i7);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref(NCT6775_REG_CRITICAL_ENAB, $mul.ref(0, 6)), $mul.ref($i168, 2));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.26, $p169);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i173 := nct6775_read_value($p2, $i172);
    call {:si_unique_call 531} {:cexpr "tmp___5"} boogie_si_record_i16($i173);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i16.i8($i173);
    call {:si_unique_call 532} {:cexpr "reg"} boogie_si_record_i8($i174);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 2);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i178 := (if $i177 == 1 then 255 else 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i181);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i7);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i183, 7)), $mul.ref($i182, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p186, $i179);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i187 := $i7;
    goto $bb62;

  $bb29:
    assume $i95 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb32;

  $bb32:
    call $p97, $p98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p113, $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p130, $i131, $i132, $i133, $i96 := nct6775_update_pwm_limits_loop_$bb32($p2, $p93, $p97, $p98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p113, $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p130, $i131, $i132, $i133, $i96, $i7);
    goto $bb32_last;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i7);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p98, $mul.ref($i99, 2));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i96);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i102, $i104);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i107 := nct6775_read_value($p2, $i106);
    call {:si_unique_call 524} {:cexpr "tmp___2"} boogie_si_record_i16($i107);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i16.i8($i107);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i96);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i7);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i110, 7)), $mul.ref($i109, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, $i108);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i7);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p115, $mul.ref($i116, 2));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.0, $p117);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i96);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i119, $i121);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i124 := nct6775_read_value($p2, $i123);
    call {:si_unique_call 526} {:cexpr "tmp___3"} boogie_si_record_i16($i124);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i16.i8($i124);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i96);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i7);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i127, 7)), $mul.ref($i126, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, $i125);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i96, 1);
    call {:si_unique_call 527} {:cexpr "j"} boogie_si_record_i32($i131);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p93);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i131, $i132);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i133 == 1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i96 := $i131;
    goto $bb34_dummy;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i36;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i7);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i90, 4));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i89);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i7);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p73, $mul.ref($i74, 2));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i79 := nct6775_read_value($p2, $i78);
    call {:si_unique_call 521} {:cexpr "tmp___1"} boogie_si_record_i16($i79);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i80 := $sext.i16.i32($i36);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i79);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 15);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 8);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i85 := $sext.i16.i32($i84);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i80, $i85);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    call {:si_unique_call 522} {:cexpr "reg_t"} boogie_si_record_i16($i87);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i88 := $i87;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i16.i8($i36);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i49, $i52);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i7);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref($i55, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i54);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb15;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb8;

  $bb34_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  $bb66_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5151;
}



const nct6775_read_temp: ref;

axiom nct6775_read_temp == $sub.ref(0, 519708);

procedure nct6775_read_temp($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_read_temp($p0: ref, $i1: i16) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} {:cexpr "nct6775_read_temp:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i4 := nct6775_read_value($p0, $i3);
    call {:si_unique_call 542} {:cexpr "res"} boogie_si_record_i16($i4);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i7 := is_word_sized($p0, $i6);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 544} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i4);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 8);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 545} {:cexpr "res"} boogie_si_record_i16($i14);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const ldv_mutex_unlock_97: ref;

axiom ldv_mutex_unlock_97 == $sub.ref(0, 520740);

procedure ldv_mutex_unlock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const reg_to_pwm_enable: ref;

axiom reg_to_pwm_enable == $sub.ref(0, 521772);

procedure reg_to_pwm_enable($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation reg_to_pwm_enable($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i5: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "reg_to_pwm_enable:arg:pwm"} boogie_si_record_i32($i0);
    call {:si_unique_call 548} {:cexpr "reg_to_pwm_enable:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, 1);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 255);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;
}



const div_from_reg: ref;

axiom div_from_reg == $sub.ref(0, 522804);

procedure div_from_reg($i0: i8) returns ($r: i32);
  free requires assertsPassed;



implementation div_from_reg($i0: i8) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "div_from_reg:arg:reg"} boogie_si_record_i8($i0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32(1, $i1);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 523836);

procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    return;
}



const nct6775_pwm_is_visible: ref;

axiom nct6775_pwm_is_visible == $sub.ref(0, 524868);

procedure nct6775_pwm_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation nct6775_pwm_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} {:cexpr "nct6775_pwm_is_visible:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1416));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p5 := dev_get_drvdata($p4);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i7 := $sdiv.i32($i2, 36);
    call {:si_unique_call 552} {:cexpr "pwm"} boogie_si_record_i32($i7);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i8 := $srem.i32($i2, 36);
    call {:si_unique_call 553} {:cexpr "nr"} boogie_si_record_i32($i8);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(848, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i11, $i7);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i8, 14);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i17 := $ule.i32($i16, 4);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i8, 21);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i8, 19);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i8, 20);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i8, 21);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i8, 22);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i45 := $ule.i32($i44, 13);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i15 := $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i8, $sub.i32(0, 22));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i47 := $sdiv.i32($i46, 2);
    call {:si_unique_call 554} {:cexpr "api"} boogie_si_record_i32($i47);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i47, $i49);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i50 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb28;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb22;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i7);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 2));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const show_pwm: ref;

axiom show_pwm == $sub.ref(0, 525900);

procedure show_pwm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_pwm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $i25: i32;
  var $i27: i64;
  var $i28: i64;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i26: i32;
  var $i34: i32;
  var $i35: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p3 := nct6775_update_device($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 556} {:cexpr "nr"} boogie_si_record_i32($i7);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 557} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i7);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i10);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref($i28, 6)), $mul.ref($i27, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    call {:si_unique_call 558} {:cexpr "pwm"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    $i26 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i34 := sprintf.ref.ref.i32($p2, .str.16, $i26);
    call {:si_unique_call 563} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i12, 4));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 1);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(424, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i7);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 2));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i24 := nct6775_read_value($p3, $i23);
    call {:si_unique_call 560} {:cexpr "tmp___0"} boogie_si_record_i16($i24);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 561} {:cexpr "pwm"} boogie_si_record_i32($i25);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const store_pwm: ref;

axiom store_pwm == $sub.ref(0, 526932);

procedure store_pwm($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_pwm($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $p76: ref;
  var $i77: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i16;
  var $i86: i64;
  var $i87: i16;
  var $i88: i32;
  var $i89: i16;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i16;
  var $i99: i16;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i64;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $i109: i8;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i117: i32;
  var $i118: i16;
  var $p120: ref;
  var $i55: i64;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p5 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p6 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 567} {:cexpr "store_pwm:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p7 := dev_get_drvdata($p0);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    call {:si_unique_call 569} {:cexpr "nr"} boogie_si_record_i32($i12);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    call {:si_unique_call 570} {:cexpr "index"} boogie_si_record_i32($i15);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(0, 4));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p16, 0);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(1, 4));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p17, 1);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(2, 4));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p18, 1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i12);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(2, 6)), $mul.ref($i19, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(3, 4));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p25, $i24);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(4, 4));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p26, 0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(5, 4));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p27, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(6, 4));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p28, 0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 4));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p29, 255);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(1, 4));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p30, 255);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i12);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(3, 6)), $mul.ref($i31, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i37 == 1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i46 := 255;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(2, 4));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p47, $i46);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(3, 4));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p48, 255);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(4, 4));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p49, 255);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(5, 4));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p50, 255);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(6, 4));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p51, 255);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i52 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 572} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.29, $p4);
    call {:si_unique_call 573} {:cexpr "__max1"} boogie_si_record_i64($i56);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i15);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref($i57, 4));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.27, $p58);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    call {:si_unique_call 574} {:cexpr "__max2"} boogie_si_record_i64($i60);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i64($i56, $i60);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i61 == 1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i15);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref($i63, 4));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.28, $p64);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    call {:si_unique_call 575} {:cexpr "__min2"} boogie_si_record_i64($i66);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i67 := $ult.i64($i62, $i66);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i67 == 1);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i68);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv_mutex_lock_116($p69);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.29, $p4);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i8($i70);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i12);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i15);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref($i73, 6)), $mul.ref($i72, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i71);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i15);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref($i77, 8));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i12);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p80, $mul.ref($i81, 2));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.29, $p4);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i16($i86);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_43 := nct6775_write_value($p8, $i85, $i89);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i15, 2);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} ldv_mutex_unlock_117($p120);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i55 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i91 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i12);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p93, $mul.ref($i94, 2));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i99 := nct6775_read_value($p8, $i98);
    call {:si_unique_call 579} {:cexpr "tmp___0"} boogie_si_record_i16($i99);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i16.i8($i99);
    call {:si_unique_call 580} {:cexpr "reg"} boogie_si_record_i8($i100);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 127);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    call {:si_unique_call 581} {:cexpr "reg"} boogie_si_record_i8($i103);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.29, $p4);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i103;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i12);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p111, $mul.ref($i112, 2));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i109);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_44 := nct6775_write_value($p8, $i116, $i118);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i105 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i103);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 128);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    call {:si_unique_call 582} {:cexpr "reg"} boogie_si_record_i8($i108);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb18;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i67 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i68 := $i62;
    goto $bb13;

  $bb8:
    assume $i61 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i62 := $i56;
    goto $bb10;

  $bb4:
    assume $i53 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i52);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb6;

  $bb1:
    assume $i37 == 1;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i12);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(3, 6)), $mul.ref($i38, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb3;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 527964);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 587} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_116: ref;

axiom ldv_mutex_lock_116 == $sub.ref(0, 528996);

procedure ldv_mutex_lock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_117: ref;

axiom ldv_mutex_unlock_117 == $sub.ref(0, 530028);

procedure ldv_mutex_unlock_117($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_117($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 531060);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 590} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 591} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 592} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 532092);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



const show_pwm_mode: ref;

axiom show_pwm_mode == $sub.ref(0, 533124);

procedure show_pwm_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_pwm_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p3 := nct6775_update_device($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(985, 1)), $mul.ref($i7, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i14 := sprintf.ref.ref.i32($p2, .str.16, $i13);
    call {:si_unique_call 595} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const store_pwm_mode: ref;

axiom store_pwm_mode == $sub.ref(0, 534156);

procedure store_pwm_mode($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_pwm_mode($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i8;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i16;
  var $i38: i16;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $p72: ref;
  var $i13: i64;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 597} {:cexpr "store_pwm_mode:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 599} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i10 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 601} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.29, $p4);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, 1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_mutex_lock_114($p25);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.29, $p4);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i8($i26);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i9);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(985, 1)), $mul.ref($i28, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i27);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i9);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i38 := nct6775_read_value($p6, $i37);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i16($i38);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i16.i8($i38);
    call {:si_unique_call 605} {:cexpr "reg"} boogie_si_record_i8($i39);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i9);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p42, $mul.ref($i43, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i46 := $sext.i8.i32($i45);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i47 := $xor.i32($i46, $sub.i32(0, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i40, $i47);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    call {:si_unique_call 606} {:cexpr "reg"} boogie_si_record_i8($i49);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.29, $p4);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i49;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i9);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i61);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_45 := nct6775_write_value($p6, $i68, $i70);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} ldv_mutex_unlock_115($p72);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i49);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i9);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i52, $i58);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    call {:si_unique_call 607} {:cexpr "reg"} boogie_si_record_i8($i60);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb16;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.29, $p4);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ldv_mutex_lock_114: ref;

axiom ldv_mutex_lock_114 == $sub.ref(0, 535188);

procedure ldv_mutex_lock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_115: ref;

axiom ldv_mutex_unlock_115 == $sub.ref(0, 536220);

procedure ldv_mutex_unlock_115($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const show_pwm_enable: ref;

axiom show_pwm_enable == $sub.ref(0, 537252);

procedure show_pwm_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_pwm_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p3 := nct6775_update_device($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i7, 4));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i11 := sprintf.ref.ref.i32($p2, .str.16, $i10);
    call {:si_unique_call 614} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const store_pwm_enable: ref;

axiom store_pwm_enable == $sub.ref(0, 538284);

procedure store_pwm_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_pwm_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $i57: i64;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i16;
  var $p76: ref;
  var $i13: i64;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 616} {:cexpr "store_pwm_enable:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 618} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i10 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 620} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.29, $p4);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, 5);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.29, $p4);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 4);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.29, $p4);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 5);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} ldv_mutex_lock_118($p25);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.29, $p4);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i9);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i28, 4));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.29, $p4);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} pwm_update_registers($p6, $i9);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i9);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 2));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i53 := nct6775_read_value($p6, $i52);
    call {:si_unique_call 629} {:cexpr "reg"} boogie_si_record_i16($i53);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 15);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    call {:si_unique_call 630} {:cexpr "reg"} boogie_si_record_i16($i56);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.29, $p4);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i59 := pwm_enable_to_reg($i58);
    call {:si_unique_call 632} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i60 := $sext.i16.i32($i56);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i59, 4);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i63 := $sext.i16.i32($i62);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i60, $i63);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    call {:si_unique_call 633} {:cexpr "reg"} boogie_si_record_i16($i65);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i9);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 2));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i65);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_47 := nct6775_write_value($p6, $i72, $i74);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} ldv_mutex_unlock_119($p76);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i9);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(0, 6)), $mul.ref($i33, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $sub.i8(0, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i9);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 2));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_46 := nct6775_write_value($p6, $i44, 255);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i23 := check_trip_points($p6, $i9);
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} dev_err.ref.ref($p0, .str.20);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} dev_err.ref.ref($p0, .str.21);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 1);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const check_trip_points: ref;

axiom check_trip_points == $sub.ref(0, 539316);

procedure check_trip_points($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_trip_points($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i6: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i64;
  var $i34: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i32: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} {:cexpr "check_trip_points:arg:nr"} boogie_si_record_i32($i1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32(0, $i30);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i56, 7)), $mul.ref($i55, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, $sub.i32(0, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i67, 7)), $mul.ref($i66, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i1);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i76, 7)), $mul.ref($i75, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i72, $i81);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i82 == 1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, $sub.i32(0, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i87, 7)), $mul.ref($i86, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i1);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i96, 7)), $mul.ref($i95, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i102 := $sgt.i32($i92, $i101);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb8;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb27;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb16;

  $bb16:
    call $i33, $i34, $p37, $i38, $i39, $i40, $i41, $i42, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i32 := check_trip_points_loop_$bb16($p0, $i1, $p28, $i33, $i34, $p37, $i38, $i39, $i40, $i41, $i42, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i32);
    goto $bb16_last;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i34, 7)), $mul.ref($i33, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i32, 1);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i1);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i42, 7)), $mul.ref($i41, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i39, $i47);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i32, 1);
    call {:si_unique_call 638} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p28);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i49, $i51);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i49;
    goto $bb21_dummy;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $i8, $p11, $i12, $i13, $i14, $i15, $i16, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i6 := check_trip_points_loop_$bb4($p0, $i1, $p2, $i7, $i8, $p11, $i12, $i13, $i14, $i15, $i16, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i6);
    goto $bb4_last;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i8, 7)), $mul.ref($i7, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i6, 1);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i1);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i16, 7)), $mul.ref($i15, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i13, $i21);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i6, 1);
    call {:si_unique_call 637} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p2);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $sub.i32(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, $i26);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i24;
    goto $bb10_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb8;

  $bb21_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6016;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5983;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 540348);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_118: ref;

axiom ldv_mutex_lock_118 == $sub.ref(0, 541380);

procedure ldv_mutex_lock_118($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_118($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const pwm_update_registers: ref;

axiom pwm_update_registers == $sub.ref(0, 542412);

procedure pwm_update_registers($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pwm_update_registers($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i8;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $i90: i32;
  var $i91: i64;
  var $p93: ref;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i16;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i16;
  var $i118: i64;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i16;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i16;
  var $i132: i16;
  var $i133: i8;
  var $i134: i32;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $i152: i16;
  var $i153: i32;
  var $i154: i16;
  var $i155: i32;
  var $i156: i16;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} {:cexpr "pwm_update_registers:arg:nr"} boogie_si_record_i32($i1);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i2, 4));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i7, 4));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i12, 4));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i1);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref($i17, 4));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i1);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p126, $mul.ref($i127, 2));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i132 := nct6775_read_value($p0, $i131);
    call {:si_unique_call 649} {:cexpr "tmp___0"} boogie_si_record_i16($i132);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i16.i8($i132);
    call {:si_unique_call 650} {:cexpr "reg"} boogie_si_record_i8($i133);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i134 := $sext.i8.i32($i133);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i137 := $sext.i8.i32($i136);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i138 := $xor.i32($i137, $sub.i32(0, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i134, $i138);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(0, 6)), $mul.ref($i140, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i145 := $sext.i8.i32($i144);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i139, $i145);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    call {:si_unique_call 651} {:cexpr "reg"} boogie_si_record_i8($i147);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p149, $mul.ref($i150, 2));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.0, $p151);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i16($i153);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i147);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_51 := nct6775_write_value($p0, $i154, $i156);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i1);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p112, $mul.ref($i113, 2));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i1);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref($i118, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_50 := nct6775_write_value($p0, $i117, $i123);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i1);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 2));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i29 := nct6775_read_value($p0, $i28);
    call {:si_unique_call 642} {:cexpr "tmp"} boogie_si_record_i16($i29);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i16.i8($i29);
    call {:si_unique_call 643} {:cexpr "reg"} boogie_si_record_i8($i30);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i35 := $xor.i32($i34, $sub.i32(0, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i31, $i35);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i39, 4));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i44, $i47);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i38, $i48);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    call {:si_unique_call 644} {:cexpr "reg"} boogie_si_record_i8($i50);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p52, $mul.ref($i53, 2));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i50);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_48 := nct6775_write_value($p0, $i57, $i59);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 2));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i68, 4));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 255);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_49 := nct6775_write_value($p0, $i67, $i75);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i80 == 1;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i1);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i81, 4));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i85 := $lshr.i32($i84, 8);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 15);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    call {:si_unique_call 653} {:cexpr "reg"} boogie_si_record_i8($i89);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i91, 4));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 56);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i98 := $shl.i32($i97, 1);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i90, $i98);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    call {:si_unique_call 654} {:cexpr "reg"} boogie_si_record_i8($i100);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p102, $mul.ref($i103, 2));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.0, $p104);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i100);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_52 := nct6775_write_value($p0, $i107, $i109);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const pwm_enable_to_reg: ref;

axiom pwm_enable_to_reg == $sub.ref(0, 543444);

procedure pwm_enable_to_reg($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pwm_enable_to_reg($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "pwm_enable_to_reg:arg:mode"} boogie_si_record_i32($i0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i0, 1);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;
}



const ldv_mutex_unlock_119: ref;

axiom ldv_mutex_unlock_119 == $sub.ref(0, 544476);

procedure ldv_mutex_unlock_119($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_119($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const show_pwm_temp_sel: ref;

axiom show_pwm_temp_sel == $sub.ref(0, 545508);

procedure show_pwm_temp_sel($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_pwm_temp_sel($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p3 := nct6775_update_device($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 659} {:cexpr "index"} boogie_si_record_i32($i6);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1236, 1)), $mul.ref($i7, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i12 := show_pwm_temp_sel_common($p3, $p2, $i11);
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const store_pwm_temp_sel: ref;

axiom store_pwm_temp_sel == $sub.ref(0, 546540);

procedure store_pwm_temp_sel($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation store_pwm_temp_sel($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i8;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $i62: i32;
  var $i63: i16;
  var $p65: ref;
  var $i12: i64;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 663} {:cexpr "store_pwm_temp_sel:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p5 := nct6775_update_device($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 665} {:cexpr "nr"} boogie_si_record_i32($i8);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i9 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 667} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.29, $p4);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, 9);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.29, $p4);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i32($i18, $i21);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.29, $p4);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i25, 1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i26, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ldv_mutex_lock_120($p32);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.29, $p4);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i33, 1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i34, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    call {:si_unique_call 669} {:cexpr "src"} boogie_si_record_i32($i38);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i8);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(1236, 1)), $mul.ref($i40, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i39);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i8);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 2));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i50 := nct6775_read_value($p5, $i49);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i16($i50);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    call {:si_unique_call 672} {:cexpr "reg"} boogie_si_record_i32($i51);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 224);
    call {:si_unique_call 673} {:cexpr "reg"} boogie_si_record_i32($i52);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, $i38);
    call {:si_unique_call 674} {:cexpr "reg"} boogie_si_record_i32($i53);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i8);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p55, $mul.ref($i56, 2));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i53);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_53 := nct6775_write_value($p5, $i60, $i63);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} ldv_mutex_unlock_121($p65);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_120: ref;

axiom ldv_mutex_lock_120 == $sub.ref(0, 547572);

procedure ldv_mutex_lock_120($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_121: ref;

axiom ldv_mutex_unlock_121 == $sub.ref(0, 548604);

procedure ldv_mutex_unlock_121($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const show_pwm_temp_sel_common: ref;

axiom show_pwm_temp_sel_common == $sub.ref(0, 549636);

procedure show_pwm_temp_sel_common($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation show_pwm_temp_sel_common($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "show_pwm_temp_sel_common:arg:src"} boogie_si_record_i32($i2);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(0, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, $i11);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume {:branchcond $i12} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i21 := $ashr.i32($i20, 1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(1, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i2, $i27);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i32 := $ashr.i32($i31, 2);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(2, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i2, $i38);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i13 := 2;
    assume {:branchcond $i39} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i43 := $ashr.i32($i42, 3);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 1);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(3, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i2, $i49);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i13 := 3;
    assume {:branchcond $i50} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i54 := $ashr.i32($i53, 4);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(4, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i2, $i60);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i13 := 4;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i65 := $ashr.i32($i64, 5);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(5, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i2, $i71);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i13 := 5;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i76 := $ashr.i32($i75, 6);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 1);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(6, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i2, $i82);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i13 := 6;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i87 := $ashr.i32($i86, 7);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 1);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(7, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i2, $i93);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i13 := 7;
    assume {:branchcond $i94} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i98 := $ashr.i32($i97, 8);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 1);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(8, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i2, $i104);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i13 := 8;
    assume {:branchcond $i105} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i109 := $ashr.i32($i108, 9);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 1);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(9, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i2, $i115);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i13 := 9;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i16 := sprintf.ref.ref.i32($p1, .str.16, $i15);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    call {:si_unique_call 680} {:cexpr "sel"} boogie_si_record_i32($i14);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb10;

  $bb78:
    assume $i111 == 1;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb8;

  $bb70:
    assume $i100 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb8;

  $bb62:
    assume $i89 == 1;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb8;

  $bb54:
    assume $i78 == 1;
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb8;

  $bb46:
    assume $i67 == 1;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb8;

  $bb38:
    assume $i56 == 1;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb8;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb8;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb8;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const show_temp_tolerance: ref;

axiom show_temp_tolerance == $sub.ref(0, 550668);

procedure show_temp_tolerance($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp_tolerance($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p3 := nct6775_update_device($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 684} {:cexpr "nr"} boogie_si_record_i32($i7);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 685} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref($i12, 6)), $mul.ref($i11, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 1000);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i19 := sprintf.ref.ref.i32($p2, .str.16, $i18);
    call {:si_unique_call 687} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const store_temp_tolerance: ref;

axiom store_temp_tolerance == $sub.ref(0, 551700);

procedure store_temp_tolerance($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_temp_tolerance($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $p38: ref;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i16;
  var $i47: i64;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $p52: ref;
  var $i17: i64;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 689} {:cexpr "store_temp_tolerance:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 691} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 692} {:cexpr "index"} boogie_si_record_i32($i13);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i14 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 694} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.29, $p4);
    call {:si_unique_call 695} {:cexpr "__x"} boogie_si_record_i64($i18);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i19 := $sdiv.i32(1000, 2);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i18, $i20);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64(1000);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i23 := $udiv.i64($i21, $i22);
    call {:si_unique_call 696} {:cexpr "__max1"} boogie_si_record_i64($i23);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64($i23, 0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1129, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    call {:si_unique_call 697} {:cexpr "__min2"} boogie_si_record_i64($i28);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i29 := $ult.i64($i25, $i28);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i30);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ldv_mutex_lock_128($p31);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.29, $p4);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i8($i32);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i10);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i13);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref($i35, 6)), $mul.ref($i34, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i33);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i13, 0);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i10);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p41, $mul.ref($i42, 2));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.29, $p4);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i16($i47);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_54 := nct6775_write_value($p6, $i46, $i50);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_mutex_unlock_129($p52);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} pwm_update_registers($p6, $i10);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i30 := $i25;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ldv_mutex_lock_128: ref;

axiom ldv_mutex_lock_128 == $sub.ref(0, 552732);

procedure ldv_mutex_lock_128($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_128($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_129: ref;

axiom ldv_mutex_unlock_129 == $sub.ref(0, 553764);

procedure ldv_mutex_unlock_129($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const show_target_temp: ref;

axiom show_target_temp == $sub.ref(0, 554796);

procedure show_target_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_target_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p3 := nct6775_update_device($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref($i7, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 1000);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i13 := sprintf.ref.ref.i32($p2, .str.16, $i12);
    call {:si_unique_call 706} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const store_target_temp: ref;

axiom store_target_temp == $sub.ref(0, 555828);

procedure store_target_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_target_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i8;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 708} {:cexpr "store_target_temp:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 710} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i10 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 712} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.29, $p4);
    call {:si_unique_call 713} {:cexpr "__x"} boogie_si_record_i64($i14);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i15 := $sdiv.i32(1000, 2);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i14, $i16);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64(1000);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i64($i17, $i18);
    call {:si_unique_call 714} {:cexpr "__max1"} boogie_si_record_i64($i19);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i64($i19, 0);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    call {:si_unique_call 715} {:cexpr "__min2"} boogie_si_record_i64($i24);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i21, $i24);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i26);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} ldv_mutex_lock_124($p27);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.29, $p4);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i8($i28);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i9);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref($i30, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i29);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} pwm_update_registers($p6, $i9);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ldv_mutex_unlock_125($p33);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i26 := $i21;
    goto $bb10;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ldv_mutex_lock_124: ref;

axiom ldv_mutex_lock_124 == $sub.ref(0, 556860);

procedure ldv_mutex_lock_124($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_124($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_125: ref;

axiom ldv_mutex_unlock_125 == $sub.ref(0, 557892);

procedure ldv_mutex_unlock_125($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_125($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const show_target_speed: ref;

axiom show_target_speed == $sub.ref(0, 558924);

procedure show_target_speed($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_target_speed($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p3 := nct6775_update_device($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 722} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i7, 4));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i6);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i14, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i19 := fan_from_reg16($i13, $i18);
    call {:si_unique_call 724} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i20 := sprintf.ref.ref.i32($p2, .str.16, $i19);
    call {:si_unique_call 726} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const store_target_speed: ref;

axiom store_target_speed == $sub.ref(0, 559956);

procedure store_target_speed($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_target_speed($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 728} {:cexpr "store_target_speed:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 730} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i10 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 732} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.29, $p4);
    call {:si_unique_call 733} {:cexpr "__max1"} boogie_si_record_i64($i14);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i17 := $ult.i64($i16, 1350000);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i18 := 1350000;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i18);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.29, $p4);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i9);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i21, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i26 := fan_to_reg($i20, $i25);
    call {:si_unique_call 735} {:cexpr "speed"} boogie_si_record_i16($i26);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_mutex_lock_126($p27);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i26);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i9);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i29, 4));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i28);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} pwm_update_registers($p6, $i9);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_mutex_unlock_127($p32);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const fan_to_reg: ref;

axiom fan_to_reg == $sub.ref(0, 560988);

procedure fan_to_reg($i0: i32, $i1: i32) returns ($r: i16);
  free requires assertsPassed;



implementation fan_to_reg($i0: i32, $i1: i32) returns ($r: i16)
{
  var $i2: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "fan_to_reg:arg:fan"} boogie_si_record_i32($i0);
    call {:si_unique_call 740} {:cexpr "fan_to_reg:arg:divreg"} boogie_si_record_i32($i1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 0);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32(1350000, $i0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, $i1);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const ldv_mutex_lock_126: ref;

axiom ldv_mutex_lock_126 == $sub.ref(0, 562020);

procedure ldv_mutex_lock_126($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_127: ref;

axiom ldv_mutex_unlock_127 == $sub.ref(0, 563052);

procedure ldv_mutex_unlock_127($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const show_speed_tolerance: ref;

axiom show_speed_tolerance == $sub.ref(0, 564084);

procedure show_speed_tolerance($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_speed_tolerance($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $i34: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p3 := nct6775_update_device($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 744} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i7, 4));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i6);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i11, 4));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i10, $i14);
    call {:si_unique_call 745} {:cexpr "low"} boogie_si_record_i32($i15);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i6);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i16, 4));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i6);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i20, 4));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i19, $i23);
    call {:si_unique_call 746} {:cexpr "high"} boogie_si_record_i32($i24);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i15, 0);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i24, 65535);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, $i26);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i26);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i6);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i34, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i39 := fan_from_reg16($i33, $i38);
    call {:si_unique_call 748} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i30);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i6);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i43, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i48 := fan_from_reg16($i42, $i47);
    call {:si_unique_call 750} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i39, $i48);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i32($i49, 2);
    call {:si_unique_call 751} {:cexpr "tolerance"} boogie_si_record_i32($i50);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i51 := sprintf.ref.ref.i32($p2, .str.16, $i50);
    call {:si_unique_call 753} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i30 := $i26;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i28 := 65535;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const store_speed_tolerance: ref;

axiom store_speed_tolerance == $sub.ref(0, 565116);

procedure store_speed_tolerance($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_speed_tolerance($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $i21: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i37: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i16;
  var $i56: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i1;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i64;
  var $p80: ref;
  var $p81: ref;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 755} {:cexpr "store_speed_tolerance:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 757} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i10 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 759} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i9);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i14, 4));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i9);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i21, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i26 := fan_from_reg16($i20, $i25);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.29, $p4);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i26, $i28);
    call {:si_unique_call 762} {:cexpr "high"} boogie_si_record_i32($i29);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i9);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref($i30, 4));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i9);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i37, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i42 := fan_from_reg16($i36, $i41);
    call {:si_unique_call 764} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.29, $p4);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i42, $i44);
    call {:si_unique_call 765} {:cexpr "low"} boogie_si_record_i32($i45);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i45, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i29, $i47);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i29;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i9);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i50, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i55 := fan_to_reg($i47, $i54);
    call {:si_unique_call 767} {:cexpr "tmp___2"} boogie_si_record_i16($i55);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i9);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i56, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i61 := fan_to_reg($i49, $i60);
    call {:si_unique_call 769} {:cexpr "tmp___3"} boogie_si_record_i16($i61);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i55);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i61);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i62, $i63);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i65 := $sdiv.i32($i64, 2);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i66);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.29, $p4);
    call {:si_unique_call 770} {:cexpr "__max1"} boogie_si_record_i64($i67);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i64($i67, 0);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i68 == 1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1116, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    call {:si_unique_call 771} {:cexpr "__min2"} boogie_si_record_i64($i72);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i73 := $ult.i64($i69, $i72);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i74 := $i72;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i74);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} ldv_mutex_lock_130($p75);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.29, $p4);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i9);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref($i78, 4));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i77);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} pwm_update_registers($p6, $i9);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} ldv_mutex_unlock_131($p81);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i74 := $i69;
    goto $bb16;

  $bb11:
    assume $i68 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb13;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb10;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i47 := 1;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ldv_mutex_lock_130: ref;

axiom ldv_mutex_lock_130 == $sub.ref(0, 566148);

procedure ldv_mutex_lock_130($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_130($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_131: ref;

axiom ldv_mutex_unlock_131 == $sub.ref(0, 567180);

procedure ldv_mutex_unlock_131($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_131($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const show_fan_time: ref;

axiom show_fan_time == $sub.ref(0, 568212);

procedure show_fan_time($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_fan_time($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $i19: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p3 := nct6775_update_device($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 778} {:cexpr "nr"} boogie_si_record_i32($i7);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 779} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref($i12, 6)), $mul.ref($i11, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i7);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(985, 1)), $mul.ref($i19, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i25 := step_time_from_reg($i18, $i24);
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i26 := sprintf.ref.ref.i32($p2, .str.16, $i25);
    call {:si_unique_call 783} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const store_fan_time: ref;

axiom store_fan_time == $sub.ref(0, 569244);

procedure store_fan_time($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_fan_time($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;
  var $i26: i8;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i64;
  var $i46: i16;
  var $i47: i32;
  var $i48: i16;
  var $p50: ref;
  var $i17: i64;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 785} {:cexpr "store_fan_time:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 787} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 788} {:cexpr "index"} boogie_si_record_i32($i13);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i14 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 790} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.29, $p4);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i10);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(985, 1)), $mul.ref($i20, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i26 := step_time_to_reg($i19, $i25);
    call {:si_unique_call 792} {:cexpr "tmp___0"} boogie_si_record_i8($i26);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i27);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_mutex_lock_134($p28);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.29, $p4);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i8($i29);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i10);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i13);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref($i32, 6)), $mul.ref($i31, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i30);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i13);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref($i36, 8));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i10);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 2));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.29, $p4);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i16($i45);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_55 := nct6775_write_value($p6, $i44, $i48);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_mutex_unlock_135($p50);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const step_time_to_reg: ref;

axiom step_time_to_reg == $sub.ref(0, 570276);

procedure step_time_to_reg($i0: i32, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation step_time_to_reg($i0: i32, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i7: i32;
  var $i8: i32;
  var $i6: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} {:cexpr "step_time_to_reg:arg:msec"} boogie_si_record_i32($i0);
    call {:si_unique_call 797} {:cexpr "step_time_to_reg:arg:mode"} boogie_si_record_i8($i1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i0, 50);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32($i7, 100);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i6, 1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32($i10, 255);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i12 := 255;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb9;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i10 := $i6;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i0, 200);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i32($i4, 400);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const ldv_mutex_lock_134: ref;

axiom ldv_mutex_lock_134 == $sub.ref(0, 571308);

procedure ldv_mutex_lock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_135: ref;

axiom ldv_mutex_unlock_135 == $sub.ref(0, 572340);

procedure ldv_mutex_unlock_135($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const step_time_from_reg: ref;

axiom step_time_from_reg == $sub.ref(0, 573372);

procedure step_time_from_reg($i0: i8, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation step_time_from_reg($i0: i8, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i7: i32;
  var $i8: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} {:cexpr "step_time_from_reg:arg:reg"} boogie_si_record_i8($i0);
    call {:si_unique_call 801} {:cexpr "step_time_from_reg:arg:mode"} boogie_si_record_i8($i1);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i0);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 100);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 400);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const show_pwm_weight_temp_sel: ref;

axiom show_pwm_weight_temp_sel == $sub.ref(0, 574404);

procedure show_pwm_weight_temp_sel($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_pwm_weight_temp_sel($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p3 := nct6775_update_device($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 803} {:cexpr "index"} boogie_si_record_i32($i6);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref($i7, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i12 := show_pwm_temp_sel_common($p3, $p2, $i11);
    call {:si_unique_call 805} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const store_pwm_weight_temp_sel: ref;

axiom store_pwm_weight_temp_sel == $sub.ref(0, 575436);

procedure store_pwm_weight_temp_sel($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation store_pwm_weight_temp_sel($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i16;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i16;
  var $i89: i16;
  var $i90: i32;
  var $i91: i16;
  var $p93: ref;
  var $i12: i64;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 807} {:cexpr "store_pwm_weight_temp_sel:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p5 := nct6775_update_device($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 809} {:cexpr "nr"} boogie_si_record_i32($i8);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i9 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 811} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.29, $p4);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i13, 10);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.29, $p4);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} ldv_mutex_lock_122($p33);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.29, $p4);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i8);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref($i69, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i8);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p73, $mul.ref($i74, 2));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i79 := nct6775_read_value($p5, $i78);
    call {:si_unique_call 821} {:cexpr "tmp___1"} boogie_si_record_i16($i79);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    call {:si_unique_call 822} {:cexpr "reg"} boogie_si_record_i32($i80);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 127);
    call {:si_unique_call 823} {:cexpr "reg"} boogie_si_record_i32($i81);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i8);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p83, $mul.ref($i84, 2));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i81);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_57 := nct6775_write_value($p5, $i88, $i91);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_mutex_unlock_123($p93);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.29, $p4);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i36, 1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i37, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    call {:si_unique_call 813} {:cexpr "src"} boogie_si_record_i32($i41);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i8);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref($i43, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i42);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i8);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 2));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i53 := nct6775_read_value($p5, $i52);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i16($i53);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    call {:si_unique_call 816} {:cexpr "reg"} boogie_si_record_i32($i54);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 224);
    call {:si_unique_call 817} {:cexpr "reg"} boogie_si_record_i32($i55);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i41, 128);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i55, $i56);
    call {:si_unique_call 818} {:cexpr "reg"} boogie_si_record_i32($i57);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i8);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p59, $mul.ref($i60, 2));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i57);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_56 := nct6775_write_value($p5, $i64, $i67);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.29, $p4);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i23 := $ashr.i32($i19, $i22);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i25 == 1);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.29, $p4);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64($i26, 1);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i27, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb12;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_122: ref;

axiom ldv_mutex_lock_122 == $sub.ref(0, 576468);

procedure ldv_mutex_lock_122($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_123: ref;

axiom ldv_mutex_unlock_123 == $sub.ref(0, 577500);

procedure ldv_mutex_unlock_123($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_123($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const show_weight_temp: ref;

axiom show_weight_temp == $sub.ref(0, 578532);

procedure show_weight_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_weight_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p3 := nct6775_update_device($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 829} {:cexpr "nr"} boogie_si_record_i32($i7);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 830} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref($i12, 6)), $mul.ref($i11, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 1000);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i19 := sprintf.ref.ref.i32($p2, .str.16, $i18);
    call {:si_unique_call 832} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const store_weight_temp: ref;

axiom store_weight_temp == $sub.ref(0, 579564);

procedure store_weight_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_weight_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i64;
  var $i46: i16;
  var $i47: i32;
  var $i48: i16;
  var $p50: ref;
  var $i17: i64;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 834} {:cexpr "store_weight_temp:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 836} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 837} {:cexpr "index"} boogie_si_record_i32($i13);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i14 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 839} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.29, $p4);
    call {:si_unique_call 840} {:cexpr "__x"} boogie_si_record_i64($i18);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i19 := $sdiv.i32(1000, 2);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i18, $i20);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64(1000);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i23 := $udiv.i64($i21, $i22);
    call {:si_unique_call 841} {:cexpr "__max1"} boogie_si_record_i64($i23);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64($i23, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i25, 255);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i27 := 255;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i27);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_mutex_lock_132($p28);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.29, $p4);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i8($i29);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i10);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i13);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref($i32, 6)), $mul.ref($i31, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i30);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i13);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref($i36, 8));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i10);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 2));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.29, $p4);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i16($i45);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_58 := nct6775_write_value($p6, $i44, $i48);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_mutex_unlock_133($p50);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ldv_mutex_lock_132: ref;

axiom ldv_mutex_lock_132 == $sub.ref(0, 580596);

procedure ldv_mutex_lock_132($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_133: ref;

axiom ldv_mutex_unlock_133 == $sub.ref(0, 581628);

procedure ldv_mutex_unlock_133($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const show_auto_pwm: ref;

axiom show_auto_pwm == $sub.ref(0, 582660);

procedure show_auto_pwm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_auto_pwm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p3 := nct6775_update_device($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i12, 7)), $mul.ref($i8, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i18 := sprintf.ref.ref.i32($p2, .str.16, $i17);
    call {:si_unique_call 849} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const store_auto_pwm: ref;

axiom store_auto_pwm == $sub.ref(0, 583692);

procedure store_auto_pwm($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_auto_pwm($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $i54: i64;
  var $i55: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i16;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i64;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i16;
  var $i86: i16;
  var $i87: i8;
  var $i88: i64;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i8;
  var $i93: i8;
  var $i97: i64;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i16;
  var $i112: i64;
  var $i113: i16;
  var $i114: i32;
  var $i115: i16;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i16;
  var $i124: i16;
  var $i125: i8;
  var $i126: i64;
  var $i127: i1;
  var $i128: i32;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $i136: i32;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i8;
  var $i135: i8;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $i146: i16;
  var $i147: i32;
  var $i148: i16;
  var $i149: i32;
  var $i150: i16;
  var $p152: ref;
  var $i17: i64;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 851} {:cexpr "store_auto_pwm:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 853} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 854} {:cexpr "point"} boogie_si_record_i32($i13);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i14 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 856} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.29, $p4);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64($i18, 255);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i13, $i21);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} ldv_mutex_lock_136($p33);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.29, $p4);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i8($i34);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i13);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i10);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i37, 7)), $mul.ref($i36, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i35);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i13, $i42);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 4);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 5);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_mutex_unlock_137($p152);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i80 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(448, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i10);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p106, $mul.ref($i107, 2));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.29, $p4);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i64.i16($i112);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_60 := nct6775_write_value($p6, $i111, $i115);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i10);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p118, $mul.ref($i119, 2));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i124 := nct6775_read_value($p6, $i123);
    call {:si_unique_call 865} {:cexpr "tmp___1"} boogie_si_record_i16($i124);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i16.i8($i124);
    call {:si_unique_call 866} {:cexpr "reg"} boogie_si_record_i8($i125);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.29, $p4);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i127 := $eq.i64($i126, 255);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i127 == 1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i125);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i140 := $or.i32($i136, $i139);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    call {:si_unique_call 871} {:cexpr "reg"} boogie_si_record_i8($i141);
    assume {:verifier.code 0} true;
    $i135 := $i141;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i10);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p143, $mul.ref($i144, 2));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.0, $p145);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i146);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i135);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i16($i149);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_62 := nct6775_write_value($p6, $i148, $i150);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55:
    assume $i127 == 1;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i128 := $sext.i8.i32($i125);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i131 := $sext.i8.i32($i130);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i132 := $xor.i32($i131, $sub.i32(0, 1));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i128, $i132);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    call {:si_unique_call 870} {:cexpr "reg"} boogie_si_record_i8($i134);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i135 := $i134;
    goto $bb57;

  $bb42:
    assume $i77 == 1;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb38:
    assume $i74 == 1;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb34:
    assume $i71 == 1;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i10);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref(NCT6775_REG_CRITICAL_ENAB, $mul.ref(0, 6)), $mul.ref($i81, 2));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.26, $p82);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i86 := nct6775_read_value($p6, $i85);
    call {:si_unique_call 861} {:cexpr "tmp___0"} boogie_si_record_i16($i86);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i16.i8($i86);
    call {:si_unique_call 862} {:cexpr "reg"} boogie_si_record_i8($i87);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.29, $p4);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i89 == 1);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i87);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 253);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    call {:si_unique_call 868} {:cexpr "reg"} boogie_si_record_i8($i96);
    assume {:verifier.code 0} true;
    $i93 := $i96;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i10);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref(NCT6775_REG_CRITICAL_ENAB, $mul.ref(0, 6)), $mul.ref($i97, 2));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.26, $p98);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i93);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_61 := nct6775_write_value($p6, $i101, $i103);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i89 == 1;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i87);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 2);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    call {:si_unique_call 867} {:cexpr "reg"} boogie_si_record_i8($i92);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb53;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i10);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 2));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i13);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i49, $i51);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i13);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i10);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref($i55, 7)), $mul.ref($i54, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} vslice_dummy_var_59 := nct6775_write_value($p6, $i53, $i61);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 1);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 3);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.29, $p4);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, 255);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.29, $p4);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ldv_mutex_lock_136: ref;

axiom ldv_mutex_lock_136 == $sub.ref(0, 584724);

procedure ldv_mutex_lock_136($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_137: ref;

axiom ldv_mutex_unlock_137 == $sub.ref(0, 585756);

procedure ldv_mutex_unlock_137($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const show_auto_temp: ref;

axiom show_auto_temp == $sub.ref(0, 586788);

procedure show_auto_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_auto_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p3 := nct6775_update_device($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 876} {:cexpr "nr"} boogie_si_record_i32($i7);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 877} {:cexpr "point"} boogie_si_record_i32($i10);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i12, 7)), $mul.ref($i11, 1));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 1000);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i19 := sprintf.ref.ref.i32($p2, .str.16, $i18);
    call {:si_unique_call 879} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const store_auto_temp: ref;

axiom store_auto_temp == $sub.ref(0, 587820);

procedure store_auto_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_auto_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i46: i64;
  var $i47: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i16;
  var $i62: i64;
  var $i63: i64;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i16;
  var $p71: ref;
  var $i17: i64;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 881} {:cexpr "store_auto_temp:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 883} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 884} {:cexpr "point"} boogie_si_record_i32($i13);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i14 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 886} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.29, $p4);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64($i18, 255000);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_mutex_lock_138($p20);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.29, $p4);
    call {:si_unique_call 888} {:cexpr "__x"} boogie_si_record_i64($i21);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i22 := $sdiv.i32(1000, 2);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i21, $i23);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64(1000);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i64($i24, $i25);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i8($i26);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i13);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i10);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i29, 7)), $mul.ref($i28, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i27);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i13, $i34);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i10);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p56, $mul.ref($i57, 2));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i13);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i10);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i63, 7)), $mul.ref($i62, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_64 := nct6775_write_value($p6, $i61, $i69);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_mutex_unlock_139($p71);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i10);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($i38, 2));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i13);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i41, $i43);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i13);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i10);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref($i47, 7)), $mul.ref($i46, 1));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_63 := nct6775_write_value($p6, $i45, $i53);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ldv_mutex_lock_138: ref;

axiom ldv_mutex_lock_138 == $sub.ref(0, 588852);

procedure ldv_mutex_lock_138($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_138($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_139: ref;

axiom ldv_mutex_unlock_139 == $sub.ref(0, 589884);

procedure ldv_mutex_unlock_139($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_139($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const nct6775_in_is_visible: ref;

axiom nct6775_in_is_visible == $sub.ref(0, 590916);

procedure nct6775_in_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation nct6775_in_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i16;
  var $i14: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} {:cexpr "nct6775_in_is_visible:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1416));
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p5 := dev_get_drvdata($p4);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i7 := $sdiv.i32($i2, 5);
    call {:si_unique_call 896} {:cexpr "in"} boogie_si_record_i32($i7);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, $i7);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const show_in_reg: ref;

axiom show_in_reg == $sub.ref(0, 591948);

procedure show_in_reg($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_in_reg($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i64;
  var $i23: i32;
  var $i24: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p3 := nct6775_update_device($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 898} {:cexpr "index"} boogie_si_record_i32($i7);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 899} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i12, 3)), $mul.ref($i11, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i10);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i22 := in_from_reg($i18, $i21);
    call {:si_unique_call 901} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i23 := sprintf.ref.ref.i64($p2, .str.19, $i22);
    call {:si_unique_call 903} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const in_from_reg: ref;

axiom in_from_reg == $sub.ref(0, 592980);

procedure in_from_reg($i0: i8, $i1: i8) returns ($r: i64);
  free requires assertsPassed;



implementation in_from_reg($i0: i8, $i1: i8) returns ($r: i64)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i13: i32;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "in_from_reg:arg:reg"} boogie_si_record_i8($i0);
    call {:si_unique_call 905} {:cexpr "in_from_reg:arg:nr"} boogie_si_record_i8($i1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref($i4, 2));
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.30, $p5);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i2, $i7);
    call {:si_unique_call 906} {:cexpr "__x"} boogie_si_record_i32($i8);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i14 := $sdiv.i32(100, 2);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i8, $i14);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i16 := $sdiv.i32($i15, 100);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i13);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i32(100, 2);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, $i10);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i12 := $sdiv.i32($i11, 100);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const show_alarm: ref;

axiom show_alarm == $sub.ref(0, 594012);

procedure show_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p3 := nct6775_update_device($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p6, $mul.ref($i9, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i11);
    call {:si_unique_call 908} {:cexpr "nr"} boogie_si_record_i32($i12);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i12);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i64($i14, $i15);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i19 := sprintf.ref.ref.i32($p2, .str.22, $i18);
    call {:si_unique_call 910} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const show_beep: ref;

axiom show_beep == $sub.ref(0, 595044);

procedure show_beep($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_beep($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p4 := nct6775_update_device($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p6, $mul.ref($i9, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i11);
    call {:si_unique_call 912} {:cexpr "nr"} boogie_si_record_i32($i12);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i12);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i64($i14, $i15);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i19 := sprintf.ref.ref.i32($p2, .str.22, $i18);
    call {:si_unique_call 914} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const store_beep: ref;

axiom store_beep == $sub.ref(0, 596076);

procedure store_beep($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_beep($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $p56: ref;
  var $i20: i64;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 916} {:cexpr "store_beep:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p6 := dev_get_drvdata($p0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i64($i11);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p9, $mul.ref($i12, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    call {:si_unique_call 918} {:cexpr "nr"} boogie_si_record_i32($i15);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 3);
    call {:si_unique_call 919} {:cexpr "regindex"} boogie_si_record_i32($i16);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i17 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 921} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.29, $p4);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64($i21, 1);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_mutex_lock_100($p23);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.29, $p4);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i15);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i35 := $shl.i64(1, $i34);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i36 := $xor.i64($i35, $sub.i64(0, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i33, $i36);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i37);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i16);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 2));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i16, 3);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i64($i47, $i49);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i16($i50);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 255);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_65 := nct6775_write_value($p7, $i45, $i54);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ldv_mutex_unlock_101($p56);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i20 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i15);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i29 := $shl.i64(1, $i28);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i30 := $or.i64($i27, $i29);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i30);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i17);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb3;
}



const ldv_mutex_lock_100: ref;

axiom ldv_mutex_lock_100 == $sub.ref(0, 597108);

procedure ldv_mutex_lock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_101: ref;

axiom ldv_mutex_unlock_101 == $sub.ref(0, 598140);

procedure ldv_mutex_unlock_101($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const store_in_reg: ref;

axiom store_in_reg == $sub.ref(0, 599172);

procedure store_in_reg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_in_reg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i64;
  var $i41: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i16;
  var $p49: ref;
  var $i17: i64;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 928} {:cexpr "store_in_reg:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 930} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 931} {:cexpr "nr"} boogie_si_record_i32($i13);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i14 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 933} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_mutex_lock_98($p18);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.29, $p4);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i13);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i24 := in_to_reg($i20, $i23);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i10);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i13);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i26, 3)), $mul.ref($i25, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i24);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i10, $sub.i32(0, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref($i31, 8));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i13);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p34, $mul.ref($i35, 2));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i10);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i13);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref($i41, 3)), $mul.ref($i40, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_66 := nct6775_write_value($p6, $i39, $i47);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_mutex_unlock_99($p49);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ldv_mutex_lock_98: ref;

axiom ldv_mutex_lock_98 == $sub.ref(0, 600204);

procedure ldv_mutex_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const in_to_reg: ref;

axiom in_to_reg == $sub.ref(0, 601236);

procedure in_to_reg($i0: i32, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation in_to_reg($i0: i32, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} {:cexpr "in_to_reg:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 940} {:cexpr "in_to_reg:arg:nr"} boogie_si_record_i8($i1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i0, 100);
    call {:si_unique_call 941} {:cexpr "__x"} boogie_si_record_i32($i2);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref($i4, 2));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.30, $p5);
    call {:si_unique_call 942} {:cexpr "__d"} boogie_si_record_i16($i6);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32($i7, 2);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i2, $i8);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i6);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i32($i9, $i10);
    call {:si_unique_call 943} {:cexpr "__max1"} boogie_si_record_i32($i11);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 0);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32($i13, 255);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i15 := 255;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const ldv_mutex_unlock_99: ref;

axiom ldv_mutex_unlock_99 == $sub.ref(0, 602268);

procedure ldv_mutex_unlock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const nct6775_fan_is_visible: ref;

axiom nct6775_fan_is_visible == $sub.ref(0, 603300);

procedure nct6775_fan_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation nct6775_fan_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} {:cexpr "nct6775_fan_is_visible:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1416));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p5 := dev_get_drvdata($p4);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i7 := $sdiv.i32($i2, 6);
    call {:si_unique_call 947} {:cexpr "fan"} boogie_si_record_i32($i7);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i8 := $srem.i32($i2, 6);
    call {:si_unique_call 948} {:cexpr "nr"} boogie_si_record_i32($i8);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i11, $i7);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i8, 1);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i8, 2);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i8, 4);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i8, 5);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i15 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 1);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb25;

  $bb26:
    assume $i44 == 1;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i38 := $ashr.i32($i37, $i7);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb19;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i7, 16);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p27, $mul.ref($i29, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $sub.i32(0, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i7, 16);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const show_fan: ref;

axiom show_fan == $sub.ref(0, 604332);

procedure show_fan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_fan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p3 := nct6775_update_device($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 950} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(800, 1)), $mul.ref($i7, 4));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i11 := sprintf.ref.ref.i32($p2, .str.16, $i10);
    call {:si_unique_call 952} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const show_fan_pulses: ref;

axiom show_fan_pulses == $sub.ref(0, 605364);

procedure show_fan_pulses($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_fan_pulses($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p3 := nct6775_update_device($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(836, 1)), $mul.ref($i7, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 954} {:cexpr "p"} boogie_si_record_i32($i11);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i15 := 4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i16 := sprintf.ref.ref.i32($p2, .str.16, $i15);
    call {:si_unique_call 956} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i11, 0);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const store_fan_pulses: ref;

axiom store_fan_pulses == $sub.ref(0, 606396);

procedure store_fan_pulses($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_fan_pulses($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i16;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $p72: ref;
  var $i13: i64;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 958} {:cexpr "store_fan_pulses:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 960} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i10 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 962} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.29, $p4);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, 4);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} ldv_mutex_lock_106($p16);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.29, $p4);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i8($i17);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 3);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i9);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(836, 1)), $mul.ref($i22, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i21);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i9);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 2));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i32 := nct6775_read_value($p6, $i31);
    call {:si_unique_call 965} {:cexpr "tmp___0"} boogie_si_record_i16($i32);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i16.i8($i32);
    call {:si_unique_call 966} {:cexpr "reg"} boogie_si_record_i8($i33);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i9);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 2));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32(3, $i40);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i43, $sub.i32(0, 1));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i34, $i44);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 967} {:cexpr "reg"} boogie_si_record_i8($i46);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.29, $p4);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 3);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i9);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p51, $mul.ref($i52, 2));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i57 := $shl.i64($i49, $i56);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i8($i57);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i47, $i59);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    call {:si_unique_call 968} {:cexpr "reg"} boogie_si_record_i8($i61);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i9);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 2));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i61);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vslice_dummy_var_67 := nct6775_write_value($p6, $i68, $i70);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_mutex_unlock_107($p72);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ldv_mutex_lock_106: ref;

axiom ldv_mutex_lock_106 == $sub.ref(0, 607428);

procedure ldv_mutex_lock_106($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_106($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_107: ref;

axiom ldv_mutex_unlock_107 == $sub.ref(0, 608460);

procedure ldv_mutex_unlock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const show_fan_min: ref;

axiom show_fan_min == $sub.ref(0, 609492);

procedure show_fan_min($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_fan_min($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p3 := nct6775_update_device($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 974} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i9, 2));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i6);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i15, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    call {:si_unique_call 975} $i20 := devirtbounce.5($p8, $i14, $i19);
    call {:si_unique_call 976} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i21 := sprintf.ref.ref.i32($p2, .str.16, $i20);
    call {:si_unique_call 978} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const store_fan_min: ref;

axiom store_fan_min == $sub.ref(0, 610524);

procedure store_fan_min($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.19, $CurrAddr, assertsPassed;



implementation store_fan_min($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i16;
  var $i33: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i60: i1;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $i70: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i1;
  var $i73: i8;
  var $i74: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i8;
  var $i80: i32;
  var $i81: i8;
  var $i71: i32;
  var $i72: i8;
  var $i86: i16;
  var $i87: i64;
  var $p89: ref;
  var $i69: i8;
  var $i59: i8;
  var $i46: i8;
  var $i90: i32;
  var $i91: i64;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $i113: i32;
  var $i114: i8;
  var $i115: i32;
  var $i116: i64;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i64;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $i133: i16;
  var $i134: i32;
  var $i135: i16;
  var $i136: i64;
  var $p138: ref;
  var $i139: i16;
  var $i140: i32;
  var $i141: i16;
  var $p143: ref;
  var $i14: i64;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 981} {:cexpr "store_fan_min:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p6 := dev_get_drvdata($p0);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 983} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i11 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 985} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_mutex_lock_104($p15);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(851, 1));
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.29, $p4);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.29, $p4);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64($i21, 1350000);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.29, $p4);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i64(1350000, $i23);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i24);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.29, $p4);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 31);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.29, $p4);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i28 := $shl.i64($i27, 3);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 65280);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i30 := $or.i64($i26, $i29);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, $i30);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.29, $p4);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i16($i31);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i10);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i33, 2));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i32);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i10);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p130, $mul.ref($i131, 2));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p132);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i10);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i136, 2));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i139 := $load.i16($M.0, $p138);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_68 := nct6775_write_value($p7, $i135, $i141);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ldv_mutex_unlock_105($p143);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i14 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, 135000);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p4, 65311);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.29, $p4);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.29, $p4);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i48 := $udiv.i64(1350000, $i47);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    call {:si_unique_call 991} {:cexpr "reg"} boogie_si_record_i32($i49);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, 32639);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i49, 0);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i49, 192);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i71, $i72 := $i49, 0;
    assume {:branchcond $i70} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i71);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i10);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i87, 2));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i86);
    assume {:verifier.code 0} true;
    $i69 := $i72;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59 := $i69;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i46 := $i59;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i46);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i10);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i91, 1));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i90, $i95);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb35:
    assume $i96 == 1;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p97, .str.1);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p98, .str.27);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p99, .str.3);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p100, .str.28);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.24, $p102);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 1847);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.24 := $store.i24($M.24, $p102, $i105);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p106, 1);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.25, $p107);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 1001} {:cexpr "tmp___4"} boogie_si_record_i64($i111);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i10);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i124, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, $i46);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} nct6775_write_fan_div_common($p7, $i10);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, jiffies);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(744, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p128, $i127);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i112 == 1;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i46);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i115 := div_from_reg($i114);
    call {:si_unique_call 1003} {:cexpr "tmp___2"} boogie_si_record_i32($i115);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i10);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i116, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i122 := div_from_reg($i121);
    call {:si_unique_call 1005} {:cexpr "tmp___3"} boogie_si_record_i32($i122);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i10, 1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p5, $p0, .str.28, $i123, $i122, $i115);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i73, $i74 := 0, $i49;
    goto $bb28;

  $bb28:
    call $i75, $i76, $i77, $i78, $i79, $i73, $i74, $i82, $i83, $i84, $i85, $i80, $i81 := store_fan_min_loop_$bb28($i75, $i76, $i77, $i78, $i79, $i73, $i74, $i82, $i83, $i84, $i85, $i80, $i81);
    goto $bb28_last;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i73);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i83 := $ule.i32($i82, 6);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i84, $i85 := $i74, $i73;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i71, $i72 := $i84, $i85;
    goto $bb27;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i75 := $lshr.i32($i74, 1);
    call {:si_unique_call 998} {:cexpr "reg"} boogie_si_record_i32($i75);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i73);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 1);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    call {:si_unique_call 999} {:cexpr "new_div"} boogie_si_record_i8($i78);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i79 := $ugt.i32($i75, 192);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i80, $i81 := $i75, $i78;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i71, $i72 := $i80, $i81;
    goto $bb27;

  $bb30:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i73, $i74 := $i78, $i75;
    goto $bb30_dummy;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i10);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i61, 2));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 1);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    call {:si_unique_call 995} $i66 := devirtbounce.5($p65, 1, 0);
    call {:si_unique_call 996} {:cexpr "tmp___1"} boogie_si_record_i32($i66);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i10, 1);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.29, $p4);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} dev_warn.ref.ref.i32.i64.i32($p0, .str.26, $i67, $i68, $i66);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb24;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i10);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i51, 2));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, 254);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(568, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    call {:si_unique_call 992} $i56 := devirtbounce.5($p55, 254, 7);
    call {:si_unique_call 993} {:cexpr "tmp___0"} boogie_si_record_i32($i56);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i10, 1);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.29, $p4);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} dev_warn.ref.ref.i32.i64.i32($p0, .str.25, $i57, $i58, $i56);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i59 := 7;
    goto $bb21;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i10);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref($i38, 2));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, 255);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i10);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i41, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    call {:si_unique_call 989} {:cexpr "new_div"} boogie_si_record_i8($i44);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i10, 1);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} _dev_info.ref.ref.i32($p0, .str.24, $i45);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    goto $bb17;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8159;
}



const ldv_mutex_lock_104: ref;

axiom ldv_mutex_lock_104 == $sub.ref(0, 611556);

procedure ldv_mutex_lock_104($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 612588);

procedure dev_warn.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_105: ref;

axiom ldv_mutex_unlock_105 == $sub.ref(0, 613620);

procedure ldv_mutex_unlock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const show_fan_div: ref;

axiom show_fan_div == $sub.ref(0, 614652);

procedure show_fan_div($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_fan_div($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p3 := nct6775_update_device($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1011} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref($i7, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i13 := div_from_reg($i12);
    call {:si_unique_call 1013} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i14 := sprintf.ref.ref.i32($p2, .str.22, $i13);
    call {:si_unique_call 1015} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const nct6775_temp_is_visible: ref;

axiom nct6775_temp_is_visible == $sub.ref(0, 615684);

procedure nct6775_temp_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation nct6775_temp_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i64;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i64;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i64;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} {:cexpr "nct6775_temp_is_visible:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1416));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p5 := dev_get_drvdata($p4);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i7 := $sdiv.i32($i2, 10);
    call {:si_unique_call 1018} {:cexpr "temp"} boogie_si_record_i32($i7);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i8 := $srem.i32($i2, 10);
    call {:si_unique_call 1019} {:cexpr "nr"} boogie_si_record_i32($i8);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i11, $i7);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i8, 2);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i8, 3);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i8, 4);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i8, 5);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i8, 6);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i8, 7);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i8, 7);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i15 := $i68;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb41:
    assume $i60 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i64 := $ashr.i32($i63, $i7);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 1);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb43;

  $bb44:
    assume $i66 == 1;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i7);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref($i53, 2));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb37;

  $bb38:
    assume $i59 == 1;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i7);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref($i45, 2));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb31;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i7);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref($i37, 2));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb25;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i7);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref($i29, 2));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb19;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i26 := find_temp_source($p6, $i7, $i25);
    call {:si_unique_call 1023} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i20 := find_temp_source($p6, $i7, $i19);
    call {:si_unique_call 1021} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const find_temp_source: ref;

axiom find_temp_source == $sub.ref(0, 616716);

procedure find_temp_source($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation find_temp_source($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i9: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} {:cexpr "find_temp_source:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 1025} {:cexpr "find_temp_source:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i3, 1));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 1026} {:cexpr "source"} boogie_si_record_i32($i7);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(0, $i2);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 19);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i9 := find_temp_source_loop_$bb4($p0, $i2, $i7, $p10, $p11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i9);
    goto $bb4_last;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 2));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i17 := nct6775_read_value($p0, $i16);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i16($i17);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 31);
    call {:si_unique_call 1029} {:cexpr "src"} boogie_si_record_i32($i19);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, $i7);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i21 := $i9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i9, 1);
    call {:si_unique_call 1030} {:cexpr "nr"} boogie_si_record_i32($i23);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, $i2);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i23;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8354;
}



const show_temp: ref;

axiom show_temp == $sub.ref(0, 617748);

procedure show_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p3 := nct6775_update_device($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 1032} {:cexpr "nr"} boogie_si_record_i32($i7);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 1033} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref($i12, 20)), $mul.ref($i11, 2));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i19 := LM75_TEMP_FROM_REG($i18);
    call {:si_unique_call 1035} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i20 := sprintf.ref.ref.i32($p2, .str.16, $i19);
    call {:si_unique_call 1037} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const LM75_TEMP_FROM_REG: ref;

axiom LM75_TEMP_FROM_REG == $sub.ref(0, 618780);

procedure LM75_TEMP_FROM_REG($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation LM75_TEMP_FROM_REG($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "LM75_TEMP_FROM_REG:arg:reg"} boogie_si_record_i16($i0);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i32($i0);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i2 := $sdiv.i32($i1, 128);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 500);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const show_temp_label: ref;

axiom show_temp_label == $sub.ref(0, 619812);

procedure show_temp_label($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp_label($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p3 := nct6775_update_device($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1040} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref($i9, 1));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p8, $mul.ref($i13, 8));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i16 := sprintf.ref.ref.ref($p2, .str.23, $p15);
    call {:si_unique_call 1042} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const show_temp_alarm: ref;

axiom show_temp_alarm == $sub.ref(0, 620844);

procedure show_temp_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p4 := nct6775_update_device($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(852, 1));
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i10 := find_temp_source($p4, $i6, $i9);
    call {:si_unique_call 1045} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i26 := sprintf.ref.ref.i32($p2, .str.22, $i25);
    call {:si_unique_call 1049} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 24);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p13, $mul.ref($i15, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    call {:si_unique_call 1046} {:cexpr "bit"} boogie_si_record_i32($i18);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(968, 1));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i18);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i64($i20, $i21);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    call {:si_unique_call 1047} {:cexpr "alarm"} boogie_si_record_i32($i24);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const show_temp_beep: ref;

axiom show_temp_beep == $sub.ref(0, 621876);

procedure show_temp_beep($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp_beep($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p4 := nct6775_update_device($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i10 := find_temp_source($p4, $i6, $i9);
    call {:si_unique_call 1052} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, 0);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i26 := sprintf.ref.ref.i32($p2, .str.22, $i25);
    call {:si_unique_call 1056} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 24);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p13, $mul.ref($i15, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    call {:si_unique_call 1053} {:cexpr "bit"} boogie_si_record_i32($i18);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i18);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i64($i20, $i21);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    call {:si_unique_call 1054} {:cexpr "beep"} boogie_si_record_i32($i24);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const store_temp_beep: ref;

axiom store_temp_beep == $sub.ref(0, 622908);

procedure store_temp_beep($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_temp_beep($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $p64: ref;
  var $i11: i64;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1058} {:cexpr "store_temp_beep:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p6 := dev_get_drvdata($p0);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i8 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 1061} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.29, $p4);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64($i12, 1);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(853, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i20 := find_temp_source($p7, $i16, $i19);
    call {:si_unique_call 1063} {:cexpr "nr"} boogie_si_record_i32($i20);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i20);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 24);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p24, $mul.ref($i26, 1));
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i29 := $sext.i8.i32($i28);
    call {:si_unique_call 1064} {:cexpr "bit"} boogie_si_record_i32($i29);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i30 := $ashr.i32($i29, 3);
    call {:si_unique_call 1065} {:cexpr "regindex"} boogie_si_record_i32($i30);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_mutex_lock_102($p31);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.29, $p4);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i29);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i43 := $shl.i64(1, $i42);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i44 := $xor.i64($i43, $sub.i64(0, 1));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i41, $i44);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(552, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i30);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 2));
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i30, 3);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i64($i55, $i57);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i16($i58);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 255);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_69 := nct6775_write_value($p7, $i53, $i62);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_mutex_unlock_103($p64);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i29);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i37 := $shl.i64(1, $i36);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i38 := $or.i64($i35, $i37);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 1280)), $mul.ref(976, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i20);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const ldv_mutex_lock_102: ref;

axiom ldv_mutex_lock_102 == $sub.ref(0, 623940);

procedure ldv_mutex_lock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_103: ref;

axiom ldv_mutex_unlock_103 == $sub.ref(0, 624972);

procedure ldv_mutex_unlock_103($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const store_temp: ref;

axiom store_temp == $sub.ref(0, 626004);

procedure store_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i16;
  var $i21: i64;
  var $i22: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $i34: i64;
  var $i35: i64;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $p43: ref;
  var $i17: i64;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1072} {:cexpr "store_temp:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 1074} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 1075} {:cexpr "index"} boogie_si_record_i32($i13);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i14 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 1077} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_mutex_lock_108($p18);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.31, $p4);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i20 := LM75_TEMP_TO_REG($i19);
    call {:si_unique_call 1080} {:cexpr "tmp___0"} boogie_si_record_i16($i20);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i10);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i13);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref($i22, 20)), $mul.ref($i21, 2));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i20);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i10);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i13);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref($i27, 20)), $mul.ref($i26, 2));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i10);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i13);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref($i35, 20)), $mul.ref($i34, 2));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_70 := nct6775_write_temp($p6, $i33, $i41);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_mutex_unlock_109($p43);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i17 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const kstrtol: ref;

axiom kstrtol == $sub.ref(0, 627036);

procedure kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "kstrtol:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i3 := kstrtoll($p0, $i1, $p2);
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_108: ref;

axiom ldv_mutex_lock_108 == $sub.ref(0, 628068);

procedure ldv_mutex_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const LM75_TEMP_TO_REG: ref;

axiom LM75_TEMP_TO_REG == $sub.ref(0, 629100);

procedure LM75_TEMP_TO_REG($i0: i64) returns ($r: i16);
  free requires assertsPassed;



implementation LM75_TEMP_TO_REG($i0: i64) returns ($r: i16)
{
  var $i1: i1;
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} {:cexpr "LM75_TEMP_TO_REG:arg:temp"} boogie_si_record_i64($i0);
    call {:si_unique_call 1088} {:cexpr "LM75_TEMP_TO_REG:arg:__max1"} boogie_si_record_i64($i0);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i64($i0, $sub.i64(0, 55000));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(0, 55000);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i3 := $slt.i64($i2, 125000);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i4 := 125000;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1089} {:cexpr "ntemp"} boogie_si_record_i32($i5);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then $sub.i32(0, 250) else 250);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i5, $i7);
    call {:si_unique_call 1090} {:cexpr "ntemp"} boogie_si_record_i32($i8);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i32($i8, 500);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 7);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_mutex_unlock_109: ref;

axiom ldv_mutex_unlock_109 == $sub.ref(0, 630132);

procedure ldv_mutex_unlock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const kstrtoll: ref;

axiom kstrtoll == $sub.ref(0, 631164);

procedure kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1092} {:cexpr "kstrtoll:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const show_temp_offset: ref;

axiom show_temp_offset == $sub.ref(0, 632196);

procedure show_temp_offset($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp_offset($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p3 := nct6775_update_device($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(861, 1)), $mul.ref($i7, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 1000);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i13 := sprintf.ref.ref.i32($p2, .str.16, $i12);
    call {:si_unique_call 1097} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const store_temp_offset: ref;

axiom store_temp_offset == $sub.ref(0, 633228);

procedure store_temp_offset($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation store_temp_offset($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i21: i64;
  var $i27: i1;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i8;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $i44: i64;
  var $i45: i16;
  var $i46: i32;
  var $i47: i16;
  var $p49: ref;
  var $i13: i64;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1099} {:cexpr "store_temp_offset:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 1101} {:cexpr "nr"} boogie_si_record_i32($i9);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i10 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 1103} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.31, $p4);
    call {:si_unique_call 1104} {:cexpr "__x"} boogie_si_record_i64($i14);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i64($i14, 0);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i22 := $sdiv.i32(1000, 2);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i24 := $sub.i64($i14, $i23);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64(1000);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i26 := $sdiv.i64($i24, $i25);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i64($i21, $sub.i64(0, 128));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 128);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i29 := $slt.i64($i28, 127);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i30 := 127;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.31 := $store.i64($M.31, $p4, $i30);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_mutex_lock_110($p31);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.31, $p4);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i8($i32);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i9);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(861, 1)), $mul.ref($i34, 1));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i33);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i9);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 2));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.31, $p4);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i16($i44);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_71 := nct6775_write_value($p6, $i43, $i47);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_mutex_unlock_111($p49);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb13;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i28 := $i21;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i16 := $sdiv.i32(1000, 2);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i14, $i17);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64(1000);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i20 := $sdiv.i64($i18, $i19);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ldv_mutex_lock_110: ref;

axiom ldv_mutex_lock_110 == $sub.ref(0, 634260);

procedure ldv_mutex_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111: ref;

axiom ldv_mutex_unlock_111 == $sub.ref(0, 635292);

procedure ldv_mutex_unlock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const show_temp_type: ref;

axiom show_temp_type == $sub.ref(0, 636324);

procedure show_temp_type($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation show_temp_type($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p3 := nct6775_update_device($p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1111} {:cexpr "nr"} boogie_si_record_i32($i6);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1280)), $mul.ref(855, 1)), $mul.ref($i7, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i12 := sprintf.ref.ref.i32($p2, .str.16, $i11);
    call {:si_unique_call 1113} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const store_temp_type: ref;

axiom store_temp_type == $sub.ref(0, 637356);

procedure store_temp_type($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation store_temp_type($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i8;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $i36: i16;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i16;
  var $i47: i16;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $i68: i8;
  var $i69: i8;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i16;
  var $p88: ref;
  var $i12: i64;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1115} {:cexpr "store_temp_type:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $p5 := nct6775_update_device($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1117} {:cexpr "nr"} boogie_si_record_i32($i8);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i9 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 1119} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.29, $p4);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 1);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_mutex_lock_112($p19);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.29, $p4);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i8($i20);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i8);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(855, 1)), $mul.ref($i22, 1));
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i21);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(2, $i8);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    call {:si_unique_call 1121} {:cexpr "vbit"} boogie_si_record_i8($i26);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, $i8);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 1122} {:cexpr "dbit"} boogie_si_record_i8($i31);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i36 := nct6775_read_value($p5, $i35);
    call {:si_unique_call 1124} {:cexpr "tmp___0"} boogie_si_record_i16($i36);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i16.i8($i36);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i37);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i26);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i40 := $xor.i32($i39, $sub.i32(0, 1));
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i38, $i40);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    call {:si_unique_call 1125} {:cexpr "vbat"} boogie_si_record_i8($i42);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i47 := nct6775_read_value($p5, $i46);
    call {:si_unique_call 1127} {:cexpr "tmp___1"} boogie_si_record_i16($i47);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i16.i8($i47);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i50 := $sext.i8.i32($i31);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i51 := $xor.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i49, $i51);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    call {:si_unique_call 1128} {:cexpr "diode"} boogie_si_record_i8($i53);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.29, $p4);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 1);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.29, $p4);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 3);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.29, $p4);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 4);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i42, $i53;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(222, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i68);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_72 := nct6775_write_value($p5, $i77, $i79);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(224, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i69);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_73 := nct6775_write_value($p5, $i84, $i86);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} ldv_mutex_unlock_113($p88);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i42, $i53;
    goto $bb26;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i42);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i31);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i70, $i71);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    call {:si_unique_call 1131} {:cexpr "vbat"} boogie_si_record_i8($i73);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i73, $i53;
    goto $bb26;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i42);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i26);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i60, $i61);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    call {:si_unique_call 1129} {:cexpr "vbat"} boogie_si_record_i8($i63);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i53);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i31);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i64, $i65);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    call {:si_unique_call 1130} {:cexpr "diode"} boogie_si_record_i8($i67);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i63, $i67;
    goto $bb26;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.29, $p4);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 3);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.29, $p4);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 4);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_112: ref;

axiom ldv_mutex_lock_112 == $sub.ref(0, 638388);

procedure ldv_mutex_lock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 639420);

procedure ldv_mutex_unlock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const nct6775_other_is_visible: ref;

axiom nct6775_other_is_visible == $sub.ref(0, 640452);

procedure nct6775_other_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation nct6775_other_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i11: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} {:cexpr "nct6775_other_is_visible:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1416));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p5 := dev_get_drvdata($p4);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i2, 1);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 1);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i2, 3);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 1);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i11 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(240, 1));
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i2, 30);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, $sub.i64(0, 3));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p26, $mul.ref($i29, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(232, 1));
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, 30);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $sub.i64(0, 1));
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p15, $mul.ref($i18, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1268, 1));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb3;
}



const show_vid: ref;

axiom show_vid == $sub.ref(0, 641484);

procedure show_vid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_vid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(1266, 1));
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1280)), $mul.ref(1267, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i12 := vid_from_reg($i7, $i11);
    call {:si_unique_call 1141} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i13 := sprintf.ref.ref.i32($p2, .str.16, $i12);
    call {:si_unique_call 1143} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const vid_from_reg: ref;

axiom vid_from_reg == $sub.ref(0, 642516);

procedure vid_from_reg($i0: i32, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation vid_from_reg($i0: i32, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1144} {:cexpr "vid_from_reg:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1145} {:cexpr "vid_from_reg:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1146} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const clear_caseopen: ref;

axiom clear_caseopen == $sub.ref(0, 643548);

procedure clear_caseopen($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation clear_caseopen($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i22: i64;
  var $p65: ref;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1149} {:cexpr "clear_caseopen:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $sub.i32(0, 30));
    call {:si_unique_call 1151} {:cexpr "nr"} boogie_si_record_i32($i10);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i11 := kstrtoul($p2, 10, $p4);
    call {:si_unique_call 1153} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.29, $p4);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} ldv_mutex_lock_140($p16);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i19 := superio_enter($i18);
    call {:si_unique_call 1156} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} superio_select($i24, 10);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i10);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(NCT6775_REG_CR_CASEOPEN_CLR, $mul.ref(0, 2)), $mul.ref($i27, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.32, $p28);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i31 := superio_inb($i26, $i30);
    call {:si_unique_call 1161} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    call {:si_unique_call 1162} {:cexpr "reg"} boogie_si_record_i8($i32);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i10);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(NCT6775_CR_CASEOPEN_CLR_MASK, $mul.ref(0, 2)), $mul.ref($i34, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.33, $p35);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i33, $i37);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    call {:si_unique_call 1163} {:cexpr "reg"} boogie_si_record_i8($i39);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i10);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref(NCT6775_REG_CR_CASEOPEN_CLR, $mul.ref(0, 2)), $mul.ref($i42, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.32, $p43);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i39);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} superio_outb($i41, $i45, $i46);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i39);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i10);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref(NCT6775_CR_CASEOPEN_CLR_MASK, $mul.ref(0, 2)), $mul.ref($i48, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.33, $p49);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i50);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i52 := $xor.i32($i51, $sub.i32(0, 1));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i47, $i52);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    call {:si_unique_call 1165} {:cexpr "reg"} boogie_si_record_i8($i54);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i10);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref(NCT6775_REG_CR_CASEOPEN_CLR, $mul.ref(0, 2)), $mul.ref($i57, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.32, $p58);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i54);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} superio_outb($i56, $i60, $i61);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(4, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} superio_exit($i63);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(736, 1));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i22 := $i3;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(576, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} ldv_mutex_unlock_141($p65);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i19);
    call {:si_unique_call 1157} {:cexpr "count"} boogie_si_record_i64($i21);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const ldv_mutex_lock_140: ref;

axiom ldv_mutex_lock_140 == $sub.ref(0, 644580);

procedure ldv_mutex_lock_140($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_lock_140($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv_linux_kernel_locking_mutex_mutex_lock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_141: ref;

axiom ldv_mutex_unlock_141 == $sub.ref(0, 645612);

procedure ldv_mutex_unlock_141($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_mutex_unlock_141($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} ldv_linux_kernel_locking_mutex_mutex_unlock_update_lock_of_nct6775_data($p0);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 646644);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 647676);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 648708);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1171} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_EMGentry_exit_sensors_nct6775_exit_36_2: ref;

axiom ldv_EMGentry_exit_sensors_nct6775_exit_36_2 == $sub.ref(0, 649740);

procedure ldv_EMGentry_exit_sensors_nct6775_exit_36_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_sensors_nct6775_exit_36_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} sensors_nct6775_exit();
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    return;
}



const sensors_nct6775_exit: ref;

axiom sensors_nct6775_exit == $sub.ref(0, 650772);

procedure sensors_nct6775_exit();
  free requires assertsPassed;



implementation sensors_nct6775_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.34, pdev);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.34, $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(1, 8)));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv_platform_driver_unregister_148(nct6775_driver);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.34, $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(1, 8)));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} platform_device_unregister($p7);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.34, pdev);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} platform_device_unregister($p3);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 651804);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_148: ref;

axiom ldv_platform_driver_unregister_148 == $sub.ref(0, 652836);

procedure ldv_platform_driver_unregister_148($p0: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister_148($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} platform_driver_unregister($p0);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ldv_platform_driver_unregister($0.ref, $p0);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 653868);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister: ref;

axiom ldv_platform_driver_unregister == $sub.ref(0, 654900);

procedure ldv_platform_driver_unregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} ldv_dispatch_deregister_35_1($p1);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_35_1: ref;

axiom ldv_dispatch_deregister_35_1 == $sub.ref(0, 655932);

procedure ldv_dispatch_deregister_35_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_35_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_sensors_nct6775_init_36_11: ref;

axiom ldv_EMGentry_init_sensors_nct6775_init_36_11 == $sub.ref(0, 656964);

procedure ldv_EMGentry_init_sensors_nct6775_init_36_11($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.34, $M.36, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $CurrAddr, $M.0, $M.2, $M.3, $M.89, $M.90, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_EMGentry_init_sensors_nct6775_init_36_11($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i1 := sensors_nct6775_init();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1182} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const sensors_nct6775_init: ref;

axiom sensors_nct6775_init == $sub.ref(0, 657996);

procedure sensors_nct6775_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.34, $M.36, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $CurrAddr, $M.0, $M.2, $M.3, $M.89, $M.90, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation sensors_nct6775_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i15: i8;
  var $i67: i32;
  var $i68: i1;
  var $i8: i32;
  var $i9: i8;
  var $i69: i8;
  var $i70: i1;
  var $i35: i32;
  var $i36: i32;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i25: i32;
  var $i26: i32;
  var $i75: i32;
  var $i76: i1;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i77: i32;
  var $i71: i32;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p0 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p3, 46);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p4, 78);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i5 := ldv___platform_driver_register_146(nct6775_driver, __this_module);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 1187} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb5;

  $bb5:
    call $i10, $p11, $i12, $i13, $i14, $p16, $i17, $p18, $i19, $p20, $p21, $i22, $i23, $i24, $i27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p37, $p38, $i39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $p52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i66, $i15, $i67, $i68, $i8, $i9, $i69, cmdloc_dummy_var_0, cmdloc_dummy_var_1 := sensors_nct6775_init_loop_$bb5($p0, $p1, $p2, $i10, $p11, $i12, $i13, $i14, $p16, $i17, $p18, $i19, $p20, $p21, $i22, $i23, $i24, $i27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p37, $p38, $i39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $p52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i66, $i15, $i67, $i68, $i8, $i9, $i69, cmdloc_dummy_var_0, cmdloc_dummy_var_1);
    goto $bb5_last;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i10, 4));
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.35, $p11);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i13 := nct6775_find($i12, $p1);
    call {:si_unique_call 1189} {:cexpr "address"} boogie_si_record_i32($i13);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 0);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p16 := platform_device_alloc(.str.1, $i13);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i8);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i17, 8));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p18, $p16);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i8);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i19, 8));
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.34, $p20);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i24 := $i8;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i8);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i27, 8));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.34, $p28);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i31 := platform_device_add_data($p29, $p30, 8);
    call {:si_unique_call 1194} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i8, $i31;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p0);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.36;
    call {:si_unique_call 1196} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p37, 0, 56, $zext.i32.i64(8), 0 == 1);
    $M.36 := cmdloc_dummy_var_1;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p38, .str.1);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i13, 5);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p41, $i40);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i13, 6);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p44, $i43);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p45, 256);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $i46 := acpi_check_resource_conflict($p0);
    call {:si_unique_call 1198} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i8);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i53, 8));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.34, $p54);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i56 := platform_device_add_resources($p55, $p0, 1);
    call {:si_unique_call 1201} {:cexpr "err"} boogie_si_record_i32($i56);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i8, $i56;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i8);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i60, 8));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.34, $p61);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i63 := platform_device_add($p62);
    call {:si_unique_call 1203} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i65, $i66 := $i8, $i63;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i8, 1);
    call {:si_unique_call 1190} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i68 := $ule.i32($i67, 1);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i69 := $i15;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i70 == 1);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 19);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ldv_platform_driver_unregister_147(nct6775_driver);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i7 := $i71;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb31:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb28:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i67, $i15;
    goto $bb28_dummy;

  $bb25:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i65, $i66;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i35);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i72, 8));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.34, $p73);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} platform_device_put($p74);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i25, $i26 := $i35, $i36;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i25, 1);
    call {:si_unique_call 1192} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i76 := $sge.i32($i75, 0);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i71 := $i26;
    goto $bb33;

  $bb35:
    assume $i76 == 1;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i77 := $i75;
    goto $bb38;

  $bb38:
    call $i78, $p79, $p80, $i81, $i82, $i83, $p84, $p85, $i86, $i87, $i77 := sensors_nct6775_init_loop_$bb38($i78, $p79, $p80, $i81, $i82, $i83, $p84, $p85, $i86, $i87, $i77);
    goto $bb38_last;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i78, 8));
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.34, $p79);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i77, 1);
    call {:si_unique_call 1206} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i87 := $sge.i32($i86, 0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i87 == 1);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb43:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i77 := $i86;
    goto $bb43_dummy;

  $bb40:
    assume $i82 == 1;
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i77);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i83, 8));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.34, $p84);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} platform_device_unregister($p85);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb22:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i58, $i59;
    goto $bb17;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i8);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i48, 8));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.34, $p49);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} platform_device_put($p50);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i8);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref($i51, 8));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p52, $0.ref);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb9;

  $bb15:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i33, $i34;
    goto $bb17;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i25, $i26 := $i24, $sub.i32(0, 12);
    goto $bb13;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i15 := $i9;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb43_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9170;

  $bb28_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9074;
}



const ldv___platform_driver_register_146: ref;

axiom ldv___platform_driver_register_146 == $sub.ref(0, 659028);

procedure ldv___platform_driver_register_146($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.89, $M.90, $CurrAddr, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv___platform_driver_register_146($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1208} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i3 := ldv___platform_driver_register($i2, $p0, $p1);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1210} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const nct6775_find: ref;

axiom nct6775_find == $sub.ref(0, 660060);

procedure nct6775_find($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $CurrAddr;



implementation nct6775_find($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i9: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i10: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i5: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1212} {:cexpr "nct6775_find:arg:sioaddr"} boogie_si_record_i32($i0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i3 := superio_enter($i0);
    call {:si_unique_call 1214} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $M.37;
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i11 := superio_inb($i0, 32);
    call {:si_unique_call 1217} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i12 := superio_inb($i0, 33);
    call {:si_unique_call 1219} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i11, 8);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i14);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i12);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i32($i16);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i15, $i17);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    call {:si_unique_call 1220} {:cexpr "val"} boogie_si_record_i16($i19);
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i10);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 65520);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 50256);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i10);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 65520);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 46192);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i10);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 65520);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 49968);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i10);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 65520);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 50528);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i10);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 65520);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 51200);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i10);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 65520);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 51472);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i10);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 65535);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} superio_exit($i0);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb34:
    assume $i45 == 1;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, $p46, .str.1);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p47, .str.2);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p48, .str.3);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p49, .str.4);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.43, $p51);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 4135);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.43 := $store.i24($M.43, $p51, $i54);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p55, 1);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.44, $p56);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 1229} {:cexpr "tmp___1"} boogie_si_record_i64($i60);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i61 == 1;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i10);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __dynamic_pr_debug.ref.ref.i32($p2, .str.5, $i62);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i37 == 1;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p43, 5);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} superio_select($i0, 11);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i63 := superio_inb($i0, 96);
    call {:si_unique_call 1223} {:cexpr "tmp___2"} boogie_si_record_i32($i63);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i64 := superio_inb($i0, 97);
    call {:si_unique_call 1225} {:cexpr "tmp___3"} boogie_si_record_i32($i64);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i63, 8);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i64);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i69 := $sext.i16.i32($i68);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i67, $i69);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    call {:si_unique_call 1226} {:cexpr "val"} boogie_si_record_i16($i71);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, $sub.i32(0, 8));
    call {:si_unique_call 1227} {:cexpr "addr"} boogie_si_record_i32($i73);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i76 := superio_inb($i0, 48);
    call {:si_unique_call 1235} {:cexpr "tmp___4"} boogie_si_record_i32($i76);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    call {:si_unique_call 1236} {:cexpr "val"} boogie_si_record_i16($i77);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.38, $p84);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 4);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i87 := $ule.i32($i86, 1);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} superio_exit($i0);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.38, $p88);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref(nct6775_sio_names, $mul.ref(0, 48)), $mul.ref($i90, 8));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.45, $p91);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} vslice_dummy_var_76 := printk.ref.ref.i32.i32(.str.8, $p92, $i0, $i73);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p94, $i0);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i5 := $i73;
    goto $bb3;

  $bb47:
    assume $i87 == 1;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} nct6791_enable_io_mapping($i0);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i80 == 1;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_75 := printk.ref(.str.7);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i77);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, 1);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} superio_outb($i0, 48, $i83);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i74 == 1;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vslice_dummy_var_74 := printk.ref(.str.6);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} superio_exit($i0);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb24:
    assume $i34 == 1;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p42, 4);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p41, 3);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p40, 2);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p39, 1);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p38, 0);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i9 := $M.37;
    call {:si_unique_call 1215} {:cexpr "val"} boogie_si_record_i16($i9);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const platform_device_alloc: ref;

axiom platform_device_alloc == $sub.ref(0, 661092);

procedure platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} {:cexpr "platform_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p2 := external_alloc();
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const platform_device_add_data: ref;

axiom platform_device_add_data == $sub.ref(0, 662124);

procedure platform_device_add_data($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add_data($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1244} {:cexpr "platform_device_add_data:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1245} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 663156);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const acpi_check_resource_conflict: ref;

axiom acpi_check_resource_conflict == $sub.ref(0, 664188);

procedure acpi_check_resource_conflict($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_check_resource_conflict($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1247} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_device_put: ref;

axiom platform_device_put == $sub.ref(0, 665220);

procedure platform_device_put($p0: ref);
  free requires assertsPassed;



implementation platform_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_add_resources: ref;

axiom platform_device_add_resources == $sub.ref(0, 666252);

procedure platform_device_add_resources($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add_resources($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1249} {:cexpr "platform_device_add_resources:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1250} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1251} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const platform_device_add: ref;

axiom platform_device_add == $sub.ref(0, 667284);

procedure platform_device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_platform_driver_unregister_147: ref;

axiom ldv_platform_driver_unregister_147 == $sub.ref(0, 668316);

procedure ldv_platform_driver_unregister_147($p0: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister_147($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} platform_driver_unregister($p0);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} ldv_platform_driver_unregister($0.ref, $p0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 669348);

procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 670380);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1256} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___platform_driver_register: ref;

axiom ldv___platform_driver_register == $sub.ref(0, 671412);

procedure ldv___platform_driver_register($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.89, $M.90, $CurrAddr, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv___platform_driver_register($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} {:cexpr "ldv___platform_driver_register:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i3 := ldv_undef_int();
    call {:si_unique_call 1260} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} ldv_assume($i8);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} ldv_assume($i6);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} ldv_dispatch_register_34_2($p1);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_34_2: ref;

axiom ldv_dispatch_register_34_2 == $sub.ref(0, 672444);

procedure ldv_dispatch_register_34_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.89, $M.90, $CurrAddr, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_dispatch_register_34_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p1 := ldv_xmalloc(16);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} ldv_platform_platform_instance_0($p4);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 673476);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p1 := malloc($i0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} ldv_assume($i4);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1270} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} ldv_assume($i7);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_platform_platform_instance_0: ref;

axiom ldv_platform_platform_instance_0 == $sub.ref(0, 674508);

procedure ldv_platform_platform_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.89, $M.90, $CurrAddr, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_platform_platform_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p8 := ldv_xmalloc(1464);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i10 := ldv_undef_int();
    call {:si_unique_call 1275} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p9);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} ldv_free($p24);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $p34, $p35 := ldv_platform_platform_instance_0_loop_$bb7($p7, $p9, $p12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $p34, $p35);
    goto $bb7_last;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i14 := ldv_platform_instance_probe_0_14($p13, $p9);
    call {:si_unique_call 1279} {:cexpr "ldv_0_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i15 := ldv_ldv_post_probe_154($i14);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1281} {:cexpr "ldv_0_probed_default"} boogie_si_record_i32($i15);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i16 := ldv_undef_int();
    call {:si_unique_call 1283} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i15, 0);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} ldv_assume($i21);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i22 := ldv_undef_int();
    call {:si_unique_call 1289} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} ldv_assume($i19);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i25, $i26, $i27, $i28 := ldv_platform_platform_instance_0_loop_$bb10($i25, $i26, $i27, $i28);
    goto $bb10_last;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i25, 2);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i28 := $i25;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 3);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} ldv_stop();
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} ldv_platform_instance_release_0_3($p35, $p9);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ldv_dispatch_pm_register_0_6();
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} ldv_dispatch_pm_deregister_0_5();
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} ldv_free($p6);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i25 := ldv_undef_int();
    call {:si_unique_call 1287} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_9455;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ldv_ldv_pre_probe_153();
    goto corral_source_split_9437;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 675540);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} free_($p0);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ldv_pre_probe_153: ref;

axiom ldv_ldv_pre_probe_153 == $sub.ref(0, 676572);

procedure ldv_ldv_pre_probe_153();
  free requires assertsPassed;
  modifies $M.89, $M.90;



implementation ldv_ldv_pre_probe_153()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} ldv_pre_probe();
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_0_14: ref;

axiom ldv_platform_instance_probe_0_14 == $sub.ref(0, 677604);

procedure ldv_platform_instance_probe_0_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $CurrAddr;



implementation ldv_platform_instance_probe_0_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i2 := nct6775_probe($p1);
    call {:si_unique_call 1299} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ldv_post_probe_154: ref;

axiom ldv_ldv_post_probe_154 == $sub.ref(0, 678636);

procedure ldv_ldv_post_probe_154($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.89, $M.90, assertsPassed;



implementation ldv_ldv_post_probe_154($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} {:cexpr "ldv_ldv_post_probe_154:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1304} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_pm_register_0_6: ref;

axiom ldv_dispatch_pm_register_0_6 == $sub.ref(0, 679668);

procedure ldv_dispatch_pm_register_0_6();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_dispatch_pm_register_0_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p0 := ldv_xmalloc(16);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} ldv_platform_pm_ops_instance_1($p2);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_pm_deregister_0_5: ref;

axiom ldv_dispatch_pm_deregister_0_5 == $sub.ref(0, 680700);

procedure ldv_dispatch_pm_deregister_0_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_0_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_release_0_3: ref;

axiom ldv_platform_instance_release_0_3 == $sub.ref(0, 681732);

procedure ldv_platform_instance_release_0_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_platform_instance_release_0_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_77 := devirtbounce.6($p0, $p1);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 682764);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_platform_pm_ops_instance_1: ref;

axiom ldv_platform_pm_ops_instance_1 == $sub.ref(0, 683796);

procedure ldv_platform_pm_ops_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_platform_pm_ops_instance_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $i105, $i106, $p107, $p108, $i109, $i110, $p111, $p112, $p113, $p114, $i115, $i116, $p117, $p118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $p133, $p134, $i135, $i136, $p137, $p138 := ldv_platform_pm_ops_instance_1_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $i105, $i106, $p107, $p108, $i109, $i110, $p111, $p112, $p113, $p114, $i115, $i116, $p117, $p118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $p133, $p134, $i135, $i136, $p137, $p138);
    goto $bb1_last;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} ldv_stop();
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.53, $p25);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i31 := ldv_undef_int();
    call {:si_unique_call 1316} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} ldv_stop();
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.87, $p133);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb98:
    assume $i136 == 1;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.88, $p137);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} ldv_pm_ops_instance_complete_1_3($p138, $u4);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.76, $p99);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i105 := ldv_undef_int();
    call {:si_unique_call 1336} {:cexpr "tmp___3"} boogie_si_record_i32($i105);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i106 == 1);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.82, $p119);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.84, $p125);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.86, $p131);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_pm_ops_instance_restore_1_4($p132, $u4);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i128 == 1;
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.85, $p129);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_pm_ops_instance_restore_noirq_1_5($p130, $u4);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i122 == 1;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.83, $p123);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ldv_pm_ops_instance_poweroff_noirq_1_6($p124, $u4);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb93;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i106 == 1;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.78, $p107);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.80, $p113);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i116 == 1;
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.81, $p117);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_pm_ops_instance_restore_early_1_7($p118, $u4);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i110 == 1;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.79, $p111);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_pm_ops_instance_poweroff_late_1_8($p112, $u4);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i102 == 1;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.77, $p103);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} ldv_pm_ops_instance_poweroff_1_9($p104, $u4);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.65, $p65);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_pm_ops_instance_freeze_1_15($p66, $u4);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i67 := ldv_undef_int();
    call {:si_unique_call 1322} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i68 == 1);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.70, $p81);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.72, $p87);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.74, $p93);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb76:
    assume $i96 == 1;
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.75, $p97);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} ldv_pm_ops_instance_thaw_1_10($p98, $u4);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i90 == 1;
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.73, $p91);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} ldv_pm_ops_instance_thaw_noirq_1_11($p92, $u4);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i84 == 1;
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.71, $p85);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_pm_ops_instance_freeze_noirq_1_12($p86, $u4);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i68 == 1;
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.66, $p69);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.68, $p75);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i78 == 1;
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.69, $p79);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ldv_pm_ops_instance_thaw_early_1_13($p80, $u4);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i72 == 1;
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.67, $p73);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv_pm_ops_instance_freeze_late_1_14($p74, $u4);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.55, $p35);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} ldv_pm_ops_instance_suspend_1_21($p36, $u4);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i37 := ldv_undef_int();
    call {:si_unique_call 1319} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.60, $p51);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.62, $p57);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.64, $p63);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_pm_ops_instance_resume_1_16($p64, $u4);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i60 == 1;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.63, $p61);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_pm_ops_instance_resume_early_1_17($p62, $u4);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i54 == 1;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.61, $p55);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} ldv_pm_ops_instance_suspend_late_1_18($p56, $u4);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.56, $p39);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.58, $p45);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i48 == 1;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.59, $p49);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} ldv_pm_ops_instance_resume_noirq_1_19($p50, $u4);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i42 == 1;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.57, $p43);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_pm_ops_instance_suspend_noirq_1_20($p44, $u4);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.54, $p29);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_pm_ops_instance_prepare_1_22($p30, $u4);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.49, $p13);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.51, $p19);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.52, $p23);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_pm_ops_instance_runtime_resume_1_24($p24, $u4);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.50, $p17);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} ldv_pm_ops_instance_runtime_suspend_1_25($p18, $u4);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.47, $p7);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.48, $p11);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} ldv_pm_ops_instance_runtime_idle_1_27($p12, $u4);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i1 := ldv_undef_int();
    call {:si_unique_call 1309} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9518;
}



const ldv_pm_ops_instance_runtime_idle_1_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_1_27 == $sub.ref(0, 684828);

procedure ldv_pm_ops_instance_runtime_idle_1_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_runtime_idle_1_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_78 := devirtbounce.7($p0, $p1);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_1_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_1_25 == $sub.ref(0, 685860);

procedure ldv_pm_ops_instance_runtime_suspend_1_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_runtime_suspend_1_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_79 := devirtbounce.7($p0, $p1);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_1_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_1_24 == $sub.ref(0, 686892);

procedure ldv_pm_ops_instance_runtime_resume_1_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_runtime_resume_1_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_80 := devirtbounce.7($p0, $p1);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_1_22: ref;

axiom ldv_pm_ops_instance_prepare_1_22 == $sub.ref(0, 687924);

procedure ldv_pm_ops_instance_prepare_1_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_prepare_1_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_81 := devirtbounce.7($p0, $p1);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_1_21: ref;

axiom ldv_pm_ops_instance_suspend_1_21 == $sub.ref(0, 688956);

procedure ldv_pm_ops_instance_suspend_1_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_pm_ops_instance_suspend_1_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_82 := nct6775_suspend($p1);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_1_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_1_20 == $sub.ref(0, 689988);

procedure ldv_pm_ops_instance_suspend_noirq_1_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_suspend_noirq_1_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} vslice_dummy_var_83 := devirtbounce.7($p0, $p1);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_1_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_1_19 == $sub.ref(0, 691020);

procedure ldv_pm_ops_instance_resume_noirq_1_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_resume_noirq_1_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_84 := devirtbounce.7($p0, $p1);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_1_18: ref;

axiom ldv_pm_ops_instance_suspend_late_1_18 == $sub.ref(0, 692052);

procedure ldv_pm_ops_instance_suspend_late_1_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_suspend_late_1_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_85 := devirtbounce.7($p0, $p1);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_1_17: ref;

axiom ldv_pm_ops_instance_resume_early_1_17 == $sub.ref(0, 693084);

procedure ldv_pm_ops_instance_resume_early_1_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_resume_early_1_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_86 := devirtbounce.7($p0, $p1);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_1_16: ref;

axiom ldv_pm_ops_instance_resume_1_16 == $sub.ref(0, 694116);

procedure ldv_pm_ops_instance_resume_1_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, assertsPassed;



implementation ldv_pm_ops_instance_resume_1_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} vslice_dummy_var_87 := nct6775_resume($p1);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_1_15: ref;

axiom ldv_pm_ops_instance_freeze_1_15 == $sub.ref(0, 695148);

procedure ldv_pm_ops_instance_freeze_1_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_pm_ops_instance_freeze_1_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_88 := nct6775_suspend($p1);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_1_14: ref;

axiom ldv_pm_ops_instance_freeze_late_1_14 == $sub.ref(0, 696180);

procedure ldv_pm_ops_instance_freeze_late_1_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_freeze_late_1_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_89 := devirtbounce.7($p0, $p1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_1_13: ref;

axiom ldv_pm_ops_instance_thaw_early_1_13 == $sub.ref(0, 697212);

procedure ldv_pm_ops_instance_thaw_early_1_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_thaw_early_1_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_90 := devirtbounce.7($p0, $p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_1_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_1_12 == $sub.ref(0, 698244);

procedure ldv_pm_ops_instance_freeze_noirq_1_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_freeze_noirq_1_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_91 := devirtbounce.7($p0, $p1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_1_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_1_11 == $sub.ref(0, 699276);

procedure ldv_pm_ops_instance_thaw_noirq_1_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_thaw_noirq_1_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_92 := devirtbounce.7($p0, $p1);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_1_10: ref;

axiom ldv_pm_ops_instance_thaw_1_10 == $sub.ref(0, 700308);

procedure ldv_pm_ops_instance_thaw_1_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_thaw_1_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_93 := devirtbounce.7($p0, $p1);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_1_9: ref;

axiom ldv_pm_ops_instance_poweroff_1_9 == $sub.ref(0, 701340);

procedure ldv_pm_ops_instance_poweroff_1_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_1_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_94 := devirtbounce.7($p0, $p1);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_1_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_1_8 == $sub.ref(0, 702372);

procedure ldv_pm_ops_instance_poweroff_late_1_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_late_1_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_95 := devirtbounce.7($p0, $p1);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_1_7: ref;

axiom ldv_pm_ops_instance_restore_early_1_7 == $sub.ref(0, 703404);

procedure ldv_pm_ops_instance_restore_early_1_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_restore_early_1_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_96 := devirtbounce.7($p0, $p1);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_1_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_1_6 == $sub.ref(0, 704436);

procedure ldv_pm_ops_instance_poweroff_noirq_1_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_noirq_1_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_97 := devirtbounce.7($p0, $p1);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_1_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_1_5 == $sub.ref(0, 705468);

procedure ldv_pm_ops_instance_restore_noirq_1_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_pm_ops_instance_restore_noirq_1_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_98 := devirtbounce.7($p0, $p1);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_1_4: ref;

axiom ldv_pm_ops_instance_restore_1_4 == $sub.ref(0, 706500);

procedure ldv_pm_ops_instance_restore_1_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, assertsPassed;



implementation ldv_pm_ops_instance_restore_1_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_99 := nct6775_resume($p1);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_1_3: ref;

axiom ldv_pm_ops_instance_complete_1_3 == $sub.ref(0, 707532);

procedure ldv_pm_ops_instance_complete_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pm_ops_instance_complete_1_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} devirtbounce.8($p0, $p1);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 708564);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.89, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i1 := $M.89;
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 709596);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.90, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i1 := $M.90;
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_574:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 710628);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1374} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 711660);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} ldv_assume($i2);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 712692);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1378} __VERIFIER_error();
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 713724);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.90;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 1379} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 714756);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1381} __VERIFIER_error();
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 715788);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.89;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 1382} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 716820);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 717852);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1383} $free($p0);
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 718884);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1384} $r := $malloc($i0);
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_5_36_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_5_36_4 == $sub.ref(0, 719916);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_5_36_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_5_36_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_6_36_5: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_6_36_5 == $sub.ref(0, 720948);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_6_36_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_6_36_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_5_36_6: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_5_36_6 == $sub.ref(0, 721980);

procedure ldv_dispatch_register_dummy_resourceless_instance_5_36_6();
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.27, $M.28, $M.31, $CurrAddr, $M.19, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_5_36_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p0 := ldv_xmalloc(16);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} ldv_struct_sensor_device_template_dummy_resourceless_instance_2($p2);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p3 := ldv_xmalloc(16);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} ldv_struct_sensor_device_template_dummy_resourceless_instance_3($p5);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p6 := ldv_xmalloc(16);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} ldv_struct_sensor_device_template_dummy_resourceless_instance_4($p8);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p9 := ldv_xmalloc(16);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} ldv_struct_sensor_device_template_dummy_resourceless_instance_5($p11);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p12 := ldv_xmalloc(16);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ldv_struct_sensor_device_template_dummy_resourceless_instance_6($p14);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p15 := ldv_xmalloc(16);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_struct_sensor_device_template_dummy_resourceless_instance_7($p17);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p18 := ldv_xmalloc(16);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} ldv_struct_sensor_device_template_dummy_resourceless_instance_8($p20);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p21 := ldv_xmalloc(16);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_struct_sensor_device_template_dummy_resourceless_instance_9($p23);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p24 := ldv_xmalloc(16);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ldv_struct_sensor_device_template_dummy_resourceless_instance_10($p26);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p27 := ldv_xmalloc(16);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} ldv_struct_sensor_device_template_dummy_resourceless_instance_11($p29);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p30 := ldv_xmalloc(16);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_struct_sensor_device_template_dummy_resourceless_instance_12($p32);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p33 := ldv_xmalloc(16);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_struct_sensor_device_template_dummy_resourceless_instance_13($p35);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p36 := ldv_xmalloc(16);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ldv_struct_sensor_device_template_dummy_resourceless_instance_14($p38);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p39 := ldv_xmalloc(16);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_struct_sensor_device_template_dummy_resourceless_instance_15($p41);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p42 := ldv_xmalloc(16);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ldv_struct_sensor_device_template_dummy_resourceless_instance_16($p44);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p45 := ldv_xmalloc(16);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ldv_struct_sensor_device_template_dummy_resourceless_instance_17($p47);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p48 := ldv_xmalloc(16);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ldv_struct_sensor_device_template_dummy_resourceless_instance_18($p50);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p51 := ldv_xmalloc(16);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_struct_sensor_device_template_dummy_resourceless_instance_19($p53);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p54 := ldv_xmalloc(16);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} ldv_struct_sensor_device_template_dummy_resourceless_instance_20($p56);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p57 := ldv_xmalloc(16);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_struct_sensor_device_template_dummy_resourceless_instance_21($p59);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p60 := ldv_xmalloc(16);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} ldv_struct_sensor_device_template_dummy_resourceless_instance_22($p62);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p63 := ldv_xmalloc(16);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_struct_sensor_device_template_dummy_resourceless_instance_23($p65);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p66 := ldv_xmalloc(16);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_struct_sensor_device_template_dummy_resourceless_instance_24($p68);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p69 := ldv_xmalloc(16);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_struct_sensor_device_template_dummy_resourceless_instance_25($p71);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $p72 := ldv_xmalloc(16);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} ldv_struct_sensor_device_template_dummy_resourceless_instance_26($p74);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p75 := ldv_xmalloc(16);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_struct_sensor_device_template_dummy_resourceless_instance_27($p77);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p78 := ldv_xmalloc(16);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_struct_sensor_device_template_dummy_resourceless_instance_28($p80);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_2: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_2 == $sub.ref(0, 723012);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i1 := ldv_undef_int();
    call {:si_unique_call 1440} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_2_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i4 := ldv_undef_int();
    call {:si_unique_call 1443} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_dummy_resourceless_instance_callback_2_3($u8, $u4, $u6, $p3);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_free($p3);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i7 := ldv_undef_int();
    call {:si_unique_call 1450} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $p6 := ldv_xmalloc(1);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_dummy_resourceless_instance_callback_2_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ldv_free($p6);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p3 := ldv_xmalloc(1);
    goto corral_source_split_9991;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_3: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_3 == $sub.ref(0, 724044);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i1 := ldv_undef_int();
    call {:si_unique_call 1452} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_3_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i4 := ldv_undef_int();
    call {:si_unique_call 1455} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_dummy_resourceless_instance_callback_3_3($u8, $u4, $u6, $p3);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ldv_free($p3);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i7 := ldv_undef_int();
    call {:si_unique_call 1462} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} ldv_dummy_resourceless_instance_callback_3_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ldv_free($p6);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10014;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_4: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_4 == $sub.ref(0, 725076);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i1 := ldv_undef_int();
    call {:si_unique_call 1464} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_4_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i4 := ldv_undef_int();
    call {:si_unique_call 1467} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_dummy_resourceless_instance_callback_4_3($u8, $u4, $u6, $p3);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_free($p3);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i7 := ldv_undef_int();
    call {:si_unique_call 1474} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_dummy_resourceless_instance_callback_4_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_free($p6);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10037;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_5: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_5 == $sub.ref(0, 726108);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i1 := ldv_undef_int();
    call {:si_unique_call 1476} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_5_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i4 := ldv_undef_int();
    call {:si_unique_call 1479} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_dummy_resourceless_instance_callback_5_3($u8, $u4, $u6, $p3);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ldv_free($p3);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i7 := ldv_undef_int();
    call {:si_unique_call 1486} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} ldv_dummy_resourceless_instance_callback_5_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ldv_free($p6);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10060;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_6: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_6 == $sub.ref(0, 727140);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $i1 := ldv_undef_int();
    call {:si_unique_call 1488} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_6_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i4 := ldv_undef_int();
    call {:si_unique_call 1491} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_dummy_resourceless_instance_callback_6_3($u8, $u4, $u6, $p3);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_free($p3);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $i7 := ldv_undef_int();
    call {:si_unique_call 1498} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_dummy_resourceless_instance_callback_6_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_free($p6);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10083;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_7: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_7 == $sub.ref(0, 728172);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i1 := ldv_undef_int();
    call {:si_unique_call 1500} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_7_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i4 := ldv_undef_int();
    call {:si_unique_call 1503} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_dummy_resourceless_instance_callback_7_3($u8, $u4, $u6, $p3);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_free($p3);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i7 := ldv_undef_int();
    call {:si_unique_call 1510} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_dummy_resourceless_instance_callback_7_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_free($p6);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10106;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_8: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_8 == $sub.ref(0, 729204);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_8($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.19, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_8($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $i1 := ldv_undef_int();
    call {:si_unique_call 1512} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_8_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i4 := ldv_undef_int();
    call {:si_unique_call 1515} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_dummy_resourceless_instance_callback_8_3($u8, $u4, $u6, $p3);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_free($p3);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i7 := ldv_undef_int();
    call {:si_unique_call 1522} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_dummy_resourceless_instance_callback_8_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_free($p6);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10129;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_9: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_9 == $sub.ref(0, 730236);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_9($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_9($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $i1 := ldv_undef_int();
    call {:si_unique_call 1524} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_9_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $i4 := ldv_undef_int();
    call {:si_unique_call 1527} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_dummy_resourceless_instance_callback_9_3($u8, $u4, $u6, $p3);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_free($p3);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i7 := ldv_undef_int();
    call {:si_unique_call 1534} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_dummy_resourceless_instance_callback_9_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_free($p6);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10152;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_10: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_10 == $sub.ref(0, 731268);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_10($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_10($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $i1 := ldv_undef_int();
    call {:si_unique_call 1536} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_10_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i4 := ldv_undef_int();
    call {:si_unique_call 1539} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_dummy_resourceless_instance_callback_10_3($u8, $u4, $u6, $p3);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_free($p3);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i7 := ldv_undef_int();
    call {:si_unique_call 1546} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_dummy_resourceless_instance_callback_10_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_free($p6);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10175;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_11: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_11 == $sub.ref(0, 732300);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_11($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_11($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i1 := ldv_undef_int();
    call {:si_unique_call 1548} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_11_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i4 := ldv_undef_int();
    call {:si_unique_call 1551} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_dummy_resourceless_instance_callback_11_3($u8, $u4, $u6, $p3);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_free($p3);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i7 := ldv_undef_int();
    call {:si_unique_call 1558} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_dummy_resourceless_instance_callback_11_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_free($p6);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10198;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_12: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_12 == $sub.ref(0, 733332);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_12($p0: ref);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_12($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i1 := ldv_undef_int();
    call {:si_unique_call 1560} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_12_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $i4 := ldv_undef_int();
    call {:si_unique_call 1563} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_dummy_resourceless_instance_callback_12_3($u8, $u4, $u6, $p3);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_free($p3);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i7 := ldv_undef_int();
    call {:si_unique_call 1570} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} ldv_dummy_resourceless_instance_callback_12_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_free($p6);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10221;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_13: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_13 == $sub.ref(0, 734364);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_13($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_13($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i1 := ldv_undef_int();
    call {:si_unique_call 1572} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_13_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $i4 := ldv_undef_int();
    call {:si_unique_call 1575} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} ldv_dummy_resourceless_instance_callback_13_3($u8, $u4, $u6, $p3);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_free($p3);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $i7 := ldv_undef_int();
    call {:si_unique_call 1582} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} ldv_dummy_resourceless_instance_callback_13_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} ldv_free($p6);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10244;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_14: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_14 == $sub.ref(0, 735396);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_14($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_14($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $i1 := ldv_undef_int();
    call {:si_unique_call 1584} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_14_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i4 := ldv_undef_int();
    call {:si_unique_call 1587} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} ldv_dummy_resourceless_instance_callback_14_3($u8, $u4, $u6, $p3);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv_free($p3);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i7 := ldv_undef_int();
    call {:si_unique_call 1594} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} ldv_dummy_resourceless_instance_callback_14_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} ldv_free($p6);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10267;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_15: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_15 == $sub.ref(0, 736428);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_15($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_15($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i1 := ldv_undef_int();
    call {:si_unique_call 1596} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_15_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $i4 := ldv_undef_int();
    call {:si_unique_call 1599} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} ldv_dummy_resourceless_instance_callback_15_3($u8, $u4, $u6, $p3);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} ldv_free($p3);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i7 := ldv_undef_int();
    call {:si_unique_call 1606} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_dummy_resourceless_instance_callback_15_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_free($p6);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10290;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_16: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_16 == $sub.ref(0, 737460);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_16($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_16($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i1 := ldv_undef_int();
    call {:si_unique_call 1608} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_16_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i4 := ldv_undef_int();
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_dummy_resourceless_instance_callback_16_3($u8, $u4, $u6, $p3);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} ldv_free($p3);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i7 := ldv_undef_int();
    call {:si_unique_call 1618} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} ldv_dummy_resourceless_instance_callback_16_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} ldv_free($p6);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10313;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_17: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_17 == $sub.ref(0, 738492);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_17($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_17($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $i1 := ldv_undef_int();
    call {:si_unique_call 1620} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_17_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i4 := ldv_undef_int();
    call {:si_unique_call 1623} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_dummy_resourceless_instance_callback_17_3($u8, $u4, $u6, $p3);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_free($p3);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $i7 := ldv_undef_int();
    call {:si_unique_call 1630} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_dummy_resourceless_instance_callback_17_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_free($p6);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10336;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_18: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_18 == $sub.ref(0, 739524);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_18($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_18($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i1 := ldv_undef_int();
    call {:si_unique_call 1632} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_18_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $i4 := ldv_undef_int();
    call {:si_unique_call 1635} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} ldv_dummy_resourceless_instance_callback_18_3($u8, $u4, $u6, $p3);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_free($p3);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $i7 := ldv_undef_int();
    call {:si_unique_call 1642} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} ldv_dummy_resourceless_instance_callback_18_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_free($p6);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10359;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_19: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_19 == $sub.ref(0, 740556);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_19($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_19($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i1 := ldv_undef_int();
    call {:si_unique_call 1644} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_19_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i4 := ldv_undef_int();
    call {:si_unique_call 1647} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_dummy_resourceless_instance_callback_19_3($u8, $u4, $u6, $p3);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_free($p3);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $i7 := ldv_undef_int();
    call {:si_unique_call 1654} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} ldv_dummy_resourceless_instance_callback_19_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_free($p6);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10382;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_20: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_20 == $sub.ref(0, 741588);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_20($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_20($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $i1 := ldv_undef_int();
    call {:si_unique_call 1656} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_20_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i4 := ldv_undef_int();
    call {:si_unique_call 1659} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_dummy_resourceless_instance_callback_20_3($u8, $u4, $u6, $p3);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_free($p3);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $i7 := ldv_undef_int();
    call {:si_unique_call 1666} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_dummy_resourceless_instance_callback_20_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_free($p6);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10405;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_21: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_21 == $sub.ref(0, 742620);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_21($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_21($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $i1 := ldv_undef_int();
    call {:si_unique_call 1668} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_21_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i4 := ldv_undef_int();
    call {:si_unique_call 1671} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_dummy_resourceless_instance_callback_21_3($u8, $u4, $u6, $p3);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_free($p3);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i7 := ldv_undef_int();
    call {:si_unique_call 1678} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} ldv_dummy_resourceless_instance_callback_21_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_free($p6);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10428;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_22: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_22 == $sub.ref(0, 743652);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_22($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_22($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $i1 := ldv_undef_int();
    call {:si_unique_call 1680} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_22_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i4 := ldv_undef_int();
    call {:si_unique_call 1683} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_dummy_resourceless_instance_callback_22_3($u8, $u4, $u6, $p3);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} ldv_free($p3);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $i7 := ldv_undef_int();
    call {:si_unique_call 1690} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_dummy_resourceless_instance_callback_22_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} ldv_free($p6);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10451;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_23: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_23 == $sub.ref(0, 744684);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_23($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_23($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} $i1 := ldv_undef_int();
    call {:si_unique_call 1692} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_23_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $i4 := ldv_undef_int();
    call {:si_unique_call 1695} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_dummy_resourceless_instance_callback_23_3($u8, $u4, $u6, $p3);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_free($p3);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i7 := ldv_undef_int();
    call {:si_unique_call 1702} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_dummy_resourceless_instance_callback_23_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} ldv_free($p6);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10474;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_24: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_24 == $sub.ref(0, 745716);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_24($p0: ref);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_24($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} $i1 := ldv_undef_int();
    call {:si_unique_call 1704} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_24_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $i4 := ldv_undef_int();
    call {:si_unique_call 1707} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_dummy_resourceless_instance_callback_24_3($u8, $u4, $u6, $p3);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_free($p3);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $i7 := ldv_undef_int();
    call {:si_unique_call 1714} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_dummy_resourceless_instance_callback_24_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_free($p6);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10497;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_25: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_25 == $sub.ref(0, 746748);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_25($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_25($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i1 := ldv_undef_int();
    call {:si_unique_call 1716} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_25_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $i4 := ldv_undef_int();
    call {:si_unique_call 1719} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} ldv_dummy_resourceless_instance_callback_25_3($u8, $u4, $u6, $p3);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_free($p3);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $i7 := ldv_undef_int();
    call {:si_unique_call 1726} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_dummy_resourceless_instance_callback_25_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_free($p6);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10520;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_26: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_26 == $sub.ref(0, 747780);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_26($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_26($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i1 := ldv_undef_int();
    call {:si_unique_call 1728} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_26_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} $i4 := ldv_undef_int();
    call {:si_unique_call 1731} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} ldv_dummy_resourceless_instance_callback_26_3($u8, $u4, $u6, $p3);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_free($p3);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $i7 := ldv_undef_int();
    call {:si_unique_call 1738} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_dummy_resourceless_instance_callback_26_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_free($p6);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10543;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_27: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_27 == $sub.ref(0, 748812);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_27($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_27($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i1 := ldv_undef_int();
    call {:si_unique_call 1740} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_27_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i4 := ldv_undef_int();
    call {:si_unique_call 1743} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_dummy_resourceless_instance_callback_27_3($u8, $u4, $u6, $p3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_free($p3);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i7 := ldv_undef_int();
    call {:si_unique_call 1750} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_dummy_resourceless_instance_callback_27_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} ldv_free($p6);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10566;
}



const ldv_struct_sensor_device_template_dummy_resourceless_instance_28: ref;

axiom ldv_struct_sensor_device_template_dummy_resourceless_instance_28 == $sub.ref(0, 749844);

procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_28($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_28($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i1 := ldv_undef_int();
    call {:si_unique_call 1752} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_28_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $i4 := ldv_undef_int();
    call {:si_unique_call 1755} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_dummy_resourceless_instance_callback_28_3($u8, $u4, $u6, $p3);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_free($p3);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i7 := ldv_undef_int();
    call {:si_unique_call 1762} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $p6 := ldv_xmalloc(1);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} ldv_dummy_resourceless_instance_callback_28_9($u5, $u4, $u6, $p6, $u7);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_free($p6);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p3 := ldv_xmalloc(1);
    goto corral_source_split_10589;
}



const ldv_dummy_resourceless_instance_callback_28_9: ref;

axiom ldv_dummy_resourceless_instance_callback_28_9 == $sub.ref(0, 750876);

procedure ldv_dummy_resourceless_instance_callback_28_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_28_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} {:cexpr "ldv_dummy_resourceless_instance_callback_28_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_100 := store_weight_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_28_3: ref;

axiom ldv_dummy_resourceless_instance_callback_28_3 == $sub.ref(0, 751908);

procedure ldv_dummy_resourceless_instance_callback_28_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_28_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_101: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} vslice_dummy_var_101 := show_weight_temp($p1, $p2, $p3);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_27_9: ref;

axiom ldv_dummy_resourceless_instance_callback_27_9 == $sub.ref(0, 752940);

procedure ldv_dummy_resourceless_instance_callback_27_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_27_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_102: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} {:cexpr "ldv_dummy_resourceless_instance_callback_27_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} vslice_dummy_var_102 := store_weight_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_27_3: ref;

axiom ldv_dummy_resourceless_instance_callback_27_3 == $sub.ref(0, 753972);

procedure ldv_dummy_resourceless_instance_callback_27_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_27_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_103: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} vslice_dummy_var_103 := show_vid($p1, $p2, $p3);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_26_9: ref;

axiom ldv_dummy_resourceless_instance_callback_26_9 == $sub.ref(0, 755004);

procedure ldv_dummy_resourceless_instance_callback_26_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_26_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_104: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} {:cexpr "ldv_dummy_resourceless_instance_callback_26_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_104 := store_temp_type($p1, $p2, $p3, $i4);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_26_3: ref;

axiom ldv_dummy_resourceless_instance_callback_26_3 == $sub.ref(0, 756036);

procedure ldv_dummy_resourceless_instance_callback_26_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_26_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_105: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} vslice_dummy_var_105 := show_temp_type($p1, $p2, $p3);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_25_9: ref;

axiom ldv_dummy_resourceless_instance_callback_25_9 == $sub.ref(0, 757068);

procedure ldv_dummy_resourceless_instance_callback_25_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_25_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_106: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} {:cexpr "ldv_dummy_resourceless_instance_callback_25_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} vslice_dummy_var_106 := store_temp_tolerance($p1, $p2, $p3, $i4);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_25_3: ref;

axiom ldv_dummy_resourceless_instance_callback_25_3 == $sub.ref(0, 758100);

procedure ldv_dummy_resourceless_instance_callback_25_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_25_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_107: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} vslice_dummy_var_107 := show_temp_tolerance($p1, $p2, $p3);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_24_9: ref;

axiom ldv_dummy_resourceless_instance_callback_24_9 == $sub.ref(0, 759132);

procedure ldv_dummy_resourceless_instance_callback_24_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_24_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_108: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} {:cexpr "ldv_dummy_resourceless_instance_callback_24_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_108 := store_temp_offset($p1, $p2, $p3, $i4);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_24_3: ref;

axiom ldv_dummy_resourceless_instance_callback_24_3 == $sub.ref(0, 760164);

procedure ldv_dummy_resourceless_instance_callback_24_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_24_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_109: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} vslice_dummy_var_109 := show_temp_offset($p1, $p2, $p3);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_23_9: ref;

axiom ldv_dummy_resourceless_instance_callback_23_9 == $sub.ref(0, 761196);

procedure ldv_dummy_resourceless_instance_callback_23_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_23_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_110: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} {:cexpr "ldv_dummy_resourceless_instance_callback_23_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_110 := store_weight_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_23_3: ref;

axiom ldv_dummy_resourceless_instance_callback_23_3 == $sub.ref(0, 762228);

procedure ldv_dummy_resourceless_instance_callback_23_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_23_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_111: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_111 := show_temp_label($p1, $p2, $p3);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_22_9: ref;

axiom ldv_dummy_resourceless_instance_callback_22_9 == $sub.ref(0, 763260);

procedure ldv_dummy_resourceless_instance_callback_22_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_22_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_112: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} {:cexpr "ldv_dummy_resourceless_instance_callback_22_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_112 := store_temp_beep($p1, $p2, $p3, $i4);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_22_3: ref;

axiom ldv_dummy_resourceless_instance_callback_22_3 == $sub.ref(0, 764292);

procedure ldv_dummy_resourceless_instance_callback_22_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_22_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_113: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} vslice_dummy_var_113 := show_temp_beep($p1, $p2, $p3);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_21_9: ref;

axiom ldv_dummy_resourceless_instance_callback_21_9 == $sub.ref(0, 765324);

procedure ldv_dummy_resourceless_instance_callback_21_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_21_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_114: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} {:cexpr "ldv_dummy_resourceless_instance_callback_21_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} vslice_dummy_var_114 := store_weight_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_21_3: ref;

axiom ldv_dummy_resourceless_instance_callback_21_3 == $sub.ref(0, 766356);

procedure ldv_dummy_resourceless_instance_callback_21_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_21_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_115: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_115 := show_temp_alarm($p1, $p2, $p3);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_20_9: ref;

axiom ldv_dummy_resourceless_instance_callback_20_9 == $sub.ref(0, 767388);

procedure ldv_dummy_resourceless_instance_callback_20_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_20_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_116: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} {:cexpr "ldv_dummy_resourceless_instance_callback_20_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_116 := store_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_20_3: ref;

axiom ldv_dummy_resourceless_instance_callback_20_3 == $sub.ref(0, 768420);

procedure ldv_dummy_resourceless_instance_callback_20_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_20_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_117: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} vslice_dummy_var_117 := show_temp($p1, $p2, $p3);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_19_9: ref;

axiom ldv_dummy_resourceless_instance_callback_19_9 == $sub.ref(0, 769452);

procedure ldv_dummy_resourceless_instance_callback_19_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_19_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_118: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} {:cexpr "ldv_dummy_resourceless_instance_callback_19_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} vslice_dummy_var_118 := store_target_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_19_3: ref;

axiom ldv_dummy_resourceless_instance_callback_19_3 == $sub.ref(0, 770484);

procedure ldv_dummy_resourceless_instance_callback_19_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_19_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_119: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_119 := show_target_temp($p1, $p2, $p3);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_18_9: ref;

axiom ldv_dummy_resourceless_instance_callback_18_9 == $sub.ref(0, 771516);

procedure ldv_dummy_resourceless_instance_callback_18_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_18_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_120: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} {:cexpr "ldv_dummy_resourceless_instance_callback_18_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} vslice_dummy_var_120 := store_target_speed($p1, $p2, $p3, $i4);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_18_3: ref;

axiom ldv_dummy_resourceless_instance_callback_18_3 == $sub.ref(0, 772548);

procedure ldv_dummy_resourceless_instance_callback_18_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_18_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_121: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} vslice_dummy_var_121 := show_target_speed($p1, $p2, $p3);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_17_9: ref;

axiom ldv_dummy_resourceless_instance_callback_17_9 == $sub.ref(0, 773580);

procedure ldv_dummy_resourceless_instance_callback_17_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_17_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_122: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} {:cexpr "ldv_dummy_resourceless_instance_callback_17_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} vslice_dummy_var_122 := store_speed_tolerance($p1, $p2, $p3, $i4);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_17_3: ref;

axiom ldv_dummy_resourceless_instance_callback_17_3 == $sub.ref(0, 774612);

procedure ldv_dummy_resourceless_instance_callback_17_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_17_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_123: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vslice_dummy_var_123 := show_speed_tolerance($p1, $p2, $p3);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_16_9: ref;

axiom ldv_dummy_resourceless_instance_callback_16_9 == $sub.ref(0, 775644);

procedure ldv_dummy_resourceless_instance_callback_16_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_16_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_124: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} {:cexpr "ldv_dummy_resourceless_instance_callback_16_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} vslice_dummy_var_124 := store_pwm_weight_temp_sel($p1, $p2, $p3, $i4);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_16_3: ref;

axiom ldv_dummy_resourceless_instance_callback_16_3 == $sub.ref(0, 776676);

procedure ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_125: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} vslice_dummy_var_125 := show_pwm_weight_temp_sel($p1, $p2, $p3);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_9: ref;

axiom ldv_dummy_resourceless_instance_callback_15_9 == $sub.ref(0, 777708);

procedure ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_126: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} {:cexpr "ldv_dummy_resourceless_instance_callback_15_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} vslice_dummy_var_126 := store_pwm_temp_sel($p1, $p2, $p3, $i4);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_3: ref;

axiom ldv_dummy_resourceless_instance_callback_15_3 == $sub.ref(0, 778740);

procedure ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_127: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} vslice_dummy_var_127 := show_pwm_temp_sel($p1, $p2, $p3);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_9: ref;

axiom ldv_dummy_resourceless_instance_callback_14_9 == $sub.ref(0, 779772);

procedure ldv_dummy_resourceless_instance_callback_14_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_128: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} {:cexpr "ldv_dummy_resourceless_instance_callback_14_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} vslice_dummy_var_128 := store_pwm_mode($p1, $p2, $p3, $i4);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_3: ref;

axiom ldv_dummy_resourceless_instance_callback_14_3 == $sub.ref(0, 780804);

procedure ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_129: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_129 := show_pwm_mode($p1, $p2, $p3);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_13_9: ref;

axiom ldv_dummy_resourceless_instance_callback_13_9 == $sub.ref(0, 781836);

procedure ldv_dummy_resourceless_instance_callback_13_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_13_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_130: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} {:cexpr "ldv_dummy_resourceless_instance_callback_13_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_130 := store_pwm_enable($p1, $p2, $p3, $i4);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_13_3: ref;

axiom ldv_dummy_resourceless_instance_callback_13_3 == $sub.ref(0, 782868);

procedure ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_131: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} vslice_dummy_var_131 := show_pwm_enable($p1, $p2, $p3);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_12_9: ref;

axiom ldv_dummy_resourceless_instance_callback_12_9 == $sub.ref(0, 783900);

procedure ldv_dummy_resourceless_instance_callback_12_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_12_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_132: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} {:cexpr "ldv_dummy_resourceless_instance_callback_12_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} vslice_dummy_var_132 := store_pwm($p1, $p2, $p3, $i4);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_12_3: ref;

axiom ldv_dummy_resourceless_instance_callback_12_3 == $sub.ref(0, 784932);

procedure ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_133: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} vslice_dummy_var_133 := show_pwm($p1, $p2, $p3);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_11_9: ref;

axiom ldv_dummy_resourceless_instance_callback_11_9 == $sub.ref(0, 785964);

procedure ldv_dummy_resourceless_instance_callback_11_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_11_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_134: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} {:cexpr "ldv_dummy_resourceless_instance_callback_11_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} vslice_dummy_var_134 := store_in_reg($p1, $p2, $p3, $i4);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_11_3: ref;

axiom ldv_dummy_resourceless_instance_callback_11_3 == $sub.ref(0, 786996);

procedure ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_135: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} vslice_dummy_var_135 := show_in_reg($p1, $p2, $p3);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_9: ref;

axiom ldv_dummy_resourceless_instance_callback_10_9 == $sub.ref(0, 788028);

procedure ldv_dummy_resourceless_instance_callback_10_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_10_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_136: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} {:cexpr "ldv_dummy_resourceless_instance_callback_10_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} vslice_dummy_var_136 := store_fan_time($p1, $p2, $p3, $i4);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_3: ref;

axiom ldv_dummy_resourceless_instance_callback_10_3 == $sub.ref(0, 789060);

procedure ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_137: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_137 := show_fan_time($p1, $p2, $p3);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_9: ref;

axiom ldv_dummy_resourceless_instance_callback_9_9 == $sub.ref(0, 790092);

procedure ldv_dummy_resourceless_instance_callback_9_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_9_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_138: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} {:cexpr "ldv_dummy_resourceless_instance_callback_9_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} vslice_dummy_var_138 := store_fan_pulses($p1, $p2, $p3, $i4);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_3: ref;

axiom ldv_dummy_resourceless_instance_callback_9_3 == $sub.ref(0, 791124);

procedure ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_139: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} vslice_dummy_var_139 := show_fan_pulses($p1, $p2, $p3);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_9: ref;

axiom ldv_dummy_resourceless_instance_callback_8_9 == $sub.ref(0, 792156);

procedure ldv_dummy_resourceless_instance_callback_8_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_8_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_140: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} {:cexpr "ldv_dummy_resourceless_instance_callback_8_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} vslice_dummy_var_140 := store_fan_min($p1, $p2, $p3, $i4);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_3: ref;

axiom ldv_dummy_resourceless_instance_callback_8_3 == $sub.ref(0, 793188);

procedure ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_141: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} vslice_dummy_var_141 := show_fan_min($p1, $p2, $p3);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_9: ref;

axiom ldv_dummy_resourceless_instance_callback_7_9 == $sub.ref(0, 794220);

procedure ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_142: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} {:cexpr "ldv_dummy_resourceless_instance_callback_7_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} vslice_dummy_var_142 := store_weight_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 795252);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_143: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} vslice_dummy_var_143 := show_fan_div($p1, $p2, $p3);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_9: ref;

axiom ldv_dummy_resourceless_instance_callback_6_9 == $sub.ref(0, 796284);

procedure ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_144: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} {:cexpr "ldv_dummy_resourceless_instance_callback_6_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} vslice_dummy_var_144 := store_weight_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 797316);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_145: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} vslice_dummy_var_145 := show_fan($p1, $p2, $p3);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_9: ref;

axiom ldv_dummy_resourceless_instance_callback_5_9 == $sub.ref(0, 798348);

procedure ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_146: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} {:cexpr "ldv_dummy_resourceless_instance_callback_5_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} vslice_dummy_var_146 := store_beep($p1, $p2, $p3, $i4);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 799380);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_147: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} vslice_dummy_var_147 := show_beep($p1, $p2, $p3);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_9: ref;

axiom ldv_dummy_resourceless_instance_callback_4_9 == $sub.ref(0, 800412);

procedure ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_148: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} {:cexpr "ldv_dummy_resourceless_instance_callback_4_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} vslice_dummy_var_148 := store_auto_temp($p1, $p2, $p3, $i4);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_3: ref;

axiom ldv_dummy_resourceless_instance_callback_4_3 == $sub.ref(0, 801444);

procedure ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_149: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} vslice_dummy_var_149 := show_auto_temp($p1, $p2, $p3);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_9: ref;

axiom ldv_dummy_resourceless_instance_callback_3_9 == $sub.ref(0, 802476);

procedure ldv_dummy_resourceless_instance_callback_3_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_3_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_150: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} {:cexpr "ldv_dummy_resourceless_instance_callback_3_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} vslice_dummy_var_150 := store_auto_pwm($p1, $p2, $p3, $i4);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_3: ref;

axiom ldv_dummy_resourceless_instance_callback_3_3 == $sub.ref(0, 803508);

procedure ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_151: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} vslice_dummy_var_151 := show_auto_pwm($p1, $p2, $p3);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_9: ref;

axiom ldv_dummy_resourceless_instance_callback_2_9 == $sub.ref(0, 804540);

procedure ldv_dummy_resourceless_instance_callback_2_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.19, $CurrAddr, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_2_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_152: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} {:cexpr "ldv_dummy_resourceless_instance_callback_2_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} vslice_dummy_var_152 := clear_caseopen($p1, $p2, $p3, $i4);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_3: ref;

axiom ldv_dummy_resourceless_instance_callback_2_3 == $sub.ref(0, 805572);

procedure ldv_dummy_resourceless_instance_callback_2_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_2_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_153: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} vslice_dummy_var_153 := show_alarm($p1, $p2, $p3);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_6_36_7: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_6_36_7 == $sub.ref(0, 806604);

procedure ldv_dispatch_register_dummy_resourceless_instance_6_36_7();
  free requires assertsPassed;
  modifies $CurrAddr, $M.0;



implementation ldv_dispatch_register_dummy_resourceless_instance_6_36_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $p0 := ldv_xmalloc(16);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} ldv_struct_sensor_template_group_dummy_resourceless_instance_32($p2);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $p3 := ldv_xmalloc(16);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} ldv_struct_sensor_template_group_dummy_resourceless_instance_33($p5);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $p6 := ldv_xmalloc(16);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} ldv_struct_sensor_template_group_dummy_resourceless_instance_29($p8);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $p9 := ldv_xmalloc(16);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} ldv_struct_sensor_template_group_dummy_resourceless_instance_30($p11);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} $p12 := ldv_xmalloc(16);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} ldv_struct_sensor_template_group_dummy_resourceless_instance_31($p14);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_sensor_template_group_dummy_resourceless_instance_32: ref;

axiom ldv_struct_sensor_template_group_dummy_resourceless_instance_32 == $sub.ref(0, 807636);

procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_32($p0: ref);
  free requires assertsPassed;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_32($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $i1 := ldv_undef_int();
    call {:si_unique_call 1855} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_32_loop_$bb4($i3, $i4);
    goto $bb4_last;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $i3 := ldv_undef_int();
    call {:si_unique_call 1858} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} ldv_dummy_resourceless_instance_callback_32_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10796;
}



const ldv_struct_sensor_template_group_dummy_resourceless_instance_33: ref;

axiom ldv_struct_sensor_template_group_dummy_resourceless_instance_33 == $sub.ref(0, 808668);

procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_33($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_33($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i1 := ldv_undef_int();
    call {:si_unique_call 1860} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_33_loop_$bb4($i3, $i4);
    goto $bb4_last;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $i3 := ldv_undef_int();
    call {:si_unique_call 1863} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_dummy_resourceless_instance_callback_33_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10808;
}



const ldv_struct_sensor_template_group_dummy_resourceless_instance_29: ref;

axiom ldv_struct_sensor_template_group_dummy_resourceless_instance_29 == $sub.ref(0, 809700);

procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_29($p0: ref);
  free requires assertsPassed;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_29($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $i1 := ldv_undef_int();
    call {:si_unique_call 1865} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_29_loop_$bb4($i3, $i4);
    goto $bb4_last;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i3 := ldv_undef_int();
    call {:si_unique_call 1868} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} ldv_dummy_resourceless_instance_callback_29_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10820;
}



const ldv_struct_sensor_template_group_dummy_resourceless_instance_30: ref;

axiom ldv_struct_sensor_template_group_dummy_resourceless_instance_30 == $sub.ref(0, 810732);

procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_30($p0: ref);
  free requires assertsPassed;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_30($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $i1 := ldv_undef_int();
    call {:si_unique_call 1870} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_30_loop_$bb4($i3, $i4);
    goto $bb4_last;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $i3 := ldv_undef_int();
    call {:si_unique_call 1873} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_dummy_resourceless_instance_callback_30_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10832;
}



const ldv_struct_sensor_template_group_dummy_resourceless_instance_31: ref;

axiom ldv_struct_sensor_template_group_dummy_resourceless_instance_31 == $sub.ref(0, 811764);

procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_31($p0: ref);
  free requires assertsPassed;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_31($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $i1 := ldv_undef_int();
    call {:si_unique_call 1875} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_31_loop_$bb4($i3, $i4);
    goto $bb4_last;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i3 := ldv_undef_int();
    call {:si_unique_call 1878} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_dummy_resourceless_instance_callback_31_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10844;
}



const ldv_dummy_resourceless_instance_callback_31_3: ref;

axiom ldv_dummy_resourceless_instance_callback_31_3 == $sub.ref(0, 812796);

procedure ldv_dummy_resourceless_instance_callback_31_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_31_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_154: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} {:cexpr "ldv_dummy_resourceless_instance_callback_31_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} vslice_dummy_var_154 := nct6775_other_is_visible($p1, $p2, $i3);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_30_3: ref;

axiom ldv_dummy_resourceless_instance_callback_30_3 == $sub.ref(0, 813828);

procedure ldv_dummy_resourceless_instance_callback_30_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_30_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_155: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} {:cexpr "ldv_dummy_resourceless_instance_callback_30_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} vslice_dummy_var_155 := nct6775_in_is_visible($p1, $p2, $i3);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_29_3: ref;

axiom ldv_dummy_resourceless_instance_callback_29_3 == $sub.ref(0, 814860);

procedure ldv_dummy_resourceless_instance_callback_29_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_29_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_156: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} {:cexpr "ldv_dummy_resourceless_instance_callback_29_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} vslice_dummy_var_156 := nct6775_fan_is_visible($p1, $p2, $i3);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_33_3: ref;

axiom ldv_dummy_resourceless_instance_callback_33_3 == $sub.ref(0, 815892);

procedure ldv_dummy_resourceless_instance_callback_33_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_dummy_resourceless_instance_callback_33_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_157: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} {:cexpr "ldv_dummy_resourceless_instance_callback_33_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} vslice_dummy_var_157 := nct6775_temp_is_visible($p1, $p2, $i3);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_32_3: ref;

axiom ldv_dummy_resourceless_instance_callback_32_3 == $sub.ref(0, 816924);

procedure ldv_dummy_resourceless_instance_callback_32_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_32_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_158: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} {:cexpr "ldv_dummy_resourceless_instance_callback_32_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} vslice_dummy_var_158 := nct6775_pwm_is_visible($p1, $p2, $i3);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_36: ref;

axiom ldv_entry_EMGentry_36 == $sub.ref(0, 817956);

procedure ldv_entry_EMGentry_36($p0: ref);
  free requires assertsPassed;
  modifies $M.35, $M.34, $M.36, $M.89, $M.90, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $M.0, $M.29, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.27, $M.28, $M.31, $CurrAddr, $M.19, assertsPassed, $M.2, $M.3;



implementation ldv_entry_EMGentry_36($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i1 := ldv_EMGentry_init_sensors_nct6775_init_36_11($u12);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    call {:si_unique_call 1890} {:cexpr "ldv_36_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i2 := ldv_ldv_post_init_149($i1);
    call {:si_unique_call 1892} {:cexpr "ldv_36_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $i3 := ldv_undef_int();
    call {:si_unique_call 1894} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} ldv_assume($i8);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $i9 := ldv_undef_int();
    call {:si_unique_call 1900} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_EMGentry_exit_sensors_nct6775_exit_36_2($u13);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} ldv_ldv_check_final_state_151();
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_stop();
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} ldv_dispatch_register_dummy_resourceless_instance_6_36_7();
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} ldv_dispatch_register_dummy_resourceless_instance_5_36_6();
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} ldv_dispatch_deregister_dummy_resourceless_instance_6_36_5();
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} ldv_dispatch_deregister_dummy_resourceless_instance_5_36_4();
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_assume($i6);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} ldv_ldv_check_final_state_150();
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_stop();
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_149: ref;

axiom ldv_ldv_post_init_149 == $sub.ref(0, 818988);

procedure ldv_ldv_post_init_149($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.89, $M.90;



implementation ldv_ldv_post_init_149($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} {:cexpr "ldv_ldv_post_init_149:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i1 := ldv_post_init($i0);
    call {:si_unique_call 1912} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_150: ref;

axiom ldv_ldv_check_final_state_150 == $sub.ref(0, 820020);

procedure ldv_ldv_check_final_state_150();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_150()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_151: ref;

axiom ldv_ldv_check_final_state_151 == $sub.ref(0, 821052);

procedure ldv_ldv_check_final_state_151();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_151()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 822084);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i0 := $M.91;
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 823116);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $i0 := $M.92;
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 824148);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i0 := $M.93;
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 825180);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i0 := $M.94;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 826212);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i0 := $M.95;
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 827244);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i0 := $M.96;
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 828276);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i0 := $M.97;
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 829308);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i0 := $M.98;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i3 := $M.99;
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 830340);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i0 := $M.100;
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 831372);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i0 := $M.101;
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 832404);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i0 := $M.102;
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 833436);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i0 := $M.103;
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 834468);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $i0 := $M.104;
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 835500);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i0 := $M.105;
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i3 := $M.105;
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 836532);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i0 := $M.106;
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 837564);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i0 := $M.107;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 838596);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i0 := $M.108;
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 839628);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i0 := $M.109;
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 840660);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $i0 := $M.110;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 841692);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i0 := $M.111;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 842724);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1975} __VERIFIER_error();
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 843756);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1977} __VERIFIER_error();
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 844788);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1979} __VERIFIER_error();
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 845820);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1981} __VERIFIER_error();
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 846852);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1983} __VERIFIER_error();
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 847884);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1985} __VERIFIER_error();
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 848916);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1987} __VERIFIER_error();
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 849948);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1989} __VERIFIER_error();
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 850980);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1991} __VERIFIER_error();
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 852012);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1993} __VERIFIER_error();
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 853044);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1995} __VERIFIER_error();
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 854076);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1997} __VERIFIER_error();
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 855108);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1999} __VERIFIER_error();
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 856140);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2001} __VERIFIER_error();
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 857172);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2003} __VERIFIER_error();
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 858204);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2005} __VERIFIER_error();
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 859236);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2007} __VERIFIER_error();
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 860268);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2009} __VERIFIER_error();
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 861300);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2011} __VERIFIER_error();
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 862332);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2013} __VERIFIER_error();
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 863364);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2015} __VERIFIER_error();
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 864396);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2018} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 865428);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.91, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.104, $M.101, $M.102, $M.103, $M.106, $M.89, $M.107, $M.108, $M.109, $M.110, $M.90, $M.111, $M.19, $M.105, $M.93, $M.92, $M.0, $M.17, $M.15, $M.14, $M.16, $M.18, $M.13, $M.11, $M.8, $M.12, $M.10, $M.6, $M.5, $M.4, $M.7, $M.9, $M.1, $M.33, $M.32, $M.30, $M.26, $M.45, $M.37, $M.34, $M.218, $M.219, $M.220, $M.221, $CurrAddr, $M.35, $M.36, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $M.29, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.27, $M.28, $M.31, assertsPassed, $M.2, $M.3;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 2019} $initialize();
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} ldv_ldv_initialize_152();
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} ldv_entry_EMGentry_36($0.ref);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_152: ref;

axiom ldv_ldv_initialize_152 == $sub.ref(0, 866460);

procedure ldv_ldv_initialize_152();
  free requires assertsPassed;



implementation ldv_ldv_initialize_152()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 867492);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} ldv_assume($i2);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 868524);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2025} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 1} true;
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 869556);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 870588);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 871620);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1243:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 872652);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 873684);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 874716);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 875748);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2026} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 2027} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 2028} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2029} __VERIFIER_assume($i6);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 876780);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 877812);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 878844);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 879876);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 880908);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 881940);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 882972);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2030} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2031} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2032} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2033} __VERIFIER_assume($i4);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 884004);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 885036);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 886068);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 887100);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 888132);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 889164);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 890196);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 891228);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 892260);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 893292);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 894324);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 895356);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 896388);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 897420);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 898452);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 899484);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 900516);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2034} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 2035} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 2036} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 901548);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2037} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2038} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 902580);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 903612);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2039} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2040} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 904644);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 905676);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 906708);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 907740);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.91, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.104, $M.101, $M.102, $M.103, $M.106, $M.89, $M.107, $M.108, $M.109, $M.110, $M.90, $M.111, $M.19, $M.105, $M.93, $M.92, $M.0, $M.17, $M.15, $M.14, $M.16, $M.18, $M.13, $M.11, $M.8, $M.12, $M.10, $M.6, $M.5, $M.4, $M.7, $M.9, $M.1, $M.33, $M.32, $M.30, $M.26, $M.45, $M.37, $M.34, $M.218, $M.219, $M.220, $M.221;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2041} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.91 := 0;
    call {:si_unique_call 2042} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 2043} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 2044} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 2045} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 2046} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.98 := 1;
    call {:si_unique_call 2047} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.99 := 1;
    call {:si_unique_call 2048} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.100 := 1;
    call {:si_unique_call 2049} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.104 := 0;
    call {:si_unique_call 2050} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 2051} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 2052} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 2053} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 2054} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.89 := 0;
    call {:si_unique_call 2055} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 2056} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 2057} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 2058} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 2059} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 2060} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 2061} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 2062} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 2063} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 2064} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 2065} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.19 := 0;
    call {:si_unique_call 2066} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_nct6775_data"} boogie_si_record_i8(0);
    $M.105 := 0;
    call {:si_unique_call 2067} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 2068} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 2069} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2070} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 2071} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 2072} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 2073} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 2074} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2075} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.93 := 0;
    call {:si_unique_call 2076} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 2077} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, sensor_dev_attr_beep_enable, .str.169);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_beep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_beep);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(sensor_dev_attr_beep_enable, $mul.ref(0, 56)), $mul.ref(48, 1)), 15);
    $M.0 := $store.ref($M.0, sensor_dev_attr_intrusion1_beep, .str.168);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_beep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_beep);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(sensor_dev_attr_intrusion1_beep, $mul.ref(0, 56)), $mul.ref(48, 1)), 31);
    $M.0 := $store.ref($M.0, sensor_dev_attr_intrusion0_beep, .str.167);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_beep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_beep);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(sensor_dev_attr_intrusion0_beep, $mul.ref(0, 56)), $mul.ref(48, 1)), 30);
    $M.0 := $store.ref($M.0, sensor_dev_attr_intrusion1_alarm, .str.166);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), clear_caseopen);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(sensor_dev_attr_intrusion1_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 31);
    $M.0 := $store.ref($M.0, sensor_dev_attr_intrusion0_alarm, .str.165);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), clear_caseopen);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(sensor_dev_attr_intrusion0_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 30);
    $M.0 := $store.ref($M.0, dev_attr_cpu0_vid, .str.164);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(32, 1)), show_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_cpu0_vid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, nct6775_attributes_other, dev_attr_cpu0_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_attributes_other, $mul.ref(0, 56)), $mul.ref(1, 8)), sensor_dev_attr_intrusion0_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_attributes_other, $mul.ref(0, 56)), $mul.ref(2, 8)), sensor_dev_attr_intrusion1_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_attributes_other, $mul.ref(0, 56)), $mul.ref(3, 8)), sensor_dev_attr_intrusion0_beep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_attributes_other, $mul.ref(0, 56)), $mul.ref(4, 8)), sensor_dev_attr_intrusion1_beep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_attributes_other, $mul.ref(0, 56)), $mul.ref(5, 8)), sensor_dev_attr_beep_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_attributes_other, $mul.ref(0, 56)), $mul.ref(6, 8)), $0.ref);
    $M.0 := $store.ref($M.0, nct6775_group_other, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_group_other, $mul.ref(0, 32)), $mul.ref(8, 1)), nct6775_other_is_visible);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_group_other, $mul.ref(0, 32)), $mul.ref(16, 1)), nct6775_attributes_other);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_group_other, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_type, .str.163);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_type);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp_type);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_type, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_offset, .str.162);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_offset);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp_offset);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_offset, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_lcrit, .str.160);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 4);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_lcrit, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_crit, .str.158);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 3);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_crit, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_max_hyst, .str.156);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_max_hyst, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_max, .str.154);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_max, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_beep, .str.153);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_beep);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp_beep);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_beep, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_alarm, .str.152);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_alarm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_alarm, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_label, .str.151);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_label);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_label, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_temp_input, .str.149);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_temp_input, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.15 := $store.ref($M.15, nct6775_attributes_temp_template, sensor_dev_template_temp_input);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(1, 8)), sensor_dev_template_temp_label);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(2, 8)), sensor_dev_template_temp_alarm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(3, 8)), sensor_dev_template_temp_beep);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(4, 8)), sensor_dev_template_temp_max);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(5, 8)), sensor_dev_template_temp_max_hyst);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(6, 8)), sensor_dev_template_temp_crit);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(7, 8)), sensor_dev_template_temp_lcrit);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(8, 8)), sensor_dev_template_temp_offset);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(9, 8)), sensor_dev_template_temp_type);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_temp_template, $mul.ref(0, 88)), $mul.ref(10, 8)), $0.ref);
    $M.14 := $store.ref($M.14, nct6775_temp_template_group, nct6775_attributes_temp_template);
    $M.16 := $store.ref($M.16, $add.ref($add.ref(nct6775_temp_template_group, $mul.ref(0, 24)), $mul.ref(8, 1)), nct6775_temp_is_visible);
    $M.18 := $store.i32($M.18, $add.ref($add.ref(nct6775_temp_template_group, $mul.ref(0, 24)), $mul.ref(16, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_div, .str.148);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan_div);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_div, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_min, .str.147);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan_min);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_fan_min);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_min, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_pulses, .str.146);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan_pulses);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_fan_pulses);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_pulses, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_beep, .str.145);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_beep);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_beep);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 16);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_beep, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_alarm, .str.144);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_alarm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 16);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_alarm, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_input, .str.143);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_input, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.15 := $store.ref($M.15, nct6775_attributes_fan_template, sensor_dev_template_fan_input);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_fan_template, $mul.ref(0, 56)), $mul.ref(1, 8)), sensor_dev_template_fan_alarm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_fan_template, $mul.ref(0, 56)), $mul.ref(2, 8)), sensor_dev_template_fan_beep);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_fan_template, $mul.ref(0, 56)), $mul.ref(3, 8)), sensor_dev_template_fan_pulses);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_fan_template, $mul.ref(0, 56)), $mul.ref(4, 8)), sensor_dev_template_fan_min);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_fan_template, $mul.ref(0, 56)), $mul.ref(5, 8)), sensor_dev_template_fan_div);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_fan_template, $mul.ref(0, 56)), $mul.ref(6, 8)), $0.ref);
    $M.14 := $store.ref($M.14, nct6775_fan_template_group, nct6775_attributes_fan_template);
    $M.16 := $store.ref($M.16, $add.ref($add.ref(nct6775_fan_template_group, $mul.ref(0, 24)), $mul.ref(8, 1)), nct6775_fan_is_visible);
    $M.18 := $store.i32($M.18, $add.ref($add.ref(nct6775_fan_template_group, $mul.ref(0, 24)), $mul.ref(16, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_in_max, .str.141);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_in_reg);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_in_reg);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_in_max, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_in_min, .str.139);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_in_reg);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_in_reg);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_in_min, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_in_beep, .str.138);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_beep);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_beep);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_in_beep, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_in_alarm, .str.137);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_alarm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_in_alarm, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_in_input, .str.135);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_in_reg);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_in_input, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.15 := $store.ref($M.15, nct6775_attributes_in_template, sensor_dev_template_in_input);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_in_template, $mul.ref(0, 48)), $mul.ref(1, 8)), sensor_dev_template_in_alarm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_in_template, $mul.ref(0, 48)), $mul.ref(2, 8)), sensor_dev_template_in_beep);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_in_template, $mul.ref(0, 48)), $mul.ref(3, 8)), sensor_dev_template_in_min);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_in_template, $mul.ref(0, 48)), $mul.ref(4, 8)), sensor_dev_template_in_max);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_in_template, $mul.ref(0, 48)), $mul.ref(5, 8)), $0.ref);
    $M.14 := $store.ref($M.14, nct6775_in_template_group, nct6775_attributes_in_template);
    $M.16 := $store.ref($M.16, $add.ref($add.ref(nct6775_in_template_group, $mul.ref(0, 24)), $mul.ref(8, 1)), nct6775_in_is_visible);
    $M.18 := $store.i32($M.18, $add.ref($add.ref(nct6775_in_template_group, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point7_temp, .str.133);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 6);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point7_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point7_pwm, .str.131);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 6);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point7_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point6_temp, .str.129);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 5);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point6_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point6_pwm, .str.127);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 5);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point6_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point5_temp, .str.125);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 4);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point5_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point5_pwm, .str.123);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 4);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point5_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point4_temp, .str.121);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 3);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point4_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point4_pwm, .str.119);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 3);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point4_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point3_temp, .str.117);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point3_pwm, .str.115);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point2_temp, .str.113);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point2_pwm, .str.111);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point1_temp, .str.109);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_auto_point1_pwm, .str.107);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_auto_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_auto_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_weight_duty_base, .str.105);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 6);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_weight_duty_base, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_step, .str.103);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 4);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_step, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_max, .str.101);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 3);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_max, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_weight_duty_step, .str.99);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 5);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_weight_duty_step, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_weight_temp_step_base, .str.97);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_weight_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_weight_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_base, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_weight_temp_step_tol, .str.95);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_weight_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_weight_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step_tol, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_weight_temp_step, .str.93);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_weight_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_weight_temp);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_weight_temp_step, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_weight_temp_sel, .str.92);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_weight_temp_sel);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_weight_temp_sel);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_weight_temp_sel, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_floor, .str.90);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_floor, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_start, .str.88);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_start, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_step_down_time, .str.86);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan_time);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_fan_time);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 2);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_step_down_time, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_step_up_time, .str.84);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan_time);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_fan_time);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_step_up_time, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_stop_time, .str.82);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_fan_time);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_fan_time);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_stop_time, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_tolerance, .str.81);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_speed_tolerance);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_speed_tolerance);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_tolerance, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_fan_target, .str.80);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_target_speed);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_target_speed);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_fan_target, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_target_temp, .str.79);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_target_temp);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_target_temp);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_target_temp, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_crit_temp_tolerance, .str.77);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_tolerance);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp_tolerance);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 1);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_crit_temp_tolerance, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_temp_tolerance, .str.75);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_temp_tolerance);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_temp_tolerance);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_temp_tolerance, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_temp_sel, .str.74);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_temp_sel);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_temp_sel);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_temp_sel, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_enable, .str.73);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_enable);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_enable);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_enable, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm_mode, .str.72);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_mode);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_mode);
    $M.17 := $store.i32($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm_mode, $mul.ref(0, 56)), $mul.ref(52, 1)), 0);
    $M.17 := $store.ref($M.17, sensor_dev_template_pwm, .str.70);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm);
    $M.17 := $store.ref($M.17, $add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref($add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), $mul.ref(2, 1)), $mul.ref(1, 1)), $u14);
    $M.17 := $store.i8($M.17, $add.ref($add.ref(sensor_dev_template_pwm, $mul.ref(0, 56)), $mul.ref(52, 1)), 1);
    $M.15 := $store.ref($M.15, nct6775_attributes_pwm_template, sensor_dev_template_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(1, 8)), sensor_dev_template_pwm_mode);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(2, 8)), sensor_dev_template_pwm_enable);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(3, 8)), sensor_dev_template_pwm_temp_sel);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(4, 8)), sensor_dev_template_pwm_temp_tolerance);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(5, 8)), sensor_dev_template_pwm_crit_temp_tolerance);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(6, 8)), sensor_dev_template_pwm_target_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(7, 8)), sensor_dev_template_fan_target);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(8, 8)), sensor_dev_template_fan_tolerance);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(9, 8)), sensor_dev_template_pwm_stop_time);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(10, 8)), sensor_dev_template_pwm_step_up_time);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(11, 8)), sensor_dev_template_pwm_step_down_time);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(12, 8)), sensor_dev_template_pwm_start);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(13, 8)), sensor_dev_template_pwm_floor);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(14, 8)), sensor_dev_template_pwm_weight_temp_sel);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(15, 8)), sensor_dev_template_pwm_weight_temp_step);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(16, 8)), sensor_dev_template_pwm_weight_temp_step_tol);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(17, 8)), sensor_dev_template_pwm_weight_temp_step_base);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(18, 8)), sensor_dev_template_pwm_weight_duty_step);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(19, 8)), sensor_dev_template_pwm_max);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(20, 8)), sensor_dev_template_pwm_step);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(21, 8)), sensor_dev_template_pwm_weight_duty_base);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(22, 8)), sensor_dev_template_pwm_auto_point1_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(23, 8)), sensor_dev_template_pwm_auto_point1_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(24, 8)), sensor_dev_template_pwm_auto_point2_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(25, 8)), sensor_dev_template_pwm_auto_point2_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(26, 8)), sensor_dev_template_pwm_auto_point3_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(27, 8)), sensor_dev_template_pwm_auto_point3_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(28, 8)), sensor_dev_template_pwm_auto_point4_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(29, 8)), sensor_dev_template_pwm_auto_point4_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(30, 8)), sensor_dev_template_pwm_auto_point5_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(31, 8)), sensor_dev_template_pwm_auto_point5_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(32, 8)), sensor_dev_template_pwm_auto_point6_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(33, 8)), sensor_dev_template_pwm_auto_point6_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(34, 8)), sensor_dev_template_pwm_auto_point7_pwm);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(35, 8)), sensor_dev_template_pwm_auto_point7_temp);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(nct6775_attributes_pwm_template, $mul.ref(0, 296)), $mul.ref(36, 8)), $0.ref);
    $M.14 := $store.ref($M.14, nct6775_pwm_template_group, nct6775_attributes_pwm_template);
    $M.16 := $store.ref($M.16, $add.ref($add.ref(nct6775_pwm_template_group, $mul.ref(0, 24)), $mul.ref(8, 1)), nct6775_pwm_is_visible);
    $M.18 := $store.i32($M.18, $add.ref($add.ref(nct6775_pwm_template_group, $mul.ref(0, 24)), $mul.ref(16, 1)), 1);
    $M.13 := 0;
    call {:si_unique_call 2078} {:cexpr "fan_debounce"} boogie_si_record_i16(0);
    $M.11 := $store.i16($M.11, NCT6792_REG_TEMP_MON, 115);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6792_REG_TEMP_MON, $mul.ref(0, 12)), $mul.ref(1, 2)), 117);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6792_REG_TEMP_MON, $mul.ref(0, 12)), $mul.ref(2, 2)), 119);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6792_REG_TEMP_MON, $mul.ref(0, 12)), $mul.ref(3, 2)), 121);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6792_REG_TEMP_MON, $mul.ref(0, 12)), $mul.ref(4, 2)), 123);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6792_REG_TEMP_MON, $mul.ref(0, 12)), $mul.ref(5, 2)), 125);
    $M.0 := $store.i16($M.0, NCT6792_REG_BEEP, 178);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6792_REG_BEEP, $mul.ref(0, 10)), $mul.ref(1, 2)), 179);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6792_REG_BEEP, $mul.ref(0, 10)), $mul.ref(2, 2)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6792_REG_BEEP, $mul.ref(0, 10)), $mul.ref(3, 2)), 181);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6792_REG_BEEP, $mul.ref(0, 10)), $mul.ref(4, 2)), 191);
    $M.0 := $store.i16($M.0, NCT6791_REG_ALARM, 1113);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_ALARM, $mul.ref(0, 14)), $mul.ref(1, 2)), 1114);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_ALARM, $mul.ref(0, 14)), $mul.ref(2, 2)), 1115);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_ALARM, $mul.ref(0, 14)), $mul.ref(3, 2)), 1384);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_ALARM, $mul.ref(0, 14)), $mul.ref(4, 2)), 1117);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_ALARM, $mul.ref(0, 14)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_ALARM, $mul.ref(0, 14)), $mul.ref(6, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6791_REG_WEIGHT_TEMP_BASE, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(1, 2)), 573);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6791_REG_WEIGHT_TEMP_STEP_TOL, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(1, 2)), 571);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6791_REG_WEIGHT_TEMP_STEP, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(1, 2)), 570);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6791_REG_WEIGHT_TEMP_SEL, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(1, 2)), 569);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6791_REG_WEIGHT_DUTY_BASE, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(1, 2)), 574);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6791_REG_WEIGHT_DUTY_STEP, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(1, 2)), 572);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6791_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i8($M.0, NCT6791_ALARM_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), 29);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), 23);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6791_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), 9);
    $M.8 := $store.i16($M.8, NCT6779_REG_TEMP_CRIT, 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(1, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(2, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(3, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(4, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(5, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(6, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(7, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(8, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(9, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(10, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(11, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(12, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(13, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(14, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(15, 2)), 1801);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(16, 2)), 1802);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(17, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(18, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(19, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(20, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(21, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(22, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(23, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(24, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6779_REG_TEMP_CRIT, $mul.ref(0, 52)), $mul.ref(25, 2)), 0);
    $M.12 := $store.i16($M.12, NCT6779_REG_TEMP_ALTERNATE, 1168);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(1, 2)), 1169);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(2, 2)), 1170);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(3, 2)), 1171);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(4, 2)), 1172);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(5, 2)), 1173);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(6, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(7, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(8, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(9, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(10, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(11, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(12, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(13, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(14, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(15, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(16, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(17, 2)), 1024);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(18, 2)), 1025);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(19, 2)), 1026);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(20, 2)), 1028);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(21, 2)), 1029);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(22, 2)), 1030);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(23, 2)), 1031);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(24, 2)), 1032);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6779_REG_TEMP_ALTERNATE, $mul.ref(0, 52)), $mul.ref(25, 2)), 0);
    $M.10 := $store.i16($M.10, NCT6779_REG_TEMP_CONFIG, 24);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6779_REG_TEMP_CONFIG, $mul.ref(0, 4)), $mul.ref(1, 2)), 338);
    $M.6 := $store.i16($M.6, NCT6779_REG_TEMP_HYST, 58);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6779_REG_TEMP_HYST, $mul.ref(0, 4)), $mul.ref(1, 2)), 339);
    $M.5 := $store.i16($M.5, NCT6779_REG_TEMP_OVER, 57);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6779_REG_TEMP_OVER, $mul.ref(0, 4)), $mul.ref(1, 2)), 341);
    $M.11 := $store.i16($M.11, NCT6779_REG_TEMP_MON, 115);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6779_REG_TEMP_MON, $mul.ref(0, 10)), $mul.ref(1, 2)), 117);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6779_REG_TEMP_MON, $mul.ref(0, 10)), $mul.ref(2, 2)), 119);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6779_REG_TEMP_MON, $mul.ref(0, 10)), $mul.ref(3, 2)), 121);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6779_REG_TEMP_MON, $mul.ref(0, 10)), $mul.ref(4, 2)), 123);
    $M.4 := $store.i16($M.4, NCT6779_REG_TEMP, 39);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6779_REG_TEMP, $mul.ref(0, 4)), $mul.ref(1, 2)), 336);
    $M.0 := $store.i16($M.0, NCT6779_REG_ALARM, 1113);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_ALARM, $mul.ref(0, 14)), $mul.ref(1, 2)), 1114);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_ALARM, $mul.ref(0, 14)), $mul.ref(2, 2)), 1115);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_ALARM, $mul.ref(0, 14)), $mul.ref(3, 2)), 1384);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_ALARM, $mul.ref(0, 14)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_ALARM, $mul.ref(0, 14)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_ALARM, $mul.ref(0, 14)), $mul.ref(6, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6779_REG_TEMP_OFFSET, 1108);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_TEMP_OFFSET, $mul.ref(0, 12)), $mul.ref(1, 2)), 1109);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_TEMP_OFFSET, $mul.ref(0, 12)), $mul.ref(2, 2)), 1110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_TEMP_OFFSET, $mul.ref(0, 12)), $mul.ref(3, 2)), 1098);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_TEMP_OFFSET, $mul.ref(0, 12)), $mul.ref(4, 2)), 1099);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_TEMP_OFFSET, $mul.ref(0, 12)), $mul.ref(5, 2)), 1100);
    $M.0 := $store.i16($M.0, NCT6779_REG_CRITICAL_PWM, 311);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM, $mul.ref(0, 12)), $mul.ref(1, 2)), 567);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM, $mul.ref(0, 12)), $mul.ref(2, 2)), 823);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM, $mul.ref(0, 12)), $mul.ref(3, 2)), 2103);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM, $mul.ref(0, 12)), $mul.ref(4, 2)), 2359);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM, $mul.ref(0, 12)), $mul.ref(5, 2)), 2615);
    $M.0 := $store.i16($M.0, NCT6779_REG_CRITICAL_PWM_ENABLE, 310);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 12)), $mul.ref(1, 2)), 566);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 12)), $mul.ref(2, 2)), 822);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 12)), $mul.ref(3, 2)), 2102);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 12)), $mul.ref(4, 2)), 2358);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 12)), $mul.ref(5, 2)), 2614);
    $M.0 := $store.i16($M.0, NCT6779_REG_FAN_PULSES, 1604);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN_PULSES, $mul.ref(0, 12)), $mul.ref(1, 2)), 1605);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN_PULSES, $mul.ref(0, 12)), $mul.ref(2, 2)), 1606);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN_PULSES, $mul.ref(0, 12)), $mul.ref(3, 2)), 1607);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN_PULSES, $mul.ref(0, 12)), $mul.ref(4, 2)), 1608);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN_PULSES, $mul.ref(0, 12)), $mul.ref(5, 2)), 1609);
    $M.0 := $store.i16($M.0, NCT6779_REG_FAN, 1200);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN, $mul.ref(0, 12)), $mul.ref(1, 2)), 1202);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN, $mul.ref(0, 12)), $mul.ref(2, 2)), 1204);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN, $mul.ref(0, 12)), $mul.ref(3, 2)), 1206);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN, $mul.ref(0, 12)), $mul.ref(4, 2)), 1208);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_FAN, $mul.ref(0, 12)), $mul.ref(5, 2)), 1210);
    $M.0 := $store.i16($M.0, NCT6779_REG_IN, 1152);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(1, 2)), 1153);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(2, 2)), 1154);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(3, 2)), 1155);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(4, 2)), 1156);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(5, 2)), 1157);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(6, 2)), 1158);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(7, 2)), 1159);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(8, 2)), 1160);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(9, 2)), 1161);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(10, 2)), 1162);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(11, 2)), 1163);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(12, 2)), 1164);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(13, 2)), 1165);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6779_REG_IN, $mul.ref(0, 30)), $mul.ref(14, 2)), 1166);
    $M.0 := $store.ref($M.0, nct6779_temp_label, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(1, 8)), .str.37);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(2, 8)), .str.38);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(3, 8)), .str.66);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(4, 8)), .str.67);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(5, 8)), .str.68);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(6, 8)), .str.69);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(7, 8)), .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(8, 8)), .str.40);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(9, 8)), .str.41);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(10, 8)), .str.42);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(11, 8)), .str.43);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(12, 8)), .str.44);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(13, 8)), .str.45);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(14, 8)), .str.46);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(15, 8)), .str.47);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(16, 8)), .str.48);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(17, 8)), .str.49);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(18, 8)), .str.50);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(19, 8)), .str.51);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(20, 8)), .str.52);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(21, 8)), .str.53);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(22, 8)), .str.54);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(23, 8)), .str.55);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(24, 8)), .str.56);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(25, 8)), .str.57);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6779_temp_label, $mul.ref(0, 216)), $mul.ref(26, 8)), .str.58);
    $M.0 := $store.i8($M.0, NCT6779_BEEP_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), 29);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 30);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), 31);
    $M.0 := $store.i8($M.0, NCT6779_ALARM_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), 29);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), 23);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6779_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), 9);
    $M.8 := $store.i16($M.8, NCT6776_REG_TEMP_CRIT, 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(1, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(2, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(3, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(4, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(5, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(6, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(7, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(8, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(9, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(10, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(11, 2)), 1801);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(12, 2)), 1802);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(13, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(14, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(15, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(16, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(17, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(18, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(19, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(20, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6776_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(21, 2)), 0);
    $M.12 := $store.i16($M.12, NCT6776_REG_TEMP_ALTERNATE, 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(1, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(2, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(3, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(4, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(5, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(6, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(7, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(8, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(9, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(10, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(11, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(12, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(13, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(14, 2)), 1025);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(15, 2)), 1026);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(16, 2)), 1028);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(17, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(18, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(19, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(20, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6776_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(21, 2)), 0);
    $M.10 := $store.i16($M.10, NCT6776_REG_TEMP_CONFIG, 24);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6776_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(1, 2)), 338);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6776_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(2, 2)), 594);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6776_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(3, 2)), 1576);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6776_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(4, 2)), 1577);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6776_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(5, 2)), 1578);
    $M.0 := $store.i16($M.0, NCT6776_REG_BEEP, 178);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_BEEP, $mul.ref(0, 10)), $mul.ref(1, 2)), 179);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_BEEP, $mul.ref(0, 10)), $mul.ref(2, 2)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_BEEP, $mul.ref(0, 10)), $mul.ref(3, 2)), 181);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_BEEP, $mul.ref(0, 10)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i8($M.0, NCT6776_PWM_MODE_MASK, 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_PWM_MODE_MASK, $mul.ref(0, 6)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_PWM_MODE_MASK, $mul.ref(0, 6)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_PWM_MODE_MASK, $mul.ref(0, 6)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_PWM_MODE_MASK, $mul.ref(0, 6)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_PWM_MODE_MASK, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, NCT6776_REG_PWM_MODE, 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_REG_PWM_MODE, $mul.ref(0, 6)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_REG_PWM_MODE, $mul.ref(0, 6)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_REG_PWM_MODE, $mul.ref(0, 6)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_REG_PWM_MODE, $mul.ref(0, 6)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_REG_PWM_MODE, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i16($M.0, NCT6776_REG_WEIGHT_DUTY_BASE, 318);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(1, 2)), 574);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(2, 2)), 830);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(3, 2)), 2110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(4, 2)), 2366);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 12)), $mul.ref(5, 2)), 2622);
    $M.0 := $store.i16($M.0, NCT6776_REG_TOLERANCE_H, 268);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_TOLERANCE_H, $mul.ref(0, 12)), $mul.ref(1, 2)), 524);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_TOLERANCE_H, $mul.ref(0, 12)), $mul.ref(2, 2)), 780);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_TOLERANCE_H, $mul.ref(0, 12)), $mul.ref(3, 2)), 2060);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_TOLERANCE_H, $mul.ref(0, 12)), $mul.ref(4, 2)), 2316);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_TOLERANCE_H, $mul.ref(0, 12)), $mul.ref(5, 2)), 2572);
    $M.0 := $store.i16($M.0, NCT6776_REG_FAN_PULSES, 1604);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(1, 2)), 1605);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(2, 2)), 1606);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6776_REG_FAN_MIN, 1594);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_MIN, $mul.ref(0, 10)), $mul.ref(1, 2)), 1596);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_MIN, $mul.ref(0, 10)), $mul.ref(2, 2)), 1598);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_MIN, $mul.ref(0, 10)), $mul.ref(3, 2)), 1600);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6776_REG_FAN_MIN, $mul.ref(0, 10)), $mul.ref(4, 2)), 1602);
    $M.0 := $store.i8($M.0, NCT6776_BEEP_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), 29);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 30);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), 31);
    $M.0 := $store.i8($M.0, NCT6776_ALARM_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), 23);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6776_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), 9);
    $M.8 := $store.i16($M.8, NCT6775_REG_TEMP_CRIT, 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(1, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(2, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(3, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(4, 2)), 2560);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(5, 2)), 2561);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(6, 2)), 2562);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(7, 2)), 2563);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(8, 2)), 2564);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(9, 2)), 2565);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(10, 2)), 2566);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(11, 2)), 2567);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(12, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(13, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(14, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(15, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(16, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(17, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(18, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6775_REG_TEMP_CRIT, $mul.ref(0, 40)), $mul.ref(19, 2)), 0);
    $M.12 := $store.i16($M.12, NCT6775_REG_TEMP_ALTERNATE, 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(1, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(2, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(3, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(4, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(5, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(6, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(7, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(8, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(9, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(10, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(11, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(12, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(13, 2)), 1633);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(14, 2)), 1634);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(15, 2)), 1636);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(16, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(17, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(18, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6775_REG_TEMP_ALTERNATE, $mul.ref(0, 40)), $mul.ref(19, 2)), 0);
    $M.10 := $store.i16($M.10, NCT6775_REG_TEMP_CONFIG, 0);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6775_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(1, 2)), 338);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6775_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(2, 2)), 594);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6775_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(3, 2)), 1576);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6775_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(4, 2)), 1577);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6775_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(5, 2)), 1578);
    $M.6 := $store.i16($M.6, NCT6775_REG_TEMP_HYST, 58);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6775_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(1, 2)), 339);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6775_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(2, 2)), 595);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6775_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(3, 2)), 1651);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6775_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(4, 2)), 1656);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6775_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(5, 2)), 1661);
    $M.5 := $store.i16($M.5, NCT6775_REG_TEMP_OVER, 57);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6775_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(1, 2)), 341);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6775_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(2, 2)), 597);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6775_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(3, 2)), 1650);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6775_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(4, 2)), 1655);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6775_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(5, 2)), 1660);
    $M.11 := $store.i16($M.11, NCT6775_REG_TEMP_MON, 115);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6775_REG_TEMP_MON, $mul.ref(0, 6)), $mul.ref(1, 2)), 117);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6775_REG_TEMP_MON, $mul.ref(0, 6)), $mul.ref(2, 2)), 119);
    $M.4 := $store.i16($M.4, NCT6775_REG_TEMP, 39);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6775_REG_TEMP, $mul.ref(0, 12)), $mul.ref(1, 2)), 336);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6775_REG_TEMP, $mul.ref(0, 12)), $mul.ref(2, 2)), 592);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6775_REG_TEMP, $mul.ref(0, 12)), $mul.ref(3, 2)), 1579);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6775_REG_TEMP, $mul.ref(0, 12)), $mul.ref(4, 2)), 1580);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6775_REG_TEMP, $mul.ref(0, 12)), $mul.ref(5, 2)), 1581);
    $M.0 := $store.i16($M.0, NCT6775_REG_BEEP, 86);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_BEEP, $mul.ref(0, 10)), $mul.ref(1, 2)), 87);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_BEEP, $mul.ref(0, 10)), $mul.ref(2, 2)), 1107);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_BEEP, $mul.ref(0, 10)), $mul.ref(3, 2)), 78);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_BEEP, $mul.ref(0, 10)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6775_REG_ALARM, 1113);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_ALARM, $mul.ref(0, 14)), $mul.ref(1, 2)), 1114);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_ALARM, $mul.ref(0, 14)), $mul.ref(2, 2)), 1115);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_ALARM, $mul.ref(0, 14)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_ALARM, $mul.ref(0, 14)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_ALARM, $mul.ref(0, 14)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_ALARM, $mul.ref(0, 14)), $mul.ref(6, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6775_REG_WEIGHT_TEMP_BASE, 317);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(1, 2)), 573);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(2, 2)), 829);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(3, 2)), 2109);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(4, 2)), 2365);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 12)), $mul.ref(5, 2)), 2621);
    $M.0 := $store.i16($M.0, NCT6775_REG_WEIGHT_TEMP_STEP_TOL, 315);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(1, 2)), 571);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(2, 2)), 827);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(3, 2)), 2107);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(4, 2)), 2363);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 12)), $mul.ref(5, 2)), 2619);
    $M.0 := $store.i16($M.0, NCT6775_REG_WEIGHT_TEMP_STEP, 314);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(1, 2)), 570);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(2, 2)), 826);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(3, 2)), 2106);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(4, 2)), 2362);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 12)), $mul.ref(5, 2)), 2618);
    $M.0 := $store.i16($M.0, NCT6775_REG_WEIGHT_TEMP_SEL, 313);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(1, 2)), 569);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(2, 2)), 825);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(3, 2)), 2105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(4, 2)), 2361);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(5, 2)), 2617);
    $M.0 := $store.i16($M.0, NCT6775_REG_TEMP_SEL, 256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(1, 2)), 512);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(2, 2)), 768);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(3, 2)), 2048);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(4, 2)), 2304);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SEL, $mul.ref(0, 12)), $mul.ref(5, 2)), 2560);
    $M.0 := $store.i16($M.0, NCT6775_REG_TEMP_SOURCE, 1569);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(1, 2)), 1570);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(2, 2)), 1571);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(3, 2)), 1572);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(4, 2)), 1573);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(5, 2)), 1574);
    $M.0 := $store.i16($M.0, NCT6775_REG_TEMP_OFFSET, 1108);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_OFFSET, $mul.ref(0, 6)), $mul.ref(1, 2)), 1109);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TEMP_OFFSET, $mul.ref(0, 6)), $mul.ref(2, 2)), 1110);
    $M.0 := $store.i16($M.0, NCT6775_REG_CRITICAL_TEMP_TOLERANCE, 312);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 12)), $mul.ref(1, 2)), 568);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 12)), $mul.ref(2, 2)), 824);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 12)), $mul.ref(3, 2)), 2104);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 12)), $mul.ref(4, 2)), 2360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 12)), $mul.ref(5, 2)), 2616);
    $M.0 := $store.i16($M.0, NCT6775_REG_CRITICAL_TEMP, 309);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP, $mul.ref(0, 12)), $mul.ref(1, 2)), 565);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP, $mul.ref(0, 12)), $mul.ref(2, 2)), 821);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP, $mul.ref(0, 12)), $mul.ref(3, 2)), 2101);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP, $mul.ref(0, 12)), $mul.ref(4, 2)), 2357);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_CRITICAL_TEMP, $mul.ref(0, 12)), $mul.ref(5, 2)), 2613);
    $M.0 := $store.i16($M.0, NCT6775_REG_AUTO_PWM, 295);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_PWM, $mul.ref(0, 12)), $mul.ref(1, 2)), 551);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_PWM, $mul.ref(0, 12)), $mul.ref(2, 2)), 807);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_PWM, $mul.ref(0, 12)), $mul.ref(3, 2)), 2087);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_PWM, $mul.ref(0, 12)), $mul.ref(4, 2)), 2343);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_PWM, $mul.ref(0, 12)), $mul.ref(5, 2)), 2599);
    $M.0 := $store.i16($M.0, NCT6775_REG_AUTO_TEMP, 289);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_TEMP, $mul.ref(0, 12)), $mul.ref(1, 2)), 545);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_TEMP, $mul.ref(0, 12)), $mul.ref(2, 2)), 801);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_TEMP, $mul.ref(0, 12)), $mul.ref(3, 2)), 2081);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_TEMP, $mul.ref(0, 12)), $mul.ref(4, 2)), 2337);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_AUTO_TEMP, $mul.ref(0, 12)), $mul.ref(5, 2)), 2593);
    $M.0 := $store.i8($M.0, NCT6775_PWM_MODE_MASK, 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_PWM_MODE_MASK, $mul.ref(0, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_PWM_MODE_MASK, $mul.ref(0, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, NCT6775_REG_PWM_MODE, 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_REG_PWM_MODE, $mul.ref(0, 3)), $mul.ref(1, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_REG_PWM_MODE, $mul.ref(0, 3)), $mul.ref(2, 1)), 18);
    $M.0 := $store.i16($M.0, NCT6775_REG_PWM_READ, 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM_READ, $mul.ref(0, 12)), $mul.ref(1, 2)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM_READ, $mul.ref(0, 12)), $mul.ref(2, 2)), 17);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM_READ, $mul.ref(0, 12)), $mul.ref(3, 2)), 19);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM_READ, $mul.ref(0, 12)), $mul.ref(4, 2)), 21);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM_READ, $mul.ref(0, 12)), $mul.ref(5, 2)), 2569);
    $M.0 := $store.i16($M.0, NCT6775_REG_WEIGHT_DUTY_STEP, 316);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(1, 2)), 572);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(2, 2)), 828);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(3, 2)), 2108);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(4, 2)), 2364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 12)), $mul.ref(5, 2)), 2620);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_STEP_OUTPUT, 267);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_OUTPUT, $mul.ref(0, 6)), $mul.ref(1, 2)), 523);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_OUTPUT, $mul.ref(0, 6)), $mul.ref(2, 2)), 779);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_MAX_OUTPUT, 266);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MAX_OUTPUT, $mul.ref(0, 6)), $mul.ref(1, 2)), 522);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MAX_OUTPUT, $mul.ref(0, 6)), $mul.ref(2, 2)), 778);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_STOP_OUTPUT, 261);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_OUTPUT, $mul.ref(0, 12)), $mul.ref(1, 2)), 517);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_OUTPUT, $mul.ref(0, 12)), $mul.ref(2, 2)), 773);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_OUTPUT, $mul.ref(0, 12)), $mul.ref(3, 2)), 2053);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_OUTPUT, $mul.ref(0, 12)), $mul.ref(4, 2)), 2309);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_OUTPUT, $mul.ref(0, 12)), $mul.ref(5, 2)), 2565);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_START_OUTPUT, 262);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_START_OUTPUT, $mul.ref(0, 12)), $mul.ref(1, 2)), 518);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_START_OUTPUT, $mul.ref(0, 12)), $mul.ref(2, 2)), 774);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_START_OUTPUT, $mul.ref(0, 12)), $mul.ref(3, 2)), 2054);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_START_OUTPUT, $mul.ref(0, 12)), $mul.ref(4, 2)), 2310);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_START_OUTPUT, $mul.ref(0, 12)), $mul.ref(5, 2)), 2566);
    $M.0 := $store.i16($M.0, NCT6775_REG_PWM, 265);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM, $mul.ref(0, 12)), $mul.ref(1, 2)), 521);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM, $mul.ref(0, 12)), $mul.ref(2, 2)), 777);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM, $mul.ref(0, 12)), $mul.ref(3, 2)), 2057);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM, $mul.ref(0, 12)), $mul.ref(4, 2)), 2313);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_PWM, $mul.ref(0, 12)), $mul.ref(5, 2)), 2569);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_STEP_DOWN_TIME, 259);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 12)), $mul.ref(1, 2)), 515);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 12)), $mul.ref(2, 2)), 771);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 12)), $mul.ref(3, 2)), 2051);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 12)), $mul.ref(4, 2)), 2307);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 12)), $mul.ref(5, 2)), 2563);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_STEP_UP_TIME, 260);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_UP_TIME, $mul.ref(0, 12)), $mul.ref(1, 2)), 516);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_UP_TIME, $mul.ref(0, 12)), $mul.ref(2, 2)), 772);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_UP_TIME, $mul.ref(0, 12)), $mul.ref(3, 2)), 2052);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_UP_TIME, $mul.ref(0, 12)), $mul.ref(4, 2)), 2308);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STEP_UP_TIME, $mul.ref(0, 12)), $mul.ref(5, 2)), 2564);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_STOP_TIME, 263);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_TIME, $mul.ref(0, 12)), $mul.ref(1, 2)), 519);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_TIME, $mul.ref(0, 12)), $mul.ref(2, 2)), 775);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_TIME, $mul.ref(0, 12)), $mul.ref(3, 2)), 2055);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_TIME, $mul.ref(0, 12)), $mul.ref(4, 2)), 2311);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_STOP_TIME, $mul.ref(0, 12)), $mul.ref(5, 2)), 2567);
    $M.0 := $store.i16($M.0, NCT6775_FAN_PULSE_SHIFT, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_FAN_PULSE_SHIFT, $mul.ref(0, 12)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_FAN_PULSE_SHIFT, $mul.ref(0, 12)), $mul.ref(2, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_FAN_PULSE_SHIFT, $mul.ref(0, 12)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_FAN_PULSE_SHIFT, $mul.ref(0, 12)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_FAN_PULSE_SHIFT, $mul.ref(0, 12)), $mul.ref(5, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_PULSES, 1601);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(1, 2)), 1602);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(2, 2)), 1603);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(3, 2)), 1604);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_MIN, 59);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MIN, $mul.ref(0, 6)), $mul.ref(1, 2)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MIN, $mul.ref(0, 6)), $mul.ref(2, 2)), 61);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN_MODE, 258);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MODE, $mul.ref(0, 12)), $mul.ref(1, 2)), 514);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MODE, $mul.ref(0, 12)), $mul.ref(2, 2)), 770);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MODE, $mul.ref(0, 12)), $mul.ref(3, 2)), 2050);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MODE, $mul.ref(0, 12)), $mul.ref(4, 2)), 2306);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN_MODE, $mul.ref(0, 12)), $mul.ref(5, 2)), 2562);
    $M.0 := $store.i16($M.0, NCT6775_REG_FAN, 1584);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN, $mul.ref(0, 10)), $mul.ref(1, 2)), 1586);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN, $mul.ref(0, 10)), $mul.ref(2, 2)), 1588);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN, $mul.ref(0, 10)), $mul.ref(3, 2)), 1590);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_FAN, $mul.ref(0, 10)), $mul.ref(4, 2)), 1592);
    $M.0 := $store.i16($M.0, NCT6775_REG_TARGET, 257);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TARGET, $mul.ref(0, 12)), $mul.ref(1, 2)), 513);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TARGET, $mul.ref(0, 12)), $mul.ref(2, 2)), 769);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TARGET, $mul.ref(0, 12)), $mul.ref(3, 2)), 2049);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TARGET, $mul.ref(0, 12)), $mul.ref(4, 2)), 2305);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_TARGET, $mul.ref(0, 12)), $mul.ref(5, 2)), 2561);
    $M.0 := $store.i16($M.0, NCT6775_REG_IN_MAX, 43);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(1, 2)), 45);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(2, 2)), 47);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(3, 2)), 49);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(4, 2)), 51);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(5, 2)), 53);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(6, 2)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(7, 2)), 1364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(8, 2)), 1366);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(9, 2)), 1368);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(10, 2)), 1370);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(11, 2)), 1372);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(12, 2)), 1374);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(13, 2)), 1376);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MAX, $mul.ref(0, 30)), $mul.ref(14, 2)), 1378);
    $M.0 := $store.i16($M.0, NCT6775_REG_IN_MIN, 44);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(1, 2)), 46);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(2, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(3, 2)), 50);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(4, 2)), 52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(5, 2)), 54);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(6, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(7, 2)), 1365);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(8, 2)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(9, 2)), 1369);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(10, 2)), 1371);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(11, 2)), 1373);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(12, 2)), 1375);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(13, 2)), 1377);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN_MIN, $mul.ref(0, 30)), $mul.ref(14, 2)), 1379);
    $M.0 := $store.i16($M.0, NCT6775_REG_IN, 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(1, 2)), 33);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(2, 2)), 34);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(3, 2)), 35);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(4, 2)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(5, 2)), 37);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(6, 2)), 38);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(7, 2)), 1360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(8, 2)), 1361);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6775_REG_IN, $mul.ref(0, 20)), $mul.ref(9, 2)), 1362);
    $M.0 := $store.ref($M.0, nct6775_temp_label, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(1, 8)), .str.37);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(2, 8)), .str.38);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(3, 8)), .str.39);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(4, 8)), .str.59);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(5, 8)), .str.48);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(6, 8)), .str.49);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(7, 8)), .str.60);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(8, 8)), .str.61);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(9, 8)), .str.62);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(10, 8)), .str.63);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(11, 8)), .str.64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(12, 8)), .str.65);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(13, 8)), .str.50);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(14, 8)), .str.51);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(15, 8)), .str.52);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(16, 8)), .str.53);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(17, 8)), .str.54);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(18, 8)), .str.55);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(19, 8)), .str.56);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_temp_label, $mul.ref(0, 168)), $mul.ref(20, 8)), .str.57);
    $M.0 := $store.i8($M.0, NCT6775_BEEP_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, NCT6775_ALARM_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6775_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), $sub.i8(0, 1));
    $M.7 := $store.i16($M.7, NCT6106_REG_TEMP_CRIT_H, 193);
    $M.7 := $store.i16($M.7, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_H, $mul.ref(0, 12)), $mul.ref(1, 2)), 197);
    $M.7 := $store.i16($M.7, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_H, $mul.ref(0, 12)), $mul.ref(2, 2)), 201);
    $M.7 := $store.i16($M.7, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_H, $mul.ref(0, 12)), $mul.ref(3, 2)), 207);
    $M.7 := $store.i16($M.7, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_H, $mul.ref(0, 12)), $mul.ref(4, 2)), 209);
    $M.7 := $store.i16($M.7, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_H, $mul.ref(0, 12)), $mul.ref(5, 2)), 213);
    $M.9 := $store.i16($M.9, NCT6106_REG_TEMP_CRIT_L, 192);
    $M.9 := $store.i16($M.9, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_L, $mul.ref(0, 12)), $mul.ref(1, 2)), 196);
    $M.9 := $store.i16($M.9, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_L, $mul.ref(0, 12)), $mul.ref(2, 2)), 200);
    $M.9 := $store.i16($M.9, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_L, $mul.ref(0, 12)), $mul.ref(3, 2)), 204);
    $M.9 := $store.i16($M.9, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_L, $mul.ref(0, 12)), $mul.ref(4, 2)), 208);
    $M.9 := $store.i16($M.9, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT_L, $mul.ref(0, 12)), $mul.ref(5, 2)), 212);
    $M.8 := $store.i16($M.8, NCT6106_REG_TEMP_CRIT, 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(1, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(2, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(3, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(4, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(5, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(6, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(7, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(8, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(9, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(10, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(11, 2)), 516);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(12, 2)), 517);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(13, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(14, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(15, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(16, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(17, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(18, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(19, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(20, 2)), 0);
    $M.8 := $store.i16($M.8, $add.ref($add.ref(NCT6106_REG_TEMP_CRIT, $mul.ref(0, 44)), $mul.ref(21, 2)), 0);
    $M.12 := $store.i16($M.12, NCT6106_REG_TEMP_ALTERNATE, 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(1, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(2, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(3, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(4, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(5, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(6, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(7, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(8, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(9, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(10, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(11, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(12, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(13, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(14, 2)), 81);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(15, 2)), 82);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(16, 2)), 84);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(17, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(18, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(19, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(20, 2)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref(NCT6106_REG_TEMP_ALTERNATE, $mul.ref(0, 44)), $mul.ref(21, 2)), 0);
    $M.10 := $store.i16($M.10, NCT6106_REG_TEMP_CONFIG, 183);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6106_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(1, 2)), 184);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6106_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(2, 2)), 185);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6106_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(3, 2)), 186);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6106_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(4, 2)), 187);
    $M.10 := $store.i16($M.10, $add.ref($add.ref(NCT6106_REG_TEMP_CONFIG, $mul.ref(0, 12)), $mul.ref(5, 2)), 188);
    $M.6 := $store.i16($M.6, NCT6106_REG_TEMP_HYST, 195);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6106_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(1, 2)), 199);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6106_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(2, 2)), 203);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6106_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(3, 2)), 207);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6106_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(4, 2)), 211);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(NCT6106_REG_TEMP_HYST, $mul.ref(0, 12)), $mul.ref(5, 2)), 215);
    $M.5 := $store.i16($M.5, NCT6106_REG_TEMP_OVER, 194);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6106_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(1, 2)), 198);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6106_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(2, 2)), 202);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6106_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(3, 2)), 206);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6106_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(4, 2)), 210);
    $M.5 := $store.i16($M.5, $add.ref($add.ref(NCT6106_REG_TEMP_OVER, $mul.ref(0, 12)), $mul.ref(5, 2)), 214);
    $M.11 := $store.i16($M.11, NCT6106_REG_TEMP_MON, 24);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6106_REG_TEMP_MON, $mul.ref(0, 6)), $mul.ref(1, 2)), 25);
    $M.11 := $store.i16($M.11, $add.ref($add.ref(NCT6106_REG_TEMP_MON, $mul.ref(0, 6)), $mul.ref(2, 2)), 26);
    $M.4 := $store.i16($M.4, NCT6106_REG_TEMP, 16);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6106_REG_TEMP, $mul.ref(0, 12)), $mul.ref(1, 2)), 17);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6106_REG_TEMP, $mul.ref(0, 12)), $mul.ref(2, 2)), 18);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6106_REG_TEMP, $mul.ref(0, 12)), $mul.ref(3, 2)), 19);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6106_REG_TEMP, $mul.ref(0, 12)), $mul.ref(4, 2)), 20);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(NCT6106_REG_TEMP, $mul.ref(0, 12)), $mul.ref(5, 2)), 21);
    $M.0 := $store.i8($M.0, NCT6106_BEEP_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 34);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_BEEP_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), $sub.i8(0, 1));
    $M.0 := $store.i16($M.0, NCT6106_REG_BEEP, 960);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_BEEP, $mul.ref(0, 10)), $mul.ref(1, 2)), 961);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_BEEP, $mul.ref(0, 10)), $mul.ref(2, 2)), 962);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_BEEP, $mul.ref(0, 10)), $mul.ref(3, 2)), 963);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_BEEP, $mul.ref(0, 10)), $mul.ref(4, 2)), 964);
    $M.0 := $store.i8($M.0, NCT6106_ALARM_BITS, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(5, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(7, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(8, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(10, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(11, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(17, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(18, 1)), 34);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(19, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(22, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(23, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(24, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(25, 1)), 17);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(26, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(27, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(28, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(29, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(30, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_ALARM_BITS, $mul.ref(0, 32)), $mul.ref(31, 1)), $sub.i8(0, 1));
    $M.0 := $store.i16($M.0, NCT6106_REG_ALARM, 119);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_ALARM, $mul.ref(0, 14)), $mul.ref(1, 2)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_ALARM, $mul.ref(0, 14)), $mul.ref(2, 2)), 121);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_ALARM, $mul.ref(0, 14)), $mul.ref(3, 2)), 122);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_ALARM, $mul.ref(0, 14)), $mul.ref(4, 2)), 123);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_ALARM, $mul.ref(0, 14)), $mul.ref(5, 2)), 124);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_ALARM, $mul.ref(0, 14)), $mul.ref(6, 2)), 125);
    $M.0 := $store.i16($M.0, NCT6106_REG_WEIGHT_TEMP_BASE, 364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 6)), $mul.ref(1, 2)), 380);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_BASE, $mul.ref(0, 6)), $mul.ref(2, 2)), 396);
    $M.0 := $store.i16($M.0, NCT6106_REG_WEIGHT_TEMP_STEP_TOL, 362);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 6)), $mul.ref(1, 2)), 378);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_STEP_TOL, $mul.ref(0, 6)), $mul.ref(2, 2)), 394);
    $M.0 := $store.i16($M.0, NCT6106_REG_WEIGHT_TEMP_STEP, 361);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 6)), $mul.ref(1, 2)), 377);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_STEP, $mul.ref(0, 6)), $mul.ref(2, 2)), 393);
    $M.0 := $store.i16($M.0, NCT6106_REG_WEIGHT_TEMP_SEL, 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 6)), $mul.ref(1, 2)), 376);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_TEMP_SEL, $mul.ref(0, 6)), $mul.ref(2, 2)), 392);
    $M.0 := $store.i16($M.0, NCT6106_REG_TEMP_SEL, 272);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SEL, $mul.ref(0, 6)), $mul.ref(1, 2)), 288);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SEL, $mul.ref(0, 6)), $mul.ref(2, 2)), 304);
    $M.0 := $store.i16($M.0, NCT6106_REG_TEMP_SOURCE, 176);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(1, 2)), 177);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(2, 2)), 178);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(3, 2)), 179);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(4, 2)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_SOURCE, $mul.ref(0, 12)), $mul.ref(5, 2)), 181);
    $M.0 := $store.i16($M.0, NCT6106_REG_TEMP_OFFSET, 785);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_OFFSET, $mul.ref(0, 6)), $mul.ref(1, 2)), 786);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TEMP_OFFSET, $mul.ref(0, 6)), $mul.ref(2, 2)), 787);
    $M.0 := $store.i16($M.0, NCT6106_REG_CRITICAL_PWM, 285);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_PWM, $mul.ref(0, 6)), $mul.ref(1, 2)), 301);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_PWM, $mul.ref(0, 6)), $mul.ref(2, 2)), 317);
    $M.0 := $store.i16($M.0, NCT6106_REG_CRITICAL_PWM_ENABLE, 284);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 6)), $mul.ref(1, 2)), 300);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_PWM_ENABLE, $mul.ref(0, 6)), $mul.ref(2, 2)), 316);
    $M.0 := $store.i16($M.0, NCT6106_REG_CRITICAL_TEMP_TOLERANCE, 283);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 6)), $mul.ref(1, 2)), 299);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_TEMP_TOLERANCE, $mul.ref(0, 6)), $mul.ref(2, 2)), 315);
    $M.0 := $store.i16($M.0, NCT6106_REG_CRITICAL_TEMP, 282);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_TEMP, $mul.ref(0, 6)), $mul.ref(1, 2)), 298);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_CRITICAL_TEMP, $mul.ref(0, 6)), $mul.ref(2, 2)), 314);
    $M.0 := $store.i16($M.0, NCT6106_REG_AUTO_PWM, 356);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_AUTO_PWM, $mul.ref(0, 6)), $mul.ref(1, 2)), 372);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_AUTO_PWM, $mul.ref(0, 6)), $mul.ref(2, 2)), 388);
    $M.0 := $store.i16($M.0, NCT6106_REG_AUTO_TEMP, 352);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_AUTO_TEMP, $mul.ref(0, 6)), $mul.ref(1, 2)), 368);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_AUTO_TEMP, $mul.ref(0, 6)), $mul.ref(2, 2)), 384);
    $M.0 := $store.i8($M.0, NCT6106_PWM_MODE_MASK, 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_PWM_MODE_MASK, $mul.ref(0, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_PWM_MODE_MASK, $mul.ref(0, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, NCT6106_REG_PWM_MODE, $sub.i8(0, 13));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_REG_PWM_MODE, $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 13));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(NCT6106_REG_PWM_MODE, $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 13));
    $M.0 := $store.i16($M.0, NCT6106_REG_PWM_READ, 74);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_PWM_READ, $mul.ref(0, 6)), $mul.ref(1, 2)), 75);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_PWM_READ, $mul.ref(0, 6)), $mul.ref(2, 2)), 76);
    $M.0 := $store.i16($M.0, NCT6106_REG_WEIGHT_DUTY_BASE, 365);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 6)), $mul.ref(1, 2)), 381);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_DUTY_BASE, $mul.ref(0, 6)), $mul.ref(2, 2)), 397);
    $M.0 := $store.i16($M.0, NCT6106_REG_WEIGHT_DUTY_STEP, 363);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 6)), $mul.ref(1, 2)), 379);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_WEIGHT_DUTY_STEP, $mul.ref(0, 6)), $mul.ref(2, 2)), 380);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_STOP_OUTPUT, 278);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STOP_OUTPUT, $mul.ref(0, 6)), $mul.ref(1, 2)), 294);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STOP_OUTPUT, $mul.ref(0, 6)), $mul.ref(2, 2)), 310);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_START_OUTPUT, 279);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_START_OUTPUT, $mul.ref(0, 6)), $mul.ref(1, 2)), 295);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_START_OUTPUT, $mul.ref(0, 6)), $mul.ref(2, 2)), 311);
    $M.0 := $store.i16($M.0, NCT6106_REG_PWM, 281);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_PWM, $mul.ref(0, 6)), $mul.ref(1, 2)), 297);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_PWM, $mul.ref(0, 6)), $mul.ref(2, 2)), 313);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_STEP_DOWN_TIME, 277);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 6)), $mul.ref(1, 2)), 293);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STEP_DOWN_TIME, $mul.ref(0, 6)), $mul.ref(2, 2)), 309);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_STEP_UP_TIME, 276);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STEP_UP_TIME, $mul.ref(0, 6)), $mul.ref(1, 2)), 292);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STEP_UP_TIME, $mul.ref(0, 6)), $mul.ref(2, 2)), 308);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_STOP_TIME, 280);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STOP_TIME, $mul.ref(0, 6)), $mul.ref(1, 2)), 296);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_STOP_TIME, $mul.ref(0, 6)), $mul.ref(2, 2)), 312);
    $M.0 := $store.i16($M.0, NCT6106_FAN_PULSE_SHIFT, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_FAN_PULSE_SHIFT, $mul.ref(0, 10)), $mul.ref(1, 2)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_FAN_PULSE_SHIFT, $mul.ref(0, 10)), $mul.ref(2, 2)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_FAN_PULSE_SHIFT, $mul.ref(0, 10)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_FAN_PULSE_SHIFT, $mul.ref(0, 10)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_PULSES, 246);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(1, 2)), 246);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(2, 2)), 246);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(3, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_PULSES, $mul.ref(0, 10)), $mul.ref(4, 2)), 0);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_MIN, 224);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_MIN, $mul.ref(0, 6)), $mul.ref(1, 2)), 226);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_MIN, $mul.ref(0, 6)), $mul.ref(2, 2)), 228);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN_MODE, 275);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_MODE, $mul.ref(0, 6)), $mul.ref(1, 2)), 291);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN_MODE, $mul.ref(0, 6)), $mul.ref(2, 2)), 307);
    $M.0 := $store.i16($M.0, NCT6106_REG_FAN, 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN, $mul.ref(0, 6)), $mul.ref(1, 2)), 34);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_FAN, $mul.ref(0, 6)), $mul.ref(2, 2)), 36);
    $M.0 := $store.i16($M.0, NCT6106_REG_TARGET, 273);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TARGET, $mul.ref(0, 6)), $mul.ref(1, 2)), 289);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_TARGET, $mul.ref(0, 6)), $mul.ref(2, 2)), 305);
    $M.0 := $store.i16($M.0, NCT6106_REG_IN_MAX, 144);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(1, 2)), 146);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(2, 2)), 148);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(3, 2)), 150);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(4, 2)), 152);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(5, 2)), 154);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(6, 2)), 158);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(7, 2)), 160);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MAX, $mul.ref(0, 18)), $mul.ref(8, 2)), 162);
    $M.0 := $store.i16($M.0, NCT6106_REG_IN_MIN, 145);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(1, 2)), 147);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(2, 2)), 149);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(3, 2)), 151);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(4, 2)), 153);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(5, 2)), 155);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(6, 2)), 159);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(7, 2)), 161);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN_MIN, $mul.ref(0, 18)), $mul.ref(8, 2)), 163);
    $M.0 := $store.i16($M.0, NCT6106_REG_IN, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(1, 2)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(2, 2)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(3, 2)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(4, 2)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(5, 2)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(6, 2)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(7, 2)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(NCT6106_REG_IN, $mul.ref(0, 18)), $mul.ref(8, 2)), 9);
    $M.0 := $store.ref($M.0, nct6776_temp_label, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(1, 8)), .str.37);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(2, 8)), .str.38);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(3, 8)), .str.39);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(4, 8)), .str.40);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(5, 8)), .str.41);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(6, 8)), .str.42);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(7, 8)), .str.43);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(8, 8)), .str.44);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(9, 8)), .str.45);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(10, 8)), .str.46);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(11, 8)), .str.47);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(12, 8)), .str.48);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(13, 8)), .str.49);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(14, 8)), .str.50);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(15, 8)), .str.51);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(16, 8)), .str.52);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(17, 8)), .str.53);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(18, 8)), .str.54);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(19, 8)), .str.55);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(20, 8)), .str.56);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(21, 8)), .str.57);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6776_temp_label, $mul.ref(0, 184)), $mul.ref(22, 8)), .str.58);
    $M.1 := $store.ref($M.1, nct6775_device_names, .str.32);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(nct6775_device_names, $mul.ref(0, 48)), $mul.ref(1, 8)), .str.1);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(nct6775_device_names, $mul.ref(0, 48)), $mul.ref(2, 8)), .str.33);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(nct6775_device_names, $mul.ref(0, 48)), $mul.ref(3, 8)), .str.34);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(nct6775_device_names, $mul.ref(0, 48)), $mul.ref(4, 8)), .str.35);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(nct6775_device_names, $mul.ref(0, 48)), $mul.ref(5, 8)), .str.36);
    $M.33 := $store.i8($M.33, NCT6775_CR_CASEOPEN_CLR_MASK, 32);
    $M.33 := $store.i8($M.33, $add.ref($add.ref(NCT6775_CR_CASEOPEN_CLR_MASK, $mul.ref(0, 2)), $mul.ref(1, 1)), 1);
    $M.32 := $store.i8($M.32, NCT6775_REG_CR_CASEOPEN_CLR, $sub.i8(0, 26));
    $M.32 := $store.i8($M.32, $add.ref($add.ref(NCT6775_REG_CR_CASEOPEN_CLR, $mul.ref(0, 2)), $mul.ref(1, 1)), $sub.i8(0, 18));
    $M.30 := $store.i16($M.30, scale_in, 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(1, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(2, 2)), 1600);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(3, 2)), 1600);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(4, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(5, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(6, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(7, 2)), 1600);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(8, 2)), 1600);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(9, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(10, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(11, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(12, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(13, 2)), 800);
    $M.30 := $store.i16($M.30, $add.ref($add.ref(scale_in, $mul.ref(0, 30)), $mul.ref(14, 2)), 800);
    $M.26 := $store.i16($M.26, NCT6775_REG_CRITICAL_ENAB, 308);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(NCT6775_REG_CRITICAL_ENAB, $mul.ref(0, 6)), $mul.ref(1, 2)), 564);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(NCT6775_REG_CRITICAL_ENAB, $mul.ref(0, 6)), $mul.ref(2, 2)), 820);
    $M.45 := $store.ref($M.45, nct6775_sio_names, .str.10);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(nct6775_sio_names, $mul.ref(0, 48)), $mul.ref(1, 8)), .str.11);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(nct6775_sio_names, $mul.ref(0, 48)), $mul.ref(2, 8)), .str.12);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(nct6775_sio_names, $mul.ref(0, 48)), $mul.ref(3, 8)), .str.13);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(nct6775_sio_names, $mul.ref(0, 48)), $mul.ref(4, 8)), .str.14);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(nct6775_sio_names, $mul.ref(0, 48)), $mul.ref(5, 8)), .str.15);
    $M.37 := 0;
    call {:si_unique_call 2079} {:cexpr "force_id"} boogie_si_record_i16(0);
    $M.0 := $store.ref($M.0, nct6775_driver, nct6775_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(104, 1)), nct6775_dev_pm_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(nct6775_driver, $mul.ref(0, 176)), $mul.ref(168, 1)), 0);
    $M.34 := $store.ref($M.34, pdev, $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.i8($M.0, .str.1, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(5, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(6, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(5, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(6, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(5, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(6, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(5, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(5, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 0);
    $M.0 := $store.i8($M.0, .str.37, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(1, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(2, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(12, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(12, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(12, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(12, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(12, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(12, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(12, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(12, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(11, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(11, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(4, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(5, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(6, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(7, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(9, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(10, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(11, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(13, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(15, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(17, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(18, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(19, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(20, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(4, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(5, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(6, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(7, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(10, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(12, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(4, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(5, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(6, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(10, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(11, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(4, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(5, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(6, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(10, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(11, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(6, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(10, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(12, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(6, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(10, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(12, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(6, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(7, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(10, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(12, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(6, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(10, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(12, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(1, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(3, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(6, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(7, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(5, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(9, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(11, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(11, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(11, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(11, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(11, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(11, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(6, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 6)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 6)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.218 := $store.i8($M.218, .str.16, 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.16, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.16, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.16, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.74, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.99, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(16, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(16, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(16, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(16, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(16, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(16, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(16, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.117, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(16, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.119, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(16, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.121, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(16, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.123, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(16, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.125, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(16, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(16, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.129, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(16, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.131, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(16, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.133, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(16, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.135, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.219 := $store.i8($M.219, .str.19, 37);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.19, $mul.ref(0, 5)), $mul.ref(1, 1)), 108);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.19, $mul.ref(0, 5)), $mul.ref(2, 1)), 100);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.19, $mul.ref(0, 5)), $mul.ref(3, 1)), 10);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.19, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.137, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.220 := $store.i8($M.220, .str.22, 37);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.22, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.22, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.22, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.138, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.139, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.141, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.143, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.144, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.145, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.146, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.147, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.149, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.151, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.221 := $store.i8($M.221, .str.23, 37);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.23, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.23, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.23, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.152, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.153, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.154, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.156, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.158, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.160, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.162, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.163, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(8, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.164, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.165, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(9, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.166, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.167, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(9, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.168, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.169, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 2080} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 908772);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 909804);

procedure devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 910836);

procedure devirtbounce.2(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 911868);

procedure devirtbounce.3(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 912900);

procedure devirtbounce.4(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 913932);

procedure devirtbounce.5(funcPtr: ref, arg: i16, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i16, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(fan_from_reg8, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(fan_from_reg16, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(fan_from_reg13, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2081} $i1 := fan_from_reg13(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2082} $i2 := fan_from_reg16(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 2083} $i3 := fan_from_reg8(arg, arg1);
    $r := $i3;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 914964);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(nct6775_probe, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(nct6775_suspend, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(nct6775_resume, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2084} $i2 := nct6775_resume($p1);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    $r := $i2;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2085} $i4 := nct6775_suspend($p3);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    $r := $i4;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 2086} $i5 := nct6775_probe(arg);
    $r := $i5;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 915996);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(nct6775_probe, $p0);
    assume {:branchcond $i7} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i7 == 1);
    $i6 := $eq.ref(nct6775_suspend, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i6 == 1);
    $i5 := $eq.ref(nct6775_resume, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 2087} $i1 := nct6775_resume(arg);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    $r := $i1;
    return;

  SeqInstr_1252:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 2088} $i2 := nct6775_suspend(arg);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    $r := $i2;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2089} $i4 := nct6775_probe($p3);
    $r := $i4;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 917028);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i32;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: i8;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: i64;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.91, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.104, $M.101, $M.102, $M.103, $M.106, $M.89, $M.107, $M.108, $M.109, $M.110, $M.90, $M.111, $M.19, $M.105, $M.93, $M.92, $M.0, $M.17, $M.15, $M.14, $M.16, $M.18, $M.13, $M.11, $M.8, $M.12, $M.10, $M.6, $M.5, $M.4, $M.7, $M.9, $M.1, $M.33, $M.32, $M.30, $M.26, $M.45, $M.37, $M.34, $M.218, $M.219, $M.220, $M.221, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2090} __SMACK_static_init();
    call {:si_unique_call 2091} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.91, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.104, $M.101, $M.102, $M.103, $M.106, $M.89, $M.107, $M.108, $M.109, $M.110, $M.90, $M.111, $M.19, $M.105, $M.93, $M.92, $M.0, $M.17, $M.15, $M.14, $M.16, $M.18, $M.13, $M.11, $M.8, $M.12, $M.10, $M.6, $M.5, $M.4, $M.7, $M.9, $M.1, $M.33, $M.32, $M.30, $M.26, $M.45, $M.37, $M.34, $M.218, $M.219, $M.220, $M.221, $CurrAddr, $M.35, $M.36, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $M.29, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.27, $M.28, $M.31, $M.2, $M.3;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation nct6775_probe_loop_$bb155(in_$p1: ref, in_$p17: ref, in_$p123: ref, in_$p126: ref, in_$p127: ref, in_$i130: i32, in_$p841: ref, in_$i847: i64, in_$p848: ref, in_$i849: i16, in_$i850: i32, in_$i851: i1, in_$i854: i32, in_$i855: i32, in_$i856: i32, in_$i857: i32, in_$i858: i1, in_$p859: ref, in_$i860: i8, in_$i861: i32, in_$i862: i1, in_$p863: ref, in_$i864: i16, in_$i865: i32, in_$i866: i32, in_$i867: i32, in_$i868: i1, in_$p869: ref, in_$i870: i16, in_$i871: i32, in_$i872: i32, in_$i873: i16, in_$i874: i32, in_$i875: i32, in_$i876: i16, in_$p877: ref, in_$p878: ref, in_$i879: i16, in_$i880: i32, in_$i881: i32, in_$i882: i16, in_$i883: i32, in_$i884: i32, in_$i885: i16, in_$p886: ref, in_$i887: i64, in_$p888: ref, in_$i889: i16, in_$i890: i64, in_$p893: ref, in_$i894: i1, in_$i895: i64, in_$p896: ref, in_$i897: i16, in_$i898: i64, in_$p901: ref, in_$i902: i64, in_$p903: ref, in_$i904: i16, in_$i905: i64, in_$p908: ref, in_$i909: i8, in_$i910: i32, in_$i911: i32, in_$i912: i8, in_$i913: i64, in_$p915: ref, in_$i916: i1, in_$p917: ref, in_$i918: i16, in_$i919: i32, in_$i920: i32, in_$i921: i16, in_$i922: i32, in_$i923: i32, in_$i924: i16, in_$p925: ref, in_$i926: i64, in_$p927: ref, in_$i928: i16, in_$i929: i64, in_$p932: ref, in_$i933: i8, in_$i934: i32, in_$i935: i32, in_$i936: i8, in_$i937: i64, in_$p939: ref, in_$i940: i32, in_$i852: i32, in_$i853: i32, in_$i941: i32, in_$i942: i32, in_$i943: i32, in_$i944: i1, in_$i845: i32, in_$i846: i32) returns (out_$i847: i64, out_$p848: ref, out_$i849: i16, out_$i850: i32, out_$i851: i1, out_$i854: i32, out_$i855: i32, out_$i856: i32, out_$i857: i32, out_$i858: i1, out_$p859: ref, out_$i860: i8, out_$i861: i32, out_$i862: i1, out_$p863: ref, out_$i864: i16, out_$i865: i32, out_$i866: i32, out_$i867: i32, out_$i868: i1, out_$p869: ref, out_$i870: i16, out_$i871: i32, out_$i872: i32, out_$i873: i16, out_$i874: i32, out_$i875: i32, out_$i876: i16, out_$p877: ref, out_$p878: ref, out_$i879: i16, out_$i880: i32, out_$i881: i32, out_$i882: i16, out_$i883: i32, out_$i884: i32, out_$i885: i16, out_$p886: ref, out_$i887: i64, out_$p888: ref, out_$i889: i16, out_$i890: i64, out_$p893: ref, out_$i894: i1, out_$i895: i64, out_$p896: ref, out_$i897: i16, out_$i898: i64, out_$p901: ref, out_$i902: i64, out_$p903: ref, out_$i904: i16, out_$i905: i64, out_$p908: ref, out_$i909: i8, out_$i910: i32, out_$i911: i32, out_$i912: i8, out_$i913: i64, out_$p915: ref, out_$i916: i1, out_$p917: ref, out_$i918: i16, out_$i919: i32, out_$i920: i32, out_$i921: i16, out_$i922: i32, out_$i923: i32, out_$i924: i16, out_$p925: ref, out_$i926: i64, out_$p927: ref, out_$i928: i16, out_$i929: i64, out_$p932: ref, out_$i933: i8, out_$i934: i32, out_$i935: i32, out_$i936: i8, out_$i937: i64, out_$p939: ref, out_$i940: i32, out_$i852: i32, out_$i853: i32, out_$i941: i32, out_$i942: i32, out_$i943: i32, out_$i944: i1, out_$i845: i32, out_$i846: i32)
{

  entry:
    out_$i847, out_$p848, out_$i849, out_$i850, out_$i851, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$p859, out_$i860, out_$i861, out_$i862, out_$p863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$p886, out_$i887, out_$p888, out_$i889, out_$i890, out_$p893, out_$i894, out_$i895, out_$p896, out_$i897, out_$i898, out_$p901, out_$i902, out_$p903, out_$i904, out_$i905, out_$p908, out_$i909, out_$i910, out_$i911, out_$i912, out_$i913, out_$p915, out_$i916, out_$p917, out_$i918, out_$i919, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$i926, out_$p927, out_$i928, out_$i929, out_$p932, out_$i933, out_$i934, out_$i935, out_$i936, out_$i937, out_$p939, out_$i940, out_$i852, out_$i853, out_$i941, out_$i942, out_$i943, out_$i944, out_$i845, out_$i846 := in_$i847, in_$p848, in_$i849, in_$i850, in_$i851, in_$i854, in_$i855, in_$i856, in_$i857, in_$i858, in_$p859, in_$i860, in_$i861, in_$i862, in_$p863, in_$i864, in_$i865, in_$i866, in_$i867, in_$i868, in_$p869, in_$i870, in_$i871, in_$i872, in_$i873, in_$i874, in_$i875, in_$i876, in_$p877, in_$p878, in_$i879, in_$i880, in_$i881, in_$i882, in_$i883, in_$i884, in_$i885, in_$p886, in_$i887, in_$p888, in_$i889, in_$i890, in_$p893, in_$i894, in_$i895, in_$p896, in_$i897, in_$i898, in_$p901, in_$i902, in_$p903, in_$i904, in_$i905, in_$p908, in_$i909, in_$i910, in_$i911, in_$i912, in_$i913, in_$p915, in_$i916, in_$p917, in_$i918, in_$i919, in_$i920, in_$i921, in_$i922, in_$i923, in_$i924, in_$p925, in_$i926, in_$p927, in_$i928, in_$i929, in_$p932, in_$i933, in_$i934, in_$i935, in_$i936, in_$i937, in_$p939, in_$i940, in_$i852, in_$i853, in_$i941, in_$i942, in_$i943, in_$i944, in_$i845, in_$i846;
    goto $bb155, exit;

  $bb155:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  $bb177:
    assume out_$i944 == 1;
    assume {:verifier.code 0} true;
    out_$i845, out_$i846 := out_$i941, out_$i853;
    goto $bb177_dummy;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$i944 := $slt.i32(out_$i941, out_$i943);
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$i943 := $add.i32(out_$i942, $sub.i32(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i942 := $load.i32($M.0, in_$p841);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i941 := $add.i32(out_$i852, 1);
    call {:si_unique_call 33} {:cexpr "i"} boogie_si_record_i32(out_$i941);
    goto corral_source_split_1196;

  $bb159:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    out_$i852, out_$i853 := out_$i845, out_$i940;
    goto $bb159;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    out_$i852, out_$i853 := out_$i845, out_$i846;
    goto $bb159;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$i852, out_$i853 := out_$i845, out_$i846;
    goto $bb159;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i852, out_$i853 := out_$i845, out_$i846;
    goto $bb159;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i852, out_$i853 := out_$i845, out_$i846;
    goto $bb159;

  $bb157:
    assume out_$i851 == 1;
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i851 := $eq.i32(out_$i850, 0);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$i850 := $zext.i16.i32(out_$i849);
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$i849 := $load.i16($M.12, out_$p848);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$p848 := $add.ref(in_$p123, $mul.ref(out_$i847, 2));
    goto corral_source_split_1188;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i847 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb161:
    assume out_$i858 == 1;
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i858 := $ne.i32(out_$i857, 0);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i857 := $and.i32(out_$i856, 1);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$i856 := $ashr.i32(out_$i854, out_$i855);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i855 := $add.i32(out_$i845, 1);
    goto corral_source_split_1202;

  $bb160:
    assume {:verifier.code 0} true;
    out_$i854 := $load.i32($M.2, in_$p1);
    goto corral_source_split_1201;

  $bb158:
    assume !(out_$i851 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb166:
    assume out_$i868 == 1;
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$i868 := $ne.i32(out_$i867, 0);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i867 := $and.i32(out_$i866, 1);
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i866 := $ashr.i32(out_$i865, out_$i845);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i865 := $zext.i16.i32(out_$i864);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i864 := $load.i16($M.0, out_$p863);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$p863 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1215;

  $bb164:
    assume out_$i862 == 1;
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i862 := $slt.i32(out_$i845, out_$i861);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i861 := $zext.i8.i32(out_$i860);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$i860 := $load.i8($M.0, out_$p859);
    goto corral_source_split_1210;

  $bb163:
    assume {:verifier.code 0} true;
    out_$p859 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_1209;

  $bb162:
    assume !(out_$i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p915, out_$i912);
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$p915 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(out_$i913, 1));
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$i913 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i912 := $trunc.i32.i8(out_$i911);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$i911 := $add.i32(out_$i910, 1);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i910 := $zext.i8.i32(out_$i909);
    goto corral_source_split_1267;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i909 := $trunc.i32.i8(out_$i845);
    goto corral_source_split_1266;

  $bb170:
    assume !(out_$i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p908, out_$i904);
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$p908 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref(out_$i905, 2));
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i905 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i904 := $load.i16($M.6, out_$p903);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$p903 := $add.ref(in_$p126, $mul.ref(out_$i902, 2));
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$i902 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p901, out_$i897);
    goto corral_source_split_1258;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$p901 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref(out_$i898, 2));
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i898 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i897 := $load.i16($M.5, out_$p896);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p896 := $add.ref(in_$p127, $mul.ref(out_$i895, 2));
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i895 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1253;

  $bb169:
    assume out_$i894 == 1;
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$i894 := $slt.i32(out_$i845, in_$i130);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p893, out_$i889);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$p893 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref(out_$i890, 2));
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$i890 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i889 := $load.i16($M.12, out_$p888);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$p888 := $add.ref(in_$p123, $mul.ref(out_$i887, 2));
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i887 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p886, out_$i885);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$p886 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$i885 := $trunc.i32.i16(out_$i884);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i884 := $or.i32(out_$i880, out_$i883);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i883 := $sext.i16.i32(out_$i882);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$i882 := $trunc.i32.i16(out_$i881);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i881 := $shl.i32(1, out_$i845);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i880 := $sext.i16.i32(out_$i879);
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i879 := $load.i16($M.0, out_$p878);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$p878 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p877, out_$i876);
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$p877 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i876 := $trunc.i32.i16(out_$i875);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i875 := $or.i32(out_$i871, out_$i874);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i874 := $sext.i16.i32(out_$i873);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$i873 := $trunc.i32.i16(out_$i872);
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$i872 := $shl.i32(1, out_$i845);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i871 := $sext.i16.i32(out_$i870);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i870 := $load.i16($M.0, out_$p869);
    goto corral_source_split_1225;

  $bb168:
    assume {:verifier.code 0} true;
    out_$p869 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1224;

  $bb167:
    assume !(out_$i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    out_$i940 := $add.i32(out_$i846, 1);
    call {:si_unique_call 37} {:cexpr "s"} boogie_si_record_i32(out_$i940);
    goto corral_source_split_1307;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p939, out_$i936);
    goto corral_source_split_1306;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    out_$p939 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(out_$i937, 1));
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i937 := $sext.i32.i64(out_$i846);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$i936 := $trunc.i32.i8(out_$i935);
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    out_$i935 := $add.i32(out_$i934, 1);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$i934 := $zext.i8.i32(out_$i933);
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$i933 := $trunc.i32.i8(out_$i845);
    goto corral_source_split_1300;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p932, out_$i928);
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$p932 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref(out_$i929, 2));
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i929 := $sext.i32.i64(out_$i846);
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$i928 := $load.i16($M.12, out_$p927);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    out_$p927 := $add.ref(in_$p123, $mul.ref(out_$i926, 2));
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$i926 := $sext.i32.i64(out_$i845);
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p925, out_$i924);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$p925 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i924 := $trunc.i32.i16(out_$i923);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$i923 := $or.i32(out_$i919, out_$i922);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$i922 := $sext.i16.i32(out_$i921);
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$i921 := $trunc.i32.i16(out_$i920);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$i920 := $shl.i32(1, out_$i846);
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$i919 := $sext.i16.i32(out_$i918);
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$i918 := $load.i16($M.0, out_$p917);
    goto corral_source_split_1285;

  $bb176:
    assume {:verifier.code 0} true;
    out_$p917 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1284;

  $bb174:
    assume !(out_$i916 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i916 := $sgt.i32(out_$i846, 9);
    goto corral_source_split_1274;

  $bb165:
    assume !(out_$i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb177_dummy:
    call {:si_unique_call 1} out_$i847, out_$p848, out_$i849, out_$i850, out_$i851, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$p859, out_$i860, out_$i861, out_$i862, out_$p863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$p886, out_$i887, out_$p888, out_$i889, out_$i890, out_$p893, out_$i894, out_$i895, out_$p896, out_$i897, out_$i898, out_$p901, out_$i902, out_$p903, out_$i904, out_$i905, out_$p908, out_$i909, out_$i910, out_$i911, out_$i912, out_$i913, out_$p915, out_$i916, out_$p917, out_$i918, out_$i919, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$i926, out_$p927, out_$i928, out_$i929, out_$p932, out_$i933, out_$i934, out_$i935, out_$i936, out_$i937, out_$p939, out_$i940, out_$i852, out_$i853, out_$i941, out_$i942, out_$i943, out_$i944, out_$i845, out_$i846 := nct6775_probe_loop_$bb155(in_$p1, in_$p17, in_$p123, in_$p126, in_$p127, in_$i130, in_$p841, out_$i847, out_$p848, out_$i849, out_$i850, out_$i851, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$p859, out_$i860, out_$i861, out_$i862, out_$p863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$p886, out_$i887, out_$p888, out_$i889, out_$i890, out_$p893, out_$i894, out_$i895, out_$p896, out_$i897, out_$i898, out_$p901, out_$i902, out_$p903, out_$i904, out_$i905, out_$p908, out_$i909, out_$i910, out_$i911, out_$i912, out_$i913, out_$p915, out_$i916, out_$p917, out_$i918, out_$i919, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$i926, out_$p927, out_$i928, out_$i929, out_$p932, out_$i933, out_$i934, out_$i935, out_$i936, out_$i937, out_$p939, out_$i940, out_$i852, out_$i853, out_$i941, out_$i942, out_$i943, out_$i944, out_$i845, out_$i846);
    return;

  exit:
    return;
}



procedure nct6775_probe_loop_$bb155(in_$p1: ref, in_$p17: ref, in_$p123: ref, in_$p126: ref, in_$p127: ref, in_$i130: i32, in_$p841: ref, in_$i847: i64, in_$p848: ref, in_$i849: i16, in_$i850: i32, in_$i851: i1, in_$i854: i32, in_$i855: i32, in_$i856: i32, in_$i857: i32, in_$i858: i1, in_$p859: ref, in_$i860: i8, in_$i861: i32, in_$i862: i1, in_$p863: ref, in_$i864: i16, in_$i865: i32, in_$i866: i32, in_$i867: i32, in_$i868: i1, in_$p869: ref, in_$i870: i16, in_$i871: i32, in_$i872: i32, in_$i873: i16, in_$i874: i32, in_$i875: i32, in_$i876: i16, in_$p877: ref, in_$p878: ref, in_$i879: i16, in_$i880: i32, in_$i881: i32, in_$i882: i16, in_$i883: i32, in_$i884: i32, in_$i885: i16, in_$p886: ref, in_$i887: i64, in_$p888: ref, in_$i889: i16, in_$i890: i64, in_$p893: ref, in_$i894: i1, in_$i895: i64, in_$p896: ref, in_$i897: i16, in_$i898: i64, in_$p901: ref, in_$i902: i64, in_$p903: ref, in_$i904: i16, in_$i905: i64, in_$p908: ref, in_$i909: i8, in_$i910: i32, in_$i911: i32, in_$i912: i8, in_$i913: i64, in_$p915: ref, in_$i916: i1, in_$p917: ref, in_$i918: i16, in_$i919: i32, in_$i920: i32, in_$i921: i16, in_$i922: i32, in_$i923: i32, in_$i924: i16, in_$p925: ref, in_$i926: i64, in_$p927: ref, in_$i928: i16, in_$i929: i64, in_$p932: ref, in_$i933: i8, in_$i934: i32, in_$i935: i32, in_$i936: i8, in_$i937: i64, in_$p939: ref, in_$i940: i32, in_$i852: i32, in_$i853: i32, in_$i941: i32, in_$i942: i32, in_$i943: i32, in_$i944: i1, in_$i845: i32, in_$i846: i32) returns (out_$i847: i64, out_$p848: ref, out_$i849: i16, out_$i850: i32, out_$i851: i1, out_$i854: i32, out_$i855: i32, out_$i856: i32, out_$i857: i32, out_$i858: i1, out_$p859: ref, out_$i860: i8, out_$i861: i32, out_$i862: i1, out_$p863: ref, out_$i864: i16, out_$i865: i32, out_$i866: i32, out_$i867: i32, out_$i868: i1, out_$p869: ref, out_$i870: i16, out_$i871: i32, out_$i872: i32, out_$i873: i16, out_$i874: i32, out_$i875: i32, out_$i876: i16, out_$p877: ref, out_$p878: ref, out_$i879: i16, out_$i880: i32, out_$i881: i32, out_$i882: i16, out_$i883: i32, out_$i884: i32, out_$i885: i16, out_$p886: ref, out_$i887: i64, out_$p888: ref, out_$i889: i16, out_$i890: i64, out_$p893: ref, out_$i894: i1, out_$i895: i64, out_$p896: ref, out_$i897: i16, out_$i898: i64, out_$p901: ref, out_$i902: i64, out_$p903: ref, out_$i904: i16, out_$i905: i64, out_$p908: ref, out_$i909: i8, out_$i910: i32, out_$i911: i32, out_$i912: i8, out_$i913: i64, out_$p915: ref, out_$i916: i1, out_$p917: ref, out_$i918: i16, out_$i919: i32, out_$i920: i32, out_$i921: i16, out_$i922: i32, out_$i923: i32, out_$i924: i16, out_$p925: ref, out_$i926: i64, out_$p927: ref, out_$i928: i16, out_$i929: i64, out_$p932: ref, out_$i933: i8, out_$i934: i32, out_$i935: i32, out_$i936: i8, out_$i937: i64, out_$p939: ref, out_$i940: i32, out_$i852: i32, out_$i853: i32, out_$i941: i32, out_$i942: i32, out_$i943: i32, out_$i944: i1, out_$i845: i32, out_$i846: i32);
  modifies $M.0;



implementation {:SIextraRecBound 3} nct6775_probe_loop_$bb122(in_$p1: ref, in_$p4: ref, in_$p17: ref, in_$p124: ref, in_$i131: i32, in_$i718: i64, in_$p719: ref, in_$i720: i16, in_$i721: i32, in_$i722: i1, in_$p724: ref, in_$p725: ref, in_$i726: i64, in_$p727: ref, in_$i728: i16, in_$i729: i32, in_$i730: i16, in_$i731: i16, in_$i732: i32, in_$i733: i32, in_$i734: i1, in_$i735: i32, in_$i736: i32, in_$i737: i32, in_$i738: i1, in_$p739: ref, in_$i740: i32, in_$i741: i1, in_$p742: ref, in_$p743: ref, in_$i744: i64, in_$p745: ref, in_$i746: i16, in_$i747: i32, in_$i748: i64, in_$p749: ref, in_$i750: i16, in_$i751: i32, in_$p752: ref, in_$p753: ref, in_$i754: i64, in_$p755: ref, in_$p756: ref, in_$i757: i64, in_$i758: i1, in_$p759: ref, in_$p760: ref, in_$i761: i64, in_$p762: ref, in_$i763: i16, in_$i764: i32, in_$i765: i64, in_$p766: ref, in_$i767: i16, in_$i768: i32, in_$i769: i32, in_$i770: i32, in_$i771: i32, in_$p772: ref, in_$i773: i8, in_$i774: i32, in_$i775: i1, in_$p776: ref, in_$i777: i16, in_$i778: i32, in_$i779: i32, in_$i780: i32, in_$i781: i32, in_$i782: i1, in_$p783: ref, in_$i784: i16, in_$i785: i32, in_$i786: i32, in_$i787: i32, in_$i788: i16, in_$i789: i32, in_$i790: i32, in_$i791: i16, in_$p792: ref, in_$p793: ref, in_$i794: i16, in_$i795: i32, in_$i796: i32, in_$i797: i32, in_$i798: i16, in_$i799: i32, in_$i800: i32, in_$i801: i16, in_$p802: ref, in_$i803: i64, in_$p804: ref, in_$i805: i16, in_$i806: i32, in_$i807: i64, in_$p810: ref, in_$i811: i8, in_$i812: i32, in_$i813: i64, in_$p815: ref, in_$i816: i1, in_$p817: ref, in_$i818: i16, in_$i819: i32, in_$i820: i32, in_$i821: i16, in_$i822: i32, in_$i823: i32, in_$i824: i16, in_$p825: ref, in_$i826: i64, in_$p827: ref, in_$i828: i16, in_$i829: i64, in_$p832: ref, in_$i833: i8, in_$i834: i64, in_$p836: ref, in_$i837: i32, in_$i723: i32, in_$i838: i32, in_$i839: i1, in_$i716: i32, in_$i717: i32, in_$i840: i32) returns (out_$i718: i64, out_$p719: ref, out_$i720: i16, out_$i721: i32, out_$i722: i1, out_$p724: ref, out_$p725: ref, out_$i726: i64, out_$p727: ref, out_$i728: i16, out_$i729: i32, out_$i730: i16, out_$i731: i16, out_$i732: i32, out_$i733: i32, out_$i734: i1, out_$i735: i32, out_$i736: i32, out_$i737: i32, out_$i738: i1, out_$p739: ref, out_$i740: i32, out_$i741: i1, out_$p742: ref, out_$p743: ref, out_$i744: i64, out_$p745: ref, out_$i746: i16, out_$i747: i32, out_$i748: i64, out_$p749: ref, out_$i750: i16, out_$i751: i32, out_$p752: ref, out_$p753: ref, out_$i754: i64, out_$p755: ref, out_$p756: ref, out_$i757: i64, out_$i758: i1, out_$p759: ref, out_$p760: ref, out_$i761: i64, out_$p762: ref, out_$i763: i16, out_$i764: i32, out_$i765: i64, out_$p766: ref, out_$i767: i16, out_$i768: i32, out_$i769: i32, out_$i770: i32, out_$i771: i32, out_$p772: ref, out_$i773: i8, out_$i774: i32, out_$i775: i1, out_$p776: ref, out_$i777: i16, out_$i778: i32, out_$i779: i32, out_$i780: i32, out_$i781: i32, out_$i782: i1, out_$p783: ref, out_$i784: i16, out_$i785: i32, out_$i786: i32, out_$i787: i32, out_$i788: i16, out_$i789: i32, out_$i790: i32, out_$i791: i16, out_$p792: ref, out_$p793: ref, out_$i794: i16, out_$i795: i32, out_$i796: i32, out_$i797: i32, out_$i798: i16, out_$i799: i32, out_$i800: i32, out_$i801: i16, out_$p802: ref, out_$i803: i64, out_$p804: ref, out_$i805: i16, out_$i806: i32, out_$i807: i64, out_$p810: ref, out_$i811: i8, out_$i812: i32, out_$i813: i64, out_$p815: ref, out_$i816: i1, out_$p817: ref, out_$i818: i16, out_$i819: i32, out_$i820: i32, out_$i821: i16, out_$i822: i32, out_$i823: i32, out_$i824: i16, out_$p825: ref, out_$i826: i64, out_$p827: ref, out_$i828: i16, out_$i829: i64, out_$p832: ref, out_$i833: i8, out_$i834: i64, out_$p836: ref, out_$i837: i32, out_$i723: i32, out_$i838: i32, out_$i839: i1, out_$i716: i32, out_$i717: i32, out_$i840: i32)
{

  entry:
    out_$i718, out_$p719, out_$i720, out_$i721, out_$i722, out_$p724, out_$p725, out_$i726, out_$p727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$i738, out_$p739, out_$i740, out_$i741, out_$p742, out_$p743, out_$i744, out_$p745, out_$i746, out_$i747, out_$i748, out_$p749, out_$i750, out_$i751, out_$p752, out_$p753, out_$i754, out_$p755, out_$p756, out_$i757, out_$i758, out_$p759, out_$p760, out_$i761, out_$p762, out_$i763, out_$i764, out_$i765, out_$p766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$p772, out_$i773, out_$i774, out_$i775, out_$p776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$p783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$p792, out_$p793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$i799, out_$i800, out_$i801, out_$p802, out_$i803, out_$p804, out_$i805, out_$i806, out_$i807, out_$p810, out_$i811, out_$i812, out_$i813, out_$p815, out_$i816, out_$p817, out_$i818, out_$i819, out_$i820, out_$i821, out_$i822, out_$i823, out_$i824, out_$p825, out_$i826, out_$p827, out_$i828, out_$i829, out_$p832, out_$i833, out_$i834, out_$p836, out_$i837, out_$i723, out_$i838, out_$i839, out_$i716, out_$i717, out_$i840 := in_$i718, in_$p719, in_$i720, in_$i721, in_$i722, in_$p724, in_$p725, in_$i726, in_$p727, in_$i728, in_$i729, in_$i730, in_$i731, in_$i732, in_$i733, in_$i734, in_$i735, in_$i736, in_$i737, in_$i738, in_$p739, in_$i740, in_$i741, in_$p742, in_$p743, in_$i744, in_$p745, in_$i746, in_$i747, in_$i748, in_$p749, in_$i750, in_$i751, in_$p752, in_$p753, in_$i754, in_$p755, in_$p756, in_$i757, in_$i758, in_$p759, in_$p760, in_$i761, in_$p762, in_$i763, in_$i764, in_$i765, in_$p766, in_$i767, in_$i768, in_$i769, in_$i770, in_$i771, in_$p772, in_$i773, in_$i774, in_$i775, in_$p776, in_$i777, in_$i778, in_$i779, in_$i780, in_$i781, in_$i782, in_$p783, in_$i784, in_$i785, in_$i786, in_$i787, in_$i788, in_$i789, in_$i790, in_$i791, in_$p792, in_$p793, in_$i794, in_$i795, in_$i796, in_$i797, in_$i798, in_$i799, in_$i800, in_$i801, in_$p802, in_$i803, in_$p804, in_$i805, in_$i806, in_$i807, in_$p810, in_$i811, in_$i812, in_$i813, in_$p815, in_$i816, in_$p817, in_$i818, in_$i819, in_$i820, in_$i821, in_$i822, in_$i823, in_$i824, in_$p825, in_$i826, in_$p827, in_$i828, in_$i829, in_$p832, in_$i833, in_$i834, in_$p836, in_$i837, in_$i723, in_$i838, in_$i839, in_$i716, in_$i717, in_$i840;
    goto $bb122, exit;

  $bb122:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  $bb149:
    assume out_$i839 == 1;
    assume {:verifier.code 0} true;
    out_$i716, out_$i717 := out_$i838, out_$i723;
    goto $bb149_dummy;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i840 := out_$i723;
    assume true;
    goto $bb149;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i839 := $slt.i32(out_$i838, in_$i131);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i838 := $add.i32(out_$i716, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32(out_$i838);
    goto corral_source_split_1035;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i837;
    goto $bb126;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$i723 := out_$i717;
    goto $bb126;

  $bb124:
    assume out_$i722 == 1;
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i722 := $eq.i32(out_$i721, 0);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i721 := $zext.i16.i32(out_$i720);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$i720 := $load.i16($M.11, out_$p719);
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p719 := $add.ref(in_$p124, $mul.ref(out_$i718, 2));
    goto corral_source_split_1027;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i718 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb131:
    assume {:verifier.code 0} true;
    assume out_$i738 == 1;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    assume out_$i734 == 1;
    goto $bb129;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb130;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$i734 := $eq.i32(out_$i733, 0);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i733 := $and.i32(out_$i732, 31);
    call {:si_unique_call 27} {:cexpr "src"} boogie_si_record_i32(out_$i733);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$i732 := $zext.i16.i32(out_$i731);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} out_$i731 := nct6775_read_value(in_$p17, out_$i730);
    call {:si_unique_call 26} {:cexpr "tmp___5"} boogie_si_record_i16(out_$i731);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i730 := $trunc.i32.i16(out_$i729);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i729 := $zext.i16.i32(out_$i728);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$i728 := $load.i16($M.0, out_$p727);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$p727 := $add.ref(out_$p725, $mul.ref(out_$i726, 2));
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    out_$i726 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_$p725 := $load.ref($M.0, out_$p724);
    goto corral_source_split_1039;

  $bb127:
    assume {:verifier.code 0} true;
    out_$p724 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_1038;

  $bb125:
    assume !(out_$i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i738 := $ne.i32(out_$i737, 0);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i737 := $and.i32(out_$i736, 1);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$i736 := $ashr.i32(out_$i735, out_$i733);
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$i735 := $load.i32($M.2, in_$p1);
    goto corral_source_split_1051;

  $bb130:
    assume !(out_$i734 == 1);
    goto corral_source_split_1050;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} _dev_info.ref.ref.i32.i32.i32.i32(in_$p4, .str.30, out_$i733, out_$i716, out_$i747, out_$i751);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i751 := $zext.i16.i32(out_$i750);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i750 := $load.i16($M.11, out_$p749);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p749 := $add.ref(in_$p124, $mul.ref(out_$i748, 2));
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i748 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i747 := $zext.i16.i32(out_$i746);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i746 := $load.i16($M.0, out_$p745);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p745 := $add.ref(out_$p743, $mul.ref(out_$i744, 2));
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i744 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$p743 := $load.ref($M.0, out_$p742);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p742 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_1061;

  $bb134:
    assume out_$i741 == 1;
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    out_$i741 := $sge.i32(out_$i733, out_$i740);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$i740 := $load.i32($M.0, out_$p739);
    goto corral_source_split_1057;

  $bb133:
    assume {:verifier.code 0} true;
    out_$p739 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_1056;

  $bb132:
    assume !(out_$i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} _dev_info.ref.ref.i32.i32.i32.i32(in_$p4, .str.30, out_$i733, out_$i716, out_$i764, out_$i768);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$i768 := $zext.i16.i32(out_$i767);
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$i767 := $load.i16($M.11, out_$p766);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$p766 := $add.ref(in_$p124, $mul.ref(out_$i765, 2));
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i765 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i764 := $zext.i16.i32(out_$i763);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$i763 := $load.i16($M.0, out_$p762);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$p762 := $add.ref(out_$p760, $mul.ref(out_$i761, 2));
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i761 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$p760 := $load.ref($M.0, out_$p759);
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$p759 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_1083;

  $bb136:
    assume out_$i758 == 1;
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i758 := $eq.i64(out_$i757, 0);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} out_$i757 := strlen(out_$p756);
    call {:si_unique_call 30} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i757);
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$p756 := $load.ref($M.0, out_$p755);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$p755 := $add.ref(out_$p753, $mul.ref(out_$i754, 8));
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i754 := $sext.i32.i64(out_$i733);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$p753 := $load.ref($M.0, out_$p752);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p752 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_1074;

  $bb135:
    assume !(out_$i741 == 1);
    goto corral_source_split_1073;

  $bb142:
    assume out_$i782 == 1;
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i782 := $ne.i32(out_$i781, 0);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i781 := $and.i32(out_$i780, 1);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i780 := $ashr.i32(out_$i778, out_$i779);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$i779 := $add.i32(out_$i733, $sub.i32(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$i778 := $zext.i16.i32(out_$i777);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i777 := $load.i16($M.0, out_$p776);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$p776 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1105;

  $bb140:
    assume out_$i775 == 1;
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i775 := $sle.i32(out_$i733, out_$i774);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i774 := $zext.i8.i32(out_$i773);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$i773 := $load.i8($M.0, out_$p772);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$p772 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, in_$p1, out_$i771);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i771 := $or.i32(out_$i769, out_$i770);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i770 := $shl.i32(1, out_$i733);
    goto corral_source_split_1096;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i769 := $load.i32($M.2, in_$p1);
    goto corral_source_split_1095;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p815, out_$i811);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$p815 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(out_$i813, 1));
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i813 := $sext.i32.i64(out_$i812);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i812 := $add.i32(out_$i733, $sub.i32(0, 1));
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i811 := $trunc.i32.i8(out_$i733);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p810, out_$i805);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p810 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref(out_$i807, 2));
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i807 := $sext.i32.i64(out_$i806);
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$i806 := $add.i32(out_$i733, $sub.i32(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i805 := $load.i16($M.11, out_$p804);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$p804 := $add.ref(in_$p124, $mul.ref(out_$i803, 2));
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$i803 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p802, out_$i801);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$p802 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i801 := $trunc.i32.i16(out_$i800);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$i800 := $or.i32(out_$i795, out_$i799);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i799 := $sext.i16.i32(out_$i798);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$i798 := $trunc.i32.i16(out_$i797);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$i797 := $shl.i32(1, out_$i796);
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$i796 := $add.i32(out_$i733, $sub.i32(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    out_$i795 := $sext.i16.i32(out_$i794);
    goto corral_source_split_1128;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$i794 := $load.i16($M.0, out_$p793);
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    out_$p793 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1126;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p792, out_$i791);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    out_$p792 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$i791 := $trunc.i32.i16(out_$i790);
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$i790 := $or.i32(out_$i785, out_$i789);
    goto corral_source_split_1122;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    out_$i789 := $sext.i16.i32(out_$i788);
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$i788 := $trunc.i32.i16(out_$i787);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i787 := $shl.i32(1, out_$i786);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$i786 := $add.i32(out_$i733, $sub.i32(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$i785 := $sext.i16.i32(out_$i784);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$i784 := $load.i16($M.0, out_$p783);
    goto corral_source_split_1116;

  $bb144:
    assume {:verifier.code 0} true;
    out_$p783 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1115;

  $bb143:
    assume !(out_$i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb146:
    assume out_$i816 == 1;
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i816 := $sgt.i32(out_$i717, 9);
    goto corral_source_split_1150;

  $bb141:
    assume !(out_$i775 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$i837 := $add.i32(out_$i717, 1);
    call {:si_unique_call 32} {:cexpr "s"} boogie_si_record_i32(out_$i837);
    goto corral_source_split_1174;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p836, out_$i833);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    out_$p836 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(out_$i834, 1));
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$i834 := $sext.i32.i64(out_$i717);
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    out_$i833 := $trunc.i32.i8(out_$i733);
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p832, out_$i828);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$p832 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref(out_$i829, 2));
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$i829 := $sext.i32.i64(out_$i717);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$i828 := $load.i16($M.11, out_$p827);
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    out_$p827 := $add.ref(in_$p124, $mul.ref(out_$i826, 2));
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$i826 := $sext.i32.i64(out_$i716);
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p825, out_$i824);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$p825 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$i824 := $trunc.i32.i16(out_$i823);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$i823 := $or.i32(out_$i819, out_$i822);
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i822 := $sext.i16.i32(out_$i821);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$i821 := $trunc.i32.i16(out_$i820);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i820 := $shl.i32(1, out_$i717);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i819 := $sext.i16.i32(out_$i818);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$i818 := $load.i16($M.0, out_$p817);
    goto corral_source_split_1155;

  $bb148:
    assume {:verifier.code 0} true;
    out_$p817 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_1154;

  $bb147:
    assume !(out_$i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb149_dummy:
    call {:si_unique_call 1} out_$i718, out_$p719, out_$i720, out_$i721, out_$i722, out_$p724, out_$p725, out_$i726, out_$p727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$i738, out_$p739, out_$i740, out_$i741, out_$p742, out_$p743, out_$i744, out_$p745, out_$i746, out_$i747, out_$i748, out_$p749, out_$i750, out_$i751, out_$p752, out_$p753, out_$i754, out_$p755, out_$p756, out_$i757, out_$i758, out_$p759, out_$p760, out_$i761, out_$p762, out_$i763, out_$i764, out_$i765, out_$p766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$p772, out_$i773, out_$i774, out_$i775, out_$p776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$p783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$p792, out_$p793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$i799, out_$i800, out_$i801, out_$p802, out_$i803, out_$p804, out_$i805, out_$i806, out_$i807, out_$p810, out_$i811, out_$i812, out_$i813, out_$p815, out_$i816, out_$p817, out_$i818, out_$i819, out_$i820, out_$i821, out_$i822, out_$i823, out_$i824, out_$p825, out_$i826, out_$p827, out_$i828, out_$i829, out_$p832, out_$i833, out_$i834, out_$p836, out_$i837, out_$i723, out_$i838, out_$i839, out_$i716, out_$i717, out_$i840 := nct6775_probe_loop_$bb122(in_$p1, in_$p4, in_$p17, in_$p124, in_$i131, out_$i718, out_$p719, out_$i720, out_$i721, out_$i722, out_$p724, out_$p725, out_$i726, out_$p727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$i738, out_$p739, out_$i740, out_$i741, out_$p742, out_$p743, out_$i744, out_$p745, out_$i746, out_$i747, out_$i748, out_$p749, out_$i750, out_$i751, out_$p752, out_$p753, out_$i754, out_$p755, out_$p756, out_$i757, out_$i758, out_$p759, out_$p760, out_$i761, out_$p762, out_$i763, out_$i764, out_$i765, out_$p766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$p772, out_$i773, out_$i774, out_$i775, out_$p776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$p783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$p792, out_$p793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$i799, out_$i800, out_$i801, out_$p802, out_$i803, out_$p804, out_$i805, out_$i806, out_$i807, out_$p810, out_$i811, out_$i812, out_$i813, out_$p815, out_$i816, out_$p817, out_$i818, out_$i819, out_$i820, out_$i821, out_$i822, out_$i823, out_$i824, out_$p825, out_$i826, out_$p827, out_$i828, out_$i829, out_$p832, out_$i833, out_$i834, out_$p836, out_$i837, out_$i723, out_$i838, out_$i839, out_$i716, out_$i717, out_$i840);
    return;

  exit:
    return;
}



procedure nct6775_probe_loop_$bb122(in_$p1: ref, in_$p4: ref, in_$p17: ref, in_$p124: ref, in_$i131: i32, in_$i718: i64, in_$p719: ref, in_$i720: i16, in_$i721: i32, in_$i722: i1, in_$p724: ref, in_$p725: ref, in_$i726: i64, in_$p727: ref, in_$i728: i16, in_$i729: i32, in_$i730: i16, in_$i731: i16, in_$i732: i32, in_$i733: i32, in_$i734: i1, in_$i735: i32, in_$i736: i32, in_$i737: i32, in_$i738: i1, in_$p739: ref, in_$i740: i32, in_$i741: i1, in_$p742: ref, in_$p743: ref, in_$i744: i64, in_$p745: ref, in_$i746: i16, in_$i747: i32, in_$i748: i64, in_$p749: ref, in_$i750: i16, in_$i751: i32, in_$p752: ref, in_$p753: ref, in_$i754: i64, in_$p755: ref, in_$p756: ref, in_$i757: i64, in_$i758: i1, in_$p759: ref, in_$p760: ref, in_$i761: i64, in_$p762: ref, in_$i763: i16, in_$i764: i32, in_$i765: i64, in_$p766: ref, in_$i767: i16, in_$i768: i32, in_$i769: i32, in_$i770: i32, in_$i771: i32, in_$p772: ref, in_$i773: i8, in_$i774: i32, in_$i775: i1, in_$p776: ref, in_$i777: i16, in_$i778: i32, in_$i779: i32, in_$i780: i32, in_$i781: i32, in_$i782: i1, in_$p783: ref, in_$i784: i16, in_$i785: i32, in_$i786: i32, in_$i787: i32, in_$i788: i16, in_$i789: i32, in_$i790: i32, in_$i791: i16, in_$p792: ref, in_$p793: ref, in_$i794: i16, in_$i795: i32, in_$i796: i32, in_$i797: i32, in_$i798: i16, in_$i799: i32, in_$i800: i32, in_$i801: i16, in_$p802: ref, in_$i803: i64, in_$p804: ref, in_$i805: i16, in_$i806: i32, in_$i807: i64, in_$p810: ref, in_$i811: i8, in_$i812: i32, in_$i813: i64, in_$p815: ref, in_$i816: i1, in_$p817: ref, in_$i818: i16, in_$i819: i32, in_$i820: i32, in_$i821: i16, in_$i822: i32, in_$i823: i32, in_$i824: i16, in_$p825: ref, in_$i826: i64, in_$p827: ref, in_$i828: i16, in_$i829: i64, in_$p832: ref, in_$i833: i8, in_$i834: i64, in_$p836: ref, in_$i837: i32, in_$i723: i32, in_$i838: i32, in_$i839: i1, in_$i716: i32, in_$i717: i32, in_$i840: i32) returns (out_$i718: i64, out_$p719: ref, out_$i720: i16, out_$i721: i32, out_$i722: i1, out_$p724: ref, out_$p725: ref, out_$i726: i64, out_$p727: ref, out_$i728: i16, out_$i729: i32, out_$i730: i16, out_$i731: i16, out_$i732: i32, out_$i733: i32, out_$i734: i1, out_$i735: i32, out_$i736: i32, out_$i737: i32, out_$i738: i1, out_$p739: ref, out_$i740: i32, out_$i741: i1, out_$p742: ref, out_$p743: ref, out_$i744: i64, out_$p745: ref, out_$i746: i16, out_$i747: i32, out_$i748: i64, out_$p749: ref, out_$i750: i16, out_$i751: i32, out_$p752: ref, out_$p753: ref, out_$i754: i64, out_$p755: ref, out_$p756: ref, out_$i757: i64, out_$i758: i1, out_$p759: ref, out_$p760: ref, out_$i761: i64, out_$p762: ref, out_$i763: i16, out_$i764: i32, out_$i765: i64, out_$p766: ref, out_$i767: i16, out_$i768: i32, out_$i769: i32, out_$i770: i32, out_$i771: i32, out_$p772: ref, out_$i773: i8, out_$i774: i32, out_$i775: i1, out_$p776: ref, out_$i777: i16, out_$i778: i32, out_$i779: i32, out_$i780: i32, out_$i781: i32, out_$i782: i1, out_$p783: ref, out_$i784: i16, out_$i785: i32, out_$i786: i32, out_$i787: i32, out_$i788: i16, out_$i789: i32, out_$i790: i32, out_$i791: i16, out_$p792: ref, out_$p793: ref, out_$i794: i16, out_$i795: i32, out_$i796: i32, out_$i797: i32, out_$i798: i16, out_$i799: i32, out_$i800: i32, out_$i801: i16, out_$p802: ref, out_$i803: i64, out_$p804: ref, out_$i805: i16, out_$i806: i32, out_$i807: i64, out_$p810: ref, out_$i811: i8, out_$i812: i32, out_$i813: i64, out_$p815: ref, out_$i816: i1, out_$p817: ref, out_$i818: i16, out_$i819: i32, out_$i820: i32, out_$i821: i16, out_$i822: i32, out_$i823: i32, out_$i824: i16, out_$p825: ref, out_$i826: i64, out_$p827: ref, out_$i828: i16, out_$i829: i64, out_$p832: ref, out_$i833: i8, out_$i834: i64, out_$p836: ref, out_$i837: i32, out_$i723: i32, out_$i838: i32, out_$i839: i1, out_$i716: i32, out_$i717: i32, out_$i840: i32);
  modifies $M.0, $M.2;



implementation {:SIextraRecBound 2} nct6775_probe_loop_$bb62(in_$p1: ref, in_$p4: ref, in_$p17: ref, in_$p121: ref, in_$p122: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i466: i64, in_$p467: ref, in_$i468: i16, in_$i469: i32, in_$i470: i1, in_$p473: ref, in_$p474: ref, in_$i475: i64, in_$p476: ref, in_$i477: i16, in_$i478: i32, in_$i479: i16, in_$i480: i16, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$i484: i32, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$p488: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$p492: ref, in_$i493: i64, in_$p494: ref, in_$i495: i16, in_$i496: i32, in_$i497: i64, in_$p498: ref, in_$i499: i16, in_$i500: i32, in_$p501: ref, in_$p502: ref, in_$i503: i64, in_$p504: ref, in_$p505: ref, in_$i506: i64, in_$i507: i1, in_$p508: ref, in_$p509: ref, in_$i510: i64, in_$p511: ref, in_$i512: i16, in_$i513: i32, in_$i514: i64, in_$p515: ref, in_$i516: i16, in_$i517: i32, in_$i518: i32, in_$i519: i32, in_$i520: i32, in_$p521: ref, in_$i522: i8, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$i526: i16, in_$i527: i32, in_$i528: i32, in_$i529: i32, in_$i530: i16, in_$i531: i32, in_$i532: i32, in_$i533: i16, in_$p534: ref, in_$p535: ref, in_$i536: i16, in_$i537: i32, in_$i538: i32, in_$i539: i32, in_$i540: i16, in_$i541: i32, in_$i542: i32, in_$i543: i16, in_$p544: ref, in_$i545: i64, in_$p546: ref, in_$i547: i16, in_$i548: i32, in_$i549: i64, in_$p552: ref, in_$i553: i64, in_$p554: ref, in_$i555: i16, in_$i556: i32, in_$i557: i64, in_$p560: ref, in_$i561: i64, in_$p562: ref, in_$i563: i16, in_$i564: i32, in_$i565: i64, in_$p568: ref, in_$i569: i64, in_$i570: i1, in_$i571: i64, in_$p572: ref, in_$i573: i16, in_$i574: i32, in_$i575: i1, in_$i576: i64, in_$p577: ref, in_$i578: i16, in_$i579: i32, in_$i580: i64, in_$p583: ref, in_$i584: i64, in_$i585: i64, in_$p586: ref, in_$i587: i16, in_$i588: i32, in_$i589: i1, in_$i590: i64, in_$i591: i64, in_$p592: ref, in_$i593: i16, in_$i594: i32, in_$i595: i64, in_$p598: ref, in_$i599: i64, in_$i600: i1, in_$i601: i64, in_$p602: ref, in_$i603: i16, in_$i604: i32, in_$i605: i1, in_$i606: i64, in_$p607: ref, in_$i608: i16, in_$i609: i32, in_$i610: i64, in_$p613: ref, in_$i614: i64, in_$p615: ref, in_$i616: i16, in_$i617: i32, in_$i618: i64, in_$p620: ref, in_$i621: i8, in_$i622: i32, in_$i623: i64, in_$p625: ref, in_$i626: i1, in_$p627: ref, in_$i628: i16, in_$i629: i32, in_$i630: i32, in_$i631: i16, in_$i632: i32, in_$i633: i32, in_$i634: i16, in_$p635: ref, in_$i636: i64, in_$p637: ref, in_$i638: i16, in_$i639: i64, in_$p642: ref, in_$i643: i64, in_$p644: ref, in_$i645: i16, in_$i646: i64, in_$p649: ref, in_$i650: i64, in_$p651: ref, in_$i652: i16, in_$i653: i64, in_$p656: ref, in_$i657: i64, in_$p658: ref, in_$i659: i16, in_$i660: i64, in_$p662: ref, in_$i663: i64, in_$i664: i1, in_$i665: i64, in_$p666: ref, in_$i667: i16, in_$i668: i32, in_$i669: i1, in_$i670: i64, in_$p671: ref, in_$i672: i16, in_$i673: i64, in_$p676: ref, in_$i678: i64, in_$i679: i64, in_$p680: ref, in_$i681: i16, in_$i682: i32, in_$i683: i1, in_$i684: i64, in_$i685: i64, in_$p686: ref, in_$i687: i16, in_$i688: i64, in_$p691: ref, in_$i677: i32, in_$i692: i64, in_$i693: i1, in_$i694: i64, in_$p695: ref, in_$i696: i16, in_$i697: i32, in_$i698: i1, in_$i699: i64, in_$p700: ref, in_$i701: i16, in_$i702: i64, in_$p705: ref, in_$i706: i8, in_$i707: i64, in_$p709: ref, in_$i710: i32, in_$i471: i32, in_$i472: i32, in_$i711: i32, in_$i712: i1, in_$i464: i32, in_$i465: i32, in_$i713: i32) returns (out_$i466: i64, out_$p467: ref, out_$i468: i16, out_$i469: i32, out_$i470: i1, out_$p473: ref, out_$p474: ref, out_$i475: i64, out_$p476: ref, out_$i477: i16, out_$i478: i32, out_$i479: i16, out_$i480: i16, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$i484: i32, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$p488: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$p492: ref, out_$i493: i64, out_$p494: ref, out_$i495: i16, out_$i496: i32, out_$i497: i64, out_$p498: ref, out_$i499: i16, out_$i500: i32, out_$p501: ref, out_$p502: ref, out_$i503: i64, out_$p504: ref, out_$p505: ref, out_$i506: i64, out_$i507: i1, out_$p508: ref, out_$p509: ref, out_$i510: i64, out_$p511: ref, out_$i512: i16, out_$i513: i32, out_$i514: i64, out_$p515: ref, out_$i516: i16, out_$i517: i32, out_$i518: i32, out_$i519: i32, out_$i520: i32, out_$p521: ref, out_$i522: i8, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$i526: i16, out_$i527: i32, out_$i528: i32, out_$i529: i32, out_$i530: i16, out_$i531: i32, out_$i532: i32, out_$i533: i16, out_$p534: ref, out_$p535: ref, out_$i536: i16, out_$i537: i32, out_$i538: i32, out_$i539: i32, out_$i540: i16, out_$i541: i32, out_$i542: i32, out_$i543: i16, out_$p544: ref, out_$i545: i64, out_$p546: ref, out_$i547: i16, out_$i548: i32, out_$i549: i64, out_$p552: ref, out_$i553: i64, out_$p554: ref, out_$i555: i16, out_$i556: i32, out_$i557: i64, out_$p560: ref, out_$i561: i64, out_$p562: ref, out_$i563: i16, out_$i564: i32, out_$i565: i64, out_$p568: ref, out_$i569: i64, out_$i570: i1, out_$i571: i64, out_$p572: ref, out_$i573: i16, out_$i574: i32, out_$i575: i1, out_$i576: i64, out_$p577: ref, out_$i578: i16, out_$i579: i32, out_$i580: i64, out_$p583: ref, out_$i584: i64, out_$i585: i64, out_$p586: ref, out_$i587: i16, out_$i588: i32, out_$i589: i1, out_$i590: i64, out_$i591: i64, out_$p592: ref, out_$i593: i16, out_$i594: i32, out_$i595: i64, out_$p598: ref, out_$i599: i64, out_$i600: i1, out_$i601: i64, out_$p602: ref, out_$i603: i16, out_$i604: i32, out_$i605: i1, out_$i606: i64, out_$p607: ref, out_$i608: i16, out_$i609: i32, out_$i610: i64, out_$p613: ref, out_$i614: i64, out_$p615: ref, out_$i616: i16, out_$i617: i32, out_$i618: i64, out_$p620: ref, out_$i621: i8, out_$i622: i32, out_$i623: i64, out_$p625: ref, out_$i626: i1, out_$p627: ref, out_$i628: i16, out_$i629: i32, out_$i630: i32, out_$i631: i16, out_$i632: i32, out_$i633: i32, out_$i634: i16, out_$p635: ref, out_$i636: i64, out_$p637: ref, out_$i638: i16, out_$i639: i64, out_$p642: ref, out_$i643: i64, out_$p644: ref, out_$i645: i16, out_$i646: i64, out_$p649: ref, out_$i650: i64, out_$p651: ref, out_$i652: i16, out_$i653: i64, out_$p656: ref, out_$i657: i64, out_$p658: ref, out_$i659: i16, out_$i660: i64, out_$p662: ref, out_$i663: i64, out_$i664: i1, out_$i665: i64, out_$p666: ref, out_$i667: i16, out_$i668: i32, out_$i669: i1, out_$i670: i64, out_$p671: ref, out_$i672: i16, out_$i673: i64, out_$p676: ref, out_$i678: i64, out_$i679: i64, out_$p680: ref, out_$i681: i16, out_$i682: i32, out_$i683: i1, out_$i684: i64, out_$i685: i64, out_$p686: ref, out_$i687: i16, out_$i688: i64, out_$p691: ref, out_$i677: i32, out_$i692: i64, out_$i693: i1, out_$i694: i64, out_$p695: ref, out_$i696: i16, out_$i697: i32, out_$i698: i1, out_$i699: i64, out_$p700: ref, out_$i701: i16, out_$i702: i64, out_$p705: ref, out_$i706: i8, out_$i707: i64, out_$p709: ref, out_$i710: i32, out_$i471: i32, out_$i472: i32, out_$i711: i32, out_$i712: i1, out_$i464: i32, out_$i465: i32, out_$i713: i32)
{

  entry:
    out_$i466, out_$p467, out_$i468, out_$i469, out_$i470, out_$p473, out_$p474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$p492, out_$i493, out_$p494, out_$i495, out_$i496, out_$i497, out_$p498, out_$i499, out_$i500, out_$p501, out_$p502, out_$i503, out_$p504, out_$p505, out_$i506, out_$i507, out_$p508, out_$p509, out_$i510, out_$p511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$i524, out_$p525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$p544, out_$i545, out_$p546, out_$i547, out_$i548, out_$i549, out_$p552, out_$i553, out_$p554, out_$i555, out_$i556, out_$i557, out_$p560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i565, out_$p568, out_$i569, out_$i570, out_$i571, out_$p572, out_$i573, out_$i574, out_$i575, out_$i576, out_$p577, out_$i578, out_$i579, out_$i580, out_$p583, out_$i584, out_$i585, out_$p586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$i593, out_$i594, out_$i595, out_$p598, out_$i599, out_$i600, out_$i601, out_$p602, out_$i603, out_$i604, out_$i605, out_$i606, out_$p607, out_$i608, out_$i609, out_$i610, out_$p613, out_$i614, out_$p615, out_$i616, out_$i617, out_$i618, out_$p620, out_$i621, out_$i622, out_$i623, out_$p625, out_$i626, out_$p627, out_$i628, out_$i629, out_$i630, out_$i631, out_$i632, out_$i633, out_$i634, out_$p635, out_$i636, out_$p637, out_$i638, out_$i639, out_$p642, out_$i643, out_$p644, out_$i645, out_$i646, out_$p649, out_$i650, out_$p651, out_$i652, out_$i653, out_$p656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$i667, out_$i668, out_$i669, out_$i670, out_$p671, out_$i672, out_$i673, out_$p676, out_$i678, out_$i679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$i685, out_$p686, out_$i687, out_$i688, out_$p691, out_$i677, out_$i692, out_$i693, out_$i694, out_$p695, out_$i696, out_$i697, out_$i698, out_$i699, out_$p700, out_$i701, out_$i702, out_$p705, out_$i706, out_$i707, out_$p709, out_$i710, out_$i471, out_$i472, out_$i711, out_$i712, out_$i464, out_$i465, out_$i713 := in_$i466, in_$p467, in_$i468, in_$i469, in_$i470, in_$p473, in_$p474, in_$i475, in_$p476, in_$i477, in_$i478, in_$i479, in_$i480, in_$i481, in_$i482, in_$i483, in_$i484, in_$i485, in_$i486, in_$i487, in_$p488, in_$i489, in_$i490, in_$p491, in_$p492, in_$i493, in_$p494, in_$i495, in_$i496, in_$i497, in_$p498, in_$i499, in_$i500, in_$p501, in_$p502, in_$i503, in_$p504, in_$p505, in_$i506, in_$i507, in_$p508, in_$p509, in_$i510, in_$p511, in_$i512, in_$i513, in_$i514, in_$p515, in_$i516, in_$i517, in_$i518, in_$i519, in_$i520, in_$p521, in_$i522, in_$i523, in_$i524, in_$p525, in_$i526, in_$i527, in_$i528, in_$i529, in_$i530, in_$i531, in_$i532, in_$i533, in_$p534, in_$p535, in_$i536, in_$i537, in_$i538, in_$i539, in_$i540, in_$i541, in_$i542, in_$i543, in_$p544, in_$i545, in_$p546, in_$i547, in_$i548, in_$i549, in_$p552, in_$i553, in_$p554, in_$i555, in_$i556, in_$i557, in_$p560, in_$i561, in_$p562, in_$i563, in_$i564, in_$i565, in_$p568, in_$i569, in_$i570, in_$i571, in_$p572, in_$i573, in_$i574, in_$i575, in_$i576, in_$p577, in_$i578, in_$i579, in_$i580, in_$p583, in_$i584, in_$i585, in_$p586, in_$i587, in_$i588, in_$i589, in_$i590, in_$i591, in_$p592, in_$i593, in_$i594, in_$i595, in_$p598, in_$i599, in_$i600, in_$i601, in_$p602, in_$i603, in_$i604, in_$i605, in_$i606, in_$p607, in_$i608, in_$i609, in_$i610, in_$p613, in_$i614, in_$p615, in_$i616, in_$i617, in_$i618, in_$p620, in_$i621, in_$i622, in_$i623, in_$p625, in_$i626, in_$p627, in_$i628, in_$i629, in_$i630, in_$i631, in_$i632, in_$i633, in_$i634, in_$p635, in_$i636, in_$p637, in_$i638, in_$i639, in_$p642, in_$i643, in_$p644, in_$i645, in_$i646, in_$p649, in_$i650, in_$p651, in_$i652, in_$i653, in_$p656, in_$i657, in_$p658, in_$i659, in_$i660, in_$p662, in_$i663, in_$i664, in_$i665, in_$p666, in_$i667, in_$i668, in_$i669, in_$i670, in_$p671, in_$i672, in_$i673, in_$p676, in_$i678, in_$i679, in_$p680, in_$i681, in_$i682, in_$i683, in_$i684, in_$i685, in_$p686, in_$i687, in_$i688, in_$p691, in_$i677, in_$i692, in_$i693, in_$i694, in_$p695, in_$i696, in_$i697, in_$i698, in_$i699, in_$p700, in_$i701, in_$i702, in_$p705, in_$i706, in_$i707, in_$p709, in_$i710, in_$i471, in_$i472, in_$i711, in_$i712, in_$i464, in_$i465, in_$i713;
    goto $bb62, exit;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  $bb116:
    assume out_$i712 == 1;
    assume {:verifier.code 0} true;
    out_$i464, out_$i465 := out_$i711, out_$i472;
    goto $bb116_dummy;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i713 := out_$i472;
    assume true;
    goto $bb116;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$i712 := $slt.i32(out_$i711, in_$i130);
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$i711 := $add.i32(out_$i471, 1);
    call {:si_unique_call 15} {:cexpr "i"} boogie_si_record_i32(out_$i711);
    goto corral_source_split_740;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i710;
    goto $bb66;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i465;
    goto $bb66;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i465;
    goto $bb66;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i465;
    goto $bb66;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i465;
    goto $bb66;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i465;
    goto $bb66;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$i471, out_$i472 := out_$i464, out_$i465;
    goto $bb66;

  $bb64:
    assume out_$i470 == 1;
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i470 := $eq.i32(out_$i469, 0);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i469 := $zext.i16.i32(out_$i468);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i468 := $load.i16($M.4, out_$p467);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p467 := $add.ref(in_$p128, $mul.ref(out_$i466, 2));
    goto corral_source_split_732;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i466 := $sext.i32.i64(out_$i464);
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb71:
    assume {:verifier.code 0} true;
    assume out_$i487 == 1;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    assume out_$i483 == 1;
    goto $bb69;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb70;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i483 := $eq.i32(out_$i482, 0);
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$i482 := $and.i32(out_$i481, 31);
    call {:si_unique_call 18} {:cexpr "src"} boogie_si_record_i32(out_$i482);
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$i481 := $zext.i16.i32(out_$i480);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$i480 := nct6775_read_value(in_$p17, out_$i479);
    call {:si_unique_call 17} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i480);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i479 := $trunc.i32.i16(out_$i478);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i478 := $zext.i16.i32(out_$i477);
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$i477 := $load.i16($M.0, out_$p476);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref(out_$p474, $mul.ref(out_$i475, 2));
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i475 := $sext.i32.i64(out_$i464);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p474 := $load.ref($M.0, out_$p473);
    goto corral_source_split_744;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p473 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_743;

  $bb65:
    assume !(out_$i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i32(out_$i486, 0);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$i486 := $and.i32(out_$i485, 1);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i485 := $ashr.i32(out_$i484, out_$i482);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$i484 := $load.i32($M.2, in_$p1);
    goto corral_source_split_756;

  $bb70:
    assume !(out_$i483 == 1);
    goto corral_source_split_755;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} _dev_info.ref.ref.i32.i32.i32.i32(in_$p4, .str.30, out_$i482, out_$i464, out_$i496, out_$i500);
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i500 := $zext.i16.i32(out_$i499);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$i499 := $load.i16($M.4, out_$p498);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$p498 := $add.ref(in_$p128, $mul.ref(out_$i497, 2));
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$i497 := $sext.i32.i64(out_$i464);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i496 := $zext.i16.i32(out_$i495);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i495 := $load.i16($M.0, out_$p494);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$p494 := $add.ref(out_$p492, $mul.ref(out_$i493, 2));
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i493 := $sext.i32.i64(out_$i464);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p492 := $load.ref($M.0, out_$p491);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_766;

  $bb74:
    assume out_$i490 == 1;
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i490 := $sge.i32(out_$i482, out_$i489);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i489 := $load.i32($M.0, out_$p488);
    goto corral_source_split_762;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p488 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_761;

  $bb72:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} _dev_info.ref.ref.i32.i32.i32.i32(in_$p4, .str.30, out_$i482, out_$i464, out_$i513, out_$i517);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$i517 := $zext.i16.i32(out_$i516);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$i516 := $load.i16($M.4, out_$p515);
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref(in_$p128, $mul.ref(out_$i514, 2));
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$i514 := $sext.i32.i64(out_$i464);
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$i513 := $zext.i16.i32(out_$i512);
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$i512 := $load.i16($M.0, out_$p511);
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref(out_$p509, $mul.ref(out_$i510, 2));
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i510 := $sext.i32.i64(out_$i464);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$p509 := $load.ref($M.0, out_$p508);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p508 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_788;

  $bb76:
    assume out_$i507 == 1;
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i507 := $eq.i64(out_$i506, 0);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$i506 := strlen(out_$p505);
    call {:si_unique_call 21} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i506);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p505 := $load.ref($M.0, out_$p504);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$p504 := $add.ref(out_$p502, $mul.ref(out_$i503, 8));
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i503 := $sext.i32.i64(out_$i482);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p502 := $load.ref($M.0, out_$p501);
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p501 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_779;

  $bb75:
    assume !(out_$i490 == 1);
    goto corral_source_split_778;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p625, out_$i621);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$p625 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(out_$i623, 1));
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i623 := $sext.i32.i64(out_$i622);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i622 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$i621 := $trunc.i32.i8(out_$i482);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p620, out_$i616);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$p620 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(out_$i618, 2));
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i618 := $sext.i32.i64(out_$i617);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i617 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$i616 := $load.i16($M.10, out_$p615);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p615 := $add.ref(in_$p125, $mul.ref(out_$i614, 2));
    goto corral_source_split_909;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i614 := $sext.i32.i64(out_$i464);
    goto corral_source_split_908;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p613, out_$i608);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref(out_$i610, 2));
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i610 := $sext.i32.i64(out_$i609);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i609 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i608 := $load.i16($M.9, out_$p607);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p607 := $add.ref(in_$p121, $mul.ref(out_$i606, 2));
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$i606 := $sext.i32.i64(out_$i464);
    goto corral_source_split_900;

  $bb94:
    assume out_$i605 == 1;
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i605 := $ne.i32(out_$i604, 0);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i604 := $zext.i16.i32(out_$i603);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i603 := $load.i16($M.9, out_$p602);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$p602 := $add.ref(in_$p121, $mul.ref(out_$i601, 2));
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i601 := $sext.i32.i64(out_$i464);
    goto corral_source_split_893;

  $bb91:
    assume out_$i600 == 1;
    goto corral_source_split_892;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i600 := $ne.i64(out_$i599, 0);
    goto corral_source_split_880;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i599 := $p2i.ref.i64(in_$p121);
    goto corral_source_split_879;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p583, out_$i578);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p583 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref(out_$i580, 2));
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i580 := $sext.i32.i64(out_$i579);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i579 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$i578 := $load.i16($M.7, out_$p577);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p577 := $add.ref(in_$p129, $mul.ref(out_$i576, 2));
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i576 := $sext.i32.i64(out_$i464);
    goto corral_source_split_871;

  $bb85:
    assume out_$i575 == 1;
    goto corral_source_split_870;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i575 := $ne.i32(out_$i574, 0);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i574 := $zext.i16.i32(out_$i573);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i573 := $load.i16($M.7, out_$p572);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref(in_$p129, $mul.ref(out_$i571, 2));
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i571 := $sext.i32.i64(out_$i464);
    goto corral_source_split_857;

  $bb82:
    assume out_$i570 == 1;
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i570 := $ne.i64(out_$i569, 0);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i569 := $p2i.ref.i64(in_$p129);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p568, out_$i563);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$p568 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref(out_$i565, 2));
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i565 := $sext.i32.i64(out_$i564);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i564 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$i563 := $load.i16($M.6, out_$p562);
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$p562 := $add.ref(in_$p126, $mul.ref(out_$i561, 2));
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i561 := $sext.i32.i64(out_$i464);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p560, out_$i555);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$p560 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref(out_$i557, 2));
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i557 := $sext.i32.i64(out_$i556);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i556 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i555 := $load.i16($M.5, out_$p554);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p554 := $add.ref(in_$p127, $mul.ref(out_$i553, 2));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i553 := $sext.i32.i64(out_$i464);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p552, out_$i547);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p552 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref(out_$i549, 2));
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i549 := $sext.i32.i64(out_$i548);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i548 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i547 := $load.i16($M.4, out_$p546);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p546 := $add.ref(in_$p128, $mul.ref(out_$i545, 2));
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i545 := $sext.i32.i64(out_$i464);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p544, out_$i543);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$p544 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i543 := $trunc.i32.i16(out_$i542);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i542 := $or.i32(out_$i537, out_$i541);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i541 := $sext.i16.i32(out_$i540);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i540 := $trunc.i32.i16(out_$i539);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i539 := $shl.i32(1, out_$i538);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i538 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i537 := $sext.i16.i32(out_$i536);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i536 := $load.i16($M.0, out_$p535);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$p535 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p534, out_$i533);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$p534 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i533 := $trunc.i32.i16(out_$i532);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i532 := $or.i32(out_$i527, out_$i531);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$i531 := $sext.i16.i32(out_$i530);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i530 := $trunc.i32.i16(out_$i529);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$i529 := $shl.i32(1, out_$i528);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i528 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i527 := $sext.i16.i32(out_$i526);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$i526 := $load.i16($M.0, out_$p525);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$p525 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_810;

  $bb80:
    assume out_$i524 == 1;
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i524 := $sle.i32(out_$i482, out_$i523);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i523 := $zext.i8.i32(out_$i522);
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i522 := $load.i8($M.0, out_$p521);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p521 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(854, 1));
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, in_$p1, out_$i520);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i520 := $or.i32(out_$i518, out_$i519);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$i519 := $shl.i32(1, out_$i482);
    goto corral_source_split_801;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i518 := $load.i32($M.2, in_$p1);
    goto corral_source_split_800;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb89:
    assume !(out_$i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p598, out_$i593);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p598 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref(out_$i595, 2));
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i595 := $sext.i32.i64(out_$i594);
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i594 := $add.i32(out_$i482, $sub.i32(0, 1));
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i593 := $load.i16($M.8, out_$p592);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p592 := $add.ref(in_$p122, $mul.ref(out_$i591, 2));
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i591 := $add.i64(out_$i590, $sub.i64(0, 1));
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i590 := $sext.i32.i64(out_$i482);
    goto corral_source_split_883;

  $bb88:
    assume out_$i589 == 1;
    goto corral_source_split_882;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$i589 := $ne.i32(out_$i588, 0);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i588 := $zext.i16.i32(out_$i587);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i587 := $load.i16($M.8, out_$p586);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$p586 := $add.ref(in_$p122, $mul.ref(out_$i585, 2));
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i585 := $add.i64(out_$i584, $sub.i64(0, 1));
    goto corral_source_split_864;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i584 := $sext.i32.i64(out_$i482);
    goto corral_source_split_863;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i570 == 1);
    goto $bb84;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i575 == 1);
    goto $bb84;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(out_$i600 == 1);
    goto $bb93;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i605 == 1);
    goto $bb93;

  $bb98:
    assume out_$i626 == 1;
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i626 := $sgt.i32(out_$i465, 9);
    goto corral_source_split_921;

  $bb81:
    assume !(out_$i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i710 := $add.i32(out_$i677, 1);
    call {:si_unique_call 23} {:cexpr "s"} boogie_si_record_i32(out_$i710);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p709, out_$i706);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$p709 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(172, 1)), $mul.ref(out_$i707, 1));
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i707 := $sext.i32.i64(out_$i677);
    goto corral_source_split_1013;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i706 := $trunc.i32.i8(out_$i482);
    goto corral_source_split_1012;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p705, out_$i701);
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$p705 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref(out_$i702, 2));
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i702 := $sext.i32.i64(out_$i677);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i701 := $load.i16($M.9, out_$p700);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$p700 := $add.ref(in_$p121, $mul.ref(out_$i699, 2));
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i699 := $sext.i32.i64(out_$i464);
    goto corral_source_split_1005;

  $bb113:
    assume out_$i698 == 1;
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i698 := $ne.i32(out_$i697, 0);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$i697 := $zext.i16.i32(out_$i696);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$i696 := $load.i16($M.9, out_$p695);
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$p695 := $add.ref(in_$p121, $mul.ref(out_$i694, 2));
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$i694 := $sext.i32.i64(out_$i464);
    goto corral_source_split_998;

  $bb110:
    assume out_$i693 == 1;
    goto corral_source_split_997;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i693 := $ne.i64(out_$i692, 0);
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$i692 := $p2i.ref.i64(in_$p121);
    goto corral_source_split_985;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i677 := out_$i465;
    goto $bb106;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i677 := out_$i465;
    goto $bb106;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p676, out_$i672);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$p676 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref(out_$i673, 2));
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i673 := $sext.i32.i64(out_$i465);
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$i672 := $load.i16($M.7, out_$p671);
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref(in_$p129, $mul.ref(out_$i670, 2));
    goto corral_source_split_978;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$i670 := $sext.i32.i64(out_$i464);
    goto corral_source_split_977;

  $bb104:
    assume out_$i669 == 1;
    goto corral_source_split_976;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i669 := $ne.i32(out_$i668, 0);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$i668 := $zext.i16.i32(out_$i667);
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$i667 := $load.i16($M.7, out_$p666);
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    out_$p666 := $add.ref(in_$p129, $mul.ref(out_$i665, 2));
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$i665 := $sext.i32.i64(out_$i464);
    goto corral_source_split_963;

  $bb101:
    assume out_$i664 == 1;
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i664 := $ne.i64(out_$i663, 0);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$i663 := $p2i.ref.i64(in_$p129);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p662, out_$i659);
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p662 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(182, 1)), $mul.ref(out_$i660, 2));
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i660 := $sext.i32.i64(out_$i465);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i659 := $load.i16($M.10, out_$p658);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$p658 := $add.ref(in_$p125, $mul.ref(out_$i657, 2));
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$i657 := $sext.i32.i64(out_$i464);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p656, out_$i652);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p656 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref(out_$i653, 2));
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$i653 := $sext.i32.i64(out_$i465);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$i652 := $load.i16($M.6, out_$p651);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p651 := $add.ref(in_$p126, $mul.ref(out_$i650, 2));
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$i650 := $sext.i32.i64(out_$i464);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p649, out_$i645);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$p649 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref(out_$i646, 2));
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$i646 := $sext.i32.i64(out_$i465);
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$i645 := $load.i16($M.5, out_$p644);
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref(in_$p127, $mul.ref(out_$i643, 2));
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$i643 := $sext.i32.i64(out_$i464);
    goto corral_source_split_941;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p642, out_$i638);
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$p642 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(0, 20)), $mul.ref(out_$i639, 2));
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$i639 := $sext.i32.i64(out_$i465);
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$i638 := $load.i16($M.4, out_$p637);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$p637 := $add.ref(in_$p128, $mul.ref(out_$i636, 2));
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i636 := $sext.i32.i64(out_$i464);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p635, out_$i634);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$p635 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i634 := $trunc.i32.i16(out_$i633);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$i633 := $or.i32(out_$i629, out_$i632);
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$i632 := $sext.i16.i32(out_$i631);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$i631 := $trunc.i32.i16(out_$i630);
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i630 := $shl.i32(1, out_$i465);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i629 := $sext.i16.i32(out_$i628);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i628 := $load.i16($M.0, out_$p627);
    goto corral_source_split_926;

  $bb100:
    assume {:verifier.code 0} true;
    out_$p627 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_925;

  $bb99:
    assume !(out_$i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb108:
    assume !(out_$i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p691, out_$i687);
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$p691 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref(out_$i688, 2));
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i688 := $sext.i32.i64(out_$i465);
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$i687 := $load.i16($M.8, out_$p686);
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_$p686 := $add.ref(in_$p122, $mul.ref(out_$i685, 2));
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$i685 := $add.i64(out_$i684, $sub.i64(0, 1));
    goto corral_source_split_990;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$i684 := $sext.i32.i64(out_$i482);
    goto corral_source_split_989;

  $bb107:
    assume out_$i683 == 1;
    goto corral_source_split_988;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i683 := $ne.i32(out_$i682, 0);
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$i682 := $zext.i16.i32(out_$i681);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i681 := $load.i16($M.8, out_$p680);
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$p680 := $add.ref(in_$p122, $mul.ref(out_$i679, 2));
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i679 := $add.i64(out_$i678, $sub.i64(0, 1));
    goto corral_source_split_970;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i678 := $sext.i32.i64(out_$i482);
    goto corral_source_split_969;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(out_$i664 == 1);
    goto $bb103;

  $bb105:
    assume {:verifier.code 0} true;
    assume !(out_$i669 == 1);
    goto $bb103;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i693 == 1);
    goto $bb112;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i698 == 1);
    goto $bb112;

  $bb116_dummy:
    call {:si_unique_call 1} out_$i466, out_$p467, out_$i468, out_$i469, out_$i470, out_$p473, out_$p474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$p492, out_$i493, out_$p494, out_$i495, out_$i496, out_$i497, out_$p498, out_$i499, out_$i500, out_$p501, out_$p502, out_$i503, out_$p504, out_$p505, out_$i506, out_$i507, out_$p508, out_$p509, out_$i510, out_$p511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$i524, out_$p525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$p544, out_$i545, out_$p546, out_$i547, out_$i548, out_$i549, out_$p552, out_$i553, out_$p554, out_$i555, out_$i556, out_$i557, out_$p560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i565, out_$p568, out_$i569, out_$i570, out_$i571, out_$p572, out_$i573, out_$i574, out_$i575, out_$i576, out_$p577, out_$i578, out_$i579, out_$i580, out_$p583, out_$i584, out_$i585, out_$p586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$i593, out_$i594, out_$i595, out_$p598, out_$i599, out_$i600, out_$i601, out_$p602, out_$i603, out_$i604, out_$i605, out_$i606, out_$p607, out_$i608, out_$i609, out_$i610, out_$p613, out_$i614, out_$p615, out_$i616, out_$i617, out_$i618, out_$p620, out_$i621, out_$i622, out_$i623, out_$p625, out_$i626, out_$p627, out_$i628, out_$i629, out_$i630, out_$i631, out_$i632, out_$i633, out_$i634, out_$p635, out_$i636, out_$p637, out_$i638, out_$i639, out_$p642, out_$i643, out_$p644, out_$i645, out_$i646, out_$p649, out_$i650, out_$p651, out_$i652, out_$i653, out_$p656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$i667, out_$i668, out_$i669, out_$i670, out_$p671, out_$i672, out_$i673, out_$p676, out_$i678, out_$i679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$i685, out_$p686, out_$i687, out_$i688, out_$p691, out_$i677, out_$i692, out_$i693, out_$i694, out_$p695, out_$i696, out_$i697, out_$i698, out_$i699, out_$p700, out_$i701, out_$i702, out_$p705, out_$i706, out_$i707, out_$p709, out_$i710, out_$i471, out_$i472, out_$i711, out_$i712, out_$i464, out_$i465, out_$i713 := nct6775_probe_loop_$bb62(in_$p1, in_$p4, in_$p17, in_$p121, in_$p122, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$i130, out_$i466, out_$p467, out_$i468, out_$i469, out_$i470, out_$p473, out_$p474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$p492, out_$i493, out_$p494, out_$i495, out_$i496, out_$i497, out_$p498, out_$i499, out_$i500, out_$p501, out_$p502, out_$i503, out_$p504, out_$p505, out_$i506, out_$i507, out_$p508, out_$p509, out_$i510, out_$p511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$i524, out_$p525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$p544, out_$i545, out_$p546, out_$i547, out_$i548, out_$i549, out_$p552, out_$i553, out_$p554, out_$i555, out_$i556, out_$i557, out_$p560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i565, out_$p568, out_$i569, out_$i570, out_$i571, out_$p572, out_$i573, out_$i574, out_$i575, out_$i576, out_$p577, out_$i578, out_$i579, out_$i580, out_$p583, out_$i584, out_$i585, out_$p586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$i593, out_$i594, out_$i595, out_$p598, out_$i599, out_$i600, out_$i601, out_$p602, out_$i603, out_$i604, out_$i605, out_$i606, out_$p607, out_$i608, out_$i609, out_$i610, out_$p613, out_$i614, out_$p615, out_$i616, out_$i617, out_$i618, out_$p620, out_$i621, out_$i622, out_$i623, out_$p625, out_$i626, out_$p627, out_$i628, out_$i629, out_$i630, out_$i631, out_$i632, out_$i633, out_$i634, out_$p635, out_$i636, out_$p637, out_$i638, out_$i639, out_$p642, out_$i643, out_$p644, out_$i645, out_$i646, out_$p649, out_$i650, out_$p651, out_$i652, out_$i653, out_$p656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$i667, out_$i668, out_$i669, out_$i670, out_$p671, out_$i672, out_$i673, out_$p676, out_$i678, out_$i679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$i685, out_$p686, out_$i687, out_$i688, out_$p691, out_$i677, out_$i692, out_$i693, out_$i694, out_$p695, out_$i696, out_$i697, out_$i698, out_$i699, out_$p700, out_$i701, out_$i702, out_$p705, out_$i706, out_$i707, out_$p709, out_$i710, out_$i471, out_$i472, out_$i711, out_$i712, out_$i464, out_$i465, out_$i713);
    return;

  exit:
    return;
}



procedure nct6775_probe_loop_$bb62(in_$p1: ref, in_$p4: ref, in_$p17: ref, in_$p121: ref, in_$p122: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i466: i64, in_$p467: ref, in_$i468: i16, in_$i469: i32, in_$i470: i1, in_$p473: ref, in_$p474: ref, in_$i475: i64, in_$p476: ref, in_$i477: i16, in_$i478: i32, in_$i479: i16, in_$i480: i16, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$i484: i32, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$p488: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$p492: ref, in_$i493: i64, in_$p494: ref, in_$i495: i16, in_$i496: i32, in_$i497: i64, in_$p498: ref, in_$i499: i16, in_$i500: i32, in_$p501: ref, in_$p502: ref, in_$i503: i64, in_$p504: ref, in_$p505: ref, in_$i506: i64, in_$i507: i1, in_$p508: ref, in_$p509: ref, in_$i510: i64, in_$p511: ref, in_$i512: i16, in_$i513: i32, in_$i514: i64, in_$p515: ref, in_$i516: i16, in_$i517: i32, in_$i518: i32, in_$i519: i32, in_$i520: i32, in_$p521: ref, in_$i522: i8, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$i526: i16, in_$i527: i32, in_$i528: i32, in_$i529: i32, in_$i530: i16, in_$i531: i32, in_$i532: i32, in_$i533: i16, in_$p534: ref, in_$p535: ref, in_$i536: i16, in_$i537: i32, in_$i538: i32, in_$i539: i32, in_$i540: i16, in_$i541: i32, in_$i542: i32, in_$i543: i16, in_$p544: ref, in_$i545: i64, in_$p546: ref, in_$i547: i16, in_$i548: i32, in_$i549: i64, in_$p552: ref, in_$i553: i64, in_$p554: ref, in_$i555: i16, in_$i556: i32, in_$i557: i64, in_$p560: ref, in_$i561: i64, in_$p562: ref, in_$i563: i16, in_$i564: i32, in_$i565: i64, in_$p568: ref, in_$i569: i64, in_$i570: i1, in_$i571: i64, in_$p572: ref, in_$i573: i16, in_$i574: i32, in_$i575: i1, in_$i576: i64, in_$p577: ref, in_$i578: i16, in_$i579: i32, in_$i580: i64, in_$p583: ref, in_$i584: i64, in_$i585: i64, in_$p586: ref, in_$i587: i16, in_$i588: i32, in_$i589: i1, in_$i590: i64, in_$i591: i64, in_$p592: ref, in_$i593: i16, in_$i594: i32, in_$i595: i64, in_$p598: ref, in_$i599: i64, in_$i600: i1, in_$i601: i64, in_$p602: ref, in_$i603: i16, in_$i604: i32, in_$i605: i1, in_$i606: i64, in_$p607: ref, in_$i608: i16, in_$i609: i32, in_$i610: i64, in_$p613: ref, in_$i614: i64, in_$p615: ref, in_$i616: i16, in_$i617: i32, in_$i618: i64, in_$p620: ref, in_$i621: i8, in_$i622: i32, in_$i623: i64, in_$p625: ref, in_$i626: i1, in_$p627: ref, in_$i628: i16, in_$i629: i32, in_$i630: i32, in_$i631: i16, in_$i632: i32, in_$i633: i32, in_$i634: i16, in_$p635: ref, in_$i636: i64, in_$p637: ref, in_$i638: i16, in_$i639: i64, in_$p642: ref, in_$i643: i64, in_$p644: ref, in_$i645: i16, in_$i646: i64, in_$p649: ref, in_$i650: i64, in_$p651: ref, in_$i652: i16, in_$i653: i64, in_$p656: ref, in_$i657: i64, in_$p658: ref, in_$i659: i16, in_$i660: i64, in_$p662: ref, in_$i663: i64, in_$i664: i1, in_$i665: i64, in_$p666: ref, in_$i667: i16, in_$i668: i32, in_$i669: i1, in_$i670: i64, in_$p671: ref, in_$i672: i16, in_$i673: i64, in_$p676: ref, in_$i678: i64, in_$i679: i64, in_$p680: ref, in_$i681: i16, in_$i682: i32, in_$i683: i1, in_$i684: i64, in_$i685: i64, in_$p686: ref, in_$i687: i16, in_$i688: i64, in_$p691: ref, in_$i677: i32, in_$i692: i64, in_$i693: i1, in_$i694: i64, in_$p695: ref, in_$i696: i16, in_$i697: i32, in_$i698: i1, in_$i699: i64, in_$p700: ref, in_$i701: i16, in_$i702: i64, in_$p705: ref, in_$i706: i8, in_$i707: i64, in_$p709: ref, in_$i710: i32, in_$i471: i32, in_$i472: i32, in_$i711: i32, in_$i712: i1, in_$i464: i32, in_$i465: i32, in_$i713: i32) returns (out_$i466: i64, out_$p467: ref, out_$i468: i16, out_$i469: i32, out_$i470: i1, out_$p473: ref, out_$p474: ref, out_$i475: i64, out_$p476: ref, out_$i477: i16, out_$i478: i32, out_$i479: i16, out_$i480: i16, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$i484: i32, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$p488: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$p492: ref, out_$i493: i64, out_$p494: ref, out_$i495: i16, out_$i496: i32, out_$i497: i64, out_$p498: ref, out_$i499: i16, out_$i500: i32, out_$p501: ref, out_$p502: ref, out_$i503: i64, out_$p504: ref, out_$p505: ref, out_$i506: i64, out_$i507: i1, out_$p508: ref, out_$p509: ref, out_$i510: i64, out_$p511: ref, out_$i512: i16, out_$i513: i32, out_$i514: i64, out_$p515: ref, out_$i516: i16, out_$i517: i32, out_$i518: i32, out_$i519: i32, out_$i520: i32, out_$p521: ref, out_$i522: i8, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$i526: i16, out_$i527: i32, out_$i528: i32, out_$i529: i32, out_$i530: i16, out_$i531: i32, out_$i532: i32, out_$i533: i16, out_$p534: ref, out_$p535: ref, out_$i536: i16, out_$i537: i32, out_$i538: i32, out_$i539: i32, out_$i540: i16, out_$i541: i32, out_$i542: i32, out_$i543: i16, out_$p544: ref, out_$i545: i64, out_$p546: ref, out_$i547: i16, out_$i548: i32, out_$i549: i64, out_$p552: ref, out_$i553: i64, out_$p554: ref, out_$i555: i16, out_$i556: i32, out_$i557: i64, out_$p560: ref, out_$i561: i64, out_$p562: ref, out_$i563: i16, out_$i564: i32, out_$i565: i64, out_$p568: ref, out_$i569: i64, out_$i570: i1, out_$i571: i64, out_$p572: ref, out_$i573: i16, out_$i574: i32, out_$i575: i1, out_$i576: i64, out_$p577: ref, out_$i578: i16, out_$i579: i32, out_$i580: i64, out_$p583: ref, out_$i584: i64, out_$i585: i64, out_$p586: ref, out_$i587: i16, out_$i588: i32, out_$i589: i1, out_$i590: i64, out_$i591: i64, out_$p592: ref, out_$i593: i16, out_$i594: i32, out_$i595: i64, out_$p598: ref, out_$i599: i64, out_$i600: i1, out_$i601: i64, out_$p602: ref, out_$i603: i16, out_$i604: i32, out_$i605: i1, out_$i606: i64, out_$p607: ref, out_$i608: i16, out_$i609: i32, out_$i610: i64, out_$p613: ref, out_$i614: i64, out_$p615: ref, out_$i616: i16, out_$i617: i32, out_$i618: i64, out_$p620: ref, out_$i621: i8, out_$i622: i32, out_$i623: i64, out_$p625: ref, out_$i626: i1, out_$p627: ref, out_$i628: i16, out_$i629: i32, out_$i630: i32, out_$i631: i16, out_$i632: i32, out_$i633: i32, out_$i634: i16, out_$p635: ref, out_$i636: i64, out_$p637: ref, out_$i638: i16, out_$i639: i64, out_$p642: ref, out_$i643: i64, out_$p644: ref, out_$i645: i16, out_$i646: i64, out_$p649: ref, out_$i650: i64, out_$p651: ref, out_$i652: i16, out_$i653: i64, out_$p656: ref, out_$i657: i64, out_$p658: ref, out_$i659: i16, out_$i660: i64, out_$p662: ref, out_$i663: i64, out_$i664: i1, out_$i665: i64, out_$p666: ref, out_$i667: i16, out_$i668: i32, out_$i669: i1, out_$i670: i64, out_$p671: ref, out_$i672: i16, out_$i673: i64, out_$p676: ref, out_$i678: i64, out_$i679: i64, out_$p680: ref, out_$i681: i16, out_$i682: i32, out_$i683: i1, out_$i684: i64, out_$i685: i64, out_$p686: ref, out_$i687: i16, out_$i688: i64, out_$p691: ref, out_$i677: i32, out_$i692: i64, out_$i693: i1, out_$i694: i64, out_$p695: ref, out_$i696: i16, out_$i697: i32, out_$i698: i1, out_$i699: i64, out_$p700: ref, out_$i701: i16, out_$i702: i64, out_$p705: ref, out_$i706: i8, out_$i707: i64, out_$p709: ref, out_$i710: i32, out_$i471: i32, out_$i472: i32, out_$i711: i32, out_$i712: i1, out_$i464: i32, out_$i465: i32, out_$i713: i32);
  modifies $M.0, $M.2;



implementation {:SIextraRecBound 2} nct6775_probe_loop_$bb44(in_$p1: ref, in_$p2: ref, in_$p17: ref, in_$p128: ref, in_$i130: i32, in_$i428: i64, in_$p429: ref, in_$i430: i16, in_$i431: i32, in_$i432: i1, in_$p434: ref, in_$p435: ref, in_$i436: i64, in_$p437: ref, in_$i438: i16, in_$i439: i32, in_$i440: i16, in_$i441: i16, in_$i442: i32, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$i446: i32, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i32, in_$i451: i32, in_$i452: i32, in_$i453: i32, in_$i454: i32, in_$i455: i32, in_$i433: i32, in_$i456: i32, in_$i457: i1, in_$i427: i32) returns (out_$i428: i64, out_$p429: ref, out_$i430: i16, out_$i431: i32, out_$i432: i1, out_$p434: ref, out_$p435: ref, out_$i436: i64, out_$p437: ref, out_$i438: i16, out_$i439: i32, out_$i440: i16, out_$i441: i16, out_$i442: i32, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$i446: i32, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i32, out_$i451: i32, out_$i452: i32, out_$i453: i32, out_$i454: i32, out_$i455: i32, out_$i433: i32, out_$i456: i32, out_$i457: i1, out_$i427: i32)
{

  entry:
    out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$p434, out_$p435, out_$i436, out_$p437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i433, out_$i456, out_$i457, out_$i427 := in_$i428, in_$p429, in_$i430, in_$i431, in_$i432, in_$p434, in_$p435, in_$i436, in_$p437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$i448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i433, in_$i456, in_$i457, in_$i427;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  $bb56:
    assume out_$i457 == 1;
    assume {:verifier.code 0} true;
    out_$i427 := out_$i456;
    goto $bb56_dummy;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$i457 := $slt.i32(out_$i456, in_$i130);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$i456 := $add.i32(out_$i433, 1);
    call {:si_unique_call 9} {:cexpr "i"} boogie_si_record_i32(out_$i456);
    goto corral_source_split_684;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$i433 := out_$i452;
    goto $bb48;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i433 := out_$i427;
    goto $bb48;

  $bb46:
    assume out_$i432 == 1;
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 0);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i431 := $zext.i16.i32(out_$i430);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i430 := $load.i16($M.4, out_$p429);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$p429 := $add.ref(in_$p128, $mul.ref(out_$i428, 2));
    goto corral_source_split_676;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i428 := $sext.i32.i64(out_$i427);
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, in_$p1, out_$i455);
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$i455 := $or.i32(out_$i453, out_$i454);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i454 := $shl.i32(1, out_$i443);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$i453 := $load.i32($M.2, in_$p1);
    goto corral_source_split_711;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  $bb54:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    out_$i452 := out_$i427;
    goto $bb55;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i452 := out_$i427;
    goto $bb55;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, in_$p2, out_$i451);
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i451 := $or.i32(out_$i449, out_$i450);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i450 := $shl.i32(1, out_$i427);
    goto corral_source_split_700;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i449 := $load.i32($M.3, in_$p2);
    goto corral_source_split_699;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i448 == 1;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    assume out_$i444 == 1;
    goto $bb51;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb52;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$i444 := $eq.i32(out_$i443, 0);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$i443 := $and.i32(out_$i442, 31);
    call {:si_unique_call 12} {:cexpr "src"} boogie_si_record_i32(out_$i443);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$i442 := $zext.i16.i32(out_$i441);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} out_$i441 := nct6775_read_value(in_$p17, out_$i440);
    call {:si_unique_call 11} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i441);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i440 := $trunc.i32.i16(out_$i439);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i439 := $zext.i16.i32(out_$i438);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$i438 := $load.i16($M.0, out_$p437);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$p437 := $add.ref(out_$p435, $mul.ref(out_$i436, 2));
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i436 := $sext.i32.i64(out_$i427);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$p435 := $load.ref($M.0, out_$p434);
    goto corral_source_split_688;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p434 := $add.ref($add.ref(in_$p17, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_687;

  $bb47:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$i448 := $ne.i32(out_$i447, 0);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i447 := $and.i32(out_$i446, 1);
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i446 := $ashr.i32(out_$i445, out_$i443);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i445 := $load.i32($M.2, in_$p1);
    goto corral_source_split_705;

  $bb52:
    assume !(out_$i444 == 1);
    goto corral_source_split_704;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$p434, out_$p435, out_$i436, out_$p437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i433, out_$i456, out_$i457, out_$i427 := nct6775_probe_loop_$bb44(in_$p1, in_$p2, in_$p17, in_$p128, in_$i130, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$p434, out_$p435, out_$i436, out_$p437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i433, out_$i456, out_$i457, out_$i427);
    return;

  exit:
    return;
}



procedure nct6775_probe_loop_$bb44(in_$p1: ref, in_$p2: ref, in_$p17: ref, in_$p128: ref, in_$i130: i32, in_$i428: i64, in_$p429: ref, in_$i430: i16, in_$i431: i32, in_$i432: i1, in_$p434: ref, in_$p435: ref, in_$i436: i64, in_$p437: ref, in_$i438: i16, in_$i439: i32, in_$i440: i16, in_$i441: i16, in_$i442: i32, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$i446: i32, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i32, in_$i451: i32, in_$i452: i32, in_$i453: i32, in_$i454: i32, in_$i455: i32, in_$i433: i32, in_$i456: i32, in_$i457: i1, in_$i427: i32) returns (out_$i428: i64, out_$p429: ref, out_$i430: i16, out_$i431: i32, out_$i432: i1, out_$p434: ref, out_$p435: ref, out_$i436: i64, out_$p437: ref, out_$i438: i16, out_$i439: i32, out_$i440: i16, out_$i441: i16, out_$i442: i32, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$i446: i32, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i32, out_$i451: i32, out_$i452: i32, out_$i453: i32, out_$i454: i32, out_$i455: i32, out_$i433: i32, out_$i456: i32, out_$i457: i1, out_$i427: i32);
  modifies $M.2, $M.3, $M.0;



implementation add_temp_sensors_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i9: i64, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$i14: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$i19: i16, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i32, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i16, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$i54: i16, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$i8: i32, in_$i68: i32, in_$i69: i1, in_vslice_dummy_var_2: i32) returns (out_$i9: i64, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$i14: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$i19: i16, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i32, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i16, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$i54: i16, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$i8: i32, out_$i68: i32, out_$i69: i1, out_vslice_dummy_var_2: i32)
{

  entry:
    out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i8, out_$i68, out_$i69, out_vslice_dummy_var_2 := in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i8, in_$i68, in_$i69, in_vslice_dummy_var_2;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  $bb22:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i64;
    goto $bb22_dummy;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i64, out_$i66);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, in_$p4);
    goto corral_source_split_1689;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i8, 1);
    call {:si_unique_call 121} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1688;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.0, out_$p10);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(in_$p1, $mul.ref(out_$i9, 2));
    goto corral_source_split_1681;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1680;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24:
    assume out_$i69 == 1;
    goto corral_source_split_1758;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.3, in_$p2);
    goto corral_source_split_1677;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i25 == 1;
    goto $bb11;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i8(out_$i22);
    call {:si_unique_call 125} {:cexpr "src"} boogie_si_record_i8(out_$i23);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 31);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i16.i8(out_$i19);
    call {:si_unique_call 124} {:cexpr "src"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} out_$i19 := nct6775_read_value(in_$p0, out_$i18);
    call {:si_unique_call 123} {:cexpr "tmp"} boogie_si_record_i16(out_$i19);
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i16(out_$i17);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p1, $mul.ref(out_$i14, 2));
    goto corral_source_split_1694;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1693;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 1);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i28 := $ashr.i32(out_$i26, out_$i27);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i23);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.2, in_$p3);
    goto corral_source_split_1707;

  $bb12:
    assume !(out_$i25 == 1);
    goto corral_source_split_1706;

  $bb16:
    assume out_$i34 == 1;
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i34 := $sge.i32(out_$i31, out_$i33);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(216, 1));
    goto corral_source_split_1714;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i23);
    goto corral_source_split_1713;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, 0);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} out_$i40 := strlen(out_$p39);
    call {:si_unique_call 127} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(out_$i37, 8));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i64(out_$i23);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(208, 1));
    goto corral_source_split_1721;

  $bb17:
    assume !(out_$i34 == 1);
    goto corral_source_split_1720;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, in_$p3, out_$i63);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$i63 := $or.i32(out_$i60, out_$i62);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i62 := $shl.i32(1, out_$i61);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i32(out_$i23);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.2, in_$p3);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, in_$p2, out_$i59);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i56, out_$i58);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i58 := $xor.i32(out_$i57, $sub.i32(0, 1));
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i57 := $shl.i32(1, out_$i45);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.3, in_$p2);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} out_vslice_dummy_var_2 := nct6775_write_value(in_$p0, out_$i52, out_$i54);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i16(out_$i53);
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i23);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i16(out_$i51);
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i50);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i16($M.0, out_$p49);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 2));
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i64.i32(out_$i44);
    call {:si_unique_call 130} {:cexpr "index"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$i44 := __ffs(out_$i43);
    call {:si_unique_call 129} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_1732;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.3, in_$p2);
    goto corral_source_split_1731;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i8, out_$i68, out_$i69, out_vslice_dummy_var_2 := add_temp_sensors_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i8, out_$i68, out_$i69, out_vslice_dummy_var_2);
    return;

  exit:
    return;
}



procedure add_temp_sensors_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i9: i64, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$i14: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$i19: i16, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i32, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i16, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$i54: i16, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$i8: i32, in_$i68: i32, in_$i69: i1, in_vslice_dummy_var_2: i32) returns (out_$i9: i64, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$i14: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$i19: i16, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i32, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i16, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$i54: i16, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$i8: i32, out_$i68: i32, out_$i69: i1, out_vslice_dummy_var_2: i32);
  modifies $M.0, $M.2, $M.3;



implementation nct6775_init_device_loop_$bb27(in_$p0: ref, in_$i56: i8, in_$i73: i8, in_$p74: ref, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i32, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i8, in_$i104: i64, in_$p106: ref, in_$i107: i64, in_$p109: ref, in_$i110: i32, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$i78: i32) returns (out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i32, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i8, out_$i104: i64, out_$p106: ref, out_$i107: i64, out_$p109: ref, out_$i110: i32, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$i78: i32)
{

  entry:
    out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i78 := in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p106, in_$i107, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i78;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  $bb36:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := out_$i110;
    goto $bb36_dummy;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i110, out_$i112);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.0, in_$p74);
    goto corral_source_split_1882;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i78, 1);
    call {:si_unique_call 147} {:cexpr "i"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_1881;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i84 == 1;
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 0);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, 1);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i82 := $ashr.i32(out_$i81, out_$i78);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i16.i32(out_$i80);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i16($M.0, out_$p79);
    goto corral_source_split_1873;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p109, 4);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p106, out_$i103);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(855, 1)), $mul.ref(out_$i104, 1));
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i78);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i8(out_$i102);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i102 := $sub.i32(3, out_$i101);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i32.i8(out_$i99);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i99 := $and.i32(out_$i95, out_$i98);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i8.i32(out_$i97);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p96);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i8.i32(out_$i94);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i32.i8(out_$i93);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i93 := $ashr.i32(out_$i92, out_$i78);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(in_$i73);
    goto corral_source_split_1895;

  $bb33:
    assume out_$i91 == 1;
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i85, out_$i89);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i89 := $shl.i32(out_$i88, out_$i78);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(226, 1));
    goto corral_source_split_1887;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(in_$i56);
    goto corral_source_split_1886;

  $bb30:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(855, 1)), $mul.ref(out_$i107, 1));
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i32.i64(out_$i78);
    goto corral_source_split_1912;

  $bb34:
    assume !(out_$i91 == 1);
    goto corral_source_split_1911;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i78 := nct6775_init_device_loop_$bb27(in_$p0, in_$i56, in_$i73, in_$p74, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i78);
    return;

  exit:
    return;
}



procedure nct6775_init_device_loop_$bb27(in_$p0: ref, in_$i56: i8, in_$i73: i8, in_$p74: ref, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i32, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i8, in_$i104: i64, in_$p106: ref, in_$i107: i64, in_$p109: ref, in_$i110: i32, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$i78: i32) returns (out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i32, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i8, out_$i104: i64, out_$p106: ref, out_$i107: i64, out_$p109: ref, out_$i110: i32, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$i78: i32);
  modifies $M.0;



implementation nct6775_create_attr_group_loop_$bb33(in_$p1: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$p80: ref, in_$i81: i8, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$i97: i32, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p110: ref, in_$i111: i16, in_$p114: ref, in_$p115: ref, in_$p117: ref, in_$p118: ref, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$p126: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p145: ref, in_$i146: i16, in_$p149: ref, in_$p150: ref, in_$p152: ref, in_$p153: ref, in_$p155: ref, in_$p156: ref, in_$p158: ref, in_$p159: ref, in_$p161: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p170: ref, in_$p171: ref, in_$i55: i32, in_vslice_dummy_var_21: i32) returns (out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p79: ref, out_$p80: ref, out_$i81: i8, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$i97: i32, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p110: ref, out_$i111: i16, out_$p114: ref, out_$p115: ref, out_$p117: ref, out_$p118: ref, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$p124: ref, out_$p126: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p145: ref, out_$i146: i16, out_$p149: ref, out_$p150: ref, out_$p152: ref, out_$p153: ref, out_$p155: ref, out_$p156: ref, out_$p158: ref, out_$p159: ref, out_$p161: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p170: ref, out_$p171: ref, out_vslice_dummy_var_21: i32)
{

  entry:
    out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_vslice_dummy_var_21 := in_$p68, in_$p69, in_$p70, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$p106, in_$p107, in_$p110, in_$i111, in_$p114, in_$p115, in_$p117, in_$p118, in_$p120, in_$p121, in_$p123, in_$p124, in_$p126, in_$p129, in_$p130, in_$p131, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p145, in_$i146, in_$p149, in_$p150, in_$p152, in_$p153, in_$p155, in_$p156, in_$p158, in_$p159, in_$p161, in_$p164, in_$p165, in_$p166, in_$p167, in_$i168, in_$i169, in_$p65, in_$p66, in_$p67, in_$p170, in_$p171, in_vslice_dummy_var_21;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  $bb38:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$p65, out_$p66, out_$p67 := out_$p166, out_$p164, out_$p165;
    goto $bb38_dummy;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p170, out_$p171 := out_$p165, out_$p164;
    assume true;
    goto $bb38;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i64(out_$i168, 0);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$i168 := $p2i.ref.i64(out_$p167);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$p167 := $load.ref($M.15, out_$p166);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref(out_$p65, $mul.ref(1, 8));
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p67, $mul.ref(1, 88));
    goto corral_source_split_2872;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p66, $mul.ref(1, 8));
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, out_$p67);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, out_$p67);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p124);
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.17, out_$p123);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref(out_$p121, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p120, out_$p118);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.17, out_$p117);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref(out_$p115, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p114, out_$i111);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i16($M.17, out_$p110);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref($add.ref(out_$p107, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p106, out_$i105);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.17, out_$p104);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p100, out_$i99);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i95, out_$i97);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i8(in_$i55);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.17, out_$p93);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p90, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p89, out_$p85);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  $bb35:
    assume out_$i82 == 1;
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i8.i1(out_$i81);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.17, out_$p80);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} out_vslice_dummy_var_21 := snprintf.ref.i64.ref.i32(out_$p69, 32, out_$p74, out_$i77);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i76, in_$i55);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.18, out_$p75);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.17, out_$p73);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_2783;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p161, out_$p159);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.17, out_$p158);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref($add.ref(out_$p156, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p155, out_$p153);
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.17, out_$p152);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p149, out_$i146);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i16($M.17, out_$p145);
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref($add.ref(out_$p142, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p141, out_$i140);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i139, in_$i55);
    goto corral_source_split_2851;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.17, out_$p138);
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p136, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p135, out_$p131);
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  $bb36:
    assume !(out_$i82 == 1);
    goto corral_source_split_2840;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_vslice_dummy_var_21 := nct6775_create_attr_group_loop_$bb33(in_$p1, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, in_$i55, out_vslice_dummy_var_21);
    return;

  exit:
    return;
}



procedure nct6775_create_attr_group_loop_$bb33(in_$p1: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$p80: ref, in_$i81: i8, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$i97: i32, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p110: ref, in_$i111: i16, in_$p114: ref, in_$p115: ref, in_$p117: ref, in_$p118: ref, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$p126: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p145: ref, in_$i146: i16, in_$p149: ref, in_$p150: ref, in_$p152: ref, in_$p153: ref, in_$p155: ref, in_$p156: ref, in_$p158: ref, in_$p159: ref, in_$p161: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p170: ref, in_$p171: ref, in_$i55: i32, in_vslice_dummy_var_21: i32) returns (out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p79: ref, out_$p80: ref, out_$i81: i8, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$i97: i32, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p110: ref, out_$i111: i16, out_$p114: ref, out_$p115: ref, out_$p117: ref, out_$p118: ref, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$p124: ref, out_$p126: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p145: ref, out_$i146: i16, out_$p149: ref, out_$p150: ref, out_$p152: ref, out_$p153: ref, out_$p155: ref, out_$p156: ref, out_$p158: ref, out_$p159: ref, out_$p161: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p170: ref, out_$p171: ref, out_vslice_dummy_var_21: i32);
  modifies $M.0;



implementation nct6775_create_attr_group_loop_$bb28(in_$p1: ref, in_$i2: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$p80: ref, in_$i81: i8, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$i97: i32, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p110: ref, in_$i111: i16, in_$p114: ref, in_$p115: ref, in_$p117: ref, in_$p118: ref, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$p126: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p145: ref, in_$i146: i16, in_$p149: ref, in_$p150: ref, in_$p152: ref, in_$p153: ref, in_$p155: ref, in_$p156: ref, in_$p158: ref, in_$p159: ref, in_$p161: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p170: ref, in_$p171: ref, in_$p63: ref, in_$p64: ref, in_$i172: i32, in_$i173: i1, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_vslice_dummy_var_21: i32) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p79: ref, out_$p80: ref, out_$i81: i8, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$i97: i32, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p110: ref, out_$i111: i16, out_$p114: ref, out_$p115: ref, out_$p117: ref, out_$p118: ref, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$p124: ref, out_$p126: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p145: ref, out_$i146: i16, out_$p149: ref, out_$p150: ref, out_$p152: ref, out_$p153: ref, out_$p155: ref, out_$p156: ref, out_$p158: ref, out_$p159: ref, out_$p161: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p170: ref, out_$p171: ref, out_$p63: ref, out_$p64: ref, out_$i172: i32, out_$i173: i1, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_vslice_dummy_var_21: i32)
{

  entry:
    out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_$p63, out_$p64, out_$i172, out_$i173, out_$i55, out_$p56, out_$p57, out_vslice_dummy_var_21 := in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p68, in_$p69, in_$p70, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$p106, in_$p107, in_$p110, in_$i111, in_$p114, in_$p115, in_$p117, in_$p118, in_$p120, in_$p121, in_$p123, in_$p124, in_$p126, in_$p129, in_$p130, in_$p131, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p145, in_$i146, in_$p149, in_$p150, in_$p152, in_$p153, in_$p155, in_$p156, in_$p158, in_$p159, in_$p161, in_$p164, in_$p165, in_$p166, in_$p167, in_$i168, in_$i169, in_$p65, in_$p66, in_$p67, in_$p170, in_$p171, in_$p63, in_$p64, in_$i172, in_$i173, in_$i55, in_$p56, in_$p57, in_vslice_dummy_var_21;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  $bb41:
    assume out_$i173 == 1;
    assume {:verifier.code 0} true;
    out_$i55, out_$p56, out_$p57 := out_$i172, out_$p64, out_$p63;
    goto $bb41_dummy;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i172, in_$i2);
    goto corral_source_split_2881;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i55, 1);
    call {:si_unique_call 262} {:cexpr "i"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_2880;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb32;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p170, out_$p171;
    goto $bb32;

  $bb39:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p170, out_$p171 := out_$p165, out_$p164;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i64(out_$i168, 0);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$i168 := $p2i.ref.i64(out_$p167);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$p167 := $load.ref($M.15, out_$p166);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref(out_$p65, $mul.ref(1, 8));
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p67, $mul.ref(1, 88));
    goto corral_source_split_2872;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p66, $mul.ref(1, 8));
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, out_$p67);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, out_$p67);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p124);
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.17, out_$p123);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref(out_$p121, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p120, out_$p118);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.17, out_$p117);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref(out_$p115, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p114, out_$i111);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i16($M.17, out_$p110);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref($add.ref(out_$p107, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p106, out_$i105);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.17, out_$p104);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p100, out_$i99);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i95, out_$i97);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i8(out_$i55);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.17, out_$p93);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p90, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p89, out_$p85);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  $bb35:
    assume out_$i82 == 1;
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i8.i1(out_$i81);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.17, out_$p80);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} out_vslice_dummy_var_21 := snprintf.ref.i64.ref.i32(out_$p69, 32, out_$p74, out_$i77);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i76, out_$i55);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.18, out_$p75);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.17, out_$p73);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_2783;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    call out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_vslice_dummy_var_21 := nct6775_create_attr_group_loop_$bb33(in_$p1, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_$i55, out_vslice_dummy_var_21);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$p65, out_$p66, out_$p67 := out_$p59, out_$p56, out_$p57;
    goto $bb33;

  $bb38:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$p65, out_$p66, out_$p67 := out_$p166, out_$p164, out_$p165;
    assume false;
    return;

  $bb30:
    assume out_$i62 == 1;
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p57, out_$p56;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, 0);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.15, out_$p59);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.14, out_$p58);
    goto corral_source_split_2773;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p161, out_$p159);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.17, out_$p158);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref($add.ref(out_$p156, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p155, out_$p153);
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.17, out_$p152);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p149, out_$i146);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i16($M.17, out_$p145);
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref($add.ref(out_$p142, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p141, out_$i140);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i139, out_$i55);
    goto corral_source_split_2851;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.17, out_$p138);
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p136, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.15, out_$p65);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p135, out_$p131);
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($add.ref($add.ref(out_$p130, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p67, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  $bb36:
    assume !(out_$i82 == 1);
    goto corral_source_split_2840;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_$p63, out_$p64, out_$i172, out_$i173, out_$i55, out_$p56, out_$p57, out_vslice_dummy_var_21 := nct6775_create_attr_group_loop_$bb28(in_$p1, in_$i2, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p110, out_$i111, out_$p114, out_$p115, out_$p117, out_$p118, out_$p120, out_$p121, out_$p123, out_$p124, out_$p126, out_$p129, out_$p130, out_$p131, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p145, out_$i146, out_$p149, out_$p150, out_$p152, out_$p153, out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p65, out_$p66, out_$p67, out_$p170, out_$p171, out_$p63, out_$p64, out_$i172, out_$i173, out_$i55, out_$p56, out_$p57, out_vslice_dummy_var_21);
    return;

  exit:
    return;
}



procedure nct6775_create_attr_group_loop_$bb28(in_$p1: ref, in_$i2: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$p80: ref, in_$i81: i8, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$i97: i32, in_$i98: i32, in_$i99: i8, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p110: ref, in_$i111: i16, in_$p114: ref, in_$p115: ref, in_$p117: ref, in_$p118: ref, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$p126: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p145: ref, in_$i146: i16, in_$p149: ref, in_$p150: ref, in_$p152: ref, in_$p153: ref, in_$p155: ref, in_$p156: ref, in_$p158: ref, in_$p159: ref, in_$p161: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p170: ref, in_$p171: ref, in_$p63: ref, in_$p64: ref, in_$i172: i32, in_$i173: i1, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_vslice_dummy_var_21: i32) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p79: ref, out_$p80: ref, out_$i81: i8, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$i97: i32, out_$i98: i32, out_$i99: i8, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p110: ref, out_$i111: i16, out_$p114: ref, out_$p115: ref, out_$p117: ref, out_$p118: ref, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$p124: ref, out_$p126: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p145: ref, out_$i146: i16, out_$p149: ref, out_$p150: ref, out_$p152: ref, out_$p153: ref, out_$p155: ref, out_$p156: ref, out_$p158: ref, out_$p159: ref, out_$p161: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p170: ref, out_$p171: ref, out_$p63: ref, out_$p64: ref, out_$i172: i32, out_$i173: i1, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_vslice_dummy_var_21: i32);
  modifies $M.0;



implementation nct6775_create_attr_group_loop_$bb8(in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i13: i32, in_$p14: ref, in_$i20: i32) returns (out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i13: i32, out_$p14: ref, out_$i20: i32)
{

  entry:
    out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i13, out_$p14, out_$i20 := in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i13, in_$p14, in_$i20;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  $bb10:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$p14 := out_$i16, out_$p15;
    goto $bb10_dummy;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i16;
    assume true;
    goto $bb10;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.15, out_$p15);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i13, 1);
    call {:si_unique_call 253} {:cexpr "count"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2712;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p14, $mul.ref(1, 8));
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i13, out_$p14, out_$i20 := nct6775_create_attr_group_loop_$bb8(out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i13, out_$p14, out_$i20);
    return;

  exit:
    return;
}



procedure nct6775_create_attr_group_loop_$bb8(in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i13: i32, in_$p14: ref, in_$i20: i32) returns (out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i13: i32, out_$p14: ref, out_$i20: i32);



implementation {:SIextraRecBound 10} nct6775_resume_loop_$bb28(in_$p2: ref, in_$p83: ref, in_$i84: i16, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i90: i64, in_$p93: ref, in_$i94: i16, in_$i95: i32, in_$i96: i1, in_$i97: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i64, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i110: i16, in_$i89: i32, in_$i112: i32, in_$i113: i1, in_$i82: i32, in_$i138: i64, in_$p141: ref, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i145: i64, in_$p148: ref, in_$i149: i16, in_$i150: i32, in_$i151: i16, in_$i152: i64, in_$p155: ref, in_$i156: i16, in_$i157: i32, in_$i158: i16, in_$i160: i64, in_$p163: ref, in_$i164: i16, in_$i165: i32, in_$i166: i1, in_$i167: i64, in_$p170: ref, in_$i171: i16, in_$i172: i32, in_$i173: i16, in_$i174: i64, in_$p177: ref, in_$i178: i16, in_$i179: i32, in_$i180: i16, in_$i182: i64, in_$p185: ref, in_$i186: i16, in_$i187: i32, in_$i188: i1, in_$i189: i64, in_$p192: ref, in_$i193: i16, in_$i194: i32, in_$i195: i16, in_$i196: i64, in_$p199: ref, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_vslice_dummy_var_29: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32) returns (out_$p83: ref, out_$i84: i16, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i90: i64, out_$p93: ref, out_$i94: i16, out_$i95: i32, out_$i96: i1, out_$i97: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i64, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i110: i16, out_$i89: i32, out_$i112: i32, out_$i113: i1, out_$i82: i32, out_$i138: i64, out_$p141: ref, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i145: i64, out_$p148: ref, out_$i149: i16, out_$i150: i32, out_$i151: i16, out_$i152: i64, out_$p155: ref, out_$i156: i16, out_$i157: i32, out_$i158: i16, out_$i160: i64, out_$p163: ref, out_$i164: i16, out_$i165: i32, out_$i166: i1, out_$i167: i64, out_$p170: ref, out_$i171: i16, out_$i172: i32, out_$i173: i16, out_$i174: i64, out_$p177: ref, out_$i178: i16, out_$i179: i32, out_$i180: i16, out_$i182: i64, out_$p185: ref, out_$i186: i16, out_$i187: i32, out_$i188: i1, out_$i189: i64, out_$p192: ref, out_$i193: i16, out_$i194: i32, out_$i195: i16, out_$i196: i64, out_$p199: ref, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_vslice_dummy_var_29: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32)
{

  entry:
    out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p107, out_$i108, out_$i109, out_$i110, out_$i89, out_$i112, out_$i113, out_$i82, out_$i138, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p177, out_$i178, out_$i179, out_$i180, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p199, out_$i200, out_$i201, out_$i202, out_vslice_dummy_var_29, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35 := in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i90, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p107, in_$i108, in_$i109, in_$i110, in_$i89, in_$i112, in_$i113, in_$i82, in_$i138, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$p155, in_$i156, in_$i157, in_$i158, in_$i160, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p177, in_$i178, in_$i179, in_$i180, in_$i182, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$p192, in_$i193, in_$i194, in_$i195, in_$i196, in_$p199, in_$i200, in_$i201, in_$i202, in_vslice_dummy_var_29, in_vslice_dummy_var_33, in_vslice_dummy_var_34, in_vslice_dummy_var_35;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3690;

  $bb41:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i112;
    goto $bb41_dummy;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i113 := $sle.i32(out_$i112, 9);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i89, 1);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_3702;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3701;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i82;
    goto $bb32;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i82;
    goto $bb32;

  $bb30:
    assume out_$i88 == 1;
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 0);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$i87 := $and.i32(out_$i86, 1);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i86 := $ashr.i32(out_$i85, out_$i82);
    goto corral_source_split_3695;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i16.i32(out_$i84);
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i16($M.0, out_$p83);
    goto corral_source_split_3693;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_3692;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb56:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_vslice_dummy_var_35 := nct6775_write_temp(in_$p2, out_$i195, out_$i202);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i202 := $trunc.i32.i16(out_$i201);
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$i201 := $zext.i16.i32(out_$i200);
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i16($M.0, out_$p199);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(4, 20)), $mul.ref(out_$i196, 2));
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i196 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i195 := $trunc.i32.i16(out_$i194);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i194 := $zext.i16.i32(out_$i193);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i16($M.0, out_$p192);
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref(out_$i189, 2));
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$i189 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3794;

  $bb55:
    assume out_$i188 == 1;
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i187, 0);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i187 := $zext.i16.i32(out_$i186);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i16($M.0, out_$p185);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(4, 20)), $mul.ref(out_$i182, 2));
    goto corral_source_split_3788;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i182 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3787;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_vslice_dummy_var_34 := nct6775_write_temp(in_$p2, out_$i173, out_$i180);
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i180 := $trunc.i32.i16(out_$i179);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i16.i32(out_$i178);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i16($M.0, out_$p177);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(3, 20)), $mul.ref(out_$i174, 2));
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i174 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i173 := $trunc.i32.i16(out_$i172);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i172 := $zext.i16.i32(out_$i171);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i16($M.0, out_$p170);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref(out_$i167, 2));
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3775;

  $bb51:
    assume out_$i166 == 1;
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i32(out_$i165, 0);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i16.i32(out_$i164);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i16($M.0, out_$p163);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(3, 20)), $mul.ref(out_$i160, 2));
    goto corral_source_split_3769;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3768;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} out_vslice_dummy_var_33 := nct6775_write_temp(in_$p2, out_$i151, out_$i158);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$i158 := $trunc.i32.i16(out_$i157);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i16.i32(out_$i156);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i16($M.0, out_$p155);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(2, 20)), $mul.ref(out_$i152, 2));
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$i151 := $trunc.i32.i16(out_$i150);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i16.i32(out_$i149);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i16($M.0, out_$p148);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref(out_$i145, 2));
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3756;

  $bb47:
    assume out_$i144 == 1;
    goto corral_source_split_3755;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i16.i32(out_$i142);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i16($M.0, out_$p141);
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(2, 20)), $mul.ref(out_$i138, 2));
    goto corral_source_split_3725;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i138 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3724;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} out_vslice_dummy_var_29 := nct6775_write_temp(in_$p2, out_$i103, out_$i110);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i32.i16(out_$i109);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i108);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.0, out_$p107);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(1, 20)), $mul.ref(out_$i104, 2));
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i16(out_$i102);
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i32(out_$i101);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i16($M.0, out_$p100);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref(out_$i97, 2));
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3712;

  $bb36:
    assume out_$i96 == 1;
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i16.i32(out_$i94);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i16($M.0, out_$p93);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(1, 20)), $mul.ref(out_$i90, 2));
    goto corral_source_split_3706;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i82);
    goto corral_source_split_3705;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p107, out_$i108, out_$i109, out_$i110, out_$i89, out_$i112, out_$i113, out_$i82, out_$i138, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p177, out_$i178, out_$i179, out_$i180, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p199, out_$i200, out_$i201, out_$i202, out_vslice_dummy_var_29, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35 := nct6775_resume_loop_$bb28(in_$p2, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p107, out_$i108, out_$i109, out_$i110, out_$i89, out_$i112, out_$i113, out_$i82, out_$i138, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p177, out_$i178, out_$i179, out_$i180, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p199, out_$i200, out_$i201, out_$i202, out_vslice_dummy_var_29, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35);
    return;

  exit:
    return;
}



procedure nct6775_resume_loop_$bb28(in_$p2: ref, in_$p83: ref, in_$i84: i16, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i90: i64, in_$p93: ref, in_$i94: i16, in_$i95: i32, in_$i96: i1, in_$i97: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i64, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i110: i16, in_$i89: i32, in_$i112: i32, in_$i113: i1, in_$i82: i32, in_$i138: i64, in_$p141: ref, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i145: i64, in_$p148: ref, in_$i149: i16, in_$i150: i32, in_$i151: i16, in_$i152: i64, in_$p155: ref, in_$i156: i16, in_$i157: i32, in_$i158: i16, in_$i160: i64, in_$p163: ref, in_$i164: i16, in_$i165: i32, in_$i166: i1, in_$i167: i64, in_$p170: ref, in_$i171: i16, in_$i172: i32, in_$i173: i16, in_$i174: i64, in_$p177: ref, in_$i178: i16, in_$i179: i32, in_$i180: i16, in_$i182: i64, in_$p185: ref, in_$i186: i16, in_$i187: i32, in_$i188: i1, in_$i189: i64, in_$p192: ref, in_$i193: i16, in_$i194: i32, in_$i195: i16, in_$i196: i64, in_$p199: ref, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_vslice_dummy_var_29: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32) returns (out_$p83: ref, out_$i84: i16, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i90: i64, out_$p93: ref, out_$i94: i16, out_$i95: i32, out_$i96: i1, out_$i97: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i64, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i110: i16, out_$i89: i32, out_$i112: i32, out_$i113: i1, out_$i82: i32, out_$i138: i64, out_$p141: ref, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i145: i64, out_$p148: ref, out_$i149: i16, out_$i150: i32, out_$i151: i16, out_$i152: i64, out_$p155: ref, out_$i156: i16, out_$i157: i32, out_$i158: i16, out_$i160: i64, out_$p163: ref, out_$i164: i16, out_$i165: i32, out_$i166: i1, out_$i167: i64, out_$p170: ref, out_$i171: i16, out_$i172: i32, out_$i173: i16, out_$i174: i64, out_$p177: ref, out_$i178: i16, out_$i179: i32, out_$i180: i16, out_$i182: i64, out_$p185: ref, out_$i186: i16, out_$i187: i32, out_$i188: i1, out_$i189: i64, out_$p192: ref, out_$i193: i16, out_$i194: i32, out_$i195: i16, out_$i196: i64, out_$p199: ref, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_vslice_dummy_var_29: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32);
  modifies $M.0;



implementation nct6775_resume_loop_$bb11(in_$p2: ref, in_$p19: ref, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i16, in_$i38: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i16, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$i54: i64, in_$p57: ref, in_$i58: i8, in_$i59: i32, in_$i60: i16, in_$i62: i32, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i23: i32, in_vslice_dummy_var_26: i32, in_vslice_dummy_var_27: i32) returns (out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i16, out_$i38: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i16, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$i54: i64, out_$p57: ref, out_$i58: i8, out_$i59: i32, out_$i60: i16, out_$i62: i32, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i23: i32, out_vslice_dummy_var_26: i32, out_vslice_dummy_var_27: i32)
{

  entry:
    out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i23, out_vslice_dummy_var_26, out_vslice_dummy_var_27 := in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p41, in_$i42, in_$i43, in_$i44, in_$p47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$i64, in_$i65, in_$i23, in_vslice_dummy_var_26, in_vslice_dummy_var_27;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  $bb17:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i62;
    goto $bb17_dummy;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i62, out_$i64);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, in_$p19);
    goto corral_source_split_3631;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i23, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3630;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 1);
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$i27 := $ashr.i32(out_$i26, out_$i23);
    goto corral_source_split_3624;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, out_$p24);
    goto corral_source_split_3622;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} out_vslice_dummy_var_27 := nct6775_write_value(in_$p2, out_$i53, out_$i60);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i16(out_$i59);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.0, out_$p57);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref(out_$i54, 3)), $mul.ref(2, 1));
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i23);
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 2));
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i23);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} out_vslice_dummy_var_26 := nct6775_write_value(in_$p2, out_$i37, out_$i44);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref(out_$i38, 3)), $mul.ref(1, 1));
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i23);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 2));
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i23);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3636;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_3635;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i23, out_vslice_dummy_var_26, out_vslice_dummy_var_27 := nct6775_resume_loop_$bb11(in_$p2, in_$p19, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i23, out_vslice_dummy_var_26, out_vslice_dummy_var_27);
    return;

  exit:
    return;
}



procedure nct6775_resume_loop_$bb11(in_$p2: ref, in_$p19: ref, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i16, in_$i38: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i16, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$i54: i64, in_$p57: ref, in_$i58: i8, in_$i59: i32, in_$i60: i16, in_$i62: i32, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i23: i32, in_vslice_dummy_var_26: i32, in_vslice_dummy_var_27: i32) returns (out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i16, out_$i38: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i16, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$i54: i64, out_$p57: ref, out_$i58: i8, out_$i59: i32, out_$i60: i16, out_$i62: i32, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i23: i32, out_vslice_dummy_var_26: i32, out_vslice_dummy_var_27: i32);
  modifies $M.0;



implementation nct6775_update_device_loop_$bb36(in_$p2: ref, in_$i151: i64, in_$i152: i64, in_$p155: ref, in_$i156: i16, in_$i157: i32, in_$i158: i1, in_$i159: i64, in_$i160: i64, in_$p163: ref, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i167: i16, in_$i168: i64, in_$i169: i64, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i150: i32, in_$i142: i32) returns (out_$i151: i64, out_$i152: i64, out_$p155: ref, out_$i156: i16, out_$i157: i32, out_$i158: i1, out_$i159: i64, out_$i160: i64, out_$p163: ref, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i167: i16, out_$i168: i64, out_$i169: i64, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i150: i32)
{

  entry:
    out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150 := in_$i151, in_$i152, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p172, in_$i173, in_$i174, in_$i150;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4160;

  $bb41:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$i150 := out_$i173;
    goto $bb41_dummy;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i174 := $ule.i32(out_$i173, 4);
    goto corral_source_split_4183;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i150, 1);
    call {:si_unique_call 439} {:cexpr "j"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_4182;

  $bb39:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p172, out_$i167);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(out_$i169, 20)), $mul.ref(out_$i168, 2));
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i169 := $sext.i32.i64(out_$i150);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(in_$i142);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i167 := nct6775_read_temp(in_$p2, out_$i166);
    call {:si_unique_call 438} {:cexpr "tmp___4"} boogie_si_record_i16(out_$i167);
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i16(out_$i165);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i16.i32(out_$i164);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i16($M.0, out_$p163);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(out_$i160, 20)), $mul.ref(out_$i159, 2));
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i150);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i159 := $sext.i32.i64(in_$i142);
    goto corral_source_split_4170;

  $bb38:
    assume out_$i158 == 1;
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i16.i32(out_$i156);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i16($M.0, out_$p155);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(out_$i152, 20)), $mul.ref(out_$i151, 2));
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i150);
    goto corral_source_split_4163;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i151 := $sext.i32.i64(in_$i142);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150 := nct6775_update_device_loop_$bb36(in_$p2, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150, in_$i142);
    return;

  exit:
    return;
}



procedure nct6775_update_device_loop_$bb36(in_$p2: ref, in_$i151: i64, in_$i152: i64, in_$p155: ref, in_$i156: i16, in_$i157: i32, in_$i158: i1, in_$i159: i64, in_$i160: i64, in_$p163: ref, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i167: i16, in_$i168: i64, in_$i169: i64, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i150: i32, in_$i142: i32) returns (out_$i151: i64, out_$i152: i64, out_$p155: ref, out_$i156: i16, out_$i157: i32, out_$i158: i1, out_$i159: i64, out_$i160: i64, out_$p163: ref, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i167: i16, out_$i168: i64, out_$i169: i64, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i150: i32);
  modifies $M.0;



implementation {:SIextraRecBound 10} nct6775_update_device_loop_$bb30(in_$p2: ref, in_$p143: ref, in_$i144: i16, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$i151: i64, in_$i152: i64, in_$p155: ref, in_$i156: i16, in_$i157: i32, in_$i158: i1, in_$i159: i64, in_$i160: i64, in_$p163: ref, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i167: i16, in_$i168: i64, in_$i169: i64, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i150: i32, in_$i175: i1, in_$p176: ref, in_$i177: i16, in_$i178: i32, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$i186: i16, in_$i187: i32, in_$i188: i16, in_$i189: i16, in_$i190: i8, in_$i191: i64, in_$p193: ref, in_$i149: i32, in_$i194: i32, in_$i195: i1, in_$i142: i32) returns (out_$p143: ref, out_$i144: i16, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$i151: i64, out_$i152: i64, out_$p155: ref, out_$i156: i16, out_$i157: i32, out_$i158: i1, out_$i159: i64, out_$i160: i64, out_$p163: ref, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i167: i16, out_$i168: i64, out_$i169: i64, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i150: i32, out_$i175: i1, out_$p176: ref, out_$i177: i16, out_$i178: i32, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$i186: i16, out_$i187: i32, out_$i188: i16, out_$i189: i16, out_$i190: i8, out_$i191: i64, out_$p193: ref, out_$i149: i32, out_$i194: i32, out_$i195: i1, out_$i142: i32)
{

  entry:
    out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$p193, out_$i149, out_$i194, out_$i195, out_$i142 := in_$p143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i151, in_$i152, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p172, in_$i173, in_$i174, in_$i150, in_$i175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$p182, in_$p183, in_$i184, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$p193, in_$i149, in_$i194, in_$i195, in_$i142;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4145;

  $bb50:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i142 := out_$i194;
    goto $bb50_dummy;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i195 := $sle.i32(out_$i194, 9);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$i194 := $add.i32(out_$i149, 1);
    call {:si_unique_call 436} {:cexpr "i"} boogie_si_record_i32(out_$i194);
    goto corral_source_split_4157;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i142;
    goto $bb34;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i142;
    goto $bb34;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i142;
    goto $bb34;

  $bb32:
    assume out_$i148 == 1;
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 0);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i147 := $and.i32(out_$i146, 1);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i146 := $ashr.i32(out_$i145, out_$i142);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i16.i32(out_$i144);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i16($M.0, out_$p143);
    goto corral_source_split_4148;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1270, 1));
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i181 == 1;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i175 == 1;
    goto $bb45;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i175 := $sgt.i32(out_$i142, 5);
    goto corral_source_split_4185;

  $bb42:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i174 := $ule.i32(out_$i173, 4);
    goto corral_source_split_4183;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i150, 1);
    call {:si_unique_call 439} {:cexpr "j"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_4182;

  $bb39:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p172, out_$i167);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(868, 1)), $mul.ref(out_$i169, 20)), $mul.ref(out_$i168, 2));
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i169 := $sext.i32.i64(out_$i150);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(out_$i142);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i167 := nct6775_read_temp(in_$p2, out_$i166);
    call {:si_unique_call 438} {:cexpr "tmp___4"} boogie_si_record_i16(out_$i167);
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i16(out_$i165);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i16.i32(out_$i164);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i16($M.0, out_$p163);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(out_$i160, 20)), $mul.ref(out_$i159, 2));
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i150);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i159 := $sext.i32.i64(out_$i142);
    goto corral_source_split_4170;

  $bb38:
    assume out_$i158 == 1;
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i16.i32(out_$i156);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i16($M.0, out_$p155);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(72, 1)), $mul.ref(out_$i152, 20)), $mul.ref(out_$i151, 2));
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i150);
    goto corral_source_split_4163;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i151 := $sext.i32.i64(out_$i142);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    call out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150 := nct6775_update_device_loop_$bb36(in_$p2, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150, out_$i142);
    goto $bb36_last;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4160;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i150 := 0;
    goto $bb36;

  $bb41:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$i150 := out_$i173;
    assume false;
    return;

  $bb33:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 0);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i180 := $and.i32(out_$i179, 1);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i179 := $ashr.i32(out_$i178, out_$i142);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i178 := $zext.i16.i32(out_$i177);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i16($M.0, out_$p176);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1272, 1));
    goto corral_source_split_4188;

  $bb46:
    assume !(out_$i175 == 1);
    goto corral_source_split_4187;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p193, out_$i190);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(861, 1)), $mul.ref(out_$i191, 1));
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$i191 := $sext.i32.i64(out_$i142);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i190 := $trunc.i16.i8(out_$i189);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} out_$i189 := nct6775_read_value(in_$p2, out_$i188);
    call {:si_unique_call 441} {:cexpr "tmp___5"} boogie_si_record_i16(out_$i189);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i188 := $trunc.i32.i16(out_$i187);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i187 := $zext.i16.i32(out_$i186);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i16($M.0, out_$p185);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref(out_$p183, $mul.ref(out_$i184, 2));
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i32.i64(out_$i142);
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.0, out_$p182);
    goto corral_source_split_4196;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(536, 1));
    goto corral_source_split_4195;

  $bb48:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$p193, out_$i149, out_$i194, out_$i195, out_$i142 := nct6775_update_device_loop_$bb30(in_$p2, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i151, out_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p172, out_$i173, out_$i174, out_$i150, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$p193, out_$i149, out_$i194, out_$i195, out_$i142);
    return;

  exit:
    return;
}



procedure nct6775_update_device_loop_$bb30(in_$p2: ref, in_$p143: ref, in_$i144: i16, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$i151: i64, in_$i152: i64, in_$p155: ref, in_$i156: i16, in_$i157: i32, in_$i158: i1, in_$i159: i64, in_$i160: i64, in_$p163: ref, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i167: i16, in_$i168: i64, in_$i169: i64, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i150: i32, in_$i175: i1, in_$p176: ref, in_$i177: i16, in_$i178: i32, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$i186: i16, in_$i187: i32, in_$i188: i16, in_$i189: i16, in_$i190: i8, in_$i191: i64, in_$p193: ref, in_$i149: i32, in_$i194: i32, in_$i195: i1, in_$i142: i32) returns (out_$p143: ref, out_$i144: i16, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$i151: i64, out_$i152: i64, out_$p155: ref, out_$i156: i16, out_$i157: i32, out_$i158: i1, out_$i159: i64, out_$i160: i64, out_$p163: ref, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i167: i16, out_$i168: i64, out_$i169: i64, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i150: i32, out_$i175: i1, out_$p176: ref, out_$i177: i16, out_$i178: i32, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$i186: i16, out_$i187: i32, out_$i188: i16, out_$i189: i16, out_$i190: i8, out_$i191: i64, out_$p193: ref, out_$i149: i32, out_$i194: i32, out_$i195: i1, out_$i142: i32);
  modifies $M.0;



implementation {:SIextraRecBound 6} nct6775_update_device_loop_$bb18(in_$p0: ref, in_$p2: ref, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i16, in_$i84: i16, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i16, in_$i89: i64, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i110: i16, in_$i111: i16, in_$i112: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i16, in_$i120: i32, in_$i121: i16, in_$i122: i16, in_$i123: i32, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i16, in_$i129: i32, in_$i130: i32, in_$i131: i8, in_$i132: i32, in_$i133: i32, in_$i134: i8, in_$i135: i64, in_$p137: ref, in_$i138: i32, in_$i139: i16, in_$i76: i32, in_$i140: i32, in_$i141: i1, in_$i69: i32) returns (out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i16, out_$i84: i16, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i16, out_$i89: i64, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i110: i16, out_$i111: i16, out_$i112: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i16, out_$i120: i32, out_$i121: i16, out_$i122: i16, out_$i123: i32, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i16, out_$i129: i32, out_$i130: i32, out_$i131: i8, out_$i132: i32, out_$i133: i32, out_$i134: i8, out_$i135: i64, out_$p137: ref, out_$i138: i32, out_$i139: i16, out_$i76: i32, out_$i140: i32, out_$i141: i1, out_$i69: i32)
{

  entry:
    out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p137, out_$i138, out_$i139, out_$i76, out_$i140, out_$i141, out_$i69 := in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p77, in_$p78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p114, in_$p115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$p125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$p137, in_$i138, in_$i139, in_$i76, in_$i140, in_$i141, in_$i69;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4061;

  $bb27:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i140;
    goto $bb27_dummy;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i141 := $ule.i32(out_$i140, 5);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i76, 1);
    call {:si_unique_call 426} {:cexpr "i"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_4073;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4072;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i69;
    goto $bb22;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i69;
    goto $bb22;

  $bb20:
    assume out_$i75 == 1;
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i32(out_$i73, 1);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i73 := $ashr.i32(out_$i72, out_$i69);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_4064;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(849, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} nct6775_select_fan_div(in_$p0, in_$p2, out_$i69, out_$i139);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i32.i16(out_$i138);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i16.i32(out_$i84);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p137, out_$i134);
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(836, 1)), $mul.ref(out_$i135, 1));
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$i134 := $trunc.i32.i8(out_$i133);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i133 := $and.i32(out_$i132, 3);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i8.i32(out_$i131);
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i32.i8(out_$i130);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i130 := $ashr.i32(out_$i123, out_$i129);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i16.i32(out_$i128);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i16($M.0, out_$p127);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p125, $mul.ref(out_$i126, 2));
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(312, 1));
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(out_$i122);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} out_$i122 := nct6775_read_value(in_$p2, out_$i121);
    call {:si_unique_call 432} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i122);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i32.i16(out_$i120);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i16.i32(out_$i119);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i16($M.0, out_$p118);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p116, $mul.ref(out_$i117, 2));
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_4116;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(304, 1));
    goto corral_source_split_4115;

  $bb25:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p114, out_$i111);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(824, 1)), $mul.ref(out_$i112, 2));
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_$i111 := nct6775_read_value(in_$p2, out_$i110);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i32.i16(out_$i109);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i108);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.0, out_$p107);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p105, $mul.ref(out_$i106, 2));
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(296, 1));
    goto corral_source_split_4103;

  $bb24:
    assume out_$i103 == 1;
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i101, 1);
    goto corral_source_split_4099;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    out_$i101 := $ashr.i32(out_$i100, out_$i69);
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_4097;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i8($M.0, out_$p98);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(850, 1));
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, out_$i94);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(800, 1)), $mul.ref(out_$i95, 4));
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    call {:si_unique_call 429} out_$i94 := devirtbounce.5(out_$p86, out_$i88, out_$i93);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.0, out_$p91);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(842, 1)), $mul.ref(out_$i89, 1));
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4088;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i16(out_$i87);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i84);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(560, 1));
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$i84 := nct6775_read_value(in_$p2, out_$i83);
    call {:si_unique_call 428} {:cexpr "reg"} boogie_si_record_i16(out_$i84);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i16(out_$i82);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i16($M.0, out_$p80);
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p78, $mul.ref(out_$i79, 2));
    goto corral_source_split_4079;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i69);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_4077;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(280, 1));
    goto corral_source_split_4076;

  $bb21:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p137, out_$i138, out_$i139, out_$i76, out_$i140, out_$i141, out_$i69 := nct6775_update_device_loop_$bb18(in_$p0, in_$p2, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p137, out_$i138, out_$i139, out_$i76, out_$i140, out_$i141, out_$i69);
    return;

  exit:
    return;
}



procedure nct6775_update_device_loop_$bb18(in_$p0: ref, in_$p2: ref, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i16, in_$i84: i16, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i16, in_$i89: i64, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i110: i16, in_$i111: i16, in_$i112: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i16, in_$i120: i32, in_$i121: i16, in_$i122: i16, in_$i123: i32, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i16, in_$i129: i32, in_$i130: i32, in_$i131: i8, in_$i132: i32, in_$i133: i32, in_$i134: i8, in_$i135: i64, in_$p137: ref, in_$i138: i32, in_$i139: i16, in_$i76: i32, in_$i140: i32, in_$i141: i1, in_$i69: i32) returns (out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i16, out_$i84: i16, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i16, out_$i89: i64, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i110: i16, out_$i111: i16, out_$i112: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i16, out_$i120: i32, out_$i121: i16, out_$i122: i16, out_$i123: i32, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i16, out_$i129: i32, out_$i130: i32, out_$i131: i8, out_$i132: i32, out_$i133: i32, out_$i134: i8, out_$i135: i64, out_$p137: ref, out_$i138: i32, out_$i139: i16, out_$i76: i32, out_$i140: i32, out_$i141: i1, out_$i69: i32);
  modifies $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.0, $CurrAddr;



implementation nct6775_update_device_loop_$bb9(in_$p2: ref, in_$p13: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i8, in_$i33: i64, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$i45: i16, in_$i46: i8, in_$i47: i64, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i16, in_$i59: i16, in_$i60: i8, in_$i61: i64, in_$p64: ref, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i17: i32) returns (out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i8, out_$i33: i64, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$i45: i16, out_$i46: i8, out_$i47: i64, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i16, out_$i59: i16, out_$i60: i8, out_$i61: i64, out_$p64: ref, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i17: i32)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p50, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i17 := in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p36, in_$p38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p50, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i17;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  $bb15:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i65;
    goto $bb15_dummy;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i65, out_$i67);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, in_$p13);
    goto corral_source_split_4018;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i17, 1);
    call {:si_unique_call 419} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4017;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i23 == 1;
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 1);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$i21 := $ashr.i32(out_$i20, out_$i17);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_4009;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1274, 1));
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p64, out_$i60);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref(out_$i61, 3)), $mul.ref(2, 1));
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i16.i8(out_$i59);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_$i59 := nct6775_read_value(in_$p2, out_$i58);
    call {:si_unique_call 425} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i59);
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i16(out_$i57);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32(out_$i56);
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i16($M.0, out_$p55);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p53, $mul.ref(out_$i54, 2));
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(1, 8));
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p50, out_$i46);
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref(out_$i47, 3)), $mul.ref(1, 1));
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i16.i8(out_$i45);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_$i45 := nct6775_read_value(in_$p2, out_$i44);
    call {:si_unique_call 423} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i45);
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p39, $mul.ref(out_$i40, 2));
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(256, 1)), $mul.ref(0, 8));
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p36, out_$i32);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(754, 1)), $mul.ref(out_$i33, 3)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i16.i8(out_$i31);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} out_$i31 := nct6775_read_value(in_$p2, out_$i30);
    call {:si_unique_call 421} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i31);
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.0, out_$p27);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 2));
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_4023;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(248, 1));
    goto corral_source_split_4022;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p50, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i17 := nct6775_update_device_loop_$bb9(in_$p2, in_$p13, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p50, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i17);
    return;

  exit:
    return;
}



procedure nct6775_update_device_loop_$bb9(in_$p2: ref, in_$p13: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i8, in_$i33: i64, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$i45: i16, in_$i46: i8, in_$i47: i64, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i16, in_$i59: i16, in_$i60: i8, in_$i61: i64, in_$p64: ref, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i17: i32) returns (out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i8, out_$i33: i64, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$i45: i16, out_$i46: i8, out_$i47: i64, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i16, out_$i59: i16, out_$i60: i8, out_$i61: i64, out_$p64: ref, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i17: i32);
  modifies $M.0;



implementation nct6775_update_pwm_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i16, in_$i29: i16, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i1, in_$i44: i8, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i16, in_$i53: i32, in_$i54: i16, in_$i55: i16, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i16, in_$i68: i32, in_$i69: i1, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p74: ref, in_$i75: i16, in_$i76: i32, in_$i77: i16, in_$i78: i16, in_$i79: i8, in_$i80: i64, in_$p83: ref, in_$i84: i64, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i64, in_$p95: ref, in_$i96: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i1, in_$i103: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i8, in_$i109: i32, in_$i110: i32, in_$i111: i8, in_$i112: i64, in_$p115: ref, in_$i116: i64, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i64, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i8, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i16, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$i146: i8, in_$i147: i32, in_$i148: i32, in_$i149: i8, in_$i150: i8, in_$i151: i32, in_$i152: i64, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$p158: ref, in_$i159: i16, in_$i160: i32, in_$i161: i16, in_$i162: i16, in_$i163: i8, in_$i164: i64, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$i170: i64, in_$p171: ref, in_$i172: i16, in_$i173: i32, in_$i174: i16, in_$i175: i16, in_$i176: i32, in_$i177: i8, in_$i178: i32, in_$i179: i32, in_$i180: i8, in_$i181: i64, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$i186: i64, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$i192: i64, in_$p193: ref, in_$i194: i16, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$p200: ref, in_$i201: i16, in_$i202: i32, in_$i203: i16, in_$i204: i16, in_$i205: i32, in_$i206: i8, in_$i207: i32, in_$i208: i32, in_$i209: i8, in_$i210: i64, in_$p212: ref, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i64, in_$p218: ref, in_$p220: ref, in_$p221: ref, in_$i222: i64, in_$p223: ref, in_$i224: i16, in_$i225: i32, in_$i226: i16, in_$i227: i16, in_$i228: i8, in_$i229: i64, in_$p232: ref, in_$i14: i32, in_$i233: i32, in_$i234: i8, in_$i235: i32, in_$i236: i1, in_$i7: i32, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$i241: i1, in_$p243: ref, in_$p244: ref, in_$i245: i64, in_$p246: ref, in_$i247: i16, in_$i248: i32, in_$i249: i1, in_$p251: ref, in_$p252: ref, in_$i253: i64, in_$p254: ref, in_$i255: i16, in_$i256: i32, in_$i257: i16, in_$i258: i16, in_$i259: i8, in_$i260: i64, in_$p263: ref, in_$p265: ref, in_$p266: ref, in_$i267: i64, in_$i268: i1, in_$p270: ref, in_$p271: ref, in_$i272: i64, in_$p273: ref, in_$i274: i16, in_$i275: i32, in_$i276: i1, in_$p278: ref, in_$p279: ref, in_$i280: i64, in_$p281: ref, in_$i282: i16, in_$i283: i32, in_$i284: i16, in_$i285: i16, in_$i286: i8, in_$i287: i64, in_$p290: ref, in_$p292: ref, in_$p293: ref, in_$i294: i64, in_$i295: i1, in_$p297: ref, in_$p298: ref, in_$i299: i64, in_$p300: ref, in_$i301: i16, in_$i302: i32, in_$i303: i1, in_$p305: ref, in_$p306: ref, in_$i307: i64, in_$p308: ref, in_$i309: i16, in_$i310: i32, in_$i311: i16, in_$i312: i16, in_$i313: i8, in_$i314: i64, in_$p317: ref, in_$p319: ref, in_$p320: ref, in_$i321: i64, in_$i322: i1, in_$p324: ref, in_$p325: ref, in_$i326: i64, in_$p327: ref, in_$i328: i16, in_$i329: i32, in_$i330: i1, in_$p332: ref, in_$p333: ref, in_$i334: i64, in_$p335: ref, in_$i336: i16, in_$i337: i32, in_$i338: i16, in_$i339: i16, in_$i340: i8, in_$i341: i64, in_$p344: ref, in_$p346: ref, in_$p347: ref, in_$i348: i64, in_$i349: i1, in_$p351: ref, in_$p352: ref, in_$i353: i64, in_$p354: ref, in_$i355: i16, in_$i356: i32, in_$i357: i1, in_$p359: ref, in_$p360: ref, in_$i361: i64, in_$p362: ref, in_$i363: i16, in_$i364: i32, in_$i365: i16, in_$i366: i16, in_$i367: i8, in_$i368: i64, in_$p371: ref, in_$p373: ref, in_$p374: ref, in_$i375: i64, in_$i376: i1, in_$p378: ref, in_$p379: ref, in_$i380: i64, in_$p381: ref, in_$i382: i16, in_$i383: i32, in_$i384: i1, in_$p386: ref, in_$p387: ref, in_$i388: i64, in_$p389: ref, in_$i390: i16, in_$i391: i32, in_$i392: i16, in_$i393: i16, in_$i394: i8, in_$i395: i64, in_$p398: ref, in_$p400: ref, in_$p401: ref, in_$i402: i64, in_$p403: ref, in_$i404: i16, in_$i405: i32, in_$i406: i16, in_$i407: i16, in_$i408: i8, in_$i409: i64, in_$p412: ref, in_$p414: ref, in_$p415: ref, in_$i416: i64, in_$p417: ref, in_$i418: i16, in_$i419: i32, in_$i420: i16, in_$i421: i16, in_$i422: i8, in_$i423: i64, in_$p426: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i16, out_$i29: i16, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i1, out_$i44: i8, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i16, out_$i53: i32, out_$i54: i16, out_$i55: i16, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i16, out_$i68: i32, out_$i69: i1, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p74: ref, out_$i75: i16, out_$i76: i32, out_$i77: i16, out_$i78: i16, out_$i79: i8, out_$i80: i64, out_$p83: ref, out_$i84: i64, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i64, out_$p95: ref, out_$i96: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i1, out_$i103: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i8, out_$i109: i32, out_$i110: i32, out_$i111: i8, out_$i112: i64, out_$p115: ref, out_$i116: i64, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i64, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i8, out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i16, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$i146: i8, out_$i147: i32, out_$i148: i32, out_$i149: i8, out_$i150: i8, out_$i151: i32, out_$i152: i64, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$p158: ref, out_$i159: i16, out_$i160: i32, out_$i161: i16, out_$i162: i16, out_$i163: i8, out_$i164: i64, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$i170: i64, out_$p171: ref, out_$i172: i16, out_$i173: i32, out_$i174: i16, out_$i175: i16, out_$i176: i32, out_$i177: i8, out_$i178: i32, out_$i179: i32, out_$i180: i8, out_$i181: i64, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$i186: i64, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$i192: i64, out_$p193: ref, out_$i194: i16, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$p200: ref, out_$i201: i16, out_$i202: i32, out_$i203: i16, out_$i204: i16, out_$i205: i32, out_$i206: i8, out_$i207: i32, out_$i208: i32, out_$i209: i8, out_$i210: i64, out_$p212: ref, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i64, out_$p218: ref, out_$p220: ref, out_$p221: ref, out_$i222: i64, out_$p223: ref, out_$i224: i16, out_$i225: i32, out_$i226: i16, out_$i227: i16, out_$i228: i8, out_$i229: i64, out_$p232: ref, out_$i14: i32, out_$i233: i32, out_$i234: i8, out_$i235: i32, out_$i236: i1, out_$i7: i32, out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$i241: i1, out_$p243: ref, out_$p244: ref, out_$i245: i64, out_$p246: ref, out_$i247: i16, out_$i248: i32, out_$i249: i1, out_$p251: ref, out_$p252: ref, out_$i253: i64, out_$p254: ref, out_$i255: i16, out_$i256: i32, out_$i257: i16, out_$i258: i16, out_$i259: i8, out_$i260: i64, out_$p263: ref, out_$p265: ref, out_$p266: ref, out_$i267: i64, out_$i268: i1, out_$p270: ref, out_$p271: ref, out_$i272: i64, out_$p273: ref, out_$i274: i16, out_$i275: i32, out_$i276: i1, out_$p278: ref, out_$p279: ref, out_$i280: i64, out_$p281: ref, out_$i282: i16, out_$i283: i32, out_$i284: i16, out_$i285: i16, out_$i286: i8, out_$i287: i64, out_$p290: ref, out_$p292: ref, out_$p293: ref, out_$i294: i64, out_$i295: i1, out_$p297: ref, out_$p298: ref, out_$i299: i64, out_$p300: ref, out_$i301: i16, out_$i302: i32, out_$i303: i1, out_$p305: ref, out_$p306: ref, out_$i307: i64, out_$p308: ref, out_$i309: i16, out_$i310: i32, out_$i311: i16, out_$i312: i16, out_$i313: i8, out_$i314: i64, out_$p317: ref, out_$p319: ref, out_$p320: ref, out_$i321: i64, out_$i322: i1, out_$p324: ref, out_$p325: ref, out_$i326: i64, out_$p327: ref, out_$i328: i16, out_$i329: i32, out_$i330: i1, out_$p332: ref, out_$p333: ref, out_$i334: i64, out_$p335: ref, out_$i336: i16, out_$i337: i32, out_$i338: i16, out_$i339: i16, out_$i340: i8, out_$i341: i64, out_$p344: ref, out_$p346: ref, out_$p347: ref, out_$i348: i64, out_$i349: i1, out_$p351: ref, out_$p352: ref, out_$i353: i64, out_$p354: ref, out_$i355: i16, out_$i356: i32, out_$i357: i1, out_$p359: ref, out_$p360: ref, out_$i361: i64, out_$p362: ref, out_$i363: i16, out_$i364: i32, out_$i365: i16, out_$i366: i16, out_$i367: i8, out_$i368: i64, out_$p371: ref, out_$p373: ref, out_$p374: ref, out_$i375: i64, out_$i376: i1, out_$p378: ref, out_$p379: ref, out_$i380: i64, out_$p381: ref, out_$i382: i16, out_$i383: i32, out_$i384: i1, out_$p386: ref, out_$p387: ref, out_$i388: i64, out_$p389: ref, out_$i390: i16, out_$i391: i32, out_$i392: i16, out_$i393: i16, out_$i394: i8, out_$i395: i64, out_$p398: ref, out_$p400: ref, out_$p401: ref, out_$i402: i64, out_$p403: ref, out_$i404: i16, out_$i405: i32, out_$i406: i16, out_$i407: i16, out_$i408: i8, out_$i409: i64, out_$p412: ref, out_$p414: ref, out_$p415: ref, out_$i416: i64, out_$p417: ref, out_$i418: i16, out_$i419: i32, out_$i420: i16, out_$i421: i16, out_$i422: i8, out_$i423: i64, out_$p426: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p83, out_$i84, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p95, out_$i96, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p115, out_$i116, out_$p118, out_$i119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p154, out_$p155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$p189, out_$p190, out_$p191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p218, out_$p220, out_$p221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p232, out_$i14, out_$i233, out_$i234, out_$i235, out_$i236, out_$i7, out_$p238, out_$p239, out_$i240, out_$i241, out_$p243, out_$p244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$p251, out_$p252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p263, out_$p265, out_$p266, out_$i267, out_$i268, out_$p270, out_$p271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p290, out_$p292, out_$p293, out_$i294, out_$i295, out_$p297, out_$p298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$p305, out_$p306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p317, out_$p319, out_$p320, out_$i321, out_$i322, out_$p324, out_$p325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$p332, out_$p333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$p344, out_$p346, out_$p347, out_$i348, out_$i349, out_$p351, out_$p352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$p371, out_$p373, out_$p374, out_$i375, out_$i376, out_$p378, out_$p379, out_$i380, out_$p381, out_$i382, out_$i383, out_$i384, out_$p386, out_$p387, out_$i388, out_$p389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$p398, out_$p400, out_$p401, out_$i402, out_$p403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p412, out_$p414, out_$p415, out_$i416, out_$p417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p426 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p47, in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p58, in_$p59, in_$i60, in_$i61, in_$p63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p71, in_$p72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p83, in_$i84, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p95, in_$i96, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p115, in_$i116, in_$p118, in_$i119, in_$i120, in_$i121, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$p154, in_$p155, in_$p156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$p167, in_$p168, in_$p169, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$p183, in_$i184, in_$i185, in_$i186, in_$p189, in_$p190, in_$p191, in_$i192, in_$p193, in_$i194, in_$i195, in_$i196, in_$p197, in_$p198, in_$i199, in_$p200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$p212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p218, in_$p220, in_$p221, in_$i222, in_$p223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$p232, in_$i14, in_$i233, in_$i234, in_$i235, in_$i236, in_$i7, in_$p238, in_$p239, in_$i240, in_$i241, in_$p243, in_$p244, in_$i245, in_$p246, in_$i247, in_$i248, in_$i249, in_$p251, in_$p252, in_$i253, in_$p254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$p263, in_$p265, in_$p266, in_$i267, in_$i268, in_$p270, in_$p271, in_$i272, in_$p273, in_$i274, in_$i275, in_$i276, in_$p278, in_$p279, in_$i280, in_$p281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$p290, in_$p292, in_$p293, in_$i294, in_$i295, in_$p297, in_$p298, in_$i299, in_$p300, in_$i301, in_$i302, in_$i303, in_$p305, in_$p306, in_$i307, in_$p308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$p317, in_$p319, in_$p320, in_$i321, in_$i322, in_$p324, in_$p325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$p332, in_$p333, in_$i334, in_$p335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$p344, in_$p346, in_$p347, in_$i348, in_$i349, in_$p351, in_$p352, in_$i353, in_$p354, in_$i355, in_$i356, in_$i357, in_$p359, in_$p360, in_$i361, in_$p362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i368, in_$p371, in_$p373, in_$p374, in_$i375, in_$i376, in_$p378, in_$p379, in_$i380, in_$p381, in_$i382, in_$i383, in_$i384, in_$p386, in_$p387, in_$i388, in_$p389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$p398, in_$p400, in_$p401, in_$i402, in_$p403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$p412, in_$p414, in_$p415, in_$i416, in_$p417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p426;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4692;

  $bb57:
    assume out_$i236 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i233;
    goto $bb57_dummy;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i32(out_$i233, out_$i235);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i235 := $zext.i8.i32(out_$i234);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i8($M.0, in_$p3);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i14, 1);
    call {:si_unique_call 481} {:cexpr "i"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_4704;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4703;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i7;
    goto $bb8;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i7;
    goto $bb8;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i7;
    goto $bb8;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_4699;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(out_$i11, 1);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    out_$i11 := $ashr.i32(out_$i10, out_$i7);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i8.i32(out_$i9);
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    goto corral_source_split_4695;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(848, 1));
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb44:
    assume out_$i196 == 1;
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 0);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i16.i32(out_$i194);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i16($M.0, out_$p193);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref(out_$p191, $mul.ref(out_$i192, 2));
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$i192 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.0, out_$p190);
    goto corral_source_split_4902;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_4901;

  $bb42:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p189, 0);
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(2, 6)), $mul.ref(out_$i186, 1));
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i186 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4897;

  $bb41:
    assume out_$i185 == 1;
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i32(out_$i184, 0);
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$i184 := $and.i32(out_$i176, 128);
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p183, out_$i180);
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1236, 1)), $mul.ref(out_$i181, 1));
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i181 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4890;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$i180 := $trunc.i32.i8(out_$i179);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i179 := $and.i32(out_$i178, 31);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i178 := $zext.i8.i32(out_$i177);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i177 := $trunc.i32.i8(out_$i176);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i16.i32(out_$i175);
    call {:si_unique_call 499} {:cexpr "reg"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i175 := nct6775_read_value(in_$p2, out_$i174);
    call {:si_unique_call 498} {:cexpr "tmp___6"} boogie_si_record_i16(out_$i175);
    goto corral_source_split_4884;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i174 := $trunc.i32.i16(out_$i173);
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i16.i32(out_$i172);
    goto corral_source_split_4882;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i16($M.0, out_$p171);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(out_$p169, $mul.ref(out_$i170, 2));
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i170 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$p169 := $load.ref($M.0, out_$p168);
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(496, 1));
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p167, out_$i163);
    goto corral_source_split_4876;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(1, 6)), $mul.ref(out_$i164, 1));
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i163 := $trunc.i16.i8(out_$i162);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} out_$i162 := nct6775_read_value(in_$p2, out_$i161);
    call {:si_unique_call 496} {:cexpr "tmp___5"} boogie_si_record_i16(out_$i162);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i161 := $trunc.i32.i16(out_$i160);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i16.i32(out_$i159);
    goto corral_source_split_4870;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i16($M.0, out_$p158);
    goto corral_source_split_4869;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref(out_$p156, $mul.ref(out_$i157, 2));
    goto corral_source_split_4868;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i157 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4867;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.0, out_$p155);
    goto corral_source_split_4866;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(480, 1));
    goto corral_source_split_4865;

  $bb36:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p154, out_$i151);
    goto corral_source_split_4863;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref(out_$i152, 4));
    goto corral_source_split_4862;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(out_$i150);
    goto corral_source_split_4860;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  $bb38:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i150 := out_$i129;
    goto $bb39;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$i150 := out_$i149;
    goto $bb39;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    out_$i149 := $trunc.i32.i8(out_$i148);
    call {:si_unique_call 494} {:cexpr "t"} boogie_si_record_i8(out_$i149);
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$i148 := $or.i32(out_$i142, out_$i147);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i8.i32(out_$i146);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i8(out_$i145);
    goto corral_source_split_4854;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    out_$i145 := $ashr.i32(out_$i144, 1);
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    out_$i144 := $and.i32(out_$i143, 112);
    goto corral_source_split_4852;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i16.i32(out_$i141);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i142 := $sext.i8.i32(out_$i129);
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$i141 := nct6775_read_value(in_$p2, out_$i140);
    call {:si_unique_call 493} {:cexpr "tmp___4"} boogie_si_record_i16(out_$i141);
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i16(out_$i139);
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i32(out_$i138);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i16($M.0, out_$p137);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref(out_$p135, $mul.ref(out_$i136, 2));
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_4842;

  $bb37:
    assume out_$i133 == 1;
    goto corral_source_split_4841;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i64(out_$i132, 0);
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i132 := $p2i.ref.i64(out_$p131);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i32.i8(out_$i128);
    call {:si_unique_call 491} {:cexpr "t"} boogie_si_record_i8(out_$i129);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$i128 := $and.i32(out_$i127, 15);
    goto corral_source_split_4828;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_4827;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i8(out_$i56);
    goto corral_source_split_4826;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i125 == 1;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i120 == 1;
    goto $bb33;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, out_$p118);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1092, 1)), $mul.ref(out_$i116, 4));
    goto corral_source_split_4822;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4821;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p115, out_$i111);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(0, 6)), $mul.ref(out_$i112, 1));
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i110);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i110 := $and.i32(out_$i109, 15);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i108);
    goto corral_source_split_4808;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i8(out_$i56);
    goto corral_source_split_4807;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i107 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i102 == 1;
    goto $bb27;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.0, out_$p99);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1117, 1)), $mul.ref(0, 6)), $mul.ref(out_$i96, 1));
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p95, out_$i92);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref(out_$i93, 4));
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} out_$i92 := reg_to_pwm_enable(out_$i89, out_$i91);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i32(out_$i90, 7);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i90 := $ashr.i32(out_$i56, 4);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.0, out_$p87);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(0, 6)), $mul.ref(out_$i84, 1));
    goto corral_source_split_4792;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4791;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p398, out_$i394);
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$p398 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(6, 6)), $mul.ref(out_$i395, 1));
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i395 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i394 := $trunc.i16.i8(out_$i393);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_$i393 := nct6775_read_value(in_$p2, out_$i392);
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    out_$i392 := $trunc.i32.i16(out_$i391);
    goto corral_source_split_5122;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    out_$i391 := $zext.i16.i32(out_$i390);
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    out_$i390 := $load.i16($M.0, out_$p389);
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref(out_$p387, $mul.ref(out_$i388, 2));
    goto corral_source_split_5119;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$i388 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    out_$p387 := $load.ref($M.0, out_$p386);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$p386 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5116;

  $bb98:
    assume out_$i384 == 1;
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    out_$i384 := $ne.i32(out_$i383, 0);
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    out_$i383 := $zext.i16.i32(out_$i382);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$i382 := $load.i16($M.0, out_$p381);
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    out_$p381 := $add.ref(out_$p379, $mul.ref(out_$i380, 2));
    goto corral_source_split_5110;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    out_$i380 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5109;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$p379 := $load.ref($M.0, out_$p378);
    goto corral_source_split_5108;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    out_$p378 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5107;

  $bb95:
    assume out_$i376 == 1;
    goto corral_source_split_5106;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$i376 := $ne.i64(out_$i375, 0);
    goto corral_source_split_5104;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    out_$i375 := $p2i.ref.i64(out_$p374);
    goto corral_source_split_5103;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    out_$p374 := $load.ref($M.0, out_$p373);
    goto corral_source_split_5102;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p373 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(6, 8));
    goto corral_source_split_5101;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p371, out_$i367);
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(5, 6)), $mul.ref(out_$i368, 1));
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    out_$i368 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$i367 := $trunc.i16.i8(out_$i366);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_$i366 := nct6775_read_value(in_$p2, out_$i365);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    out_$i365 := $trunc.i32.i16(out_$i364);
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$i364 := $zext.i16.i32(out_$i363);
    goto corral_source_split_5093;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i16($M.0, out_$p362);
    goto corral_source_split_5092;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    out_$p362 := $add.ref(out_$p360, $mul.ref(out_$i361, 2));
    goto corral_source_split_5091;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    out_$i361 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5090;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    out_$p360 := $load.ref($M.0, out_$p359);
    goto corral_source_split_5089;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    out_$p359 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_5088;

  $bb91:
    assume out_$i357 == 1;
    goto corral_source_split_5087;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_5085;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    out_$i356 := $zext.i16.i32(out_$i355);
    goto corral_source_split_5084;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    out_$i355 := $load.i16($M.0, out_$p354);
    goto corral_source_split_5083;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref(out_$p352, $mul.ref(out_$i353, 2));
    goto corral_source_split_5082;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    out_$i353 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    out_$p352 := $load.ref($M.0, out_$p351);
    goto corral_source_split_5080;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    out_$p351 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_5079;

  $bb88:
    assume out_$i349 == 1;
    goto corral_source_split_5078;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$i349 := $ne.i64(out_$i348, 0);
    goto corral_source_split_5076;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    out_$i348 := $p2i.ref.i64(out_$p347);
    goto corral_source_split_5075;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    out_$p347 := $load.ref($M.0, out_$p346);
    goto corral_source_split_5074;

  $bb87:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(5, 8));
    goto corral_source_split_5073;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p344, out_$i340);
    goto corral_source_split_5071;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(4, 6)), $mul.ref(out_$i341, 1));
    goto corral_source_split_5070;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    out_$i341 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    out_$i340 := $trunc.i16.i8(out_$i339);
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} out_$i339 := nct6775_read_value(in_$p2, out_$i338);
    goto corral_source_split_5067;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    out_$i338 := $trunc.i32.i16(out_$i337);
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    out_$i337 := $zext.i16.i32(out_$i336);
    goto corral_source_split_5065;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i16($M.0, out_$p335);
    goto corral_source_split_5064;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref(out_$p333, $mul.ref(out_$i334, 2));
    goto corral_source_split_5063;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    out_$i334 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    out_$p333 := $load.ref($M.0, out_$p332);
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$p332 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5060;

  $bb84:
    assume out_$i330 == 1;
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    out_$i330 := $ne.i32(out_$i329, 0);
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i16.i32(out_$i328);
    goto corral_source_split_5056;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i16($M.0, out_$p327);
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref(out_$p325, $mul.ref(out_$i326, 2));
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$p325 := $load.ref($M.0, out_$p324);
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5051;

  $bb81:
    assume out_$i322 == 1;
    goto corral_source_split_5050;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i64(out_$i321, 0);
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i321 := $p2i.ref.i64(out_$p320);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$p320 := $load.ref($M.0, out_$p319);
    goto corral_source_split_5046;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(4, 8));
    goto corral_source_split_5045;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p317, out_$i313);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$p317 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(3, 6)), $mul.ref(out_$i314, 1));
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    out_$i314 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    out_$i313 := $trunc.i16.i8(out_$i312);
    goto corral_source_split_5040;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_$i312 := nct6775_read_value(in_$p2, out_$i311);
    goto corral_source_split_5039;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    out_$i311 := $trunc.i32.i16(out_$i310);
    goto corral_source_split_5038;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    out_$i310 := $zext.i16.i32(out_$i309);
    goto corral_source_split_5037;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i16($M.0, out_$p308);
    goto corral_source_split_5036;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    out_$p308 := $add.ref(out_$p306, $mul.ref(out_$i307, 2));
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$i307 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$p306 := $load.ref($M.0, out_$p305);
    goto corral_source_split_5033;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5032;

  $bb77:
    assume out_$i303 == 1;
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    out_$i303 := $ne.i32(out_$i302, 0);
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    out_$i302 := $zext.i16.i32(out_$i301);
    goto corral_source_split_5028;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i16($M.0, out_$p300);
    goto corral_source_split_5027;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref(out_$p298, $mul.ref(out_$i299, 2));
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    out_$i299 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5025;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$p298 := $load.ref($M.0, out_$p297);
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5023;

  $bb74:
    assume out_$i295 == 1;
    goto corral_source_split_5022;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    out_$i295 := $ne.i64(out_$i294, 0);
    goto corral_source_split_5020;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    out_$i294 := $p2i.ref.i64(out_$p293);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$p293 := $load.ref($M.0, out_$p292);
    goto corral_source_split_5018;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p292 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(3, 8));
    goto corral_source_split_5017;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p290, out_$i286);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(2, 6)), $mul.ref(out_$i287, 1));
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$i287 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$i286 := $trunc.i16.i8(out_$i285);
    goto corral_source_split_5012;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_$i285 := nct6775_read_value(in_$p2, out_$i284);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$i284 := $trunc.i32.i16(out_$i283);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$i283 := $zext.i16.i32(out_$i282);
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$i282 := $load.i16($M.0, out_$p281);
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref(out_$p279, $mul.ref(out_$i280, 2));
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$i280 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$p279 := $load.ref($M.0, out_$p278);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_5004;

  $bb70:
    assume out_$i276 == 1;
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i276 := $ne.i32(out_$i275, 0);
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$i275 := $zext.i16.i32(out_$i274);
    goto corral_source_split_5000;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i16($M.0, out_$p273);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref(out_$p271, $mul.ref(out_$i272, 2));
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i272 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$p271 := $load.ref($M.0, out_$p270);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_4995;

  $bb67:
    assume out_$i268 == 1;
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i268 := $ne.i64(out_$i267, 0);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$i267 := $p2i.ref.i64(out_$p266);
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    out_$p266 := $load.ref($M.0, out_$p265);
    goto corral_source_split_4990;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(2, 8));
    goto corral_source_split_4989;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p263, out_$i259);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(1, 6)), $mul.ref(out_$i260, 1));
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i259 := $trunc.i16.i8(out_$i258);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} out_$i258 := nct6775_read_value(in_$p2, out_$i257);
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$i257 := $trunc.i32.i16(out_$i256);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i256 := $zext.i16.i32(out_$i255);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i16($M.0, out_$p254);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref(out_$p252, $mul.ref(out_$i253, 2));
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i253 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$p252 := $load.ref($M.0, out_$p251);
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_4976;

  $bb63:
    assume out_$i249 == 1;
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$i249 := $ne.i32(out_$i248, 0);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i248 := $zext.i16.i32(out_$i247);
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    out_$i247 := $load.i16($M.0, out_$p246);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref(out_$p244, $mul.ref(out_$i245, 2));
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i245 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$p244 := $load.ref($M.0, out_$p243);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_4967;

  $bb60:
    assume out_$i241 == 1;
    goto corral_source_split_4966;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$i241 := $ne.i64(out_$i240, 0);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i240 := $p2i.ref.i64(out_$p239);
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$p239 := $load.ref($M.0, out_$p238);
    goto corral_source_split_4787;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(1, 8));
    goto corral_source_split_4786;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p83, out_$i79);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1016, 1)), $mul.ref(0, 6)), $mul.ref(out_$i80, 1));
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i16.i8(out_$i78);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$i78 := nct6775_read_value(in_$p2, out_$i77);
    call {:si_unique_call 489} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i78);
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i32.i16(out_$i76);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i16.i32(out_$i75);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i16($M.0, out_$p74);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p72, $mul.ref(out_$i73, 2));
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_4773;

  $bb21:
    assume out_$i69 == 1;
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i16.i32(out_$i67);
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i16($M.0, out_$p66);
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p64, $mul.ref(out_$i65, 2));
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_4764;

  $bb18:
    assume out_$i61 == 1;
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_4759;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(368, 1)), $mul.ref(0, 8));
    goto corral_source_split_4758;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    call {:si_unique_call 487} {:cexpr "fanmodecfg"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_$i55 := nct6775_read_value(in_$p2, out_$i54);
    call {:si_unique_call 486} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i55);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i16(out_$i53);
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i16($M.0, out_$p51);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p49, $mul.ref(out_$i50, 2));
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(288, 1));
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p47, out_$i44);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(985, 1)), $mul.ref(out_$i45, 1));
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i8(out_$i43);
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i8.i1(out_$i42);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i8(out_$i41);
    call {:si_unique_call 484} {:cexpr "duty_is_dc"} boogie_si_record_i8(out_$i42);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_4741;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4740;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := 0;
    goto $bb15;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i39;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4738;

  $bb13:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb14;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$i39 := 1;
    goto $bb14;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i30, out_$i36);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 1));
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(360, 1));
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} out_$i29 := nct6775_read_value(in_$p2, out_$i28);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i29);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i16(out_$i27);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p23, $mul.ref(out_$i24, 1));
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_4718;

  $bb10:
    assume out_$i21 == 1;
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 1));
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_4710;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(352, 1));
    goto corral_source_split_4709;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb20;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb20;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i241 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i249 == 1);
    goto $bb62;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i268 == 1);
    goto $bb69;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i276 == 1);
    goto $bb69;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i295 == 1);
    goto $bb76;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i303 == 1);
    goto $bb76;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i322 == 1);
    goto $bb83;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i330 == 1);
    goto $bb83;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i349 == 1);
    goto $bb90;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(out_$i357 == 1);
    goto $bb90;

  $bb96:
    assume {:verifier.code 0} true;
    assume !(out_$i376 == 1);
    goto $bb97;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i384 == 1);
    goto $bb97;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 3);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.0, out_$p105);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref(out_$i103, 4));
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4816;

  $bb28:
    assume !(out_$i102 == 1);
    goto corral_source_split_4815;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 3);
    goto corral_source_split_4839;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref(out_$i121, 4));
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i121 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4836;

  $bb34:
    assume !(out_$i120 == 1);
    goto corral_source_split_4835;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p426, out_$i422);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref(2, 6)), $mul.ref(out_$i423, 1));
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    out_$i423 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$i422 := $trunc.i16.i8(out_$i421);
    goto corral_source_split_5137;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_$i421 := nct6775_read_value(in_$p2, out_$i420);
    goto corral_source_split_5136;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i420 := $trunc.i32.i16(out_$i419);
    goto corral_source_split_5135;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$i419 := $zext.i16.i32(out_$i418);
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i418 := $load.i16($M.0, out_$p417);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$p417 := $add.ref(out_$p415, $mul.ref(out_$i416, 2));
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_$i416 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$p415 := $load.ref($M.0, out_$p414);
    goto corral_source_split_5130;

  $bb101:
    assume {:verifier.code 0} true;
    out_$p414 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(2, 8));
    goto corral_source_split_5129;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p412, out_$i408);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$p412 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref(1, 6)), $mul.ref(out_$i409, 1));
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$i409 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i408 := $trunc.i16.i8(out_$i407);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} out_$i407 := nct6775_read_value(in_$p2, out_$i406);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i406 := $trunc.i32.i16(out_$i405);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i405 := $zext.i16.i32(out_$i404);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i16($M.0, out_$p403);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref(out_$p401, $mul.ref(out_$i402, 2));
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i402 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$p401 := $load.ref($M.0, out_$p400);
    goto corral_source_split_4952;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p400 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(1, 8));
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p232, out_$i228);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1248, 1)), $mul.ref(0, 6)), $mul.ref(out_$i229, 1));
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i229 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$i228 := $trunc.i16.i8(out_$i227);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i227 := nct6775_read_value(in_$p2, out_$i226);
    call {:si_unique_call 504} {:cexpr "tmp___8"} boogie_si_record_i16(out_$i227);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i226 := $trunc.i32.i16(out_$i225);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    out_$i225 := $zext.i16.i32(out_$i224);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i16($M.0, out_$p223);
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref(out_$p221, $mul.ref(out_$i222, 2));
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i222 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$p221 := $load.ref($M.0, out_$p220);
    goto corral_source_split_4939;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(512, 1)), $mul.ref(0, 8));
    goto corral_source_split_4938;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p218, 0);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref(out_$i216, 1));
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i216 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4934;

  $bb50:
    assume out_$i215 == 1;
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 0);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i214 := $and.i32(out_$i205, 128);
    goto corral_source_split_4930;

  $bb47:
    assume out_$i213 == 1;
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(7, 1);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p212, out_$i209);
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1242, 1)), $mul.ref(out_$i210, 1));
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i210 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i209 := $trunc.i32.i8(out_$i208);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i208 := $and.i32(out_$i207, 31);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i207 := $zext.i8.i32(out_$i206);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i206 := $trunc.i32.i8(out_$i205);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i205 := $zext.i16.i32(out_$i204);
    call {:si_unique_call 502} {:cexpr "reg"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_$i204 := nct6775_read_value(in_$p2, out_$i203);
    call {:si_unique_call 501} {:cexpr "tmp___7"} boogie_si_record_i16(out_$i204);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$i203 := $trunc.i32.i16(out_$i202);
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i16.i32(out_$i201);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i16($M.0, out_$p200);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref(out_$p198, $mul.ref(out_$i199, 2));
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i199 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$p198 := $load.ref($M.0, out_$p197);
    goto corral_source_split_4912;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(504, 1));
    goto corral_source_split_4911;

  $bb45:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i213 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb49;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p83, out_$i84, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p95, out_$i96, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p115, out_$i116, out_$p118, out_$i119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p154, out_$p155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$p189, out_$p190, out_$p191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p218, out_$p220, out_$p221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p232, out_$i14, out_$i233, out_$i234, out_$i235, out_$i236, out_$i7, out_$p238, out_$p239, out_$i240, out_$i241, out_$p243, out_$p244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$p251, out_$p252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p263, out_$p265, out_$p266, out_$i267, out_$i268, out_$p270, out_$p271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p290, out_$p292, out_$p293, out_$i294, out_$i295, out_$p297, out_$p298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$p305, out_$p306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p317, out_$p319, out_$p320, out_$i321, out_$i322, out_$p324, out_$p325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$p332, out_$p333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$p344, out_$p346, out_$p347, out_$i348, out_$i349, out_$p351, out_$p352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$p371, out_$p373, out_$p374, out_$i375, out_$i376, out_$p378, out_$p379, out_$i380, out_$p381, out_$i382, out_$i383, out_$i384, out_$p386, out_$p387, out_$i388, out_$p389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$p398, out_$p400, out_$p401, out_$i402, out_$p403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p412, out_$p414, out_$p415, out_$i416, out_$p417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p426 := nct6775_update_pwm_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p83, out_$i84, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p95, out_$i96, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p115, out_$i116, out_$p118, out_$i119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p154, out_$p155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$p189, out_$p190, out_$p191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p218, out_$p220, out_$p221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p232, out_$i14, out_$i233, out_$i234, out_$i235, out_$i236, out_$i7, out_$p238, out_$p239, out_$i240, out_$i241, out_$p243, out_$p244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$p251, out_$p252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p263, out_$p265, out_$p266, out_$i267, out_$i268, out_$p270, out_$p271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p290, out_$p292, out_$p293, out_$i294, out_$i295, out_$p297, out_$p298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$p305, out_$p306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p317, out_$p319, out_$p320, out_$i321, out_$i322, out_$p324, out_$p325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$p332, out_$p333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$p344, out_$p346, out_$p347, out_$i348, out_$i349, out_$p351, out_$p352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$p371, out_$p373, out_$p374, out_$i375, out_$i376, out_$p378, out_$p379, out_$i380, out_$p381, out_$i382, out_$i383, out_$i384, out_$p386, out_$p387, out_$i388, out_$p389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$p398, out_$p400, out_$p401, out_$i402, out_$p403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p412, out_$p414, out_$p415, out_$i416, out_$p417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p426);
    return;

  exit:
    return;
}



procedure nct6775_update_pwm_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i16, in_$i29: i16, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i1, in_$i44: i8, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i16, in_$i53: i32, in_$i54: i16, in_$i55: i16, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i16, in_$i68: i32, in_$i69: i1, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p74: ref, in_$i75: i16, in_$i76: i32, in_$i77: i16, in_$i78: i16, in_$i79: i8, in_$i80: i64, in_$p83: ref, in_$i84: i64, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i64, in_$p95: ref, in_$i96: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i1, in_$i103: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i108: i8, in_$i109: i32, in_$i110: i32, in_$i111: i8, in_$i112: i64, in_$p115: ref, in_$i116: i64, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i64, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i8, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i16, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$i146: i8, in_$i147: i32, in_$i148: i32, in_$i149: i8, in_$i150: i8, in_$i151: i32, in_$i152: i64, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$p158: ref, in_$i159: i16, in_$i160: i32, in_$i161: i16, in_$i162: i16, in_$i163: i8, in_$i164: i64, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$i170: i64, in_$p171: ref, in_$i172: i16, in_$i173: i32, in_$i174: i16, in_$i175: i16, in_$i176: i32, in_$i177: i8, in_$i178: i32, in_$i179: i32, in_$i180: i8, in_$i181: i64, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$i186: i64, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$i192: i64, in_$p193: ref, in_$i194: i16, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$p198: ref, in_$i199: i64, in_$p200: ref, in_$i201: i16, in_$i202: i32, in_$i203: i16, in_$i204: i16, in_$i205: i32, in_$i206: i8, in_$i207: i32, in_$i208: i32, in_$i209: i8, in_$i210: i64, in_$p212: ref, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i64, in_$p218: ref, in_$p220: ref, in_$p221: ref, in_$i222: i64, in_$p223: ref, in_$i224: i16, in_$i225: i32, in_$i226: i16, in_$i227: i16, in_$i228: i8, in_$i229: i64, in_$p232: ref, in_$i14: i32, in_$i233: i32, in_$i234: i8, in_$i235: i32, in_$i236: i1, in_$i7: i32, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$i241: i1, in_$p243: ref, in_$p244: ref, in_$i245: i64, in_$p246: ref, in_$i247: i16, in_$i248: i32, in_$i249: i1, in_$p251: ref, in_$p252: ref, in_$i253: i64, in_$p254: ref, in_$i255: i16, in_$i256: i32, in_$i257: i16, in_$i258: i16, in_$i259: i8, in_$i260: i64, in_$p263: ref, in_$p265: ref, in_$p266: ref, in_$i267: i64, in_$i268: i1, in_$p270: ref, in_$p271: ref, in_$i272: i64, in_$p273: ref, in_$i274: i16, in_$i275: i32, in_$i276: i1, in_$p278: ref, in_$p279: ref, in_$i280: i64, in_$p281: ref, in_$i282: i16, in_$i283: i32, in_$i284: i16, in_$i285: i16, in_$i286: i8, in_$i287: i64, in_$p290: ref, in_$p292: ref, in_$p293: ref, in_$i294: i64, in_$i295: i1, in_$p297: ref, in_$p298: ref, in_$i299: i64, in_$p300: ref, in_$i301: i16, in_$i302: i32, in_$i303: i1, in_$p305: ref, in_$p306: ref, in_$i307: i64, in_$p308: ref, in_$i309: i16, in_$i310: i32, in_$i311: i16, in_$i312: i16, in_$i313: i8, in_$i314: i64, in_$p317: ref, in_$p319: ref, in_$p320: ref, in_$i321: i64, in_$i322: i1, in_$p324: ref, in_$p325: ref, in_$i326: i64, in_$p327: ref, in_$i328: i16, in_$i329: i32, in_$i330: i1, in_$p332: ref, in_$p333: ref, in_$i334: i64, in_$p335: ref, in_$i336: i16, in_$i337: i32, in_$i338: i16, in_$i339: i16, in_$i340: i8, in_$i341: i64, in_$p344: ref, in_$p346: ref, in_$p347: ref, in_$i348: i64, in_$i349: i1, in_$p351: ref, in_$p352: ref, in_$i353: i64, in_$p354: ref, in_$i355: i16, in_$i356: i32, in_$i357: i1, in_$p359: ref, in_$p360: ref, in_$i361: i64, in_$p362: ref, in_$i363: i16, in_$i364: i32, in_$i365: i16, in_$i366: i16, in_$i367: i8, in_$i368: i64, in_$p371: ref, in_$p373: ref, in_$p374: ref, in_$i375: i64, in_$i376: i1, in_$p378: ref, in_$p379: ref, in_$i380: i64, in_$p381: ref, in_$i382: i16, in_$i383: i32, in_$i384: i1, in_$p386: ref, in_$p387: ref, in_$i388: i64, in_$p389: ref, in_$i390: i16, in_$i391: i32, in_$i392: i16, in_$i393: i16, in_$i394: i8, in_$i395: i64, in_$p398: ref, in_$p400: ref, in_$p401: ref, in_$i402: i64, in_$p403: ref, in_$i404: i16, in_$i405: i32, in_$i406: i16, in_$i407: i16, in_$i408: i8, in_$i409: i64, in_$p412: ref, in_$p414: ref, in_$p415: ref, in_$i416: i64, in_$p417: ref, in_$i418: i16, in_$i419: i32, in_$i420: i16, in_$i421: i16, in_$i422: i8, in_$i423: i64, in_$p426: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i16, out_$i29: i16, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i1, out_$i44: i8, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i16, out_$i53: i32, out_$i54: i16, out_$i55: i16, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i16, out_$i68: i32, out_$i69: i1, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p74: ref, out_$i75: i16, out_$i76: i32, out_$i77: i16, out_$i78: i16, out_$i79: i8, out_$i80: i64, out_$p83: ref, out_$i84: i64, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i64, out_$p95: ref, out_$i96: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i1, out_$i103: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i108: i8, out_$i109: i32, out_$i110: i32, out_$i111: i8, out_$i112: i64, out_$p115: ref, out_$i116: i64, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i64, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i8, out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i16, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$i146: i8, out_$i147: i32, out_$i148: i32, out_$i149: i8, out_$i150: i8, out_$i151: i32, out_$i152: i64, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$p158: ref, out_$i159: i16, out_$i160: i32, out_$i161: i16, out_$i162: i16, out_$i163: i8, out_$i164: i64, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$i170: i64, out_$p171: ref, out_$i172: i16, out_$i173: i32, out_$i174: i16, out_$i175: i16, out_$i176: i32, out_$i177: i8, out_$i178: i32, out_$i179: i32, out_$i180: i8, out_$i181: i64, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$i186: i64, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$i192: i64, out_$p193: ref, out_$i194: i16, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$p198: ref, out_$i199: i64, out_$p200: ref, out_$i201: i16, out_$i202: i32, out_$i203: i16, out_$i204: i16, out_$i205: i32, out_$i206: i8, out_$i207: i32, out_$i208: i32, out_$i209: i8, out_$i210: i64, out_$p212: ref, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i64, out_$p218: ref, out_$p220: ref, out_$p221: ref, out_$i222: i64, out_$p223: ref, out_$i224: i16, out_$i225: i32, out_$i226: i16, out_$i227: i16, out_$i228: i8, out_$i229: i64, out_$p232: ref, out_$i14: i32, out_$i233: i32, out_$i234: i8, out_$i235: i32, out_$i236: i1, out_$i7: i32, out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$i241: i1, out_$p243: ref, out_$p244: ref, out_$i245: i64, out_$p246: ref, out_$i247: i16, out_$i248: i32, out_$i249: i1, out_$p251: ref, out_$p252: ref, out_$i253: i64, out_$p254: ref, out_$i255: i16, out_$i256: i32, out_$i257: i16, out_$i258: i16, out_$i259: i8, out_$i260: i64, out_$p263: ref, out_$p265: ref, out_$p266: ref, out_$i267: i64, out_$i268: i1, out_$p270: ref, out_$p271: ref, out_$i272: i64, out_$p273: ref, out_$i274: i16, out_$i275: i32, out_$i276: i1, out_$p278: ref, out_$p279: ref, out_$i280: i64, out_$p281: ref, out_$i282: i16, out_$i283: i32, out_$i284: i16, out_$i285: i16, out_$i286: i8, out_$i287: i64, out_$p290: ref, out_$p292: ref, out_$p293: ref, out_$i294: i64, out_$i295: i1, out_$p297: ref, out_$p298: ref, out_$i299: i64, out_$p300: ref, out_$i301: i16, out_$i302: i32, out_$i303: i1, out_$p305: ref, out_$p306: ref, out_$i307: i64, out_$p308: ref, out_$i309: i16, out_$i310: i32, out_$i311: i16, out_$i312: i16, out_$i313: i8, out_$i314: i64, out_$p317: ref, out_$p319: ref, out_$p320: ref, out_$i321: i64, out_$i322: i1, out_$p324: ref, out_$p325: ref, out_$i326: i64, out_$p327: ref, out_$i328: i16, out_$i329: i32, out_$i330: i1, out_$p332: ref, out_$p333: ref, out_$i334: i64, out_$p335: ref, out_$i336: i16, out_$i337: i32, out_$i338: i16, out_$i339: i16, out_$i340: i8, out_$i341: i64, out_$p344: ref, out_$p346: ref, out_$p347: ref, out_$i348: i64, out_$i349: i1, out_$p351: ref, out_$p352: ref, out_$i353: i64, out_$p354: ref, out_$i355: i16, out_$i356: i32, out_$i357: i1, out_$p359: ref, out_$p360: ref, out_$i361: i64, out_$p362: ref, out_$i363: i16, out_$i364: i32, out_$i365: i16, out_$i366: i16, out_$i367: i8, out_$i368: i64, out_$p371: ref, out_$p373: ref, out_$p374: ref, out_$i375: i64, out_$i376: i1, out_$p378: ref, out_$p379: ref, out_$i380: i64, out_$p381: ref, out_$i382: i16, out_$i383: i32, out_$i384: i1, out_$p386: ref, out_$p387: ref, out_$i388: i64, out_$p389: ref, out_$i390: i16, out_$i391: i32, out_$i392: i16, out_$i393: i16, out_$i394: i8, out_$i395: i64, out_$p398: ref, out_$p400: ref, out_$p401: ref, out_$i402: i64, out_$p403: ref, out_$i404: i16, out_$i405: i32, out_$i406: i16, out_$i407: i16, out_$i408: i8, out_$i409: i64, out_$p412: ref, out_$p414: ref, out_$p415: ref, out_$i416: i64, out_$p417: ref, out_$i418: i16, out_$i419: i32, out_$i420: i16, out_$i421: i16, out_$i422: i8, out_$i423: i64, out_$p426: ref);
  modifies $M.0;



implementation nct6775_update_pwm_limits_loop_$bb32(in_$p2: ref, in_$p93: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i32, in_$i105: i32, in_$i106: i16, in_$i107: i16, in_$i108: i8, in_$i109: i64, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$i121: i32, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i8, in_$i126: i64, in_$i127: i64, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i96: i32, in_$i7: i32) returns (out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i32, out_$i105: i32, out_$i106: i16, out_$i107: i16, out_$i108: i8, out_$i109: i64, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$i121: i32, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i8, out_$i126: i64, out_$i127: i64, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i96: i32)
{

  entry:
    out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96 := in_$p97, in_$p98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p113, in_$p114, in_$p115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p130, in_$i131, in_$i132, in_$i133, in_$i96;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  $bb34:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := out_$i131;
    goto $bb34_dummy;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i131, out_$i132);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, in_$p93);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i96, 1);
    call {:si_unique_call 527} {:cexpr "j"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p130, out_$i125);
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref(out_$i127, 7)), $mul.ref(out_$i126, 1));
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(in_$i7);
    goto corral_source_split_5302;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i96);
    goto corral_source_split_5301;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i16.i8(out_$i124);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} out_$i124 := nct6775_read_value(in_$p2, out_$i123);
    call {:si_unique_call 526} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i124);
    goto corral_source_split_5299;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i32.i16(out_$i122);
    goto corral_source_split_5298;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i119, out_$i121);
    goto corral_source_split_5297;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i16.i32(out_$i120);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i16(out_$i96);
    goto corral_source_split_5295;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i16.i32(out_$i118);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i16($M.0, out_$p117);
    goto corral_source_split_5293;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref(out_$p115, $mul.ref(out_$i116, 2));
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(in_$i7);
    goto corral_source_split_5291;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_5290;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p113, out_$i108);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i110, 7)), $mul.ref(out_$i109, 1));
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(in_$i7);
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i96);
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i16.i8(out_$i107);
    goto corral_source_split_5284;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_$i107 := nct6775_read_value(in_$p2, out_$i106);
    call {:si_unique_call 524} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i107);
    goto corral_source_split_5283;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i16(out_$i105);
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i102, out_$i104);
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i16.i32(out_$i103);
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i16(out_$i96);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i32(out_$i101);
    goto corral_source_split_5278;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i16($M.0, out_$p100);
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(out_$p98, $mul.ref(out_$i99, 2));
    goto corral_source_split_5276;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(in_$i7);
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_5274;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96 := nct6775_update_pwm_limits_loop_$bb32(in_$p2, in_$p93, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96, in_$i7);
    return;

  exit:
    return;
}



procedure nct6775_update_pwm_limits_loop_$bb32(in_$p2: ref, in_$p93: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i32, in_$i105: i32, in_$i106: i16, in_$i107: i16, in_$i108: i8, in_$i109: i64, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$i121: i32, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i8, in_$i126: i64, in_$i127: i64, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i96: i32, in_$i7: i32) returns (out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i32, out_$i105: i32, out_$i106: i16, out_$i107: i16, out_$i108: i8, out_$i109: i64, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$i121: i32, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i8, out_$i126: i64, out_$i127: i64, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i96: i32);
  modifies $M.0;



implementation nct6775_update_pwm_limits_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i16, in_$i23: i16, in_$i24: i8, in_$i25: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i16, in_$i36: i16, in_$i37: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i8, in_$i49: i32, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i32, in_$i54: i8, in_$i55: i64, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i16, in_$i79: i16, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i16, in_$i85: i32, in_$i86: i32, in_$i87: i16, in_$i88: i16, in_$i89: i32, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i32, in_$i105: i32, in_$i106: i16, in_$i107: i16, in_$i108: i8, in_$i109: i64, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$i121: i32, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i8, in_$i126: i64, in_$i127: i64, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i96: i32, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i16, in_$i142: i8, in_$p143: ref, in_$i144: i32, in_$i145: i64, in_$i146: i64, in_$p149: ref, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i64, in_$p169: ref, in_$i170: i16, in_$i171: i32, in_$i172: i16, in_$i173: i16, in_$i174: i8, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i8, in_$p180: ref, in_$i181: i32, in_$i182: i64, in_$i183: i64, in_$p186: ref, in_$p188: ref, in_$i189: i32, in_$i190: i64, in_$i191: i64, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$p198: ref, in_$i199: i16, in_$i200: i32, in_$i201: i16, in_$i202: i16, in_$i203: i8, in_$i204: i32, in_$p205: ref, in_$i206: i8, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$p211: ref, in_$i212: i64, in_$p213: ref, in_$i214: i16, in_$i215: i32, in_$i216: i16, in_$i217: i16, in_$i218: i8, in_$i219: i8, in_$p220: ref, in_$i221: i32, in_$i222: i64, in_$i223: i64, in_$p226: ref, in_$i187: i32, in_$i14: i32, in_$i227: i32, in_$i228: i8, in_$i229: i32, in_$i230: i1, in_$i7: i32, in_$p232: ref, in_$p233: ref, in_$i234: i64, in_$p235: ref, in_$i236: i16, in_$i237: i32, in_$i238: i16, in_$i239: i16, in_$i240: i8, in_$i241: i64, in_$p244: ref, in_$p246: ref, in_$p247: ref, in_$i248: i64, in_$p249: ref, in_$i250: i16, in_$i251: i32, in_$i252: i16, in_$i253: i16, in_$i254: i8, in_$i255: i64, in_$p258: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i16, out_$i23: i16, out_$i24: i8, out_$i25: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i16, out_$i36: i16, out_$i37: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i8, out_$i49: i32, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i32, out_$i54: i8, out_$i55: i64, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i16, out_$i79: i16, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i16, out_$i85: i32, out_$i86: i32, out_$i87: i16, out_$i88: i16, out_$i89: i32, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i32, out_$i105: i32, out_$i106: i16, out_$i107: i16, out_$i108: i8, out_$i109: i64, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$i121: i32, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i8, out_$i126: i64, out_$i127: i64, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i96: i32, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i16, out_$i142: i8, out_$p143: ref, out_$i144: i32, out_$i145: i64, out_$i146: i64, out_$p149: ref, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i64, out_$p169: ref, out_$i170: i16, out_$i171: i32, out_$i172: i16, out_$i173: i16, out_$i174: i8, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i8, out_$p180: ref, out_$i181: i32, out_$i182: i64, out_$i183: i64, out_$p186: ref, out_$p188: ref, out_$i189: i32, out_$i190: i64, out_$i191: i64, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$p198: ref, out_$i199: i16, out_$i200: i32, out_$i201: i16, out_$i202: i16, out_$i203: i8, out_$i204: i32, out_$p205: ref, out_$i206: i8, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$p211: ref, out_$i212: i64, out_$p213: ref, out_$i214: i16, out_$i215: i32, out_$i216: i16, out_$i217: i16, out_$i218: i8, out_$i219: i8, out_$p220: ref, out_$i221: i32, out_$i222: i64, out_$i223: i64, out_$p226: ref, out_$i187: i32, out_$i14: i32, out_$i227: i32, out_$i228: i8, out_$i229: i32, out_$i230: i1, out_$i7: i32, out_$p232: ref, out_$p233: ref, out_$i234: i64, out_$p235: ref, out_$i236: i16, out_$i237: i32, out_$i238: i16, out_$i239: i16, out_$i240: i8, out_$i241: i64, out_$p244: ref, out_$p246: ref, out_$p247: ref, out_$i248: i64, out_$p249: ref, out_$i250: i16, out_$i251: i32, out_$i252: i16, out_$i253: i16, out_$i254: i8, out_$i255: i64, out_$p258: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p186, out_$p188, out_$i189, out_$i190, out_$i191, out_$p194, out_$p195, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p226, out_$i187, out_$i14, out_$i227, out_$i228, out_$i229, out_$i230, out_$i7, out_$p232, out_$p233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p244, out_$p246, out_$p247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p258 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p57, in_$i58, in_$p60, in_$i61, in_$i62, in_$i63, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p92, in_$p93, in_$i94, in_$i95, in_$p97, in_$p98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p113, in_$p114, in_$p115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p130, in_$i131, in_$i132, in_$i133, in_$i96, in_$p134, in_$p135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$i183, in_$p186, in_$p188, in_$i189, in_$i190, in_$i191, in_$p194, in_$p195, in_$p196, in_$i197, in_$p198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i208, in_$i209, in_$p210, in_$p211, in_$i212, in_$p213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$i223, in_$p226, in_$i187, in_$i14, in_$i227, in_$i228, in_$i229, in_$i230, in_$i7, in_$p232, in_$p233, in_$i234, in_$p235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$p244, in_$p246, in_$p247, in_$i248, in_$p249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$p258;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5151;

  $bb66:
    assume out_$i230 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i227;
    goto $bb66_dummy;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    out_$i230 := $slt.i32(out_$i227, out_$i229);
    goto corral_source_split_5166;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    out_$i229 := $zext.i8.i32(out_$i228);
    goto corral_source_split_5165;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i8($M.0, in_$p3);
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    out_$i227 := $add.i32(out_$i14, 1);
    call {:si_unique_call 514} {:cexpr "i"} boogie_si_record_i32(out_$i227);
    goto corral_source_split_5163;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5162;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i187;
    goto $bb8;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i7;
    goto $bb8;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_5160;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_5158;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(out_$i11, 1);
    goto corral_source_split_5157;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    out_$i11 := $ashr.i32(out_$i10, out_$i7);
    goto corral_source_split_5156;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i8.i32(out_$i9);
    goto corral_source_split_5155;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    goto corral_source_split_5154;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(848, 1));
    goto corral_source_split_5153;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i7;
    goto $bb62;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i7;
    goto $bb62;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i7;
    goto $bb62;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i7;
    goto $bb62;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p186, out_$i179);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i183, 7)), $mul.ref(out_$i182, 1));
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i183 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$i182 := $sext.i32.i64(out_$i181);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i181 := $load.i32($M.0, out_$p180);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$i179 := $trunc.i32.i8(out_$i178);
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$i178 := (if out_$i177 == 1 then 255 else 0);
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i176 := $and.i32(out_$i175, 2);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i8.i32(out_$i174);
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i174 := $trunc.i16.i8(out_$i173);
    call {:si_unique_call 532} {:cexpr "reg"} boogie_si_record_i8(out_$i174);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} out_$i173 := nct6775_read_value(in_$p2, out_$i172);
    call {:si_unique_call 531} {:cexpr "tmp___5"} boogie_si_record_i16(out_$i173);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$i172 := $trunc.i32.i16(out_$i171);
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i16.i32(out_$i170);
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i16($M.26, out_$p169);
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(NCT6775_REG_CRITICAL_ENAB, $mul.ref(0, 6)), $mul.ref(out_$i168, 2));
    goto corral_source_split_5333;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5332;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i152 == 1;
    goto corral_source_split_5330;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 1);
    goto corral_source_split_5328;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.0, out_$p150);
    goto corral_source_split_5327;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p149, out_$i142);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref(out_$i146, 7)), $mul.ref(out_$i145, 1));
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$i146 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i144);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.0, out_$p143);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5320;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i16.i8(out_$i141);
    goto corral_source_split_5319;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} out_$i141 := nct6775_read_value(in_$p2, out_$i140);
    call {:si_unique_call 529} {:cexpr "tmp___4"} boogie_si_record_i16(out_$i141);
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i16(out_$i139);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i32(out_$i138);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i16($M.0, out_$p137);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref(out_$p135, $mul.ref(out_$i136, 2));
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_5312;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(472, 1));
    goto corral_source_split_5311;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb31;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume !(out_$i133 == 1);
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i131, out_$i132);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, out_$p93);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i96, 1);
    call {:si_unique_call 527} {:cexpr "j"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p130, out_$i125);
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref(out_$i127, 7)), $mul.ref(out_$i126, 1));
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5302;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i96);
    goto corral_source_split_5301;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i16.i8(out_$i124);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} out_$i124 := nct6775_read_value(in_$p2, out_$i123);
    call {:si_unique_call 526} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i124);
    goto corral_source_split_5299;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i32.i16(out_$i122);
    goto corral_source_split_5298;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i119, out_$i121);
    goto corral_source_split_5297;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i16.i32(out_$i120);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i16(out_$i96);
    goto corral_source_split_5295;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i16.i32(out_$i118);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i16($M.0, out_$p117);
    goto corral_source_split_5293;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref(out_$p115, $mul.ref(out_$i116, 2));
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5291;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_5290;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(456, 1));
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p113, out_$i108);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i110, 7)), $mul.ref(out_$i109, 1));
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i96);
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i16.i8(out_$i107);
    goto corral_source_split_5284;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_$i107 := nct6775_read_value(in_$p2, out_$i106);
    call {:si_unique_call 524} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i107);
    goto corral_source_split_5283;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i16(out_$i105);
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i102, out_$i104);
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i16.i32(out_$i103);
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i16(out_$i96);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i32(out_$i101);
    goto corral_source_split_5278;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i16($M.0, out_$p100);
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(out_$p98, $mul.ref(out_$i99, 2));
    goto corral_source_split_5276;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_5274;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(464, 1));
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    call out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96 := nct6775_update_pwm_limits_loop_$bb32(in_$p2, out_$p93, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96, out_$i7);
    goto $bb32_last;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$i96 := 0;
    goto $bb32;

  $bb34:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := out_$i131;
    assume false;
    return;

  $bb29:
    assume out_$i95 == 1;
    goto corral_source_split_5269;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(0, out_$i94);
    goto corral_source_split_5267;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_5266;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5265;

  $bb24:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p92, out_$i89);
    goto corral_source_split_5263;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref(out_$i90, 4));
    goto corral_source_split_5262;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5261;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i16.i32(out_$i88);
    goto corral_source_split_5260;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5259;

  $bb26:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := out_$i36;
    goto $bb27;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i87;
    goto $bb27;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i32.i16(out_$i86);
    call {:si_unique_call 522} {:cexpr "reg_t"} boogie_si_record_i16(out_$i87);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i86 := $or.i32(out_$i80, out_$i85);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i16.i32(out_$i84);
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i16(out_$i83);
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$i83 := $shl.i32(out_$i82, 8);
    goto corral_source_split_5253;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i82 := $and.i32(out_$i81, 15);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i16.i32(out_$i79);
    goto corral_source_split_5251;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i16.i32(out_$i36);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} out_$i79 := nct6775_read_value(in_$p2, out_$i78);
    call {:si_unique_call 521} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i79);
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i16(out_$i77);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, out_$p75);
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p73, $mul.ref(out_$i74, 2));
    goto corral_source_split_5245;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_5242;

  $bb25:
    assume out_$i71 == 1;
    goto corral_source_split_5241;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_5231;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(344, 1));
    goto corral_source_split_5230;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i62 == 1;
    goto $bb21;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 0);
    goto corral_source_split_5228;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1068, 1)), $mul.ref(out_$i58, 4));
    goto corral_source_split_5226;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5225;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p57, out_$i54);
    goto corral_source_split_5217;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref(out_$i55, 1));
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i32(out_$i49, out_$i52);
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_5212;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, out_$p50);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1064, 1));
    goto corral_source_split_5210;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_5209;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i16.i8(out_$i36);
    goto corral_source_split_5208;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb15;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_5206;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_5205;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1058, 1)), $mul.ref(out_$i37, 1));
    goto corral_source_split_5203;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5202;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out_$i36 := nct6775_read_value(in_$p2, out_$i35);
    call {:si_unique_call 519} {:cexpr "reg_t"} boogie_si_record_i16(out_$i36);
    goto corral_source_split_5201;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i16(out_$i34);
    goto corral_source_split_5200;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_5198;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 2));
    goto corral_source_split_5197;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_5195;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(272, 1));
    goto corral_source_split_5194;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p258, out_$i254);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref(2, 6)), $mul.ref(out_$i255, 1));
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i255 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i254 := $trunc.i16.i8(out_$i253);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_$i253 := nct6775_read_value(in_$p2, out_$i252);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i252 := $trunc.i32.i16(out_$i251);
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$i251 := $zext.i16.i32(out_$i250);
    goto corral_source_split_5432;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i16($M.0, out_$p249);
    goto corral_source_split_5431;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref(out_$p247, $mul.ref(out_$i248, 2));
    goto corral_source_split_5430;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i248 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$p247 := $load.ref($M.0, out_$p246);
    goto corral_source_split_5428;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(2, 8));
    goto corral_source_split_5427;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p244, out_$i240);
    goto corral_source_split_5192;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref(1, 6)), $mul.ref(out_$i241, 1));
    goto corral_source_split_5191;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    out_$i241 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5190;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    out_$i240 := $trunc.i16.i8(out_$i239);
    goto corral_source_split_5189;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$i239 := nct6775_read_value(in_$p2, out_$i238);
    goto corral_source_split_5188;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    out_$i238 := $trunc.i32.i16(out_$i237);
    goto corral_source_split_5187;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    out_$i237 := $zext.i16.i32(out_$i236);
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i16($M.0, out_$p235);
    goto corral_source_split_5185;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref(out_$p233, $mul.ref(out_$i234, 2));
    goto corral_source_split_5184;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    out_$i234 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5183;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    out_$p233 := $load.ref($M.0, out_$p232);
    goto corral_source_split_5182;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(1, 8));
    goto corral_source_split_5181;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p28, out_$i24);
    goto corral_source_split_5179;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1130, 1)), $mul.ref(0, 6)), $mul.ref(out_$i25, 1));
    goto corral_source_split_5178;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5177;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i16.i8(out_$i23);
    goto corral_source_split_5176;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_$i23 := nct6775_read_value(in_$p2, out_$i22);
    call {:si_unique_call 516} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i23);
    goto corral_source_split_5175;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(out_$i21);
    goto corral_source_split_5174;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_5173;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.0, out_$p19);
    goto corral_source_split_5172;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 2));
    goto corral_source_split_5171;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5170;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_5169;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(320, 1)), $mul.ref(0, 8));
    goto corral_source_split_5168;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 2);
    goto corral_source_split_5223;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_5222;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref(out_$i43, 4));
    goto corral_source_split_5221;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5220;

  $bb16:
    assume !(out_$i42 == 1);
    goto corral_source_split_5219;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 3);
    goto corral_source_split_5239;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_5238;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(992, 1)), $mul.ref(out_$i63, 4));
    goto corral_source_split_5237;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5236;

  $bb22:
    assume !(out_$i62 == 1);
    goto corral_source_split_5235;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p194, $sub.i8(0, 1));
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i191, 7)), $mul.ref(out_$i190, 1));
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i191 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i190 := $sext.i32.i64(out_$i189);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i32($M.0, out_$p188);
    goto corral_source_split_5358;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i155 == 1;
    goto corral_source_split_5355;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 2);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.0, out_$p153);
    goto corral_source_split_5352;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5351;

  $bb38:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p226, out_$i219);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i223, 7)), $mul.ref(out_$i222, 1));
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i223 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$i222 := $sext.i32.i64(out_$i221);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.0, out_$p220);
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(1148, 1));
    goto corral_source_split_5418;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  $bb64:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    out_$i219 := $sub.i8(0, 1);
    goto $bb65;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i219 := out_$i218;
    goto $bb65;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    out_$i218 := $trunc.i16.i8(out_$i217);
    call {:si_unique_call 538} {:cexpr "reg"} boogie_si_record_i8(out_$i218);
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$i217 := nct6775_read_value(in_$p2, out_$i216);
    call {:si_unique_call 537} {:cexpr "tmp___7"} boogie_si_record_i16(out_$i217);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$i216 := $trunc.i32.i16(out_$i215);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i215 := $zext.i16.i32(out_$i214);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i16($M.0, out_$p213);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref(out_$p211, $mul.ref(out_$i212, 2));
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i212 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p211 := $load.ref($M.0, out_$p210);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(448, 1));
    goto corral_source_split_5407;

  $bb63:
    assume out_$i209 == 1;
    goto corral_source_split_5406;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$i209 := $ne.i32(out_$i208, 0);
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    out_$i208 := $and.i32(out_$i204, out_$i207);
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$i207 := $zext.i8.i32(out_$i206);
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i8($M.0, out_$p205);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(440, 1));
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i8.i32(out_$i203);
    goto corral_source_split_5397;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$i203 := $trunc.i16.i8(out_$i202);
    call {:si_unique_call 535} {:cexpr "reg"} boogie_si_record_i8(out_$i203);
    goto corral_source_split_5396;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} out_$i202 := nct6775_read_value(in_$p2, out_$i201);
    call {:si_unique_call 534} {:cexpr "tmp___6"} boogie_si_record_i16(out_$i202);
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$i201 := $trunc.i32.i16(out_$i200);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i200 := $zext.i16.i32(out_$i199);
    goto corral_source_split_5393;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i16($M.0, out_$p198);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref(out_$p196, $mul.ref(out_$i197, 2));
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$i197 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$p196 := $load.ref($M.0, out_$p195);
    goto corral_source_split_5389;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(432, 1));
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i158 == 1;
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 0);
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i32($M.0, out_$p156);
    goto corral_source_split_5365;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5364;

  $bb42:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb49:
    assume out_$i161 == 1;
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_5371;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5370;

  $bb46:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb53:
    assume out_$i164 == 1;
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 4);
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, out_$p162);
    goto corral_source_split_5377;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5376;

  $bb50:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb57:
    assume out_$i167 == 1;
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 5);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_5383;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1280)), $mul.ref(8, 1));
    goto corral_source_split_5382;

  $bb54:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb66_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p186, out_$p188, out_$i189, out_$i190, out_$i191, out_$p194, out_$p195, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p226, out_$i187, out_$i14, out_$i227, out_$i228, out_$i229, out_$i230, out_$i7, out_$p232, out_$p233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p244, out_$p246, out_$p247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p258 := nct6775_update_pwm_limits_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i96, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p186, out_$p188, out_$i189, out_$i190, out_$i191, out_$p194, out_$p195, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p226, out_$i187, out_$i14, out_$i227, out_$i228, out_$i229, out_$i230, out_$i7, out_$p232, out_$p233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p244, out_$p246, out_$p247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p258);
    return;

  exit:
    return;
}



procedure nct6775_update_pwm_limits_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i16, in_$i23: i16, in_$i24: i8, in_$i25: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i16, in_$i36: i16, in_$i37: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i8, in_$i49: i32, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i32, in_$i54: i8, in_$i55: i64, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i16, in_$i79: i16, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i16, in_$i85: i32, in_$i86: i32, in_$i87: i16, in_$i88: i16, in_$i89: i32, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p100: ref, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$i104: i32, in_$i105: i32, in_$i106: i16, in_$i107: i16, in_$i108: i8, in_$i109: i64, in_$i110: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$i121: i32, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i8, in_$i126: i64, in_$i127: i64, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i96: i32, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i16, in_$i142: i8, in_$p143: ref, in_$i144: i32, in_$i145: i64, in_$i146: i64, in_$p149: ref, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i64, in_$p169: ref, in_$i170: i16, in_$i171: i32, in_$i172: i16, in_$i173: i16, in_$i174: i8, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i8, in_$p180: ref, in_$i181: i32, in_$i182: i64, in_$i183: i64, in_$p186: ref, in_$p188: ref, in_$i189: i32, in_$i190: i64, in_$i191: i64, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$p198: ref, in_$i199: i16, in_$i200: i32, in_$i201: i16, in_$i202: i16, in_$i203: i8, in_$i204: i32, in_$p205: ref, in_$i206: i8, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$p211: ref, in_$i212: i64, in_$p213: ref, in_$i214: i16, in_$i215: i32, in_$i216: i16, in_$i217: i16, in_$i218: i8, in_$i219: i8, in_$p220: ref, in_$i221: i32, in_$i222: i64, in_$i223: i64, in_$p226: ref, in_$i187: i32, in_$i14: i32, in_$i227: i32, in_$i228: i8, in_$i229: i32, in_$i230: i1, in_$i7: i32, in_$p232: ref, in_$p233: ref, in_$i234: i64, in_$p235: ref, in_$i236: i16, in_$i237: i32, in_$i238: i16, in_$i239: i16, in_$i240: i8, in_$i241: i64, in_$p244: ref, in_$p246: ref, in_$p247: ref, in_$i248: i64, in_$p249: ref, in_$i250: i16, in_$i251: i32, in_$i252: i16, in_$i253: i16, in_$i254: i8, in_$i255: i64, in_$p258: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i16, out_$i23: i16, out_$i24: i8, out_$i25: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i16, out_$i36: i16, out_$i37: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i8, out_$i49: i32, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i32, out_$i54: i8, out_$i55: i64, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i16, out_$i79: i16, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i16, out_$i85: i32, out_$i86: i32, out_$i87: i16, out_$i88: i16, out_$i89: i32, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p100: ref, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$i104: i32, out_$i105: i32, out_$i106: i16, out_$i107: i16, out_$i108: i8, out_$i109: i64, out_$i110: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$i121: i32, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i8, out_$i126: i64, out_$i127: i64, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i96: i32, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i16, out_$i142: i8, out_$p143: ref, out_$i144: i32, out_$i145: i64, out_$i146: i64, out_$p149: ref, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i64, out_$p169: ref, out_$i170: i16, out_$i171: i32, out_$i172: i16, out_$i173: i16, out_$i174: i8, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i8, out_$p180: ref, out_$i181: i32, out_$i182: i64, out_$i183: i64, out_$p186: ref, out_$p188: ref, out_$i189: i32, out_$i190: i64, out_$i191: i64, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$p198: ref, out_$i199: i16, out_$i200: i32, out_$i201: i16, out_$i202: i16, out_$i203: i8, out_$i204: i32, out_$p205: ref, out_$i206: i8, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$p211: ref, out_$i212: i64, out_$p213: ref, out_$i214: i16, out_$i215: i32, out_$i216: i16, out_$i217: i16, out_$i218: i8, out_$i219: i8, out_$p220: ref, out_$i221: i32, out_$i222: i64, out_$i223: i64, out_$p226: ref, out_$i187: i32, out_$i14: i32, out_$i227: i32, out_$i228: i8, out_$i229: i32, out_$i230: i1, out_$i7: i32, out_$p232: ref, out_$p233: ref, out_$i234: i64, out_$p235: ref, out_$i236: i16, out_$i237: i32, out_$i238: i16, out_$i239: i16, out_$i240: i8, out_$i241: i64, out_$p244: ref, out_$p246: ref, out_$p247: ref, out_$i248: i64, out_$p249: ref, out_$i250: i16, out_$i251: i32, out_$i252: i16, out_$i253: i16, out_$i254: i8, out_$i255: i64, out_$p258: ref);
  modifies $M.0;



implementation check_trip_points_loop_$bb16(in_$p0: ref, in_$i1: i32, in_$p28: ref, in_$i33: i64, in_$i34: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i32: i32) returns (out_$i33: i64, out_$i34: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i32: i32)
{

  entry:
    out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i32 := in_$i33, in_$i34, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i32;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6016;

  $bb21:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i49;
    goto $bb21_dummy;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i49, out_$i51);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i50, $sub.i32(0, 1));
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, in_$p28);
    goto corral_source_split_6034;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i32, 1);
    call {:si_unique_call 638} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6033;

  $bb19:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i39, out_$i47);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.0, out_$p45);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i42, 7)), $mul.ref(out_$i41, 1));
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(in_$i1);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i32, 1);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p37);
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(1152, 1)), $mul.ref(out_$i34, 7)), $mul.ref(out_$i33, 1));
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(in_$i1);
    goto corral_source_split_6019;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i32 := check_trip_points_loop_$bb16(in_$p0, in_$i1, in_$p28, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i32);
    return;

  exit:
    return;
}



procedure check_trip_points_loop_$bb16(in_$p0: ref, in_$i1: i32, in_$p28: ref, in_$i33: i64, in_$i34: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i32: i32) returns (out_$i33: i64, out_$i34: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i32: i32);



implementation check_trip_points_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i7: i64, in_$i8: i64, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$i16: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i6: i32) returns (out_$i7: i64, out_$i8: i64, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$i16: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$i8, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6 := in_$i7, in_$i8, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5983;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i24;
    goto $bb10_dummy;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i24, out_$i26);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, $sub.i32(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p2);
    goto corral_source_split_6003;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i6, 1);
    call {:si_unique_call 637} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6002;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i13, out_$i21);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref(out_$i16, 7)), $mul.ref(out_$i15, 1));
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(in_$i1);
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i6, 1);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(1194, 1)), $mul.ref(out_$i8, 7)), $mul.ref(out_$i7, 1));
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(in_$i1);
    goto corral_source_split_5986;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6 := check_trip_points_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$i7, out_$i8, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6);
    return;

  exit:
    return;
}



procedure check_trip_points_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i7: i64, in_$i8: i64, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$i16: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i6: i32) returns (out_$i7: i64, out_$i8: i64, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$i16: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i6: i32);



implementation store_fan_min_loop_$bb28(in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i1, in_$i73: i8, in_$i74: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i8, in_$i80: i32, in_$i81: i8) returns (out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i1, out_$i73: i8, out_$i74: i32, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i8, out_$i80: i32, out_$i81: i8)
{

  entry:
    out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i73, out_$i74, out_$i82, out_$i83, out_$i84, out_$i85, out_$i80, out_$i81 := in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i73, in_$i74, in_$i82, in_$i83, in_$i84, in_$i85, in_$i80, in_$i81;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8159;

  $bb30:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i73, out_$i74 := out_$i78, out_$i75;
    goto $bb30_dummy;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$i80, out_$i81 := out_$i75, out_$i78;
    assume true;
    goto $bb30;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    out_$i79 := $ugt.i32(out_$i75, 192);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    call {:si_unique_call 999} {:cexpr "new_div"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i76, 1);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i73);
    goto corral_source_split_8164;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i75 := $lshr.i32(out_$i74, 1);
    call {:si_unique_call 998} {:cexpr "reg"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_8163;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume out_$i83 == 1;
    goto corral_source_split_8171;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i84, out_$i85 := out_$i74, out_$i73;
    assume true;
    goto $bb32;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$i83 := $ule.i32(out_$i82, 6);
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i73);
    goto corral_source_split_8160;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i73, out_$i74, out_$i82, out_$i83, out_$i84, out_$i85, out_$i80, out_$i81 := store_fan_min_loop_$bb28(out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i73, out_$i74, out_$i82, out_$i83, out_$i84, out_$i85, out_$i80, out_$i81);
    return;

  exit:
    return;
}



procedure store_fan_min_loop_$bb28(in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i1, in_$i73: i8, in_$i74: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i8, in_$i80: i32, in_$i81: i8) returns (out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i1, out_$i73: i8, out_$i74: i32, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i8, out_$i80: i32, out_$i81: i8);



implementation find_temp_source_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i7: i32, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i16, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i16, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8354;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i23;
    goto $bb10_dummy;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, in_$i2);
    goto corral_source_split_8373;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1030} {:cexpr "nr"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_8372;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i9;
    assume true;
    goto $bb7;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, in_$i7);
    goto corral_source_split_8366;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 31);
    call {:si_unique_call 1029} {:cexpr "src"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_$i17 := nct6775_read_value(in_$p0, out_$i16);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i16(out_$i17);
    goto corral_source_split_8363;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i16(out_$i15);
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_8361;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_8360;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p11, $mul.ref(out_$i12, 2));
    goto corral_source_split_8359;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_8357;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1280)), $mul.ref(488, 1));
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i9 := find_temp_source_loop_$bb4(in_$p0, in_$i2, in_$i7, out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i9);
    return;

  exit:
    return;
}



procedure find_temp_source_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i7: i32, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i16, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i16, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i9: i32);
  modifies $M.0;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation sensors_nct6775_init_loop_$bb38(in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i77: i32) returns (out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i77: i32)
{

  entry:
    out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i77 := in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i77;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_9170;

  $bb43:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i86;
    goto $bb43_dummy;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$i87 := $sge.i32(out_$i86, 0);
    goto corral_source_split_9185;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i77, 1);
    call {:si_unique_call 1206} {:cexpr "i"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_9184;

  $bb41:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} platform_device_unregister(out_$p85);
    goto corral_source_split_9182;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.34, out_$p84);
    goto corral_source_split_9181;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i83, 8));
    goto corral_source_split_9180;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i77);
    goto corral_source_split_9179;

  $bb40:
    assume out_$i82 == 1;
    goto corral_source_split_9178;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_9176;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_9175;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.34, out_$p79);
    goto corral_source_split_9174;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i78, 8));
    goto corral_source_split_9173;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i77);
    goto corral_source_split_9172;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i77 := sensors_nct6775_init_loop_$bb38(out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i77);
    return;

  exit:
    return;
}



procedure sensors_nct6775_init_loop_$bb38(in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i77: i32) returns (out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i77: i32);



implementation sensors_nct6775_init_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$i15: i8, in_$i67: i32, in_$i68: i1, in_$i8: i32, in_$i9: i8, in_$i69: i8, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8) returns (out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$i15: i8, out_$i67: i32, out_$i68: i1, out_$i8: i32, out_$i9: i8, out_$i69: i8, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8)
{

  entry:
    out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i15, out_$i67, out_$i68, out_$i8, out_$i9, out_$i69, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1 := in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p16, in_$i17, in_$p18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$p52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i15, in_$i67, in_$i68, in_$i8, in_$i9, in_$i69, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9074;

  $bb28:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i67, out_$i15;
    goto $bb28_dummy;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i15;
    assume true;
    goto $bb28;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    out_$i68 := $ule.i32(out_$i67, 1);
    goto corral_source_split_9086;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1190} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_9085;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i15 := 1;
    goto $bb9;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    out_$i15 := 1;
    goto $bb9;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i9;
    goto $bb9;

  $bb7:
    assume out_$i14 == 1;
    goto corral_source_split_9082;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    out_$i14 := $sle.i32(out_$i13, 0);
    goto corral_source_split_9080;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} out_$i13 := nct6775_find(out_$i12, in_$p1);
    call {:si_unique_call 1189} {:cexpr "address"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_9079;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.35, out_$p11);
    goto corral_source_split_9078;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(out_$i10, 4));
    goto corral_source_split_9077;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, out_$p52, $0.ref);
    goto corral_source_split_9143;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i51, 8));
    goto corral_source_split_9142;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9141;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} platform_device_put(out_$p50);
    goto corral_source_split_9140;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.34, out_$p49);
    goto corral_source_split_9139;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i48, 8));
    goto corral_source_split_9138;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9137;

  $bb19:
    assume out_$i47 == 1;
    goto corral_source_split_9136;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_9134;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} out_$i46 := acpi_check_resource_conflict(in_$p0);
    call {:si_unique_call 1198} {:cexpr "err"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_9133;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, out_$p45, 256);
    goto corral_source_split_9132;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_9131;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, out_$p44, out_$i43);
    goto corral_source_split_9130;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_9129;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_9128;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i13, 6);
    goto corral_source_split_9127;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, out_$p41, out_$i40);
    goto corral_source_split_9126;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_9125;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_9124;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i13, 5);
    goto corral_source_split_9123;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, out_$p38, .str.1);
    goto corral_source_split_9122;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_9121;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.36;
    call {:si_unique_call 1196} out_cmdloc_dummy_var_1 := $memset.i8(out_cmdloc_dummy_var_0, out_$p37, 0, 56, $zext.i32.i64(8), 0 == 1);
    $M.36 := out_cmdloc_dummy_var_1;
    goto corral_source_split_9120;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_9119;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i8, out_$i31;
    assume true;
    goto $bb16;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_9109;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} out_$i31 := platform_device_add_data(out_$p29, out_$p30, 8);
    call {:si_unique_call 1194} {:cexpr "err"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_9108;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_9107;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.34, out_$p28);
    goto corral_source_split_9106;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i27, 8));
    goto corral_source_split_9105;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9104;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i8;
    assume true;
    goto $bb12;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_9096;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.34, out_$p20);
    goto corral_source_split_9094;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i19, 8));
    goto corral_source_split_9093;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9092;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, out_$p18, out_$p16);
    goto corral_source_split_9091;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i17, 8));
    goto corral_source_split_9090;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9089;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} out_$p16 := platform_device_alloc(.str.1, out_$i13);
    goto corral_source_split_9088;

  $bb8:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb26:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    out_$i65, out_$i66 := out_$i8, out_$i63;
    assume true;
    goto $bb26;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} out_$i63 := platform_device_add(out_$p62);
    call {:si_unique_call 1203} {:cexpr "err"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_9156;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.34, out_$p61);
    goto corral_source_split_9155;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i60, 8));
    goto corral_source_split_9154;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9153;

  $bb23:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i8, out_$i56;
    assume true;
    goto $bb23;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_9149;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} out_$i56 := platform_device_add_resources(out_$p55, in_$p0, 1);
    call {:si_unique_call 1201} {:cexpr "err"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_9148;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.34, out_$p54);
    goto corral_source_split_9147;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(pdev, $mul.ref(0, 16)), $mul.ref(out_$i53, 8));
    goto corral_source_split_9146;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i8);
    goto corral_source_split_9145;

  $bb20:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i15, out_$i67, out_$i68, out_$i8, out_$i9, out_$i69, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1 := sensors_nct6775_init_loop_$bb5(in_$p0, in_$p1, in_$p2, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i15, out_$i67, out_$i68, out_$i8, out_$i9, out_$i69, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1);
    return;

  exit:
    return;
}



procedure sensors_nct6775_init_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$i15: i8, in_$i67: i32, in_$i68: i1, in_$i8: i32, in_$i9: i8, in_$i69: i8, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8) returns (out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$i15: i8, out_$i67: i32, out_$i68: i1, out_$i8: i32, out_$i9: i8, out_$i69: i8, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8);
  modifies $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.46, $CurrAddr, $M.34, $M.36;



implementation ldv_platform_platform_instance_0_loop_$bb10(in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32) returns (out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28 := in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1287} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_9455;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i26 == 1;
    goto corral_source_split_9463;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 1);
    goto corral_source_split_9456;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} ldv_dispatch_pm_deregister_0_5();
    goto corral_source_split_9470;

  SeqInstr_423:
    goto corral_source_split_9469;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ldv_dispatch_pm_register_0_6();
    goto SeqInstr_422;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_9467;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i25;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i25, 2);
    goto corral_source_split_9465;

  $bb16:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28 := ldv_platform_platform_instance_0_loop_$bb10(out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure ldv_platform_platform_instance_0_loop_$bb10(in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32) returns (out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32);
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_platform_platform_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35 := in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ldv_ldv_pre_probe_153();
    goto corral_source_split_9437;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb12_dummy;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_9459;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} out_$i22 := ldv_undef_int();
    call {:si_unique_call 1289} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_9458;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb30:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_426:
    goto corral_source_split_9486;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} ldv_platform_instance_release_0_3(out_$p35, in_$p9);
    goto SeqInstr_425;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_9485;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p7, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9484;

  $bb29:
    assume out_$i33 == 1;
    goto corral_source_split_9483;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_9479;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_9478;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_9477;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p7, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9476;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_9474;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 3);
    goto corral_source_split_9472;

  $bb20:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i25;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i25, 2);
    goto corral_source_split_9465;

  $bb16:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 1);
    goto corral_source_split_9456;

  $bb10:
    call out_$i25, out_$i26, out_$i27, out_$i28 := ldv_platform_platform_instance_0_loop_$bb10(out_$i25, out_$i26, out_$i27, out_$i28);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1287} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_9455;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb28:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i26 == 1;
    goto corral_source_split_9463;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} ldv_dispatch_pm_deregister_0_5();
    goto corral_source_split_9470;

  SeqInstr_423:
    goto corral_source_split_9469;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ldv_dispatch_pm_register_0_6();
    goto SeqInstr_422;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_9467;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} ldv_assume(out_$i19);
    goto corral_source_split_9448;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_9447;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i15, 0);
    goto corral_source_split_9446;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_9445;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_9443;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_$i16 := ldv_undef_int();
    call {:si_unique_call 1283} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_9442;

  SeqInstr_420:
    call {:si_unique_call 1281} {:cexpr "ldv_0_probed_default"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_9441;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} out_$i15 := ldv_ldv_post_probe_154(out_$i14);
    goto SeqInstr_419;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} out_$i14 := ldv_platform_instance_probe_0_14(out_$p13, in_$p9);
    call {:si_unique_call 1279} {:cexpr "ldv_0_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_9440;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_9439;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p7, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9438;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} ldv_assume(out_$i21);
    goto corral_source_split_9453;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i1.i32(out_$i20);
    goto corral_source_split_9452;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i15, 0);
    goto corral_source_split_9451;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_9450;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35 := ldv_platform_platform_instance_0_loop_$bb7(in_$p7, in_$p9, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35);
    return;

  exit:
    return;
}



procedure ldv_platform_platform_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref);
  modifies $M.89, $M.90, $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_platform_pm_ops_instance_1_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i1, in_$p137: ref, in_$p138: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i1, out_$p137: ref, out_$p138: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$i106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p117, in_$p118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$i135, in_$i136, in_$p137, in_$p138;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1309} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_9518;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_441:
    goto corral_source_split_9555;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} ldv_pm_ops_instance_runtime_idle_1_27(out_$p12, $u4);
    goto SeqInstr_440;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.48, out_$p11);
    goto corral_source_split_9554;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_9553;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_9552;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_9526;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_9525;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.47, out_$p7);
    goto corral_source_split_9524;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_9523;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_9521;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_9519;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_447:
    goto corral_source_split_9570;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_pm_ops_instance_runtime_resume_1_24(out_$p24, $u4);
    goto SeqInstr_446;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.52, out_$p23);
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_9568;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_9567;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_9565;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_9564;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.51, out_$p19);
    goto corral_source_split_9563;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_9562;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_444:
    goto corral_source_split_9560;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} ldv_pm_ops_instance_runtime_suspend_1_25(out_$p18, $u4);
    goto SeqInstr_443;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.50, out_$p17);
    goto corral_source_split_9559;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_9558;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_9557;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_9535;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.49, out_$p13);
    goto corral_source_split_9533;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_9532;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_9530;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_9528;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb99:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} ldv_pm_ops_instance_complete_1_3(out_$p138, $u4);
    goto corral_source_split_9769;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.88, out_$p137);
    goto corral_source_split_9768;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_9767;

  $bb98:
    assume out_$i136 == 1;
    goto corral_source_split_9766;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i64(out_$i135, 0);
    goto corral_source_split_9658;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    out_$i135 := $p2i.ref.i64(out_$p134);
    goto corral_source_split_9657;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.87, out_$p133);
    goto corral_source_split_9656;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_9655;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_465:
    goto corral_source_split_9638;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_pm_ops_instance_resume_1_16(out_$p64, $u4);
    goto SeqInstr_464;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.64, out_$p63);
    goto corral_source_split_9637;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_9636;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_462:
    goto corral_source_split_9634;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} ldv_pm_ops_instance_resume_noirq_1_19(out_$p50, $u4);
    goto SeqInstr_461;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.59, out_$p49);
    goto corral_source_split_9633;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_9632;

  $bb50:
    assume out_$i48 == 1;
    goto corral_source_split_9631;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_9629;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_9628;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.58, out_$p45);
    goto corral_source_split_9627;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_9626;

  $bb48:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_459:
    goto corral_source_split_9624;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_pm_ops_instance_suspend_noirq_1_20(out_$p44, $u4);
    goto SeqInstr_458;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.57, out_$p43);
    goto corral_source_split_9623;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_9622;

  $bb47:
    assume out_$i42 == 1;
    goto corral_source_split_9621;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_9613;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_9612;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.56, out_$p39);
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_9610;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_9609;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_9586;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_$i37 := ldv_undef_int();
    call {:si_unique_call 1319} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_9585;

  SeqInstr_453:
    goto corral_source_split_9584;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} ldv_pm_ops_instance_suspend_1_21(out_$p36, $u4);
    goto SeqInstr_452;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.55, out_$p35);
    goto corral_source_split_9583;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_9582;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_9580;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_9578;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_$i31 := ldv_undef_int();
    call {:si_unique_call 1316} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_9577;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_450:
    goto corral_source_split_9575;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_pm_ops_instance_prepare_1_22(out_$p30, $u4);
    goto SeqInstr_449;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.54, out_$p29);
    goto corral_source_split_9574;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_9573;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_9572;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_9543;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.53, out_$p25);
    goto corral_source_split_9542;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_9541;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_9539;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_9537;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb58:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_471:
    goto corral_source_split_9653;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_pm_ops_instance_resume_early_1_17(out_$p62, $u4);
    goto SeqInstr_470;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.63, out_$p61);
    goto corral_source_split_9652;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_9651;

  $bb57:
    assume out_$i60 == 1;
    goto corral_source_split_9650;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_9648;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_9647;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.62, out_$p57);
    goto corral_source_split_9646;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_9645;

  $bb55:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_468:
    goto corral_source_split_9643;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} ldv_pm_ops_instance_suspend_late_1_18(out_$p56, $u4);
    goto SeqInstr_467;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.61, out_$p55);
    goto corral_source_split_9642;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_9641;

  $bb54:
    assume out_$i54 == 1;
    goto corral_source_split_9640;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_9619;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_9618;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.60, out_$p51);
    goto corral_source_split_9617;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_9616;

  $bb46:
    assume !(out_$i38 == 1);
    goto corral_source_split_9615;

  $bb77:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_486:
    goto corral_source_split_9710;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} ldv_pm_ops_instance_thaw_1_10(out_$p98, $u4);
    goto SeqInstr_485;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.75, out_$p97);
    goto corral_source_split_9709;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_9708;

  $bb76:
    assume out_$i96 == 1;
    goto corral_source_split_9707;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_9690;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_9689;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.74, out_$p93);
    goto corral_source_split_9688;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_9687;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_477:
    goto corral_source_split_9685;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ldv_pm_ops_instance_thaw_early_1_13(out_$p80, $u4);
    goto SeqInstr_476;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.69, out_$p79);
    goto corral_source_split_9684;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_9683;

  $bb66:
    assume out_$i78 == 1;
    goto corral_source_split_9682;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_9680;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_9679;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.68, out_$p75);
    goto corral_source_split_9678;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_9677;

  $bb64:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_474:
    goto corral_source_split_9675;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv_pm_ops_instance_freeze_late_1_14(out_$p74, $u4);
    goto SeqInstr_473;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.67, out_$p73);
    goto corral_source_split_9674;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_9673;

  $bb63:
    assume out_$i72 == 1;
    goto corral_source_split_9672;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i64(out_$i71, 0);
    goto corral_source_split_9664;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_9663;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.66, out_$p69);
    goto corral_source_split_9662;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_9661;

  $bb61:
    assume out_$i68 == 1;
    goto corral_source_split_9660;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_9596;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} out_$i67 := ldv_undef_int();
    call {:si_unique_call 1322} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_9595;

  SeqInstr_456:
    goto corral_source_split_9594;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_pm_ops_instance_freeze_1_15(out_$p66, $u4);
    goto SeqInstr_455;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.65, out_$p65);
    goto corral_source_split_9593;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_9592;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_9590;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_9588;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb74:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_483:
    goto corral_source_split_9705;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} ldv_pm_ops_instance_thaw_noirq_1_11(out_$p92, $u4);
    goto SeqInstr_482;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.73, out_$p91);
    goto corral_source_split_9704;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_9703;

  $bb73:
    assume out_$i90 == 1;
    goto corral_source_split_9702;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_9700;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_9699;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.72, out_$p87);
    goto corral_source_split_9698;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_9697;

  $bb71:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_480:
    goto corral_source_split_9695;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_pm_ops_instance_freeze_noirq_1_12(out_$p86, $u4);
    goto SeqInstr_479;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.71, out_$p85);
    goto corral_source_split_9694;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_9693;

  $bb70:
    assume out_$i84 == 1;
    goto corral_source_split_9692;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_9670;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_9669;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.70, out_$p81);
    goto corral_source_split_9668;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_9667;

  $bb62:
    assume !(out_$i68 == 1);
    goto corral_source_split_9666;

  SeqInstr_498:
    goto corral_source_split_9749;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_pm_ops_instance_restore_1_4(out_$p132, $u4);
    goto SeqInstr_497;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.86, out_$p131);
    goto corral_source_split_9748;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_9747;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_495:
    goto corral_source_split_9745;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_pm_ops_instance_restore_early_1_7(out_$p118, $u4);
    goto SeqInstr_494;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.81, out_$p117);
    goto corral_source_split_9744;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_9743;

  $bb87:
    assume out_$i116 == 1;
    goto corral_source_split_9742;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, 0);
    goto corral_source_split_9740;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_9739;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.80, out_$p113);
    goto corral_source_split_9738;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_9737;

  $bb85:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_492:
    goto corral_source_split_9735;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_pm_ops_instance_poweroff_late_1_8(out_$p112, $u4);
    goto SeqInstr_491;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.79, out_$p111);
    goto corral_source_split_9734;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_9733;

  $bb84:
    assume out_$i110 == 1;
    goto corral_source_split_9732;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, 0);
    goto corral_source_split_9724;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_9723;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.78, out_$p107);
    goto corral_source_split_9722;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_9721;

  $bb82:
    assume out_$i106 == 1;
    goto corral_source_split_9720;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_9718;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_$i105 := ldv_undef_int();
    call {:si_unique_call 1336} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_9717;

  $bb80:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_489:
    goto corral_source_split_9715;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} ldv_pm_ops_instance_poweroff_1_9(out_$p104, $u4);
    goto SeqInstr_488;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.77, out_$p103);
    goto corral_source_split_9714;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_9713;

  $bb79:
    assume out_$i102 == 1;
    goto corral_source_split_9712;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_9605;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.76, out_$p99);
    goto corral_source_split_9603;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_9602;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_9600;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_9598;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb95:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_504:
    goto corral_source_split_9764;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_pm_ops_instance_restore_noirq_1_5(out_$p130, $u4);
    goto SeqInstr_503;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.85, out_$p129);
    goto corral_source_split_9763;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9762;

  $bb94:
    assume out_$i128 == 1;
    goto corral_source_split_9761;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_9759;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.84, out_$p125);
    goto corral_source_split_9757;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9756;

  $bb92:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb93;

  SeqInstr_501:
    goto corral_source_split_9754;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ldv_pm_ops_instance_poweroff_noirq_1_6(out_$p124, $u4);
    goto SeqInstr_500;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.83, out_$p123);
    goto corral_source_split_9753;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_9752;

  $bb91:
    assume out_$i122 == 1;
    goto corral_source_split_9751;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_9730;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.82, out_$p119);
    goto corral_source_split_9728;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($u3, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_9727;

  $bb83:
    assume !(out_$i106 == 1);
    goto corral_source_split_9726;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} ldv_stop();
    goto corral_source_split_9607;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138 := ldv_platform_pm_ops_instance_1_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138);
    return;

  exit:
    return;
}



procedure ldv_platform_pm_ops_instance_1_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i1, in_$p137: ref, in_$p138: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i1, out_$p137: ref, out_$p138: ref);
  modifies $M.0, $M.2, $M.3, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_2_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_9991;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1450} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10003;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_free(out_$p3);
    goto corral_source_split_10002;

  SeqInstr_669:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ldv_free(out_$p6);
    goto corral_source_split_9998;

  SeqInstr_666:
    goto corral_source_split_9997;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_dummy_resourceless_instance_callback_2_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_665;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_9996;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_9995;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_9993;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1443} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_9992;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_dummy_resourceless_instance_callback_2_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_668;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10000;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_2_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_2_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_3_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10014;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10027;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1462} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10026;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ldv_free(out_$p3);
    goto corral_source_split_10025;

  SeqInstr_675:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ldv_free(out_$p6);
    goto corral_source_split_10021;

  SeqInstr_672:
    goto corral_source_split_10020;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} ldv_dummy_resourceless_instance_callback_3_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_671;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10019;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10018;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10016;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1455} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10015;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_dummy_resourceless_instance_callback_3_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_674;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10023;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_3_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_3_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_4_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10037;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10050;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1474} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10049;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_free(out_$p3);
    goto corral_source_split_10048;

  SeqInstr_681:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_free(out_$p6);
    goto corral_source_split_10044;

  SeqInstr_678:
    goto corral_source_split_10043;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_dummy_resourceless_instance_callback_4_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_677;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10042;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10041;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10039;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1467} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10038;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_dummy_resourceless_instance_callback_4_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_680;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10046;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_4_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_4_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10060;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1486} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10072;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ldv_free(out_$p3);
    goto corral_source_split_10071;

  SeqInstr_687:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ldv_free(out_$p6);
    goto corral_source_split_10067;

  SeqInstr_684:
    goto corral_source_split_10066;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} ldv_dummy_resourceless_instance_callback_5_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_683;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10065;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10064;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10062;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1479} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10061;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_dummy_resourceless_instance_callback_5_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_686;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10069;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_5_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10083;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1498} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10095;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_free(out_$p3);
    goto corral_source_split_10094;

  SeqInstr_693:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_free(out_$p6);
    goto corral_source_split_10090;

  SeqInstr_690:
    goto corral_source_split_10089;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_dummy_resourceless_instance_callback_6_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_689;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10088;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1491} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10084;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_dummy_resourceless_instance_callback_6_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_692;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10092;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_6_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10106;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10119;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1510} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10118;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_free(out_$p3);
    goto corral_source_split_10117;

  SeqInstr_699:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_free(out_$p6);
    goto corral_source_split_10113;

  SeqInstr_696:
    goto corral_source_split_10112;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_dummy_resourceless_instance_callback_7_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_695;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10111;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1503} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10107;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_dummy_resourceless_instance_callback_7_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_698;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10115;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_7_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10129;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10142;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1522} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10141;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_free(out_$p3);
    goto corral_source_split_10140;

  SeqInstr_705:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_free(out_$p6);
    goto corral_source_split_10136;

  SeqInstr_702:
    goto corral_source_split_10135;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_dummy_resourceless_instance_callback_8_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_701;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10134;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10133;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10131;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1515} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10130;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_dummy_resourceless_instance_callback_8_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_704;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10138;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_8_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.19, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10152;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10165;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1534} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10164;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_free(out_$p3);
    goto corral_source_split_10163;

  SeqInstr_711:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_free(out_$p6);
    goto corral_source_split_10159;

  SeqInstr_708:
    goto corral_source_split_10158;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_dummy_resourceless_instance_callback_9_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_707;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10157;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10156;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10154;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1527} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10153;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_dummy_resourceless_instance_callback_9_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_710;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10161;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_9_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10175;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10188;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1546} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10187;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_free(out_$p3);
    goto corral_source_split_10186;

  SeqInstr_717:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_free(out_$p6);
    goto corral_source_split_10182;

  SeqInstr_714:
    goto corral_source_split_10181;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_dummy_resourceless_instance_callback_10_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_713;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10180;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10179;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10177;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1539} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10176;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_dummy_resourceless_instance_callback_10_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_716;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10184;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_10_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10198;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10211;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1558} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10210;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_free(out_$p3);
    goto corral_source_split_10209;

  SeqInstr_723:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_free(out_$p6);
    goto corral_source_split_10205;

  SeqInstr_720:
    goto corral_source_split_10204;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_dummy_resourceless_instance_callback_11_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_719;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10203;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10202;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10200;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1551} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10199;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_dummy_resourceless_instance_callback_11_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_722;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10207;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_11_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10221;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10234;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1570} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10233;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_free(out_$p3);
    goto corral_source_split_10232;

  SeqInstr_729:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_free(out_$p6);
    goto corral_source_split_10228;

  SeqInstr_726:
    goto corral_source_split_10227;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} ldv_dummy_resourceless_instance_callback_12_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_725;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10226;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10225;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10223;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1563} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10222;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_dummy_resourceless_instance_callback_12_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_728;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10230;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_12_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.27, $M.28, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10244;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10257;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1582} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10256;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_free(out_$p3);
    goto corral_source_split_10255;

  SeqInstr_735:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} ldv_free(out_$p6);
    goto corral_source_split_10251;

  SeqInstr_732:
    goto corral_source_split_10250;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} ldv_dummy_resourceless_instance_callback_13_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_731;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10249;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10248;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10246;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1575} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10245;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} ldv_dummy_resourceless_instance_callback_13_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_734;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10253;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_13_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10267;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10280;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1594} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10279;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv_free(out_$p3);
    goto corral_source_split_10278;

  SeqInstr_741:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} ldv_free(out_$p6);
    goto corral_source_split_10274;

  SeqInstr_738:
    goto corral_source_split_10273;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} ldv_dummy_resourceless_instance_callback_14_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_737;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10272;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10271;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10269;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1587} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10268;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} ldv_dummy_resourceless_instance_callback_14_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_740;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10276;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_14_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_15_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10290;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1606} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10302;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} ldv_free(out_$p3);
    goto corral_source_split_10301;

  SeqInstr_747:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_free(out_$p6);
    goto corral_source_split_10297;

  SeqInstr_744:
    goto corral_source_split_10296;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_dummy_resourceless_instance_callback_15_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_743;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10295;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10294;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10292;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1599} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10291;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} ldv_dummy_resourceless_instance_callback_15_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_746;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10299;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_15_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_15_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_16_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10313;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10326;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1618} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10325;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} ldv_free(out_$p3);
    goto corral_source_split_10324;

  SeqInstr_753:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} ldv_free(out_$p6);
    goto corral_source_split_10320;

  SeqInstr_750:
    goto corral_source_split_10319;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} ldv_dummy_resourceless_instance_callback_16_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_749;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10318;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10314;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_dummy_resourceless_instance_callback_16_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_752;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10322;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_16_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_16_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_17_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10336;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10349;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1630} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10348;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_free(out_$p3);
    goto corral_source_split_10347;

  SeqInstr_759:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_free(out_$p6);
    goto corral_source_split_10343;

  SeqInstr_756:
    goto corral_source_split_10342;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_dummy_resourceless_instance_callback_17_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_755;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10341;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10340;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10338;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1623} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10337;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_dummy_resourceless_instance_callback_17_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_758;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10345;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_17_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_17_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_18_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10359;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10372;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1642} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10371;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_free(out_$p3);
    goto corral_source_split_10370;

  SeqInstr_765:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_free(out_$p6);
    goto corral_source_split_10366;

  SeqInstr_762:
    goto corral_source_split_10365;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} ldv_dummy_resourceless_instance_callback_18_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_761;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10364;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10363;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10361;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1635} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10360;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} ldv_dummy_resourceless_instance_callback_18_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_764;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10368;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_18_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_18_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_19_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10382;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10395;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1654} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10394;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_free(out_$p3);
    goto corral_source_split_10393;

  SeqInstr_771:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_free(out_$p6);
    goto corral_source_split_10389;

  SeqInstr_768:
    goto corral_source_split_10388;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} ldv_dummy_resourceless_instance_callback_19_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_767;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10387;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10386;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10384;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1647} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10383;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_dummy_resourceless_instance_callback_19_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_770;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10391;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_19_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_19_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_20_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10405;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10418;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1666} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10417;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_free(out_$p3);
    goto corral_source_split_10416;

  SeqInstr_777:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_free(out_$p6);
    goto corral_source_split_10412;

  SeqInstr_774:
    goto corral_source_split_10411;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_dummy_resourceless_instance_callback_20_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_773;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10410;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10409;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10407;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1659} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10406;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_dummy_resourceless_instance_callback_20_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_776;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10414;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_20_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_20_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_21_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10428;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10441;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1678} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10440;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_free(out_$p3);
    goto corral_source_split_10439;

  SeqInstr_783:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_free(out_$p6);
    goto corral_source_split_10435;

  SeqInstr_780:
    goto corral_source_split_10434;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} ldv_dummy_resourceless_instance_callback_21_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_779;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10433;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10432;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10430;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1671} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10429;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_dummy_resourceless_instance_callback_21_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_782;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10437;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_21_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_21_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_22_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10451;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10464;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1690} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10463;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} ldv_free(out_$p3);
    goto corral_source_split_10462;

  SeqInstr_789:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} ldv_free(out_$p6);
    goto corral_source_split_10458;

  SeqInstr_786:
    goto corral_source_split_10457;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_dummy_resourceless_instance_callback_22_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_785;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10456;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10453;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1683} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10452;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_dummy_resourceless_instance_callback_22_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_788;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10460;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_22_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_22_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_23_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10474;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10487;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1702} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10486;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_free(out_$p3);
    goto corral_source_split_10485;

  SeqInstr_795:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} ldv_free(out_$p6);
    goto corral_source_split_10481;

  SeqInstr_792:
    goto corral_source_split_10480;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_dummy_resourceless_instance_callback_23_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_791;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10479;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10478;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10476;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1695} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10475;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_dummy_resourceless_instance_callback_23_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_794;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10483;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_23_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_23_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_24_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10497;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10510;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1714} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10509;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_free(out_$p3);
    goto corral_source_split_10508;

  SeqInstr_801:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_free(out_$p6);
    goto corral_source_split_10504;

  SeqInstr_798:
    goto corral_source_split_10503;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_dummy_resourceless_instance_callback_24_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_797;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10502;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10501;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10499;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1707} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10498;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_dummy_resourceless_instance_callback_24_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_800;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10506;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_24_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_24_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.31, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_25_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10520;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10533;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1726} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10532;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_free(out_$p3);
    goto corral_source_split_10531;

  SeqInstr_807:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_free(out_$p6);
    goto corral_source_split_10527;

  SeqInstr_804:
    goto corral_source_split_10526;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_dummy_resourceless_instance_callback_25_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_803;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10525;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10522;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1719} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10521;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} ldv_dummy_resourceless_instance_callback_25_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_806;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10529;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_25_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_25_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_26_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10543;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10556;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1738} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10555;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_free(out_$p3);
    goto corral_source_split_10554;

  SeqInstr_813:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_free(out_$p6);
    goto corral_source_split_10550;

  SeqInstr_810:
    goto corral_source_split_10549;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_dummy_resourceless_instance_callback_26_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_809;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10548;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10547;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10545;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1731} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10544;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} ldv_dummy_resourceless_instance_callback_26_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_812;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10552;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_26_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_26_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_27_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10566;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10579;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1750} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10578;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_free(out_$p3);
    goto corral_source_split_10577;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_dummy_resourceless_instance_callback_27_3($u8, $u4, $u6, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} ldv_free(out_$p6);
    goto corral_source_split_10573;

  SeqInstr_816:
    goto corral_source_split_10572;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_dummy_resourceless_instance_callback_27_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_815;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10571;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10570;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10568;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1743} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10567;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10575;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_27_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_27_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed;



implementation ldv_struct_sensor_device_template_dummy_resourceless_instance_28_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_10589;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_10602;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} out_$i7 := ldv_undef_int();
    call {:si_unique_call 1762} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10601;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_free(out_$p3);
    goto corral_source_split_10600;

  SeqInstr_822:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_free(out_$p6);
    goto corral_source_split_10596;

  SeqInstr_819:
    goto corral_source_split_10595;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} ldv_dummy_resourceless_instance_callback_28_9($u5, $u4, $u6, out_$p6, $u7);
    goto SeqInstr_818;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_10594;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_10593;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_10591;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1755} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_10590;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_dummy_resourceless_instance_callback_28_3($u8, $u4, $u6, out_$p3);
    goto SeqInstr_821;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_10598;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_sensor_device_template_dummy_resourceless_instance_28_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_device_template_dummy_resourceless_instance_28_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.29, $M.0, $M.19, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_32_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} ldv_dummy_resourceless_instance_callback_32_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10796;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} out_$i3 := ldv_undef_int();
    call {:si_unique_call 1858} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_10797;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_32_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_32_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_33_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_dummy_resourceless_instance_callback_33_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10808;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_10810;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} out_$i3 := ldv_undef_int();
    call {:si_unique_call 1863} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_10809;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_33_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_33_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);
  modifies $M.0;



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_29_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} ldv_dummy_resourceless_instance_callback_29_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10820;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_10822;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} out_$i3 := ldv_undef_int();
    call {:si_unique_call 1868} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_10821;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_29_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_29_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_30_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_dummy_resourceless_instance_callback_30_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10832;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_10834;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} out_$i3 := ldv_undef_int();
    call {:si_unique_call 1873} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_10833;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_30_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_30_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);



implementation ldv_struct_sensor_template_group_dummy_resourceless_instance_31_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_dummy_resourceless_instance_callback_31_3($u9, $u10, $u11, $u1);
    goto corral_source_split_10844;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_10846;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} out_$i3 := ldv_undef_int();
    call {:si_unique_call 1878} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_10845;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_sensor_template_group_dummy_resourceless_instance_31_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_sensor_template_group_dummy_resourceless_instance_31_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);


