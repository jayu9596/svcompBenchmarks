var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: [ref]i16;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]i24;

var $M.15: [ref]i8;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]i24;

var $M.21: [ref]i8;

var $M.22: [ref]i32;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]i24;

var $M.28: [ref]i8;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i24;

var $M.34: [ref]i8;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]i24;

var $M.40: [ref]i8;

var $M.41: i32;

var $M.42: [ref]i32;

var $M.47: [ref]i32;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: i32;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: [ref]ref;

var $M.57: [ref]i32;

var $M.58: [ref]i32;

var $M.59: [ref]i32;

var $M.60: [ref]i32;

var $M.61: [ref]i32;

var $M.62: [ref]i32;

var $M.63: [ref]i32;

var $M.64: [ref]i32;

var $M.65: [ref]i32;

var $M.66: [ref]i32;

var $M.67: [ref]i32;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: [ref]i32;

var $M.71: [ref]i32;

var $M.72: [ref]i32;

var $M.73: [ref]i32;

var $M.74: [ref]i32;

var $M.75: [ref]i32;

var $M.76: [ref]i32;

var $M.77: [ref]i32;

var $M.78: [ref]i32;

var $M.79: [ref]i32;

var $M.80: [ref]i32;

var $M.81: [ref]i32;

var $M.82: [ref]i32;

var $M.83: [ref]i32;

var $M.84: [ref]i32;

var $M.85: [ref]i32;

var $M.86: [ref]i32;

var $M.87: [ref]i32;

var $M.88: [ref]i32;

var $M.89: [ref]i32;

var $M.90: [ref]i32;

var $M.91: [ref]i32;

var $M.92: [ref]i32;

var $M.93: [ref]i32;

var $M.94: [ref]i32;

var $M.95: [ref]i32;

var $M.96: [ref]i32;

var $M.97: [ref]i32;

var $M.98: [ref]i32;

var $M.99: [ref]i32;

var $M.100: [ref]i32;

var $M.101: [ref]i32;

var $M.102: [ref]i32;

var $M.103: [ref]i16;

var $M.104: [ref]i16;

var $M.105: [ref]i32;

var $M.106: [ref]i32;

var $M.107: [ref]i32;

var $M.108: [ref]i32;

var $M.109: [ref]i32;

var $M.110: [ref]i32;

var $M.111: [ref]i32;

var $M.112: [ref]i32;

var $M.113: [ref]i32;

var $M.114: [ref]i32;

var $M.115: [ref]i32;

var $M.116: [ref]i32;

var $M.117: [ref]i32;

var $M.118: [ref]i32;

var $M.119: [ref]i32;

var $M.120: [ref]i32;

var $M.121: [ref]i32;

var $M.122: [ref]i32;

var $M.123: [ref]i32;

var $M.124: [ref]i32;

var $M.125: [ref]i32;

var $M.126: [ref]i32;

var $M.127: [ref]i32;

var $M.128: [ref]i32;

var $M.129: [ref]i32;

var $M.130: [ref]i32;

var $M.131: [ref]i32;

var $M.132: [ref]i32;

var $M.133: [ref]i32;

var $M.134: [ref]i32;

var $M.135: [ref]i8;

var $M.136: ref;

var $M.137: i32;

var $M.138: i32;

var $M.139: i32;

var $M.140: i32;

var $M.141: i32;

var $M.142: i32;

var $M.143: i32;

var $M.144: i32;

var $M.145: i32;

var $M.146: i32;

var $M.147: i32;

var $M.148: i32;

var $M.149: i32;

var $M.150: i32;

var $M.151: i32;

var $M.152: i32;

var $M.153: i32;

var $M.154: i32;

var $M.155: i32;

var $M.156: i32;

var $M.157: i32;

var $M.158: i32;

var $M.159: i32;

var $M.160: i32;

var $M.161: i32;

var $M.162: i32;

var $M.163: i32;

var $M.164: i32;

var $M.165: i32;

var $M.166: i32;

var $M.167: i32;

var $M.168: i32;

var $M.169: i32;

var $M.170: i32;

var $M.171: i32;

var $M.172: i32;

var $M.173: i32;

var $M.174: i32;

var $M.175: i32;

var $M.176: i32;

var $M.177: i32;

var $M.178: i32;

var $M.179: i32;

var $M.180: i32;

var $M.181: i32;

var $M.182: i32;

var $M.183: i32;

var $M.184: i32;

var $M.185: i32;

var $M.186: i32;

var $M.187: i32;

var $M.188: i32;

var $M.189: i32;

var $M.190: i32;

var $M.191: i32;

var $M.192: i32;

var $M.193: i32;

var $M.194: i32;

var $M.195: i32;

var $M.196: i32;

var $M.197: i32;

var $M.198: i32;

var $M.199: i32;

var $M.200: i32;

var $M.201: i32;

var $M.202: i32;

var $M.203: i32;

var $M.204: i32;

var $M.205: i32;

var $M.206: i32;

var $M.207: i32;

var $M.208: i32;

var $M.209: i32;

var $M.210: i32;

var $M.211: i32;

var $M.212: i32;

var $M.213: i32;

var $M.214: i32;

var $M.215: i32;

var $M.216: i32;

var $M.217: i32;

var $M.218: i32;

var $M.219: i32;

var $M.220: i32;

var $M.221: i32;

var $M.222: i32;

var $M.223: ref;

var $M.224: ref;

var $M.225: i32;

var $M.226: ref;

var $M.227: ref;

var $M.228: i32;

var $M.229: ref;

var $M.230: ref;

var $M.231: i32;

var $M.232: ref;

var $M.233: ref;

var $M.234: i32;

var $M.235: ref;

var $M.236: ref;

var $M.237: i32;

var $M.238: ref;

var $M.239: ref;

var $M.240: i32;

var $M.241: ref;

var $M.242: ref;

var $M.243: i32;

var $M.244: ref;

var $M.245: ref;

var $M.246: i32;

var $M.247: ref;

var $M.248: ref;

var $M.249: i32;

var $M.250: ref;

var $M.251: ref;

var $M.252: i32;

var $M.253: ref;

var $M.254: ref;

var $M.255: i32;

var $M.256: ref;

var $M.257: ref;

var $M.258: i32;

var $M.259: ref;

var $M.260: ref;

var $M.261: i32;

var $M.262: ref;

var $M.263: ref;

var $M.264: i32;

var $M.265: ref;

var $M.266: ref;

var $M.267: i32;

var $M.268: ref;

var $M.269: ref;

var $M.270: i32;

var $M.271: ref;

var $M.272: ref;

var $M.273: i32;

var $M.274: ref;

var $M.275: ref;

var $M.276: i32;

var $M.277: ref;

var $M.278: ref;

var $M.279: i32;

var $M.280: ref;

var $M.281: ref;

var $M.282: i32;

var $M.283: ref;

var $M.284: ref;

var $M.285: i32;

var $M.286: ref;

var $M.287: ref;

var $M.288: i32;

var $M.289: ref;

var $M.290: ref;

var $M.291: i32;

var $M.292: ref;

var $M.293: ref;

var $M.294: i32;

var $M.295: ref;

var $M.296: ref;

var $M.297: i32;

var $M.298: ref;

var $M.299: ref;

var $M.300: i32;

var $M.301: ref;

var $M.302: ref;

var $M.303: i32;

var $M.304: ref;

var $M.305: ref;

var $M.306: i32;

var $M.307: ref;

var $M.308: ref;

var $M.309: i32;

var $M.310: ref;

var $M.311: ref;

var $M.312: i32;

var $M.313: ref;

var $M.314: ref;

var $M.315: i32;

var $M.316: ref;

var $M.317: ref;

var $M.318: i32;

var $M.319: ref;

var $M.320: ref;

var $M.321: i32;

var $M.322: ref;

var $M.323: ref;

var $M.324: i32;

var $M.325: ref;

var $M.326: ref;

var $M.327: i32;

var $M.328: ref;

var $M.329: ref;

var $M.330: i32;

var $M.331: ref;

var $M.332: ref;

var $M.333: i32;

var $M.334: ref;

var $M.335: ref;

var $M.336: i32;

var $M.337: ref;

var $M.338: ref;

var $M.339: i32;

var $M.340: ref;

var $M.341: ref;

var $M.342: i32;

var $M.343: ref;

var $M.344: ref;

var $M.345: i32;

var $M.346: ref;

var $M.347: ref;

var $M.348: i32;

var $M.349: ref;

var $M.350: ref;

var $M.351: i32;

var $M.352: ref;

var $M.353: ref;

var $M.354: i32;

var $M.355: ref;

var $M.356: ref;

var $M.357: i32;

var $M.358: ref;

var $M.359: ref;

var $M.360: i32;

var $M.361: ref;

var $M.362: ref;

var $M.363: i32;

var $M.364: ref;

var $M.365: ref;

var $M.366: i32;

var $M.367: ref;

var $M.368: ref;

var $M.369: i32;

var $M.370: ref;

var $M.371: ref;

var $M.372: i32;

var $M.373: ref;

var $M.374: ref;

var $M.375: i32;

var $M.376: ref;

var $M.377: ref;

var $M.378: i32;

var $M.379: ref;

var $M.380: ref;

var $M.381: i32;

var $M.382: ref;

var $M.383: ref;

var $M.384: i32;

var $M.385: ref;

var $M.386: ref;

var $M.387: i32;

var $M.388: ref;

var $M.389: ref;

var $M.390: i32;

var $M.391: ref;

var $M.392: ref;

var $M.393: i32;

var $M.394: ref;

var $M.395: ref;

var $M.396: i32;

var $M.397: ref;

var $M.398: ref;

var $M.399: i32;

var $M.400: ref;

var $M.401: ref;

var $M.402: i32;

var $M.403: ref;

var $M.404: ref;

var $M.405: i32;

var $M.406: ref;

var $M.407: ref;

var $M.408: i32;

var $M.409: ref;

var $M.410: ref;

var $M.411: ref;

var $M.412: ref;

var $M.413: ref;

var $M.414: ref;

var $M.415: ref;

var $M.416: ref;

var $M.417: ref;

var $M.418: ref;

var $M.419: ref;

var $M.420: ref;

var $M.421: ref;

var $M.422: ref;

var $M.423: ref;

var $M.424: ref;

var $M.425: ref;

var $M.426: ref;

var $M.427: ref;

var $M.428: ref;

var $M.429: ref;

var $M.430: ref;

var $M.431: ref;

var $M.432: ref;

var $M.433: ref;

var $M.434: ref;

var $M.435: ref;

var $M.436: ref;

var $M.437: ref;

var $M.438: ref;

var $M.439: ref;

var $M.440: ref;

var $M.441: i32;

var $M.442: i32;

var $M.443: i32;

var $M.444: i32;

var $M.445: i32;

var $M.446: i32;

var $M.447: i32;

var $M.448: i32;

var $M.449: i32;

var $M.450: i32;

var $M.451: i32;

var $M.452: i32;

var $M.453: i32;

var $M.454: i32;

var $M.455: i32;

var $M.456: i32;

var $M.457: i32;

var $M.458: i32;

var $M.459: i32;

var $M.461: [ref]i8;

var $M.462: [ref]ref;

var $M.463: [ref]ref;

var $M.464: [ref]ref;

var $M.465: [ref]ref;

var $M.466: [ref]ref;

var $M.467: [ref]ref;

var $M.468: [ref]ref;

var $M.469: [ref]ref;

var $M.470: [ref]ref;

var $M.471: [ref]ref;

var $M.472: [ref]ref;

var $M.473: [ref]ref;

var $M.474: [ref]ref;

var $M.475: [ref]ref;

var $M.476: [ref]ref;

var $M.477: [ref]ref;

var $M.478: [ref]ref;

var $M.479: [ref]ref;

var $M.480: [ref]ref;

var $M.481: [ref]ref;

var $M.482: [ref]ref;

var $M.483: [ref]ref;

var $M.484: [ref]ref;

var $M.485: [ref]ref;

var $M.486: [ref]ref;

var $M.487: [ref]ref;

var $M.488: [ref]ref;

var $M.489: [ref]ref;

var $M.490: [ref]i8;

var $M.514: [ref]i8;

var $M.515: [ref]i8;

var $M.516: [ref]i8;

var $M.517: [ref]i8;

var $M.518: [ref]i8;

var $M.519: [ref]i8;

var $M.520: [ref]i8;

var $M.521: [ref]i8;

var $M.522: [ref]i8;

var $M.523: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 1221616);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const probed_79: ref;

axiom probed_79 == $sub.ref(0, 2056);

const wl12xx_driver_group1: ref;

axiom wl12xx_driver_group1 == $sub.ref(0, 3088);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4116);

const wl12xx_ops_group0: ref;

axiom wl12xx_ops_group0 == $sub.ref(0, 5148);

const wl12xx_ops_group1: ref;

axiom wl12xx_ops_group1 == $sub.ref(0, 6180);

const wl12xx_ops_group2: ref;

axiom wl12xx_ops_group2 == $sub.ref(0, 7212);

const wl12xx_ops_group3: ref;

axiom wl12xx_ops_group3 == $sub.ref(0, 8244);

const wl12xx_ops_group4: ref;

axiom wl12xx_ops_group4 == $sub.ref(0, 9276);

const ldv_state_variable_33: ref;

axiom ldv_state_variable_33 == $sub.ref(0, 10304);

const ldv_state_variable_32: ref;

axiom ldv_state_variable_32 == $sub.ref(0, 11332);

const ldv_state_variable_63: ref;

axiom ldv_state_variable_63 == $sub.ref(0, 12360);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 13388);

const ldv_state_variable_71: ref;

axiom ldv_state_variable_71 == $sub.ref(0, 14416);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 15444);

const ldv_state_variable_80: ref;

axiom ldv_state_variable_80 == $sub.ref(0, 16472);

const ldv_state_variable_26: ref;

axiom ldv_state_variable_26 == $sub.ref(0, 17500);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 18528);

const ldv_state_variable_72: ref;

axiom ldv_state_variable_72 == $sub.ref(0, 19556);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 20584);

const ldv_state_variable_44: ref;

axiom ldv_state_variable_44 == $sub.ref(0, 21612);

const ldv_state_variable_55: ref;

axiom ldv_state_variable_55 == $sub.ref(0, 22640);

const ldv_state_variable_74: ref;

axiom ldv_state_variable_74 == $sub.ref(0, 23668);

const ldv_state_variable_27: ref;

axiom ldv_state_variable_27 == $sub.ref(0, 24696);

const ldv_state_variable_57: ref;

axiom ldv_state_variable_57 == $sub.ref(0, 25724);

const ldv_state_variable_61: ref;

axiom ldv_state_variable_61 == $sub.ref(0, 26752);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 27780);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 28808);

const ldv_state_variable_31: ref;

axiom ldv_state_variable_31 == $sub.ref(0, 29836);

const ldv_state_variable_35: ref;

axiom ldv_state_variable_35 == $sub.ref(0, 30864);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 31892);

const ldv_state_variable_78: ref;

axiom ldv_state_variable_78 == $sub.ref(0, 32920);

const ldv_state_variable_48: ref;

axiom ldv_state_variable_48 == $sub.ref(0, 33948);

const ldv_state_variable_77: ref;

axiom ldv_state_variable_77 == $sub.ref(0, 34976);

const ldv_state_variable_65: ref;

axiom ldv_state_variable_65 == $sub.ref(0, 36004);

const ldv_state_variable_29: ref;

axiom ldv_state_variable_29 == $sub.ref(0, 37032);

const ldv_state_variable_50: ref;

axiom ldv_state_variable_50 == $sub.ref(0, 38060);

const ldv_state_variable_39: ref;

axiom ldv_state_variable_39 == $sub.ref(0, 39088);

const ldv_state_variable_64: ref;

axiom ldv_state_variable_64 == $sub.ref(0, 40116);

const ldv_state_variable_58: ref;

axiom ldv_state_variable_58 == $sub.ref(0, 41144);

const ldv_state_variable_41: ref;

axiom ldv_state_variable_41 == $sub.ref(0, 42172);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 43200);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 44228);

const ldv_state_variable_52: ref;

axiom ldv_state_variable_52 == $sub.ref(0, 45256);

const ldv_state_variable_60: ref;

axiom ldv_state_variable_60 == $sub.ref(0, 46284);

const ldv_state_variable_56: ref;

axiom ldv_state_variable_56 == $sub.ref(0, 47312);

const ldv_state_variable_73: ref;

axiom ldv_state_variable_73 == $sub.ref(0, 48340);

const ldv_state_variable_66: ref;

axiom ldv_state_variable_66 == $sub.ref(0, 49368);

const ldv_state_variable_45: ref;

axiom ldv_state_variable_45 == $sub.ref(0, 50396);

const ldv_state_variable_76: ref;

axiom ldv_state_variable_76 == $sub.ref(0, 51424);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 52452);

const ldv_state_variable_62: ref;

axiom ldv_state_variable_62 == $sub.ref(0, 53480);

const ldv_state_variable_54: ref;

axiom ldv_state_variable_54 == $sub.ref(0, 54508);

const ldv_state_variable_67: ref;

axiom ldv_state_variable_67 == $sub.ref(0, 55536);

const ldv_state_variable_70: ref;

axiom ldv_state_variable_70 == $sub.ref(0, 56564);

const ldv_state_variable_68: ref;

axiom ldv_state_variable_68 == $sub.ref(0, 57592);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 58620);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 59648);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 60676);

const ldv_state_variable_30: ref;

axiom ldv_state_variable_30 == $sub.ref(0, 61704);

const ldv_state_variable_25: ref;

axiom ldv_state_variable_25 == $sub.ref(0, 62732);

const ldv_state_variable_28: ref;

axiom ldv_state_variable_28 == $sub.ref(0, 63760);

const ldv_state_variable_75: ref;

axiom ldv_state_variable_75 == $sub.ref(0, 64788);

const ldv_state_variable_40: ref;

axiom ldv_state_variable_40 == $sub.ref(0, 65816);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 66844);

const ldv_state_variable_69: ref;

axiom ldv_state_variable_69 == $sub.ref(0, 67872);

const ldv_state_variable_59: ref;

axiom ldv_state_variable_59 == $sub.ref(0, 68900);

const ldv_state_variable_49: ref;

axiom ldv_state_variable_49 == $sub.ref(0, 69928);

const ldv_state_variable_24: ref;

axiom ldv_state_variable_24 == $sub.ref(0, 70956);

const ldv_state_variable_53: ref;

axiom ldv_state_variable_53 == $sub.ref(0, 71984);

const ldv_state_variable_79: ref;

axiom ldv_state_variable_79 == $sub.ref(0, 73012);

const ldv_state_variable_22: ref;

axiom ldv_state_variable_22 == $sub.ref(0, 74040);

const ldv_state_variable_42: ref;

axiom ldv_state_variable_42 == $sub.ref(0, 75068);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 76096);

const ldv_state_variable_46: ref;

axiom ldv_state_variable_46 == $sub.ref(0, 77124);

const ldv_state_variable_23: ref;

axiom ldv_state_variable_23 == $sub.ref(0, 78152);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 79180);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 80208);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 81236);

const ldv_state_variable_36: ref;

axiom ldv_state_variable_36 == $sub.ref(0, 82264);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 83292);

const ldv_state_variable_51: ref;

axiom ldv_state_variable_51 == $sub.ref(0, 84320);

const ldv_state_variable_47: ref;

axiom ldv_state_variable_47 == $sub.ref(0, 85348);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 86376);

const ldv_state_variable_38: ref;

axiom ldv_state_variable_38 == $sub.ref(0, 87404);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 88432);

const ldv_state_variable_34: ref;

axiom ldv_state_variable_34 == $sub.ref(0, 89460);

const ldv_state_variable_37: ref;

axiom ldv_state_variable_37 == $sub.ref(0, 90488);

const ldv_state_variable_43: ref;

axiom ldv_state_variable_43 == $sub.ref(0, 91516);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 92544);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 93572);

const ldv_retval_62: ref;

axiom ldv_retval_62 == $sub.ref(0, 94600);

const ldv_retval_61: ref;

axiom ldv_retval_61 == $sub.ref(0, 95628);

const ldv_retval_65: ref;

axiom ldv_retval_65 == $sub.ref(0, 96656);

const event_heart_beat_ops_group1: ref;

axiom event_heart_beat_ops_group1 == $sub.ref(0, 97688);

const event_heart_beat_ops_group2: ref;

axiom event_heart_beat_ops_group2 == $sub.ref(0, 98720);

const aes_encrypt_fail_ops_group1: ref;

axiom aes_encrypt_fail_ops_group1 == $sub.ref(0, 99752);

const aes_encrypt_fail_ops_group2: ref;

axiom aes_encrypt_fail_ops_group2 == $sub.ref(0, 100784);

const dma_tx_errors_ops_group1: ref;

axiom dma_tx_errors_ops_group1 == $sub.ref(0, 101816);

const dma_tx_errors_ops_group2: ref;

axiom dma_tx_errors_ops_group2 == $sub.ref(0, 102848);

const ps_pspoll_utilization_ops_group1: ref;

axiom ps_pspoll_utilization_ops_group1 == $sub.ref(0, 103880);

const ps_pspoll_utilization_ops_group2: ref;

axiom ps_pspoll_utilization_ops_group2 == $sub.ref(0, 104912);

const pwr_ps_enter_ops_group1: ref;

axiom pwr_ps_enter_ops_group1 == $sub.ref(0, 105944);

const pwr_ps_enter_ops_group2: ref;

axiom pwr_ps_enter_ops_group2 == $sub.ref(0, 106976);

const pwr_elp_enter_ops_group1: ref;

axiom pwr_elp_enter_ops_group1 == $sub.ref(0, 108008);

const pwr_elp_enter_ops_group2: ref;

axiom pwr_elp_enter_ops_group2 == $sub.ref(0, 109040);

const isr_rx_mem_overflow_ops_group1: ref;

axiom isr_rx_mem_overflow_ops_group1 == $sub.ref(0, 110072);

const isr_rx_mem_overflow_ops_group2: ref;

axiom isr_rx_mem_overflow_ops_group2 == $sub.ref(0, 111104);

const event_rx_pool_ops_group1: ref;

axiom event_rx_pool_ops_group1 == $sub.ref(0, 112136);

const event_rx_pool_ops_group2: ref;

axiom event_rx_pool_ops_group2 == $sub.ref(0, 113168);

const rx_hdr_overflow_ops_group1: ref;

axiom rx_hdr_overflow_ops_group1 == $sub.ref(0, 114200);

const rx_hdr_overflow_ops_group2: ref;

axiom rx_hdr_overflow_ops_group2 == $sub.ref(0, 115232);

const aes_encrypt_packets_ops_group1: ref;

axiom aes_encrypt_packets_ops_group1 == $sub.ref(0, 116264);

const aes_encrypt_packets_ops_group2: ref;

axiom aes_encrypt_packets_ops_group2 == $sub.ref(0, 117296);

const isr_pci_pm_ops_group1: ref;

axiom isr_pci_pm_ops_group1 == $sub.ref(0, 118328);

const isr_pci_pm_ops_group2: ref;

axiom isr_pci_pm_ops_group2 == $sub.ref(0, 119360);

const isr_dma1_done_ops_group1: ref;

axiom isr_dma1_done_ops_group1 == $sub.ref(0, 120392);

const isr_dma1_done_ops_group2: ref;

axiom isr_dma1_done_ops_group2 == $sub.ref(0, 121424);

const event_rx_mem_empty_ops_group1: ref;

axiom event_rx_mem_empty_ops_group1 == $sub.ref(0, 122456);

const event_rx_mem_empty_ops_group2: ref;

axiom event_rx_mem_empty_ops_group2 == $sub.ref(0, 123488);

const isr_host_acknowledges_ops_group1: ref;

axiom isr_host_acknowledges_ops_group1 == $sub.ref(0, 124520);

const isr_host_acknowledges_ops_group2: ref;

axiom isr_host_acknowledges_ops_group2 == $sub.ref(0, 125552);

const rxpipe_rx_prep_beacon_drop_ops_group1: ref;

axiom rxpipe_rx_prep_beacon_drop_ops_group1 == $sub.ref(0, 126584);

const rxpipe_rx_prep_beacon_drop_ops_group2: ref;

axiom rxpipe_rx_prep_beacon_drop_ops_group2 == $sub.ref(0, 127616);

const isr_rx_rdys_ops_group1: ref;

axiom isr_rx_rdys_ops_group1 == $sub.ref(0, 128648);

const isr_rx_rdys_ops_group2: ref;

axiom isr_rx_rdys_ops_group2 == $sub.ref(0, 129680);

const ps_pspoll_timeouts_ops_group1: ref;

axiom ps_pspoll_timeouts_ops_group1 == $sub.ref(0, 130712);

const ps_pspoll_timeouts_ops_group2: ref;

axiom ps_pspoll_timeouts_ops_group2 == $sub.ref(0, 131744);

const rxpipe_descr_host_int_trig_rx_data_ops_group1: ref;

axiom rxpipe_descr_host_int_trig_rx_data_ops_group1 == $sub.ref(0, 132776);

const rxpipe_descr_host_int_trig_rx_data_ops_group2: ref;

axiom rxpipe_descr_host_int_trig_rx_data_ops_group2 == $sub.ref(0, 133808);

const pwr_rcvd_beacons_ops_group1: ref;

axiom pwr_rcvd_beacons_ops_group1 == $sub.ref(0, 134840);

const pwr_rcvd_beacons_ops_group2: ref;

axiom pwr_rcvd_beacons_ops_group2 == $sub.ref(0, 135872);

const pwr_missing_bcns_ops_group1: ref;

axiom pwr_missing_bcns_ops_group1 == $sub.ref(0, 136904);

const pwr_missing_bcns_ops_group2: ref;

axiom pwr_missing_bcns_ops_group2 == $sub.ref(0, 137936);

const ps_upsd_utilization_ops_group1: ref;

axiom ps_upsd_utilization_ops_group1 == $sub.ref(0, 138968);

const ps_upsd_utilization_ops_group2: ref;

axiom ps_upsd_utilization_ops_group2 == $sub.ref(0, 140000);

const ps_upsd_max_sptime_ops_group1: ref;

axiom ps_upsd_max_sptime_ops_group1 == $sub.ref(0, 141032);

const ps_upsd_max_sptime_ops_group2: ref;

axiom ps_upsd_max_sptime_ops_group2 == $sub.ref(0, 142064);

const rxpipe_tx_xfr_host_int_trig_rx_data_ops_group1: ref;

axiom rxpipe_tx_xfr_host_int_trig_rx_data_ops_group1 == $sub.ref(0, 143096);

const rxpipe_tx_xfr_host_int_trig_rx_data_ops_group2: ref;

axiom rxpipe_tx_xfr_host_int_trig_rx_data_ops_group2 == $sub.ref(0, 144128);

const isr_fiqs_ops_group1: ref;

axiom isr_fiqs_ops_group1 == $sub.ref(0, 145160);

const isr_fiqs_ops_group2: ref;

axiom isr_fiqs_ops_group2 == $sub.ref(0, 146192);

const pwr_disable_ps_ops_group1: ref;

axiom pwr_disable_ps_ops_group1 == $sub.ref(0, 147224);

const pwr_disable_ps_ops_group2: ref;

axiom pwr_disable_ps_ops_group2 == $sub.ref(0, 148256);

const isr_cmd_cmplt_ops_group1: ref;

axiom isr_cmd_cmplt_ops_group1 == $sub.ref(0, 149288);

const isr_cmd_cmplt_ops_group2: ref;

axiom isr_cmd_cmplt_ops_group2 == $sub.ref(0, 150320);

const event_tx_stuck_ops_group1: ref;

axiom event_tx_stuck_ops_group1 == $sub.ref(0, 151352);

const event_tx_stuck_ops_group2: ref;

axiom event_tx_stuck_ops_group2 == $sub.ref(0, 152384);

const pwr_rcvd_awake_beacons_ops_group1: ref;

axiom pwr_rcvd_awake_beacons_ops_group1 == $sub.ref(0, 153416);

const pwr_rcvd_awake_beacons_ops_group2: ref;

axiom pwr_rcvd_awake_beacons_ops_group2 == $sub.ref(0, 154448);

const isr_decrypt_done_ops_group1: ref;

axiom isr_decrypt_done_ops_group1 == $sub.ref(0, 155480);

const isr_decrypt_done_ops_group2: ref;

axiom isr_decrypt_done_ops_group2 == $sub.ref(0, 156512);

const wep_interrupt_ops_group1: ref;

axiom wep_interrupt_ops_group1 == $sub.ref(0, 157544);

const wep_interrupt_ops_group2: ref;

axiom wep_interrupt_ops_group2 == $sub.ref(0, 158576);

const pwr_power_save_off_ops_group1: ref;

axiom pwr_power_save_off_ops_group1 == $sub.ref(0, 159608);

const pwr_power_save_off_ops_group2: ref;

axiom pwr_power_save_off_ops_group2 == $sub.ref(0, 160640);

const isr_tx_exch_complete_ops_group1: ref;

axiom isr_tx_exch_complete_ops_group1 == $sub.ref(0, 161672);

const isr_tx_exch_complete_ops_group2: ref;

axiom isr_tx_exch_complete_ops_group2 == $sub.ref(0, 162704);

const isr_low_rssi_ops_group1: ref;

axiom isr_low_rssi_ops_group1 == $sub.ref(0, 163736);

const isr_low_rssi_ops_group2: ref;

axiom isr_low_rssi_ops_group2 == $sub.ref(0, 164768);

const pwr_fix_tsf_ps_ops_group1: ref;

axiom pwr_fix_tsf_ps_ops_group1 == $sub.ref(0, 165800);

const pwr_fix_tsf_ps_ops_group2: ref;

axiom pwr_fix_tsf_ps_ops_group2 == $sub.ref(0, 166832);

const aes_decrypt_packets_ops_group1: ref;

axiom aes_decrypt_packets_ops_group1 == $sub.ref(0, 167864);

const aes_decrypt_packets_ops_group2: ref;

axiom aes_decrypt_packets_ops_group2 == $sub.ref(0, 168896);

const rx_reset_counter_ops_group1: ref;

axiom rx_reset_counter_ops_group1 == $sub.ref(0, 169928);

const rx_reset_counter_ops_group2: ref;

axiom rx_reset_counter_ops_group2 == $sub.ref(0, 170960);

const event_calibration_ops_group1: ref;

axiom event_calibration_ops_group1 == $sub.ref(0, 171992);

const event_calibration_ops_group2: ref;

axiom event_calibration_ops_group2 == $sub.ref(0, 173024);

const isr_wakeups_ops_group1: ref;

axiom isr_wakeups_ops_group1 == $sub.ref(0, 174056);

const isr_wakeups_ops_group2: ref;

axiom isr_wakeups_ops_group2 == $sub.ref(0, 175088);

const rx_out_of_mem_ops_group1: ref;

axiom rx_out_of_mem_ops_group1 == $sub.ref(0, 176120);

const rx_out_of_mem_ops_group2: ref;

axiom rx_out_of_mem_ops_group2 == $sub.ref(0, 177152);

const pwr_enable_ps_ops_group1: ref;

axiom pwr_enable_ps_ops_group1 == $sub.ref(0, 178184);

const pwr_enable_ps_ops_group2: ref;

axiom pwr_enable_ps_ops_group2 == $sub.ref(0, 179216);

const isr_commands_ops_group1: ref;

axiom isr_commands_ops_group1 == $sub.ref(0, 180248);

const isr_commands_ops_group2: ref;

axiom isr_commands_ops_group2 == $sub.ref(0, 181280);

const rx_hw_stuck_ops_group1: ref;

axiom rx_hw_stuck_ops_group1 == $sub.ref(0, 182312);

const rx_hw_stuck_ops_group2: ref;

axiom rx_hw_stuck_ops_group2 == $sub.ref(0, 183344);

const dma_rx_requested_ops_group1: ref;

axiom dma_rx_requested_ops_group1 == $sub.ref(0, 184376);

const dma_rx_requested_ops_group2: ref;

axiom dma_rx_requested_ops_group2 == $sub.ref(0, 185408);

const dma_rx_errors_ops_group1: ref;

axiom dma_rx_errors_ops_group1 == $sub.ref(0, 186440);

const dma_rx_errors_ops_group2: ref;

axiom dma_rx_errors_ops_group2 == $sub.ref(0, 187472);

const event_oom_late_ops_group1: ref;

axiom event_oom_late_ops_group1 == $sub.ref(0, 188504);

const event_oom_late_ops_group2: ref;

axiom event_oom_late_ops_group2 == $sub.ref(0, 189536);

const rxpipe_missed_beacon_host_int_trig_rx_data_ops_group1: ref;

axiom rxpipe_missed_beacon_host_int_trig_rx_data_ops_group1 == $sub.ref(0, 190568);

const rxpipe_missed_beacon_host_int_trig_rx_data_ops_group2: ref;

axiom rxpipe_missed_beacon_host_int_trig_rx_data_ops_group2 == $sub.ref(0, 191600);

const aes_decrypt_fail_ops_group1: ref;

axiom aes_decrypt_fail_ops_group1 == $sub.ref(0, 192632);

const aes_decrypt_fail_ops_group2: ref;

axiom aes_decrypt_fail_ops_group2 == $sub.ref(0, 193664);

const event_phy_transmit_error_ops_group1: ref;

axiom event_phy_transmit_error_ops_group1 == $sub.ref(0, 194696);

const event_phy_transmit_error_ops_group2: ref;

axiom event_phy_transmit_error_ops_group2 == $sub.ref(0, 195728);

const isr_irqs_ops_group1: ref;

axiom isr_irqs_ops_group1 == $sub.ref(0, 196760);

const isr_irqs_ops_group2: ref;

axiom isr_irqs_ops_group2 == $sub.ref(0, 197792);

const wep_key_not_found_ops_group1: ref;

axiom wep_key_not_found_ops_group1 == $sub.ref(0, 198824);

const wep_key_not_found_ops_group2: ref;

axiom wep_key_not_found_ops_group2 == $sub.ref(0, 199856);

const mic_rx_pkts_ops_group1: ref;

axiom mic_rx_pkts_ops_group1 == $sub.ref(0, 200888);

const mic_rx_pkts_ops_group2: ref;

axiom mic_rx_pkts_ops_group2 == $sub.ref(0, 201920);

const isr_rx_headers_ops_group1: ref;

axiom isr_rx_headers_ops_group1 == $sub.ref(0, 202952);

const isr_rx_headers_ops_group2: ref;

axiom isr_rx_headers_ops_group2 == $sub.ref(0, 203984);

const wep_packets_ops_group1: ref;

axiom wep_packets_ops_group1 == $sub.ref(0, 205016);

const wep_packets_ops_group2: ref;

axiom wep_packets_ops_group2 == $sub.ref(0, 206048);

const pwr_wake_on_host_ops_group1: ref;

axiom pwr_wake_on_host_ops_group1 == $sub.ref(0, 207080);

const pwr_wake_on_host_ops_group2: ref;

axiom pwr_wake_on_host_ops_group2 == $sub.ref(0, 208112);

const ps_upsd_max_apturn_ops_group1: ref;

axiom ps_upsd_max_apturn_ops_group1 == $sub.ref(0, 209144);

const ps_upsd_max_apturn_ops_group2: ref;

axiom ps_upsd_max_apturn_ops_group2 == $sub.ref(0, 210176);

const rx_path_reset_ops_group1: ref;

axiom rx_path_reset_ops_group1 == $sub.ref(0, 211208);

const rx_path_reset_ops_group2: ref;

axiom rx_path_reset_ops_group2 == $sub.ref(0, 212240);

const aes_encrypt_interrupt_ops_group1: ref;

axiom aes_encrypt_interrupt_ops_group1 == $sub.ref(0, 213272);

const aes_encrypt_interrupt_ops_group2: ref;

axiom aes_encrypt_interrupt_ops_group2 == $sub.ref(0, 214304);

const pwr_tx_without_ps_ops_group1: ref;

axiom pwr_tx_without_ps_ops_group1 == $sub.ref(0, 215336);

const pwr_tx_without_ps_ops_group2: ref;

axiom pwr_tx_without_ps_ops_group2 == $sub.ref(0, 216368);

const isr_dma0_done_ops_group1: ref;

axiom isr_dma0_done_ops_group1 == $sub.ref(0, 217400);

const isr_dma0_done_ops_group2: ref;

axiom isr_dma0_done_ops_group2 == $sub.ref(0, 218432);

const wep_default_key_count_ops_group1: ref;

axiom wep_default_key_count_ops_group1 == $sub.ref(0, 219464);

const wep_default_key_count_ops_group2: ref;

axiom wep_default_key_count_ops_group2 == $sub.ref(0, 220496);

const rx_dropped_ops_group1: ref;

axiom rx_dropped_ops_group1 == $sub.ref(0, 221528);

const rx_dropped_ops_group2: ref;

axiom rx_dropped_ops_group2 == $sub.ref(0, 222560);

const tx_internal_desc_overflow_ops_group1: ref;

axiom tx_internal_desc_overflow_ops_group1 == $sub.ref(0, 223592);

const tx_internal_desc_overflow_ops_group2: ref;

axiom tx_internal_desc_overflow_ops_group2 == $sub.ref(0, 224624);

const wep_decrypt_fail_ops_group1: ref;

axiom wep_decrypt_fail_ops_group1 == $sub.ref(0, 225656);

const wep_decrypt_fail_ops_group2: ref;

axiom wep_decrypt_fail_ops_group2 == $sub.ref(0, 226688);

const pwr_wake_on_timer_exp_ops_group1: ref;

axiom pwr_wake_on_timer_exp_ops_group1 == $sub.ref(0, 227720);

const pwr_wake_on_timer_exp_ops_group2: ref;

axiom pwr_wake_on_timer_exp_ops_group2 == $sub.ref(0, 228752);

const dma_tx_requested_ops_group1: ref;

axiom dma_tx_requested_ops_group1 == $sub.ref(0, 229784);

const dma_tx_requested_ops_group2: ref;

axiom dma_tx_requested_ops_group2 == $sub.ref(0, 230816);

const aes_decrypt_interrupt_ops_group1: ref;

axiom aes_decrypt_interrupt_ops_group1 == $sub.ref(0, 231848);

const aes_decrypt_interrupt_ops_group2: ref;

axiom aes_decrypt_interrupt_ops_group2 == $sub.ref(0, 232880);

const pwr_tx_with_ps_ops_group1: ref;

axiom pwr_tx_with_ps_ops_group1 == $sub.ref(0, 233912);

const pwr_tx_with_ps_ops_group2: ref;

axiom pwr_tx_with_ps_ops_group2 == $sub.ref(0, 234944);

const rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops_group1: ref;

axiom rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops_group1 == $sub.ref(0, 235976);

const rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops_group2: ref;

axiom rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops_group2 == $sub.ref(0, 237008);

const rx_xfr_hint_trig_ops_group1: ref;

axiom rx_xfr_hint_trig_ops_group1 == $sub.ref(0, 238040);

const rx_xfr_hint_trig_ops_group2: ref;

axiom rx_xfr_hint_trig_ops_group2 == $sub.ref(0, 239072);

const event_rx_mismatch_ops_group1: ref;

axiom event_rx_mismatch_ops_group1 == $sub.ref(0, 240104);

const event_rx_mismatch_ops_group2: ref;

axiom event_rx_mismatch_ops_group2 == $sub.ref(0, 241136);

const mic_calc_failure_ops_group1: ref;

axiom mic_calc_failure_ops_group1 == $sub.ref(0, 242168);

const mic_calc_failure_ops_group2: ref;

axiom mic_calc_failure_ops_group2 == $sub.ref(0, 243200);

const ps_pspoll_max_apturn_ops_group1: ref;

axiom ps_pspoll_max_apturn_ops_group1 == $sub.ref(0, 244232);

const ps_pspoll_max_apturn_ops_group2: ref;

axiom ps_pspoll_max_apturn_ops_group2 == $sub.ref(0, 245264);

const isr_tx_procs_ops_group1: ref;

axiom isr_tx_procs_ops_group1 == $sub.ref(0, 246296);

const isr_tx_procs_ops_group2: ref;

axiom isr_tx_procs_ops_group2 == $sub.ref(0, 247328);

const rx_fcs_err_ops_group1: ref;

axiom rx_fcs_err_ops_group1 == $sub.ref(0, 248360);

const rx_fcs_err_ops_group2: ref;

axiom rx_fcs_err_ops_group2 == $sub.ref(0, 249392);

const ps_upsd_timeouts_ops_group1: ref;

axiom ps_upsd_timeouts_ops_group1 == $sub.ref(0, 250424);

const ps_upsd_timeouts_ops_group2: ref;

axiom ps_upsd_timeouts_ops_group2 == $sub.ref(0, 251456);

const isr_hw_pm_mode_changes_ops_group1: ref;

axiom isr_hw_pm_mode_changes_ops_group1 == $sub.ref(0, 252488);

const isr_hw_pm_mode_changes_ops_group2: ref;

axiom isr_hw_pm_mode_changes_ops_group2 == $sub.ref(0, 253520);

const wep_addr_key_count_ops_group1: ref;

axiom wep_addr_key_count_ops_group1 == $sub.ref(0, 254552);

const wep_addr_key_count_ops_group2: ref;

axiom wep_addr_key_count_ops_group2 == $sub.ref(0, 255584);

const isr_rx_procs_ops_group1: ref;

axiom isr_rx_procs_ops_group1 == $sub.ref(0, 256616);

const isr_rx_procs_ops_group2: ref;

axiom isr_rx_procs_ops_group2 == $sub.ref(0, 257648);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 258676);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 259704);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 260732);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 261760);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 262788);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 263816);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 264844);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 265872);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 266900);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 267928);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 268956);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 269984);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 271012);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 272040);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 273068);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 274096);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 275124);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 276152);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 277180);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 278208);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 279236);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 280264);

const ldv_retval_23: ref;

axiom ldv_retval_23 == $sub.ref(0, 281292);

const ldv_retval_24: ref;

axiom ldv_retval_24 == $sub.ref(0, 282320);

const ldv_retval_25: ref;

axiom ldv_retval_25 == $sub.ref(0, 283348);

const ldv_retval_26: ref;

axiom ldv_retval_26 == $sub.ref(0, 284376);

const ldv_retval_27: ref;

axiom ldv_retval_27 == $sub.ref(0, 285404);

const ldv_retval_28: ref;

axiom ldv_retval_28 == $sub.ref(0, 286432);

const ldv_retval_29: ref;

axiom ldv_retval_29 == $sub.ref(0, 287460);

const ldv_retval_30: ref;

axiom ldv_retval_30 == $sub.ref(0, 288488);

const ldv_retval_31: ref;

axiom ldv_retval_31 == $sub.ref(0, 289516);

const ldv_retval_32: ref;

axiom ldv_retval_32 == $sub.ref(0, 290544);

const ldv_retval_33: ref;

axiom ldv_retval_33 == $sub.ref(0, 291572);

const ldv_retval_34: ref;

axiom ldv_retval_34 == $sub.ref(0, 292600);

const ldv_retval_35: ref;

axiom ldv_retval_35 == $sub.ref(0, 293628);

const ldv_retval_36: ref;

axiom ldv_retval_36 == $sub.ref(0, 294656);

const ldv_retval_37: ref;

axiom ldv_retval_37 == $sub.ref(0, 295684);

const ldv_retval_38: ref;

axiom ldv_retval_38 == $sub.ref(0, 296712);

const ldv_retval_39: ref;

axiom ldv_retval_39 == $sub.ref(0, 297740);

const ldv_retval_40: ref;

axiom ldv_retval_40 == $sub.ref(0, 298768);

const ldv_retval_41: ref;

axiom ldv_retval_41 == $sub.ref(0, 299796);

const ldv_retval_42: ref;

axiom ldv_retval_42 == $sub.ref(0, 300824);

const ldv_retval_43: ref;

axiom ldv_retval_43 == $sub.ref(0, 301852);

const ldv_retval_44: ref;

axiom ldv_retval_44 == $sub.ref(0, 302880);

const ldv_retval_45: ref;

axiom ldv_retval_45 == $sub.ref(0, 303908);

const ldv_retval_46: ref;

axiom ldv_retval_46 == $sub.ref(0, 304936);

const ldv_retval_47: ref;

axiom ldv_retval_47 == $sub.ref(0, 305964);

const ldv_retval_48: ref;

axiom ldv_retval_48 == $sub.ref(0, 306992);

const ldv_retval_49: ref;

axiom ldv_retval_49 == $sub.ref(0, 308020);

const ldv_retval_50: ref;

axiom ldv_retval_50 == $sub.ref(0, 309048);

const ldv_retval_51: ref;

axiom ldv_retval_51 == $sub.ref(0, 310076);

const ldv_retval_52: ref;

axiom ldv_retval_52 == $sub.ref(0, 311104);

const ldv_retval_53: ref;

axiom ldv_retval_53 == $sub.ref(0, 312132);

const ldv_retval_54: ref;

axiom ldv_retval_54 == $sub.ref(0, 313160);

const ldv_retval_55: ref;

axiom ldv_retval_55 == $sub.ref(0, 314188);

const ldv_retval_56: ref;

axiom ldv_retval_56 == $sub.ref(0, 315216);

const ldv_retval_57: ref;

axiom ldv_retval_57 == $sub.ref(0, 316244);

const ldv_retval_58: ref;

axiom ldv_retval_58 == $sub.ref(0, 317272);

const ldv_retval_59: ref;

axiom ldv_retval_59 == $sub.ref(0, 318300);

const ldv_retval_60: ref;

axiom ldv_retval_60 == $sub.ref(0, 319328);

const ldv_retval_63: ref;

axiom ldv_retval_63 == $sub.ref(0, 320356);

const ldv_retval_64: ref;

axiom ldv_retval_64 == $sub.ref(0, 321384);

const ldv_retval_66: ref;

axiom ldv_retval_66 == $sub.ref(0, 322412);

const ldv_retval_67: ref;

axiom ldv_retval_67 == $sub.ref(0, 323440);

const ldv_retval_68: ref;

axiom ldv_retval_68 == $sub.ref(0, 324468);

const ldv_retval_69: ref;

axiom ldv_retval_69 == $sub.ref(0, 325496);

const ldv_retval_70: ref;

axiom ldv_retval_70 == $sub.ref(0, 326524);

const ldv_retval_71: ref;

axiom ldv_retval_71 == $sub.ref(0, 327552);

const ldv_retval_72: ref;

axiom ldv_retval_72 == $sub.ref(0, 328580);

const ldv_retval_73: ref;

axiom ldv_retval_73 == $sub.ref(0, 329608);

const ldv_retval_74: ref;

axiom ldv_retval_74 == $sub.ref(0, 330636);

const ldv_retval_75: ref;

axiom ldv_retval_75 == $sub.ref(0, 331664);

const ldv_retval_76: ref;

axiom ldv_retval_76 == $sub.ref(0, 332692);

const ldv_retval_77: ref;

axiom ldv_retval_77 == $sub.ref(0, 333720);

const ldv_retval_78: ref;

axiom ldv_retval_78 == $sub.ref(0, 334748);

const ldv_retval_79: ref;

axiom ldv_retval_79 == $sub.ref(0, 335776);

const ldv_retval_80: ref;

axiom ldv_retval_80 == $sub.ref(0, 336804);

const ldv_retval_81: ref;

axiom ldv_retval_81 == $sub.ref(0, 337832);

const {:count 2} __mod_platform__wl12xx_id_table_device_table: ref;

axiom __mod_platform__wl12xx_id_table_device_table == $sub.ref(0, 338920);

const ldv_mutex_mutex_of_wl1271: ref;

axiom ldv_mutex_mutex_of_wl1271 == $sub.ref(0, 339948);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 340976);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 342004);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 343032);

const rxpipe_tx_xfr_host_int_trig_rx_data_ops: ref;

axiom rxpipe_tx_xfr_host_int_trig_rx_data_ops == $sub.ref(0, 344280);

const rxpipe_missed_beacon_host_int_trig_rx_data_ops: ref;

axiom rxpipe_missed_beacon_host_int_trig_rx_data_ops == $sub.ref(0, 345528);

const rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops: ref;

axiom rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops == $sub.ref(0, 346776);

const rxpipe_descr_host_int_trig_rx_data_ops: ref;

axiom rxpipe_descr_host_int_trig_rx_data_ops == $sub.ref(0, 348024);

const rxpipe_rx_prep_beacon_drop_ops: ref;

axiom rxpipe_rx_prep_beacon_drop_ops == $sub.ref(0, 349272);

const ps_upsd_utilization_ops: ref;

axiom ps_upsd_utilization_ops == $sub.ref(0, 350520);

const ps_pspoll_utilization_ops: ref;

axiom ps_pspoll_utilization_ops == $sub.ref(0, 351768);

const ps_pspoll_max_apturn_ops: ref;

axiom ps_pspoll_max_apturn_ops == $sub.ref(0, 353016);

const ps_upsd_max_apturn_ops: ref;

axiom ps_upsd_max_apturn_ops == $sub.ref(0, 354264);

const ps_upsd_max_sptime_ops: ref;

axiom ps_upsd_max_sptime_ops == $sub.ref(0, 355512);

const ps_upsd_timeouts_ops: ref;

axiom ps_upsd_timeouts_ops == $sub.ref(0, 356760);

const ps_pspoll_timeouts_ops: ref;

axiom ps_pspoll_timeouts_ops == $sub.ref(0, 358008);

const event_tx_stuck_ops: ref;

axiom event_tx_stuck_ops == $sub.ref(0, 359256);

const event_phy_transmit_error_ops: ref;

axiom event_phy_transmit_error_ops == $sub.ref(0, 360504);

const event_oom_late_ops: ref;

axiom event_oom_late_ops == $sub.ref(0, 361752);

const event_rx_pool_ops: ref;

axiom event_rx_pool_ops == $sub.ref(0, 363000);

const event_rx_mem_empty_ops: ref;

axiom event_rx_mem_empty_ops == $sub.ref(0, 364248);

const event_rx_mismatch_ops: ref;

axiom event_rx_mismatch_ops == $sub.ref(0, 365496);

const event_calibration_ops: ref;

axiom event_calibration_ops == $sub.ref(0, 366744);

const event_heart_beat_ops: ref;

axiom event_heart_beat_ops == $sub.ref(0, 367992);

const aes_decrypt_interrupt_ops: ref;

axiom aes_decrypt_interrupt_ops == $sub.ref(0, 369240);

const aes_encrypt_interrupt_ops: ref;

axiom aes_encrypt_interrupt_ops == $sub.ref(0, 370488);

const aes_decrypt_packets_ops: ref;

axiom aes_decrypt_packets_ops == $sub.ref(0, 371736);

const aes_encrypt_packets_ops: ref;

axiom aes_encrypt_packets_ops == $sub.ref(0, 372984);

const aes_decrypt_fail_ops: ref;

axiom aes_decrypt_fail_ops == $sub.ref(0, 374232);

const aes_encrypt_fail_ops: ref;

axiom aes_encrypt_fail_ops == $sub.ref(0, 375480);

const mic_calc_failure_ops: ref;

axiom mic_calc_failure_ops == $sub.ref(0, 376728);

const mic_rx_pkts_ops: ref;

axiom mic_rx_pkts_ops == $sub.ref(0, 377976);

const pwr_rcvd_awake_beacons_ops: ref;

axiom pwr_rcvd_awake_beacons_ops == $sub.ref(0, 379224);

const pwr_fix_tsf_ps_ops: ref;

axiom pwr_fix_tsf_ps_ops == $sub.ref(0, 380472);

const pwr_disable_ps_ops: ref;

axiom pwr_disable_ps_ops == $sub.ref(0, 381720);

const pwr_enable_ps_ops: ref;

axiom pwr_enable_ps_ops == $sub.ref(0, 382968);

const pwr_power_save_off_ops: ref;

axiom pwr_power_save_off_ops == $sub.ref(0, 384216);

const pwr_rcvd_beacons_ops: ref;

axiom pwr_rcvd_beacons_ops == $sub.ref(0, 385464);

const pwr_tx_without_ps_ops: ref;

axiom pwr_tx_without_ps_ops == $sub.ref(0, 386712);

const pwr_tx_with_ps_ops: ref;

axiom pwr_tx_with_ps_ops == $sub.ref(0, 387960);

const pwr_wake_on_timer_exp_ops: ref;

axiom pwr_wake_on_timer_exp_ops == $sub.ref(0, 389208);

const pwr_wake_on_host_ops: ref;

axiom pwr_wake_on_host_ops == $sub.ref(0, 390456);

const pwr_missing_bcns_ops: ref;

axiom pwr_missing_bcns_ops == $sub.ref(0, 391704);

const pwr_elp_enter_ops: ref;

axiom pwr_elp_enter_ops == $sub.ref(0, 392952);

const pwr_ps_enter_ops: ref;

axiom pwr_ps_enter_ops == $sub.ref(0, 394200);

const wep_interrupt_ops: ref;

axiom wep_interrupt_ops == $sub.ref(0, 395448);

const wep_packets_ops: ref;

axiom wep_packets_ops == $sub.ref(0, 396696);

const wep_decrypt_fail_ops: ref;

axiom wep_decrypt_fail_ops == $sub.ref(0, 397944);

const wep_key_not_found_ops: ref;

axiom wep_key_not_found_ops == $sub.ref(0, 399192);

const wep_default_key_count_ops: ref;

axiom wep_default_key_count_ops == $sub.ref(0, 400440);

const wep_addr_key_count_ops: ref;

axiom wep_addr_key_count_ops == $sub.ref(0, 401688);

const isr_low_rssi_ops: ref;

axiom isr_low_rssi_ops == $sub.ref(0, 402936);

const isr_wakeups_ops: ref;

axiom isr_wakeups_ops == $sub.ref(0, 404184);

const isr_pci_pm_ops: ref;

axiom isr_pci_pm_ops == $sub.ref(0, 405432);

const isr_host_acknowledges_ops: ref;

axiom isr_host_acknowledges_ops == $sub.ref(0, 406680);

const isr_hw_pm_mode_changes_ops: ref;

axiom isr_hw_pm_mode_changes_ops == $sub.ref(0, 407928);

const isr_rx_procs_ops: ref;

axiom isr_rx_procs_ops == $sub.ref(0, 409176);

const isr_commands_ops: ref;

axiom isr_commands_ops == $sub.ref(0, 410424);

const isr_tx_exch_complete_ops: ref;

axiom isr_tx_exch_complete_ops == $sub.ref(0, 411672);

const isr_dma1_done_ops: ref;

axiom isr_dma1_done_ops == $sub.ref(0, 412920);

const isr_dma0_done_ops: ref;

axiom isr_dma0_done_ops == $sub.ref(0, 414168);

const isr_decrypt_done_ops: ref;

axiom isr_decrypt_done_ops == $sub.ref(0, 415416);

const isr_tx_procs_ops: ref;

axiom isr_tx_procs_ops == $sub.ref(0, 416664);

const isr_irqs_ops: ref;

axiom isr_irqs_ops == $sub.ref(0, 417912);

const isr_rx_rdys_ops: ref;

axiom isr_rx_rdys_ops == $sub.ref(0, 419160);

const isr_rx_mem_overflow_ops: ref;

axiom isr_rx_mem_overflow_ops == $sub.ref(0, 420408);

const isr_rx_headers_ops: ref;

axiom isr_rx_headers_ops == $sub.ref(0, 421656);

const isr_fiqs_ops: ref;

axiom isr_fiqs_ops == $sub.ref(0, 422904);

const isr_cmd_cmplt_ops: ref;

axiom isr_cmd_cmplt_ops == $sub.ref(0, 424152);

const dma_tx_errors_ops: ref;

axiom dma_tx_errors_ops == $sub.ref(0, 425400);

const dma_tx_requested_ops: ref;

axiom dma_tx_requested_ops == $sub.ref(0, 426648);

const dma_rx_errors_ops: ref;

axiom dma_rx_errors_ops == $sub.ref(0, 427896);

const dma_rx_requested_ops: ref;

axiom dma_rx_requested_ops == $sub.ref(0, 429144);

const rx_reset_counter_ops: ref;

axiom rx_reset_counter_ops == $sub.ref(0, 430392);

const rx_path_reset_ops: ref;

axiom rx_path_reset_ops == $sub.ref(0, 431640);

const rx_xfr_hint_trig_ops: ref;

axiom rx_xfr_hint_trig_ops == $sub.ref(0, 432888);

const rx_fcs_err_ops: ref;

axiom rx_fcs_err_ops == $sub.ref(0, 434136);

const rx_dropped_ops: ref;

axiom rx_dropped_ops == $sub.ref(0, 435384);

const rx_hw_stuck_ops: ref;

axiom rx_hw_stuck_ops == $sub.ref(0, 436632);

const rx_hdr_overflow_ops: ref;

axiom rx_hdr_overflow_ops == $sub.ref(0, 437880);

const rx_out_of_mem_ops: ref;

axiom rx_out_of_mem_ops == $sub.ref(0, 439128);

const tx_internal_desc_overflow_ops: ref;

axiom tx_internal_desc_overflow_ops == $sub.ref(0, 440376);

const {:count 2} wl12xx_id_table: ref;

axiom wl12xx_id_table == $sub.ref(0, 441464);

const wl12xx_driver: ref;

axiom wl12xx_driver == $sub.ref(0, 442664);

const {:count 6} wl12xx_ptable: ref;

axiom wl12xx_ptable == $sub.ref(0, 443880);

const wl12xx_ops: ref;

axiom wl12xx_ops == $sub.ref(0, 445296);

const {:count 9} wl12xx_tcxoclock_table: ref;

axiom wl12xx_tcxoclock_table == $sub.ref(0, 446392);

const tcxo_param: ref;

axiom tcxo_param == $sub.ref(0, 447424);

const {:count 7} wl12xx_refclock_table: ref;

axiom wl12xx_refclock_table == $sub.ref(0, 448504);

const fref_param: ref;

axiom fref_param == $sub.ref(0, 449536);

const wl12xx_default_priv_conf: ref;

axiom wl12xx_default_priv_conf == $sub.ref(0, 450593);

const wl12xx_conf: ref;

axiom wl12xx_conf == $sub.ref(0, 452609);

const wl12xx_ht_cap: ref;

axiom wl12xx_ht_cap == $sub.ref(0, 453655);

const {:count 22} wl12xx_rate_to_idx_5ghz: ref;

axiom wl12xx_rate_to_idx_5ghz == $sub.ref(0, 454701);

const {:count 22} wl12xx_rate_to_idx_2ghz: ref;

axiom wl12xx_rate_to_idx_2ghz == $sub.ref(0, 455747);

const {:count 2} wl12xx_band_rate_to_idx: ref;

axiom wl12xx_band_rate_to_idx == $sub.ref(0, 456787);

const {:count 2} wl12xx_iface_limits: ref;

axiom wl12xx_iface_limits == $sub.ref(0, 457819);

const wl12xx_iface_combinations: ref;

axiom wl12xx_iface_combinations == $sub.ref(0, 458867);

const {:count 13} wl12xx_rtable: ref;

axiom wl12xx_rtable == $sub.ref(0, 459943);

const wl12xx_debug_level: ref;

axiom wl12xx_debug_level == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 460974);

const {:count 26} .str.20: ref;

axiom .str.20 == $sub.ref(0, 462024);

const {:count 216} .str.2: ref;

axiom .str.2 == $sub.ref(0, 463264);

const {:count 28} .str.21: ref;

axiom .str.21 == $sub.ref(0, 464316);

const {:count 58} .str.22: ref;

axiom .str.22 == $sub.ref(0, 465398);

const {:count 28} .str.119: ref;

axiom .str.119 == $sub.ref(0, 466450);

const {:count 217} .str.103: ref;

axiom .str.103 == $sub.ref(0, 467691);

const {:count 32} .str.120: ref;

axiom .str.120 == $sub.ref(0, 468747);

const {:count 67} .str.121: ref;

axiom .str.121 == $sub.ref(0, 469838);

const {:count 59} .str.122: ref;

axiom .str.122 == $sub.ref(0, 470921);

const {:count 29} .str.116: ref;

axiom .str.116 == $sub.ref(0, 471974);

const {:count 33} .str.117: ref;

axiom .str.117 == $sub.ref(0, 473031);

const {:count 54} .str.118: ref;

axiom .str.118 == $sub.ref(0, 474109);

const {:count 30} .str.108: ref;

axiom .str.108 == $sub.ref(0, 475163);

const {:count 36} .str.109: ref;

axiom .str.109 == $sub.ref(0, 476223);

const {:count 26} .str.110: ref;

axiom .str.110 == $sub.ref(0, 477273);

const {:count 47} .str.111: ref;

axiom .str.111 == $sub.ref(0, 478344);

const {:count 57} .str.112: ref;

axiom .str.112 == $sub.ref(0, 479425);

const {:count 55} .str.113: ref;

axiom .str.113 == $sub.ref(0, 480504);

const {:count 19} .str.114: ref;

axiom .str.114 == $sub.ref(0, 481547);

const {:count 2} .str.4: ref;

axiom .str.4 == $sub.ref(0, 482573);

const {:count 46} .str.115: ref;

axiom .str.115 == $sub.ref(0, 483643);

const {:count 17} .str.104: ref;

axiom .str.104 == $sub.ref(0, 484684);

const {:count 23} .str.105: ref;

axiom .str.105 == $sub.ref(0, 485731);

const {:count 41} .str.106: ref;

axiom .str.106 == $sub.ref(0, 486796);

const {:count 39} .str.107: ref;

axiom .str.107 == $sub.ref(0, 487859);

const {:count 50} .str.179: ref;

axiom .str.179 == $sub.ref(0, 488933);

const {:count 55} .str.180: ref;

axiom .str.180 == $sub.ref(0, 490012);

const {:count 17} .str.181: ref;

axiom .str.181 == $sub.ref(0, 491053);

const {:count 15} .str.182: ref;

axiom .str.182 == $sub.ref(0, 492092);

const {:count 32} .str.183: ref;

axiom .str.183 == $sub.ref(0, 493148);

const {:count 25} .str.184: ref;

axiom .str.184 == $sub.ref(0, 494197);

const {:count 34} .str.185: ref;

axiom .str.185 == $sub.ref(0, 495255);

const {:count 31} .str.186: ref;

axiom .str.186 == $sub.ref(0, 496310);

const {:count 43} .str.187: ref;

axiom .str.187 == $sub.ref(0, 497377);

const {:count 25} .str.188: ref;

axiom .str.188 == $sub.ref(0, 498426);

const {:count 9} .str.24: ref;

axiom .str.24 == $sub.ref(0, 499459);

const {:count 26} .str.25: ref;

axiom .str.25 == $sub.ref(0, 500509);

const {:count 14} .str.26: ref;

axiom .str.26 == $sub.ref(0, 501547);

const {:count 16} .str.27: ref;

axiom .str.27 == $sub.ref(0, 502587);

const {:count 12} .str.28: ref;

axiom .str.28 == $sub.ref(0, 503623);

const {:count 11} .str.29: ref;

axiom .str.29 == $sub.ref(0, 504658);

const {:count 11} .str.30: ref;

axiom .str.30 == $sub.ref(0, 505693);

const {:count 17} .str.31: ref;

axiom .str.31 == $sub.ref(0, 506734);

const {:count 14} .str.32: ref;

axiom .str.32 == $sub.ref(0, 507772);

const {:count 17} .str.33: ref;

axiom .str.33 == $sub.ref(0, 508813);

const {:count 17} .str.34: ref;

axiom .str.34 == $sub.ref(0, 509854);

const {:count 14} .str.35: ref;

axiom .str.35 == $sub.ref(0, 510892);

const {:count 17} .str.36: ref;

axiom .str.36 == $sub.ref(0, 511933);

const {:count 14} .str.37: ref;

axiom .str.37 == $sub.ref(0, 512971);

const {:count 14} .str.38: ref;

axiom .str.38 == $sub.ref(0, 514009);

const {:count 9} .str.39: ref;

axiom .str.39 == $sub.ref(0, 515042);

const {:count 15} .str.40: ref;

axiom .str.40 == $sub.ref(0, 516081);

const {:count 20} .str.41: ref;

axiom .str.41 == $sub.ref(0, 517125);

const {:count 12} .str.42: ref;

axiom .str.42 == $sub.ref(0, 518161);

const {:count 9} .str.43: ref;

axiom .str.43 == $sub.ref(0, 519194);

const {:count 13} .str.44: ref;

axiom .str.44 == $sub.ref(0, 520231);

const {:count 17} .str.45: ref;

axiom .str.45 == $sub.ref(0, 521272);

const {:count 14} .str.46: ref;

axiom .str.46 == $sub.ref(0, 522310);

const {:count 14} .str.47: ref;

axiom .str.47 == $sub.ref(0, 523348);

const {:count 21} .str.48: ref;

axiom .str.48 == $sub.ref(0, 524393);

const {:count 13} .str.49: ref;

axiom .str.49 == $sub.ref(0, 525430);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 526467);

const {:count 23} .str.51: ref;

axiom .str.51 == $sub.ref(0, 527514);

const {:count 22} .str.52: ref;

axiom .str.52 == $sub.ref(0, 528560);

const {:count 11} .str.53: ref;

axiom .str.53 == $sub.ref(0, 529595);

const {:count 12} .str.54: ref;

axiom .str.54 == $sub.ref(0, 530631);

const {:count 13} .str.55: ref;

axiom .str.55 == $sub.ref(0, 531668);

const {:count 19} .str.56: ref;

axiom .str.56 == $sub.ref(0, 532711);

const {:count 22} .str.57: ref;

axiom .str.57 == $sub.ref(0, 533757);

const {:count 18} .str.58: ref;

axiom .str.58 == $sub.ref(0, 534799);

const {:count 17} .str.59: ref;

axiom .str.59 == $sub.ref(0, 535840);

const {:count 12} .str.60: ref;

axiom .str.60 == $sub.ref(0, 536876);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 537914);

const {:count 13} .str.62: ref;

axiom .str.62 == $sub.ref(0, 538951);

const {:count 14} .str.63: ref;

axiom .str.63 == $sub.ref(0, 539989);

const {:count 17} .str.64: ref;

axiom .str.64 == $sub.ref(0, 541030);

const {:count 17} .str.65: ref;

axiom .str.65 == $sub.ref(0, 542071);

const {:count 22} .str.66: ref;

axiom .str.66 == $sub.ref(0, 543117);

const {:count 15} .str.67: ref;

axiom .str.67 == $sub.ref(0, 544156);

const {:count 18} .str.68: ref;

axiom .str.68 == $sub.ref(0, 545198);

const {:count 17} .str.69: ref;

axiom .str.69 == $sub.ref(0, 546239);

const {:count 19} .str.70: ref;

axiom .str.70 == $sub.ref(0, 547282);

const {:count 14} .str.71: ref;

axiom .str.71 == $sub.ref(0, 548320);

const {:count 15} .str.72: ref;

axiom .str.72 == $sub.ref(0, 549359);

const {:count 15} .str.73: ref;

axiom .str.73 == $sub.ref(0, 550398);

const {:count 23} .str.74: ref;

axiom .str.74 == $sub.ref(0, 551445);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 552481);

const {:count 17} .str.76: ref;

axiom .str.76 == $sub.ref(0, 553522);

const {:count 17} .str.77: ref;

axiom .str.77 == $sub.ref(0, 554563);

const {:count 17} .str.78: ref;

axiom .str.78 == $sub.ref(0, 555604);

const {:count 20} .str.79: ref;

axiom .str.79 == $sub.ref(0, 556648);

const {:count 20} .str.80: ref;

axiom .str.80 == $sub.ref(0, 557692);

const {:count 22} .str.81: ref;

axiom .str.81 == $sub.ref(0, 558738);

const {:count 22} .str.82: ref;

axiom .str.82 == $sub.ref(0, 559784);

const {:count 17} .str.83: ref;

axiom .str.83 == $sub.ref(0, 560825);

const {:count 18} .str.84: ref;

axiom .str.84 == $sub.ref(0, 561867);

const {:count 18} .str.85: ref;

axiom .str.85 == $sub.ref(0, 562909);

const {:count 19} .str.86: ref;

axiom .str.86 == $sub.ref(0, 563952);

const {:count 14} .str.87: ref;

axiom .str.87 == $sub.ref(0, 564990);

const {:count 15} .str.88: ref;

axiom .str.88 == $sub.ref(0, 566029);

const {:count 25} .str.89: ref;

axiom .str.89 == $sub.ref(0, 567078);

const {:count 15} .str.90: ref;

axiom .str.90 == $sub.ref(0, 568117);

const {:count 19} .str.91: ref;

axiom .str.91 == $sub.ref(0, 569160);

const {:count 17} .str.92: ref;

axiom .str.92 == $sub.ref(0, 570201);

const {:count 19} .str.93: ref;

axiom .str.93 == $sub.ref(0, 571244);

const {:count 19} .str.94: ref;

axiom .str.94 == $sub.ref(0, 572287);

const {:count 21} .str.95: ref;

axiom .str.95 == $sub.ref(0, 573332);

const {:count 22} .str.96: ref;

axiom .str.96 == $sub.ref(0, 574378);

const {:count 20} .str.97: ref;

axiom .str.97 == $sub.ref(0, 575422);

const {:count 27} .str.98: ref;

axiom .str.98 == $sub.ref(0, 576473);

const {:count 35} .str.99: ref;

axiom .str.99 == $sub.ref(0, 577532);

const {:count 49} .str.100: ref;

axiom .str.100 == $sub.ref(0, 578605);

const {:count 43} .str.101: ref;

axiom .str.101 == $sub.ref(0, 579672);

const {:count 36} .str.102: ref;

axiom .str.102 == $sub.ref(0, 580732);

const {:count 128} .str.128: ref;

axiom .str.128 == $sub.ref(0, 581884);

const {:count 19} .str.145: ref;

axiom .str.145 == $sub.ref(0, 582927);

const {:count 217} .str.146: ref;

axiom .str.146 == $sub.ref(0, 584168);

const {:count 54} .str.147: ref;

axiom .str.147 == $sub.ref(0, 585246);

const {:count 3} .str.148: ref;

axiom .str.148 == $sub.ref(0, 586273);

const {:count 7} .str.149: ref;

axiom .str.149 == $sub.ref(0, 587304);

const {:count 49} .str.163: ref;

axiom .str.163 == $sub.ref(0, 588377);

const {:count 54} .str.164: ref;

axiom .str.164 == $sub.ref(0, 589455);

const {:count 27} .str.1: ref;

axiom .str.1 == $sub.ref(0, 590506);

const {:count 44} .str.3: ref;

axiom .str.3 == $sub.ref(0, 591574);

const {:count 61} .str.5: ref;

axiom .str.5 == $sub.ref(0, 592659);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 593706);

const {:count 40} .str.17: ref;

axiom .str.17 == $sub.ref(0, 594770);

const {:count 50} .str.18: ref;

axiom .str.18 == $sub.ref(0, 595844);

const {:count 51} .str.6: ref;

axiom .str.6 == $sub.ref(0, 596919);

const {:count 52} .str.7: ref;

axiom .str.7 == $sub.ref(0, 597995);

const {:count 50} .str.8: ref;

axiom .str.8 == $sub.ref(0, 599069);

const {:count 25} .str.9: ref;

axiom .str.9 == $sub.ref(0, 600118);

const {:count 47} .str.10: ref;

axiom .str.10 == $sub.ref(0, 601189);

const {:count 22} .str.12: ref;

axiom .str.12 == $sub.ref(0, 602235);

const {:count 5} .str.13: ref;

axiom .str.13 == $sub.ref(0, 603264);

const {:count 7} .str.11: ref;

axiom .str.11 == $sub.ref(0, 604295);

const {:count 54} .str.23: ref;

axiom .str.23 == $sub.ref(0, 605373);

const {:count 23} .str.19: ref;

axiom .str.19 == $sub.ref(0, 606420);

const {:count 51} .str.14: ref;

axiom .str.14 == $sub.ref(0, 607495);

const {:count 25} .str.15: ref;

axiom .str.15 == $sub.ref(0, 608544);

const {:count 28} .str.173: ref;

axiom .str.173 == $sub.ref(0, 609596);

const {:count 66} .str.174: ref;

axiom .str.174 == $sub.ref(0, 610686);

const {:count 64} .str.175: ref;

axiom .str.175 == $sub.ref(0, 611774);

const {:count 30} .str.123: ref;

axiom .str.123 == $sub.ref(0, 612828);

const {:count 218} .str.124: ref;

axiom .str.124 == $sub.ref(0, 614070);

const {:count 27} .str.125: ref;

axiom .str.125 == $sub.ref(0, 615121);

const {:count 22} .str.126: ref;

axiom .str.126 == $sub.ref(0, 616167);

const {:count 51} .str.127: ref;

axiom .str.127 == $sub.ref(0, 617242);

const {:count 18} .str.170: ref;

axiom .str.170 == $sub.ref(0, 618284);

const {:count 32} .str.171: ref;

axiom .str.171 == $sub.ref(0, 619340);

const {:count 22} .str.172: ref;

axiom .str.172 == $sub.ref(0, 620386);

const {:count 16} .str.161: ref;

axiom .str.161 == $sub.ref(0, 621426);

const {:count 19} .str.162: ref;

axiom .str.162 == $sub.ref(0, 622469);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.167: ref;

axiom .str.167 == $sub.ref(0, 623516);

const {:count 34} .str.168: ref;

axiom .str.168 == $sub.ref(0, 624574);

const {:count 39} .str.169: ref;

axiom .str.169 == $sub.ref(0, 625637);

const {:count 16} .str.165: ref;

axiom .str.165 == $sub.ref(0, 626677);

const {:count 21} .str.166: ref;

axiom .str.166 == $sub.ref(0, 627722);

const {:count 63} .str.150: ref;

axiom .str.150 == $sub.ref(0, 628809);

const {:count 35} .str.151: ref;

axiom .str.151 == $sub.ref(0, 629868);

const {:count 35} .str.152: ref;

axiom .str.152 == $sub.ref(0, 630927);

const {:count 21} .str.153: ref;

axiom .str.153 == $sub.ref(0, 631972);

const {:count 34} .str.154: ref;

axiom .str.154 == $sub.ref(0, 633030);

const {:count 36} .str.155: ref;

axiom .str.155 == $sub.ref(0, 634090);

const {:count 34} .str.156: ref;

axiom .str.156 == $sub.ref(0, 635148);

const {:count 36} .str.157: ref;

axiom .str.157 == $sub.ref(0, 636208);

const {:count 35} .str.158: ref;

axiom .str.158 == $sub.ref(0, 637267);

const {:count 35} .str.159: ref;

axiom .str.159 == $sub.ref(0, 638326);

const {:count 44} .str.160: ref;

axiom .str.160 == $sub.ref(0, 639394);

const {:count 5} .str.130: ref;

axiom .str.130 == $sub.ref(0, 640423);

const {:count 9} .str.131: ref;

axiom .str.131 == $sub.ref(0, 641456);

const {:count 60} .str.129: ref;

axiom .str.129 == $sub.ref(0, 642540);

const {:count 5} .str.132: ref;

axiom .str.132 == $sub.ref(0, 643569);

const {:count 3} .str.133: ref;

axiom .str.133 == $sub.ref(0, 644596);

const {:count 4} .str.134: ref;

axiom .str.134 == $sub.ref(0, 645624);

const {:count 5} .str.135: ref;

axiom .str.135 == $sub.ref(0, 646653);

const {:count 6} .str.136: ref;

axiom .str.136 == $sub.ref(0, 647683);

const {:count 3} .str.137: ref;

axiom .str.137 == $sub.ref(0, 648710);

const {:count 46} .str.138: ref;

axiom .str.138 == $sub.ref(0, 649780);

const {:count 57} .str.139: ref;

axiom .str.139 == $sub.ref(0, 650861);

const {:count 7} .str.140: ref;

axiom .str.140 == $sub.ref(0, 651892);

const {:count 7} .str.141: ref;

axiom .str.141 == $sub.ref(0, 652923);

const {:count 5} .str.142: ref;

axiom .str.142 == $sub.ref(0, 653952);

const {:count 5} .str.143: ref;

axiom .str.143 == $sub.ref(0, 654981);

const {:count 46} .str.144: ref;

axiom .str.144 == $sub.ref(0, 656051);

const {:count 14} .str.177: ref;

axiom .str.177 == $sub.ref(0, 657089);

const {:count 38} .str.176: ref;

axiom .str.176 == $sub.ref(0, 658151);

const {:count 4} .str.178: ref;

axiom .str.178 == $sub.ref(0, 659179);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 660211);

const {:count 3} .str.1.392: ref;

axiom .str.1.392 == $sub.ref(0, 661238);

const {:count 14} .str.393: ref;

axiom .str.393 == $sub.ref(0, 662276);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 663304);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 664336);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 665368);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 666400);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const wl12xx_setup: ref;

axiom wl12xx_setup == $sub.ref(0, 667432);

procedure wl12xx_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wl12xx_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $i47: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(32, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p7 := dev_get_platdata($p6);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10672, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, wl12xx_rtable);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10720, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 16);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10724, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 8);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10728, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 12);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10729, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 8);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11144, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, wl12xx_iface_combinations);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11152, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11004, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 2);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10736, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, wl12xx_band_rate_to_idx);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10744, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 22);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10745, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 8);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10800, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 84);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10808, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(16, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 364);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10416, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} wlcore_set_ht_cap($p0, 0, wl12xx_ht_cap);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} wlcore_set_ht_cap($p0, 1, wl12xx_ht_cap);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} wl12xx_conf_init($p0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p25 := $M.1;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p48 := $M.1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i49 := strcmp($p48, .str.132);
    call {:si_unique_call 13} {:cexpr "tmp___5"} boogie_si_record_i32($i49);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i50 == 1);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p52 := $M.1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i53 := strcmp($p52, .str.133);
    call {:si_unique_call 16} {:cexpr "tmp___4"} boogie_si_record_i32($i53);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p56 := $M.1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i57 := strcmp($p56, .str.134);
    call {:si_unique_call 18} {:cexpr "tmp___3"} boogie_si_record_i32($i57);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p60 := $M.1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i61 := strcmp($p60, .str.135);
    call {:si_unique_call 20} {:cexpr "tmp___2"} boogie_si_record_i32($i61);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p64 := $M.1;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i65 := strcmp($p64, .str.136);
    call {:si_unique_call 22} {:cexpr "tmp___1"} boogie_si_record_i32($i65);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p68 := $M.1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i69 := strcmp($p68, .str.137);
    call {:si_unique_call 24} {:cexpr "tmp___0"} boogie_si_record_i32($i69);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p72 := $M.1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_78 := printk.ref.ref(.str.138, $p72);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p74 := $M.2;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p92 := $M.2;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p129 := kmalloc(8, 208);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $p129);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i134, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb62:
    assume $i135 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 12);
    goto $bb5;

  $bb35:
    assume $i94 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p95 := $M.2;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i96 := strcmp($p95, .str.132);
    call {:si_unique_call 30} {:cexpr "tmp___13"} boogie_si_record_i32($i96);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i97 == 1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p99 := $M.2;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i100 := strcmp($p99, .str.133);
    call {:si_unique_call 32} {:cexpr "tmp___12"} boogie_si_record_i32($i100);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i101 == 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p103 := $M.2;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i104 := strcmp($p103, .str.135);
    call {:si_unique_call 34} {:cexpr "tmp___11"} boogie_si_record_i32($i104);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i105 == 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p107 := $M.2;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i108 := strcmp($p107, .str.137);
    call {:si_unique_call 36} {:cexpr "tmp___10"} boogie_si_record_i32($i108);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i109 == 1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p111 := $M.2;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i112 := strcmp($p111, .str.140);
    call {:si_unique_call 38} {:cexpr "tmp___9"} boogie_si_record_i32($i112);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i113 == 1);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p115 := $M.2;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i116 := strcmp($p115, .str.141);
    call {:si_unique_call 40} {:cexpr "tmp___8"} boogie_si_record_i32($i116);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i117 == 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p119 := $M.2;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i120 := strcmp($p119, .str.142);
    call {:si_unique_call 42} {:cexpr "tmp___7"} boogie_si_record_i32($i120);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i121 == 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p123 := $M.2;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i124 := strcmp($p123, .str.143);
    call {:si_unique_call 44} {:cexpr "tmp___6"} boogie_si_record_i32($i124);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i125 == 1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p127 := $M.2;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_80 := printk.ref.ref(.str.144, $p127);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i125 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, 7);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i121 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 6);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i117 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 5);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i113 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 4);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i109 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 3);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i105 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 2);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i101 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i97 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i82 := wl12xx_get_clock_idx(wl12xx_tcxoclock_table, $i81, 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_79 := printk.ref.i32(.str.139, $i88);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i47 := $i91;
    goto $bb5;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 3);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i66 == 1;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 4);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 2);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 5);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i50 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i33 := wl12xx_get_clock_idx(wl12xx_refclock_table, $i29, $i32);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i37 == 1;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p43 := (if $i42 == 1 then .str.130 else .str.131);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_77 := printk.ref.i32.ref(.str.129, $i39, $p43);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb5;
}



const wl12xx_identify_chip: ref;

axiom wl12xx_identify_chip == $sub.ref(0, 668464);

procedure wl12xx_identify_chip($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl12xx_identify_chip($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p102: ref;
  var $i103: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i105: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 84082945);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 84082961);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 84082961);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_82 := printk.ref.i32(.str.160, $i103);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32(0, 19);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $r := $i105;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 4);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 49} {:cexpr "tmp___2"} boogie_si_record_i64($i73);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10680, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, .str.157);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10688, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, .str.158);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10696, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, .str.159);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, 5382);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} wlcore_set_min_fw_ver($p0, 7, 3, 10, $sub.i32(0, 1), 133, 5, 7, $sub.i32(0, 1), 42);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1468, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 256);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1464, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, 33554432);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10704, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 9);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10705, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 10);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10706, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 2);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10707, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 3);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10708, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 23);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10408, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 3);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i105 := 0;
    goto $bb31;

  $bb24:
    assume $i74 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p75, .str);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str.153);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p77, .str.146);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p78, .str.156);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.7, $p80);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 694);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p80, $i83);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p84, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.8, $p85);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 61} {:cexpr "tmp___1"} boogie_si_record_i64($i89);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i90 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} __dynamic_pr_debug.ref.ref.i32($p2, .str.156, $i93);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 84082945);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 67305745);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 67305745);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 51} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 5410);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10680, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, .str.155);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10688, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, .str.151);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10696, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, .str.152);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(898, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 58} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p64, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(0, 1)), 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10656, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 392)), $mul.ref(104, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, wl127x_prepare_read);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} wlcore_set_min_fw_ver($p0, 6, 3, 10, $sub.i32(0, 1), 133, 5, 7, $sub.i32(0, 1), 42);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.153);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p38, .str.146);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.154);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.7, $p41);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 669);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p41, $i44);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p45, 0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.8, $p46);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 56} {:cexpr "tmp"} boogie_si_record_i64($i50);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} __dynamic_pr_debug.ref.ref.i32($p1, .str.154, $i54);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, 67305729);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_81 := printk.ref.i32(.str.150, $i15);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 5410);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10688, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, .str.151);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10696, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, .str.152);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(898, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 53} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p25, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(0, 1)), 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10656, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 392)), $mul.ref(104, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, wl127x_prepare_read);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} wlcore_set_min_fw_ver($p0, 6, 3, 10, $sub.i32(0, 1), 133, 5, 7, $sub.i32(0, 1), 42);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const wl12xx_boot: ref;

axiom wl12xx_boot == $sub.ref(0, 669496);

procedure wl12xx_boot($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.22, $M.9, $CurrAddr;



implementation wl12xx_boot($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i1 := wl12xx_pre_boot($p0);
    call {:si_unique_call 66} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i4 := wlcore_boot_upload_nvs($p0);
    call {:si_unique_call 68} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i6 := wl12xx_pre_upload($p0);
    call {:si_unique_call 70} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i8 := wlcore_boot_upload_firmware($p0);
    call {:si_unique_call 72} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1672, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $sub.i32(0, 59849727));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1676, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1048576);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i12 := wlcore_boot_run_firmware($p0);
    call {:si_unique_call 74} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i14 := wl12xx_enable_interrupts($p0);
    call {:si_unique_call 76} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i3 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i3 := $i12;
    goto $bb3;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i3 := $i8;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const wl12xx_plt_init: ref;

axiom wl12xx_plt_init == $sub.ref(0, 670528);

procedure wl12xx_plt_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.42, $M.22, $M.9, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.50, $M.41, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.51, $M.52, $M.53, $M.54, $M.55, assertsPassed;



implementation wl12xx_plt_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i22: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i14: i32;
  var $p33: ref;
  var $p34: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10656, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 77} $i5 := devirtbounce($p4, $p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 78} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10656, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 392)), $mul.ref(136, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 79} $i12 := devirtbounce($p11, $p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 80} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i18 := wl1271_acx_init_mem_config($p0);
    call {:si_unique_call 85} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i20 := wl12xx_acx_mem_cfg($p0);
    call {:si_unique_call 87} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i23 := wl1271_cmd_data_path($p0, 1);
    call {:si_unique_call 90} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i25 := wl1271_acx_sleep_auth($p0, 0);
    call {:si_unique_call 92} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i27 := wl1271_acx_pm_config($p0);
    call {:si_unique_call 94} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i22 := $i27;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(608, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} kfree($p31);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(608, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i14 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(160, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} ldv_mutex_unlock_12($p33);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} wlcore_disable_interrupts($p0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(160, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} ldv_mutex_lock_13($p34);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb17;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb17;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb17;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb7;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb7;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const wl12xx_trigger_cmd: ref;

axiom wl12xx_trigger_cmd == $sub.ref(0, 671560);

procedure wl12xx_trigger_cmd($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_trigger_cmd($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "wl12xx_trigger_cmd:arg:cmd_box_addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 96} {:cexpr "wl12xx_trigger_cmd:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i4 := wlcore_write($p0, $i1, $p2, $i3, 0);
    call {:si_unique_call 98} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i7 := wlcore_write_reg($p0, 5, 1);
    call {:si_unique_call 100} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const wl12xx_ack_event: ref;

axiom wl12xx_ack_event == $sub.ref(0, 672592);

procedure wl12xx_ack_event($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_ack_event($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i1 := wlcore_write_reg($p0, 5, 2);
    call {:si_unique_call 102} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl12xx_wait_for_event: ref;

axiom wl12xx_wait_for_event == $sub.ref(0, 673624);

procedure wl12xx_wait_for_event($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_wait_for_event($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 103} {:cexpr "wl12xx_wait_for_event:arg:event"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i6 := 134217728;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i8 := wlcore_cmd_wait_for_event_or_timeout($p0, $i6, $p2);
    call {:si_unique_call 105} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb11;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i6 := 32768;
    goto $bb9;
}



const wl12xx_process_mailbox_events: ref;

axiom wl12xx_process_mailbox_events == $sub.ref(0, 674656);

procedure wl12xx_process_mailbox_events($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation wl12xx_process_mailbox_events($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i16;
  var $i138: i64;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i16;
  var $i143: i64;
  var $i144: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1664, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 109} {:cexpr "vector"} boogie_si_record_i32($i8);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i11 := $xor.i32($i10, $sub.i32(0, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $i8);
    call {:si_unique_call 110} {:cexpr "vector"} boogie_si_record_i32($i12);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 32);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 112} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i12, 1024);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i12, 536870912);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i12, 268435456);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i12, 4194304);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i12, 262144);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i12, 1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i12, 1073741824);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i12, 131072);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i12, 2097152);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i12, 1048576);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i12, 67108864);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i12, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb55:
    assume $i144 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} wlcore_event_roc_complete($p0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i140 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i64($i142);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} wlcore_event_inactive_sta($p0, $i143);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i135 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(38, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i137 := $load.i16($M.0, $p136);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i64($i137);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} wlcore_event_max_tx_failure($p0, $i138);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i133 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} wlcore_event_dummy_packet($p0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i127 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(49, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} wlcore_event_channel_switch($p0, 255, $i131);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i117 == 1;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i120);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i122 := $shl.i64(1, $i121);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(45, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} wlcore_event_ba_rx_constraint($p0, $i122, $i125);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i113 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} wlcore_event_rssi_trigger($p0, $p115);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i111 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} wlcore_event_beacon_loss($p0, 255);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i105 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} wlcore_event_soft_gemini_sense($p0, $i109);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i99 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(31, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} wlcore_event_sched_scan_completed($p0, $i103);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i71 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 32);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 123} {:cexpr "tmp___4"} boogie_si_record_i64($i77);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} wlcore_scan_sched_scan_results($p0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i78 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.123);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p81, .str.124);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p82, .str.127);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.7, $p84);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 70);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p84, $i87);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p88, 0);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.8, $p89);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 125} {:cexpr "tmp___3"} boogie_si_record_i64($i93);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i94 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(31, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} __dynamic_pr_debug.ref.ref.i32($p3, .str.127, $i97);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 32);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 117} {:cexpr "tmp___2"} boogie_si_record_i64($i43);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1696, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i67 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1696, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} wl12xx_scan_completed($p0, $p69);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.123);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p47, .str.124);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p48, .str.126);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.7, $p50);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 61);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p50, $i53);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p54, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.8, $p55);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 119} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(31, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} __dynamic_pr_debug.ref.ref.i32($p2, .str.126, $i63);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.123);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p22, .str.124);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, .str.125);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.7, $p25);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 57);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p25, $i28);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p29, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.8, $p30);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 114} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i35 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __dynamic_pr_debug.ref.ref.i32($p1, .str.125, $i12);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const wl12xx_calc_tx_blocks: ref;

axiom wl12xx_calc_tx_blocks == $sub.ref(0, 675688);

procedure wl12xx_calc_tx_blocks($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_calc_tx_blocks($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "wl12xx_calc_tx_blocks:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 139} {:cexpr "wl12xx_calc_tx_blocks:arg:spare_blks"} boogie_si_record_i32($i2);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i3 := wlcore_calc_packet_alignment($p0, $i1);
    call {:si_unique_call 141} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 252);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i32($i5, 252);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i2);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const wl12xx_set_tx_desc_blocks: ref;

axiom wl12xx_set_tx_desc_blocks == $sub.ref(0, 676720);

procedure wl12xx_set_tx_desc_blocks($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_set_tx_desc_blocks($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} {:cexpr "wl12xx_set_tx_desc_blocks:arg:blks"} boogie_si_record_i32($i2);
    call {:si_unique_call 143} {:cexpr "wl12xx_set_tx_desc_blocks:arg:spare_blks"} boogie_si_record_i32($i3);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 84082961);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i3);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i12);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i2);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i16);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i2);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wl12xx_set_tx_desc_data_len: ref;

axiom wl12xx_set_tx_desc_data_len == $sub.ref(0, 677752);

procedure wl12xx_set_tx_desc_data_len($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl12xx_set_tx_desc_data_len($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i7 := wlcore_calc_packet_alignment($p0, $i6);
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 84082961);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i7, $i69);
    call {:si_unique_call 150} {:cexpr "pad"} boogie_si_record_i32($i70);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i70);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i76 := $shl.i32($i75, 10);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i73, $i76);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i78);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i32($i7, 2);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, $i81);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 64);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 152} {:cexpr "tmp___3"} boogie_si_record_i64($i88);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i89 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p90, .str);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p91, .str.173);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p92, .str.146);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p93, .str.175);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.7, $p95);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 1352);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p95, $i98);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p99, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.8, $p100);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 157} {:cexpr "tmp___2"} boogie_si_record_i64($i104);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i105 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32.i32($p4, .str.175, $i70, $i108, $i111, $i114, $i119);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i7);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i13, $i17);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i19);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i7, 2);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 64);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 149} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.173);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p35, .str.146);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p36, .str.174);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.7, $p38);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 1337);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p38, $i41);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p42, 0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.8, $p43);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 154} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i48 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32.i32($p3, .str.174, $i51, $i54, $i57, $i62, $i67);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const wl12xx_get_rx_buf_align: ref;

axiom wl12xx_get_rx_buf_align == $sub.ref(0, 678784);

procedure wl12xx_get_rx_buf_align($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_get_rx_buf_align($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "wl12xx_get_rx_buf_align:arg:rx_desc"} boogie_si_record_i32($i1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1048576);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const wl12xx_get_rx_packet_len: ref;

axiom wl12xx_get_rx_packet_len == $sub.ref(0, 679816);

procedure wl12xx_get_rx_packet_len($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_get_rx_packet_len($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "wl12xx_get_rx_packet_len:arg:data_len"} boogie_si_record_i32($i2);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i4 := $ule.i32($i2, 15);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i2);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i64($i7);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 16);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i10 := $ult.i64($i5, $i9);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i2, $i14);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 16);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const wl12xx_tx_delayed_compl: ref;

axiom wl12xx_tx_delayed_compl == $sub.ref(0, 680848);

procedure wl12xx_tx_delayed_compl($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_tx_delayed_compl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2536, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(6, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(628, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 255);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, $i8);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i11 := wlcore_tx_complete($p0);
    call {:si_unique_call 162} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const wl12xx_hw_init: ref;

axiom wl12xx_hw_init == $sub.ref(0, 681880);

procedure wl12xx_hw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr;



implementation wl12xx_hw_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i22: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 84082961);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i23 := wl1271_cmd_general_parms($p0);
    call {:si_unique_call 166} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i28 := wl1271_cmd_radio_parms($p0);
    call {:si_unique_call 173} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i30 := wl1271_cmd_ext_radio_parms($p0);
    call {:si_unique_call 175} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i22 := $i30;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb29:
    assume $i31 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i7 := $i30;
    goto $bb5;

  $bb26:
    assume $i29 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i7 := $i28;
    goto $bb5;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb5;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i5 := wl128x_cmd_general_parms($p0);
    call {:si_unique_call 164} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i11 := wl128x_cmd_radio_parms($p0);
    call {:si_unique_call 168} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 4);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i20 := wl1271_acx_host_if_cfg_bitmap($p0, $i19);
    call {:si_unique_call 171} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb19;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb5;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i18 := $or.i32(1, 8);
    call {:si_unique_call 169} {:cexpr "host_cfg_bitmap"} boogie_si_record_i32($i18);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb15;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb5;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;
}



const wl12xx_convert_fw_status: ref;

axiom wl12xx_convert_fw_status == $sub.ref(0, 682912);

procedure wl12xx_convert_fw_status($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_convert_fw_status($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p35: ref;
  var $p38: ref;
  var $p40: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i8;
  var $p48: ref;
  var $p50: ref;
  var $i51: i8;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(4, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(5, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(5, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(7, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(6, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(8, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p16);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(60, 1)), $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p35);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(60, 1)), $mul.ref(4, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p40);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(60, 1)), $mul.ref(16, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i46);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(60, 1)), $mul.ref(17, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1)), $mul.ref(17, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i51);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 84)), $mul.ref(80, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_sta_get_ap_rate_mask: ref;

axiom wl12xx_sta_get_ap_rate_mask == $sub.ref(0, 683944);

procedure wl12xx_sta_get_ap_rate_mask($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_sta_get_ap_rate_mask($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(272, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wl12xx_get_pg_ver: ref;

axiom wl12xx_get_pg_ver == $sub.ref(0, 684976);

procedure wl12xx_get_pg_ver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $CurrAddr, $M.22;



implementation wl12xx_get_pg_ver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i8: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 84082961);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i9 := wl12xx_top_reg_read($p0, 1290, $p2);
    call {:si_unique_call 180} {:cexpr "ret"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i8, 0);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.9, $p2);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 60);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 2);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i17);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i7 := wl12xx_top_reg_read($p0, 8530, $p2);
    call {:si_unique_call 178} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const wl12xx_get_mac: ref;

axiom wl12xx_get_mac == $sub.ref(0, 686008);

procedure wl12xx_get_mac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.22;



implementation wl12xx_get_mac($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i1 := wl12xx_mac_in_fuse($p0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 182} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i4 := wl12xx_get_fuse_mac($p0);
    call {:si_unique_call 184} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const wl12xx_set_tx_desc_csum: ref;

axiom wl12xx_set_tx_desc_csum == $sub.ref(0, 687040);

procedure wl12xx_set_tx_desc_csum($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_set_tx_desc_csum($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_debugfs_add_files: ref;

axiom wl12xx_debugfs_add_files == $sub.ref(0, 688072);

procedure wl12xx_debugfs_add_files($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_debugfs_add_files($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i1;
  var $i71: i8;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i1;
  var $i79: i8;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i1;
  var $i87: i8;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $i94: i1;
  var $i95: i8;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i1;
  var $i103: i8;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i1;
  var $i111: i8;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i1;
  var $i119: i8;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i134: i1;
  var $i135: i8;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $i142: i1;
  var $i143: i8;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $i150: i1;
  var $i151: i8;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $i158: i1;
  var $i159: i8;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i1;
  var $p165: ref;
  var $i166: i1;
  var $i167: i8;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $i174: i1;
  var $i175: i8;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $i182: i1;
  var $i183: i8;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $i190: i1;
  var $i191: i8;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $i198: i1;
  var $i199: i8;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $i204: i1;
  var $p205: ref;
  var $i206: i1;
  var $i207: i8;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $i212: i1;
  var $p213: ref;
  var $i214: i1;
  var $i215: i8;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $i222: i1;
  var $i223: i8;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $i230: i1;
  var $i231: i8;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $i238: i1;
  var $i239: i8;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $i243: i64;
  var $i244: i1;
  var $p245: ref;
  var $i246: i1;
  var $i247: i8;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $i254: i1;
  var $i255: i8;
  var $i256: i1;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $i260: i1;
  var $p261: ref;
  var $i262: i1;
  var $i263: i8;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $i270: i1;
  var $i271: i8;
  var $i272: i1;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $i276: i1;
  var $p277: ref;
  var $i278: i1;
  var $i279: i8;
  var $i280: i1;
  var $p281: ref;
  var $p282: ref;
  var $i283: i64;
  var $i284: i1;
  var $p285: ref;
  var $i286: i1;
  var $i287: i8;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $p293: ref;
  var $i294: i1;
  var $i295: i8;
  var $i296: i1;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $i302: i1;
  var $i303: i8;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $i307: i64;
  var $i308: i1;
  var $p309: ref;
  var $i310: i1;
  var $i311: i8;
  var $i312: i1;
  var $p313: ref;
  var $p314: ref;
  var $i315: i64;
  var $i316: i1;
  var $p317: ref;
  var $i318: i1;
  var $i319: i8;
  var $i320: i1;
  var $p321: ref;
  var $p322: ref;
  var $i323: i64;
  var $i324: i1;
  var $p325: ref;
  var $i326: i1;
  var $i327: i8;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $i331: i64;
  var $i332: i1;
  var $p333: ref;
  var $i334: i1;
  var $i335: i8;
  var $i336: i1;
  var $p337: ref;
  var $p338: ref;
  var $i339: i64;
  var $i340: i1;
  var $p341: ref;
  var $i342: i1;
  var $i343: i8;
  var $i344: i1;
  var $p345: ref;
  var $p346: ref;
  var $i347: i64;
  var $i348: i1;
  var $p349: ref;
  var $i350: i1;
  var $i351: i8;
  var $i352: i1;
  var $p353: ref;
  var $p354: ref;
  var $i355: i64;
  var $i356: i1;
  var $p357: ref;
  var $i358: i1;
  var $i359: i8;
  var $i360: i1;
  var $p361: ref;
  var $p362: ref;
  var $i363: i64;
  var $i364: i1;
  var $p365: ref;
  var $i366: i1;
  var $i367: i8;
  var $i368: i1;
  var $p369: ref;
  var $p370: ref;
  var $i371: i64;
  var $i372: i1;
  var $p373: ref;
  var $i374: i1;
  var $i375: i8;
  var $i376: i1;
  var $p377: ref;
  var $p378: ref;
  var $i379: i64;
  var $i380: i1;
  var $p381: ref;
  var $i382: i1;
  var $i383: i8;
  var $i384: i1;
  var $p385: ref;
  var $p386: ref;
  var $i387: i64;
  var $i388: i1;
  var $p389: ref;
  var $i390: i1;
  var $i391: i8;
  var $i392: i1;
  var $p393: ref;
  var $p394: ref;
  var $i395: i64;
  var $i396: i1;
  var $p397: ref;
  var $i398: i1;
  var $i399: i8;
  var $i400: i1;
  var $p401: ref;
  var $p402: ref;
  var $i403: i64;
  var $i404: i1;
  var $p405: ref;
  var $i406: i1;
  var $i407: i8;
  var $i408: i1;
  var $p409: ref;
  var $p410: ref;
  var $i411: i64;
  var $i412: i1;
  var $p413: ref;
  var $i414: i1;
  var $i415: i8;
  var $i416: i1;
  var $p417: ref;
  var $p418: ref;
  var $i419: i64;
  var $i420: i1;
  var $p421: ref;
  var $i422: i1;
  var $i423: i8;
  var $i424: i1;
  var $p425: ref;
  var $p426: ref;
  var $i427: i64;
  var $i428: i1;
  var $p429: ref;
  var $i430: i1;
  var $i431: i8;
  var $i432: i1;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $i436: i1;
  var $p437: ref;
  var $i438: i1;
  var $i439: i8;
  var $i440: i1;
  var $p441: ref;
  var $p442: ref;
  var $i443: i64;
  var $i444: i1;
  var $p445: ref;
  var $i446: i1;
  var $i447: i8;
  var $i448: i1;
  var $p449: ref;
  var $p450: ref;
  var $i451: i64;
  var $i452: i1;
  var $p453: ref;
  var $i454: i1;
  var $i455: i8;
  var $i456: i1;
  var $p457: ref;
  var $p458: ref;
  var $i459: i64;
  var $i460: i1;
  var $p461: ref;
  var $i462: i1;
  var $i463: i8;
  var $i464: i1;
  var $p465: ref;
  var $p466: ref;
  var $i467: i64;
  var $i468: i1;
  var $p469: ref;
  var $i470: i1;
  var $i471: i8;
  var $i472: i1;
  var $p473: ref;
  var $p474: ref;
  var $i475: i64;
  var $i476: i1;
  var $p477: ref;
  var $i478: i1;
  var $i479: i8;
  var $i480: i1;
  var $p481: ref;
  var $p482: ref;
  var $i483: i64;
  var $i484: i1;
  var $p485: ref;
  var $i486: i1;
  var $i487: i8;
  var $i488: i1;
  var $p489: ref;
  var $p490: ref;
  var $i491: i64;
  var $i492: i1;
  var $p493: ref;
  var $i494: i1;
  var $i495: i8;
  var $i496: i1;
  var $p497: ref;
  var $p498: ref;
  var $i499: i64;
  var $i500: i1;
  var $p501: ref;
  var $i502: i1;
  var $i503: i8;
  var $i504: i1;
  var $p505: ref;
  var $p506: ref;
  var $i507: i64;
  var $i508: i1;
  var $p509: ref;
  var $i510: i1;
  var $i511: i8;
  var $i512: i1;
  var $p513: ref;
  var $p514: ref;
  var $i515: i64;
  var $i516: i1;
  var $p517: ref;
  var $i518: i1;
  var $i519: i8;
  var $i520: i1;
  var $p521: ref;
  var $p522: ref;
  var $i523: i64;
  var $i524: i1;
  var $p525: ref;
  var $i526: i1;
  var $i527: i8;
  var $i528: i1;
  var $p529: ref;
  var $p530: ref;
  var $i531: i64;
  var $i532: i1;
  var $p533: ref;
  var $i534: i1;
  var $i535: i8;
  var $i536: i1;
  var $p537: ref;
  var $p538: ref;
  var $i539: i64;
  var $i540: i1;
  var $p541: ref;
  var $i542: i1;
  var $i543: i8;
  var $i544: i1;
  var $p545: ref;
  var $p546: ref;
  var $i547: i64;
  var $i548: i1;
  var $p549: ref;
  var $i550: i1;
  var $i551: i8;
  var $i552: i1;
  var $p553: ref;
  var $p554: ref;
  var $i555: i64;
  var $i556: i1;
  var $p557: ref;
  var $i558: i1;
  var $i559: i8;
  var $i560: i1;
  var $p561: ref;
  var $p562: ref;
  var $i563: i64;
  var $i564: i1;
  var $p565: ref;
  var $i566: i1;
  var $i567: i8;
  var $i568: i1;
  var $p569: ref;
  var $p570: ref;
  var $i571: i64;
  var $i572: i1;
  var $p573: ref;
  var $i574: i1;
  var $i575: i8;
  var $i576: i1;
  var $p577: ref;
  var $p578: ref;
  var $i579: i64;
  var $i580: i1;
  var $p581: ref;
  var $i582: i1;
  var $i583: i8;
  var $i584: i1;
  var $p585: ref;
  var $p586: ref;
  var $i587: i64;
  var $i588: i1;
  var $p589: ref;
  var $i590: i1;
  var $i591: i8;
  var $i592: i1;
  var $p593: ref;
  var $p594: ref;
  var $i595: i64;
  var $i596: i1;
  var $p597: ref;
  var $i598: i1;
  var $i599: i8;
  var $i600: i1;
  var $p601: ref;
  var $p602: ref;
  var $i603: i64;
  var $i604: i1;
  var $p605: ref;
  var $i606: i1;
  var $i607: i8;
  var $i608: i1;
  var $p609: ref;
  var $p610: ref;
  var $i611: i64;
  var $i612: i1;
  var $p613: ref;
  var $i614: i1;
  var $i615: i8;
  var $i616: i1;
  var $p617: ref;
  var $p618: ref;
  var $i619: i64;
  var $i620: i1;
  var $p621: ref;
  var $i622: i1;
  var $i623: i8;
  var $i624: i1;
  var $p625: ref;
  var $p626: ref;
  var $i627: i64;
  var $i628: i1;
  var $p629: ref;
  var $i630: i1;
  var $i631: i8;
  var $i632: i1;
  var $p633: ref;
  var $p634: ref;
  var $i635: i64;
  var $i636: i1;
  var $p637: ref;
  var $i638: i1;
  var $i639: i8;
  var $i640: i1;
  var $p5: ref;
  var $p642: ref;
  var $i643: i1;
  var $i644: i8;
  var $i645: i1;
  var $p646: ref;
  var $i647: i64;
  var $i648: i32;
  var $i649: i32;
  var $i641: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p2 := debugfs_create_dir(.str, $p1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i7 := IS_ERR($p6);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p10 := debugfs_create_dir(.str.24, $p2);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i14 := IS_ERR($p13);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 192} {:cexpr "tmp___0"} boogie_si_record_i8($i15);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p18 := debugfs_create_file(.str.25, 256, $p10, $p17, tx_internal_desc_overflow_ops);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p18);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i22 := IS_ERR($p21);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 195} {:cexpr "tmp___1"} boogie_si_record_i8($i23);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p26 := debugfs_create_file(.str.26, 256, $p10, $p25, rx_out_of_mem_ops);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p26);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i30 := IS_ERR($p29);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 198} {:cexpr "tmp___2"} boogie_si_record_i8($i31);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p34 := debugfs_create_file(.str.27, 256, $p10, $p33, rx_hdr_overflow_ops);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p34);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i38 := IS_ERR($p37);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 201} {:cexpr "tmp___3"} boogie_si_record_i8($i39);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p42 := debugfs_create_file(.str.28, 256, $p10, $p41, rx_hw_stuck_ops);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i44 == 1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p42);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i46 := IS_ERR($p45);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    call {:si_unique_call 204} {:cexpr "tmp___4"} boogie_si_record_i8($i47);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p50 := debugfs_create_file(.str.29, 256, $p10, $p49, rx_dropped_ops);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i52 == 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p50);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i54 := IS_ERR($p53);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 207} {:cexpr "tmp___5"} boogie_si_record_i8($i55);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p58 := debugfs_create_file(.str.30, 256, $p10, $p57, rx_fcs_err_ops);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i60 == 1);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p58);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i62 := IS_ERR($p61);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i62);
    call {:si_unique_call 210} {:cexpr "tmp___6"} boogie_si_record_i8($i63);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p66 := debugfs_create_file(.str.31, 256, $p10, $p65, rx_xfr_hint_trig_ops);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i68 == 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p66);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i70 := IS_ERR($p69);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i8($i70);
    call {:si_unique_call 213} {:cexpr "tmp___7"} boogie_si_record_i8($i71);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i71);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p74 := debugfs_create_file(.str.32, 256, $p10, $p73, rx_path_reset_ops);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i76 == 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p74);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i78 := IS_ERR($p77);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i8($i78);
    call {:si_unique_call 216} {:cexpr "tmp___8"} boogie_si_record_i8($i79);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i79);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p82 := debugfs_create_file(.str.33, 256, $p10, $p81, rx_reset_counter_ops);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i83, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i84 == 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p82);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i86 := IS_ERR($p85);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i8($i86);
    call {:si_unique_call 219} {:cexpr "tmp___9"} boogie_si_record_i8($i87);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i87);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p90 := debugfs_create_file(.str.34, 256, $p10, $p89, dma_rx_requested_ops);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i92 == 1);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p90);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i94 := IS_ERR($p93);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i8($i94);
    call {:si_unique_call 222} {:cexpr "tmp___10"} boogie_si_record_i8($i95);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1($i95);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p98 := debugfs_create_file(.str.35, 256, $p10, $p97, dma_rx_errors_ops);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i100 == 1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p98);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i102 := IS_ERR($p101);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i8($i102);
    call {:si_unique_call 225} {:cexpr "tmp___11"} boogie_si_record_i8($i103);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i103);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p106 := debugfs_create_file(.str.36, 256, $p10, $p105, dma_tx_requested_ops);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i108 == 1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p106);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i110 := IS_ERR($p109);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i8($i110);
    call {:si_unique_call 228} {:cexpr "tmp___12"} boogie_si_record_i8($i111);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p0);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p114 := debugfs_create_file(.str.37, 256, $p10, $p113, dma_tx_errors_ops);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i116 := $eq.i64($i115, 0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i116 == 1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p114);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i118 := IS_ERR($p117);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i119 := $zext.i1.i8($i118);
    call {:si_unique_call 231} {:cexpr "tmp___13"} boogie_si_record_i8($i119);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i8.i1($i119);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p122 := debugfs_create_file(.str.38, 256, $p10, $p121, isr_cmd_cmplt_ops);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i124 := $eq.i64($i123, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i124 == 1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p122);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i126 := IS_ERR($p125);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i8($i126);
    call {:si_unique_call 234} {:cexpr "tmp___14"} boogie_si_record_i8($i127);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p130 := debugfs_create_file(.str.39, 256, $p10, $p129, isr_fiqs_ops);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i132 := $eq.i64($i131, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i132 == 1);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p130);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i134 := IS_ERR($p133);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i135 := $zext.i1.i8($i134);
    call {:si_unique_call 237} {:cexpr "tmp___15"} boogie_si_record_i8($i135);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i8.i1($i135);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p138 := debugfs_create_file(.str.40, 256, $p10, $p137, isr_rx_headers_ops);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i140 == 1);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p138);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i142 := IS_ERR($p141);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i8($i142);
    call {:si_unique_call 240} {:cexpr "tmp___16"} boogie_si_record_i8($i143);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i8.i1($i143);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p146 := debugfs_create_file(.str.41, 256, $p10, $p145, isr_rx_mem_overflow_ops);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i148 := $eq.i64($i147, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i148 == 1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p146);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i150 := IS_ERR($p149);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i8($i150);
    call {:si_unique_call 243} {:cexpr "tmp___17"} boogie_si_record_i8($i151);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i8.i1($i151);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p154 := debugfs_create_file(.str.42, 256, $p10, $p153, isr_rx_rdys_ops);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i156 := $eq.i64($i155, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i156 == 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p154);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i158 := IS_ERR($p157);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i159 := $zext.i1.i8($i158);
    call {:si_unique_call 246} {:cexpr "tmp___18"} boogie_si_record_i8($i159);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i8.i1($i159);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p162 := debugfs_create_file(.str.43, 256, $p10, $p161, isr_irqs_ops);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i164 := $eq.i64($i163, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i164 == 1);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p162);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i166 := IS_ERR($p165);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i167 := $zext.i1.i8($i166);
    call {:si_unique_call 249} {:cexpr "tmp___19"} boogie_si_record_i8($i167);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i8.i1($i167);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p170 := debugfs_create_file(.str.44, 256, $p10, $p169, isr_tx_procs_ops);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i172 := $eq.i64($i171, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i172 == 1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p170);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i174 := IS_ERR($p173);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i175 := $zext.i1.i8($i174);
    call {:si_unique_call 252} {:cexpr "tmp___20"} boogie_si_record_i8($i175);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i8.i1($i175);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p178 := debugfs_create_file(.str.45, 256, $p10, $p177, isr_decrypt_done_ops);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i180 == 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p178);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i182 := IS_ERR($p181);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i183 := $zext.i1.i8($i182);
    call {:si_unique_call 255} {:cexpr "tmp___21"} boogie_si_record_i8($i183);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i8.i1($i183);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p186 := debugfs_create_file(.str.46, 256, $p10, $p185, isr_dma0_done_ops);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i187, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i188 == 1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p186);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i190 := IS_ERR($p189);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i191 := $zext.i1.i8($i190);
    call {:si_unique_call 258} {:cexpr "tmp___22"} boogie_si_record_i8($i191);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i8.i1($i191);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p194 := debugfs_create_file(.str.47, 256, $p10, $p193, isr_dma1_done_ops);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i196 := $eq.i64($i195, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i196 == 1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p194);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i198 := IS_ERR($p197);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i199 := $zext.i1.i8($i198);
    call {:si_unique_call 261} {:cexpr "tmp___23"} boogie_si_record_i8($i199);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i200 := $trunc.i8.i1($i199);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p202 := debugfs_create_file(.str.48, 256, $p10, $p201, isr_tx_exch_complete_ops);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i204 := $eq.i64($i203, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i204 == 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p202);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i206 := IS_ERR($p205);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i207 := $zext.i1.i8($i206);
    call {:si_unique_call 264} {:cexpr "tmp___24"} boogie_si_record_i8($i207);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i8.i1($i207);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p210 := debugfs_create_file(.str.49, 256, $p10, $p209, isr_commands_ops);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i212 := $eq.i64($i211, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i212 == 1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p210);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i214 := IS_ERR($p213);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i215 := $zext.i1.i8($i214);
    call {:si_unique_call 267} {:cexpr "tmp___25"} boogie_si_record_i8($i215);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i8.i1($i215);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p218 := debugfs_create_file(.str.50, 256, $p10, $p217, isr_rx_procs_ops);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i220 := $eq.i64($i219, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i220 == 1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p218);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i222 := IS_ERR($p221);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i223 := $zext.i1.i8($i222);
    call {:si_unique_call 270} {:cexpr "tmp___26"} boogie_si_record_i8($i223);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i8.i1($i223);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p226 := debugfs_create_file(.str.51, 256, $p10, $p225, isr_hw_pm_mode_changes_ops);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i228 := $eq.i64($i227, 0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i228 == 1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p226);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i230 := IS_ERR($p229);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i231 := $zext.i1.i8($i230);
    call {:si_unique_call 273} {:cexpr "tmp___27"} boogie_si_record_i8($i231);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i8.i1($i231);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p234 := debugfs_create_file(.str.52, 256, $p10, $p233, isr_host_acknowledges_ops);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i236 := $eq.i64($i235, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i236 == 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p234);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i238 := IS_ERR($p237);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i239 := $zext.i1.i8($i238);
    call {:si_unique_call 276} {:cexpr "tmp___28"} boogie_si_record_i8($i239);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i8.i1($i239);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p242 := debugfs_create_file(.str.53, 256, $p10, $p241, isr_pci_pm_ops);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p242);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i244 := $eq.i64($i243, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i244 == 1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p242);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i246 := IS_ERR($p245);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i247 := $zext.i1.i8($i246);
    call {:si_unique_call 279} {:cexpr "tmp___29"} boogie_si_record_i8($i247);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i8.i1($i247);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p250 := debugfs_create_file(.str.54, 256, $p10, $p249, isr_wakeups_ops);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i252 := $eq.i64($i251, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i252 == 1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p250);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i254 := IS_ERR($p253);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i255 := $zext.i1.i8($i254);
    call {:si_unique_call 282} {:cexpr "tmp___30"} boogie_si_record_i8($i255);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i8.i1($i255);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p258 := debugfs_create_file(.str.55, 256, $p10, $p257, isr_low_rssi_ops);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i259 := $p2i.ref.i64($p258);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i260 := $eq.i64($i259, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i260 == 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p258);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i262 := IS_ERR($p261);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i263 := $zext.i1.i8($i262);
    call {:si_unique_call 285} {:cexpr "tmp___31"} boogie_si_record_i8($i263);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i8.i1($i263);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p266 := debugfs_create_file(.str.56, 256, $p10, $p265, wep_addr_key_count_ops);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i268 := $eq.i64($i267, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i268 == 1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p266);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i270 := IS_ERR($p269);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i271 := $zext.i1.i8($i270);
    call {:si_unique_call 288} {:cexpr "tmp___32"} boogie_si_record_i8($i271);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i272 := $trunc.i8.i1($i271);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p274 := debugfs_create_file(.str.57, 256, $p10, $p273, wep_default_key_count_ops);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i275 := $p2i.ref.i64($p274);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i276 := $eq.i64($i275, 0);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i276 == 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p274);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i278 := IS_ERR($p277);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i279 := $zext.i1.i8($i278);
    call {:si_unique_call 291} {:cexpr "tmp___33"} boogie_si_record_i8($i279);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i8.i1($i279);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p281 := $bitcast.ref.ref($p0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p282 := debugfs_create_file(.str.58, 256, $p10, $p281, wep_key_not_found_ops);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p282);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i284 := $eq.i64($i283, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i284 == 1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p282);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i286 := IS_ERR($p285);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i287 := $zext.i1.i8($i286);
    call {:si_unique_call 294} {:cexpr "tmp___34"} boogie_si_record_i8($i287);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i8.i1($i287);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p290 := debugfs_create_file(.str.59, 256, $p10, $p289, wep_decrypt_fail_ops);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i292 := $eq.i64($i291, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i292 == 1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p290);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i294 := IS_ERR($p293);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i295 := $zext.i1.i8($i294);
    call {:si_unique_call 297} {:cexpr "tmp___35"} boogie_si_record_i8($i295);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i8.i1($i295);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p298 := debugfs_create_file(.str.60, 256, $p10, $p297, wep_packets_ops);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i300 := $eq.i64($i299, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i300 == 1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p301 := $bitcast.ref.ref($p298);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i302 := IS_ERR($p301);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i303 := $zext.i1.i8($i302);
    call {:si_unique_call 300} {:cexpr "tmp___36"} boogie_si_record_i8($i303);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i304 := $trunc.i8.i1($i303);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p306 := debugfs_create_file(.str.61, 256, $p10, $p305, wep_interrupt_ops);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i307 := $p2i.ref.i64($p306);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i308 := $eq.i64($i307, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i308 == 1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p306);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i310 := IS_ERR($p309);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i311 := $zext.i1.i8($i310);
    call {:si_unique_call 303} {:cexpr "tmp___37"} boogie_si_record_i8($i311);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i8.i1($i311);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p314 := debugfs_create_file(.str.62, 256, $p10, $p313, pwr_ps_enter_ops);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p314);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i316 := $eq.i64($i315, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i316 == 1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p314);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i318 := IS_ERR($p317);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i319 := $zext.i1.i8($i318);
    call {:si_unique_call 306} {:cexpr "tmp___38"} boogie_si_record_i8($i319);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i8.i1($i319);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p322 := debugfs_create_file(.str.63, 256, $p10, $p321, pwr_elp_enter_ops);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i323 := $p2i.ref.i64($p322);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i324 := $eq.i64($i323, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i324 == 1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p322);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i326 := IS_ERR($p325);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i327 := $zext.i1.i8($i326);
    call {:si_unique_call 309} {:cexpr "tmp___39"} boogie_si_record_i8($i327);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i8.i1($i327);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p330 := debugfs_create_file(.str.64, 256, $p10, $p329, pwr_missing_bcns_ops);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p330);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i332 := $eq.i64($i331, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i332 == 1);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p333 := $bitcast.ref.ref($p330);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i334 := IS_ERR($p333);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i335 := $zext.i1.i8($i334);
    call {:si_unique_call 312} {:cexpr "tmp___40"} boogie_si_record_i8($i335);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i8.i1($i335);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p338 := debugfs_create_file(.str.65, 256, $p10, $p337, pwr_wake_on_host_ops);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p338);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i340 := $eq.i64($i339, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i340 == 1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p338);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i342 := IS_ERR($p341);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i343 := $zext.i1.i8($i342);
    call {:si_unique_call 315} {:cexpr "tmp___41"} boogie_si_record_i8($i343);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i8.i1($i343);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p345 := $bitcast.ref.ref($p0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p346 := debugfs_create_file(.str.66, 256, $p10, $p345, pwr_wake_on_timer_exp_ops);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p346);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i348 := $eq.i64($i347, 0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i348 == 1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p349 := $bitcast.ref.ref($p346);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i350 := IS_ERR($p349);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i351 := $zext.i1.i8($i350);
    call {:si_unique_call 318} {:cexpr "tmp___42"} boogie_si_record_i8($i351);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i8.i1($i351);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p353 := $bitcast.ref.ref($p0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p354 := debugfs_create_file(.str.67, 256, $p10, $p353, pwr_tx_with_ps_ops);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i355 := $p2i.ref.i64($p354);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i356 := $eq.i64($i355, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i356 == 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p354);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i358 := IS_ERR($p357);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i359 := $zext.i1.i8($i358);
    call {:si_unique_call 321} {:cexpr "tmp___43"} boogie_si_record_i8($i359);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i360 := $trunc.i8.i1($i359);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p362 := debugfs_create_file(.str.68, 256, $p10, $p361, pwr_tx_without_ps_ops);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i364 := $eq.i64($i363, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i364 == 1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p365 := $bitcast.ref.ref($p362);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i366 := IS_ERR($p365);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i367 := $zext.i1.i8($i366);
    call {:si_unique_call 324} {:cexpr "tmp___44"} boogie_si_record_i8($i367);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i368 := $trunc.i8.i1($i367);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p370 := debugfs_create_file(.str.69, 256, $p10, $p369, pwr_rcvd_beacons_ops);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i371 := $p2i.ref.i64($p370);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i372 := $eq.i64($i371, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i372 == 1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i374 := IS_ERR($p373);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i375 := $zext.i1.i8($i374);
    call {:si_unique_call 327} {:cexpr "tmp___45"} boogie_si_record_i8($i375);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i8.i1($i375);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p378 := debugfs_create_file(.str.70, 256, $p10, $p377, pwr_power_save_off_ops);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i379 := $p2i.ref.i64($p378);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i380 := $eq.i64($i379, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i380 == 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p381 := $bitcast.ref.ref($p378);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i382 := IS_ERR($p381);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i383 := $zext.i1.i8($i382);
    call {:si_unique_call 330} {:cexpr "tmp___46"} boogie_si_record_i8($i383);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i384 := $trunc.i8.i1($i383);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p385 := $bitcast.ref.ref($p0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p386 := debugfs_create_file(.str.71, 256, $p10, $p385, pwr_enable_ps_ops);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p386);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i388 := $eq.i64($i387, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i388 == 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p386);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i390 := IS_ERR($p389);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i391 := $zext.i1.i8($i390);
    call {:si_unique_call 333} {:cexpr "tmp___47"} boogie_si_record_i8($i391);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i392 := $trunc.i8.i1($i391);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p394 := debugfs_create_file(.str.72, 256, $p10, $p393, pwr_disable_ps_ops);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p394);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i396 := $eq.i64($i395, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i396 == 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p394);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i398 := IS_ERR($p397);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i399 := $zext.i1.i8($i398);
    call {:si_unique_call 336} {:cexpr "tmp___48"} boogie_si_record_i8($i399);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i8.i1($i399);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p401 := $bitcast.ref.ref($p0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p402 := debugfs_create_file(.str.73, 256, $p10, $p401, pwr_fix_tsf_ps_ops);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i403 := $p2i.ref.i64($p402);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i404 := $eq.i64($i403, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i404 == 1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p402);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i406 := IS_ERR($p405);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i407 := $zext.i1.i8($i406);
    call {:si_unique_call 339} {:cexpr "tmp___49"} boogie_si_record_i8($i407);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i408 := $trunc.i8.i1($i407);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p409 := $bitcast.ref.ref($p0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p410 := debugfs_create_file(.str.74, 256, $p10, $p409, pwr_rcvd_awake_beacons_ops);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p410);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i412 := $eq.i64($i411, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i412 == 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p413 := $bitcast.ref.ref($p410);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i414 := IS_ERR($p413);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i415 := $zext.i1.i8($i414);
    call {:si_unique_call 342} {:cexpr "tmp___50"} boogie_si_record_i8($i415);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i8.i1($i415);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p417 := $bitcast.ref.ref($p0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p418 := debugfs_create_file(.str.75, 256, $p10, $p417, mic_rx_pkts_ops);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i419 := $p2i.ref.i64($p418);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i420 := $eq.i64($i419, 0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i420 == 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p421 := $bitcast.ref.ref($p418);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i422 := IS_ERR($p421);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i423 := $zext.i1.i8($i422);
    call {:si_unique_call 345} {:cexpr "tmp___51"} boogie_si_record_i8($i423);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i424 := $trunc.i8.i1($i423);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p425 := $bitcast.ref.ref($p0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p426 := debugfs_create_file(.str.76, 256, $p10, $p425, mic_calc_failure_ops);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i427 := $p2i.ref.i64($p426);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i428 := $eq.i64($i427, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i428 == 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p429 := $bitcast.ref.ref($p426);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i430 := IS_ERR($p429);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i431 := $zext.i1.i8($i430);
    call {:si_unique_call 348} {:cexpr "tmp___52"} boogie_si_record_i8($i431);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i432 := $trunc.i8.i1($i431);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $p433 := $bitcast.ref.ref($p0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p434 := debugfs_create_file(.str.77, 256, $p10, $p433, aes_encrypt_fail_ops);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i435 := $p2i.ref.i64($p434);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i436 := $eq.i64($i435, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i436 == 1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p437 := $bitcast.ref.ref($p434);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i438 := IS_ERR($p437);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i439 := $zext.i1.i8($i438);
    call {:si_unique_call 351} {:cexpr "tmp___53"} boogie_si_record_i8($i439);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i8.i1($i439);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p442 := debugfs_create_file(.str.78, 256, $p10, $p441, aes_decrypt_fail_ops);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i444 := $eq.i64($i443, 0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i444 == 1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p445 := $bitcast.ref.ref($p442);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i446 := IS_ERR($p445);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i447 := $zext.i1.i8($i446);
    call {:si_unique_call 354} {:cexpr "tmp___54"} boogie_si_record_i8($i447);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i8.i1($i447);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $p449 := $bitcast.ref.ref($p0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p450 := debugfs_create_file(.str.79, 256, $p10, $p449, aes_encrypt_packets_ops);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i451 := $p2i.ref.i64($p450);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i452 := $eq.i64($i451, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i452 == 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p450);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i454 := IS_ERR($p453);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i455 := $zext.i1.i8($i454);
    call {:si_unique_call 357} {:cexpr "tmp___55"} boogie_si_record_i8($i455);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i8.i1($i455);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p457 := $bitcast.ref.ref($p0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p458 := debugfs_create_file(.str.80, 256, $p10, $p457, aes_decrypt_packets_ops);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i459 := $p2i.ref.i64($p458);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i460 := $eq.i64($i459, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i460 == 1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p461 := $bitcast.ref.ref($p458);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i462 := IS_ERR($p461);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i463 := $zext.i1.i8($i462);
    call {:si_unique_call 360} {:cexpr "tmp___56"} boogie_si_record_i8($i463);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i464 := $trunc.i8.i1($i463);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p465 := $bitcast.ref.ref($p0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p466 := debugfs_create_file(.str.81, 256, $p10, $p465, aes_encrypt_interrupt_ops);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i467 := $p2i.ref.i64($p466);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i468 := $eq.i64($i467, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i468 == 1);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p469 := $bitcast.ref.ref($p466);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i470 := IS_ERR($p469);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i471 := $zext.i1.i8($i470);
    call {:si_unique_call 363} {:cexpr "tmp___57"} boogie_si_record_i8($i471);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i472 := $trunc.i8.i1($i471);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i472} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p473 := $bitcast.ref.ref($p0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p474 := debugfs_create_file(.str.82, 256, $p10, $p473, aes_decrypt_interrupt_ops);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i475 := $p2i.ref.i64($p474);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i476 := $eq.i64($i475, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i476 == 1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p477 := $bitcast.ref.ref($p474);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i478 := IS_ERR($p477);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i479 := $zext.i1.i8($i478);
    call {:si_unique_call 366} {:cexpr "tmp___58"} boogie_si_record_i8($i479);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i480 := $trunc.i8.i1($i479);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p481 := $bitcast.ref.ref($p0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p482 := debugfs_create_file(.str.83, 256, $p10, $p481, event_heart_beat_ops);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i483 := $p2i.ref.i64($p482);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i484 := $eq.i64($i483, 0);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i484} true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i484 == 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p485 := $bitcast.ref.ref($p482);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i486 := IS_ERR($p485);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i487 := $zext.i1.i8($i486);
    call {:si_unique_call 369} {:cexpr "tmp___59"} boogie_si_record_i8($i487);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i488 := $trunc.i8.i1($i487);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p489 := $bitcast.ref.ref($p0);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p490 := debugfs_create_file(.str.84, 256, $p10, $p489, event_calibration_ops);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i491 := $p2i.ref.i64($p490);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i492 := $eq.i64($i491, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i492 == 1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p493 := $bitcast.ref.ref($p490);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i494 := IS_ERR($p493);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i495 := $zext.i1.i8($i494);
    call {:si_unique_call 372} {:cexpr "tmp___60"} boogie_si_record_i8($i495);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i496 := $trunc.i8.i1($i495);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i496} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $p497 := $bitcast.ref.ref($p0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p498 := debugfs_create_file(.str.85, 256, $p10, $p497, event_rx_mismatch_ops);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i500 := $eq.i64($i499, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i500 == 1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p501 := $bitcast.ref.ref($p498);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i502 := IS_ERR($p501);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i503 := $zext.i1.i8($i502);
    call {:si_unique_call 375} {:cexpr "tmp___61"} boogie_si_record_i8($i503);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i504 := $trunc.i8.i1($i503);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p505 := $bitcast.ref.ref($p0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p506 := debugfs_create_file(.str.86, 256, $p10, $p505, event_rx_mem_empty_ops);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i507 := $p2i.ref.i64($p506);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i508 := $eq.i64($i507, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i508 == 1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p506);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i510 := IS_ERR($p509);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i511 := $zext.i1.i8($i510);
    call {:si_unique_call 378} {:cexpr "tmp___62"} boogie_si_record_i8($i511);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i512 := $trunc.i8.i1($i511);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $p513 := $bitcast.ref.ref($p0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p514 := debugfs_create_file(.str.87, 256, $p10, $p513, event_rx_pool_ops);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i515 := $p2i.ref.i64($p514);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i516 := $eq.i64($i515, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i516} true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i516 == 1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p517 := $bitcast.ref.ref($p514);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i518 := IS_ERR($p517);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i519 := $zext.i1.i8($i518);
    call {:si_unique_call 381} {:cexpr "tmp___63"} boogie_si_record_i8($i519);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i520 := $trunc.i8.i1($i519);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p521 := $bitcast.ref.ref($p0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p522 := debugfs_create_file(.str.88, 256, $p10, $p521, event_oom_late_ops);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i523 := $p2i.ref.i64($p522);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i524 := $eq.i64($i523, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i524 == 1);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p525 := $bitcast.ref.ref($p522);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i526 := IS_ERR($p525);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i527 := $zext.i1.i8($i526);
    call {:si_unique_call 384} {:cexpr "tmp___64"} boogie_si_record_i8($i527);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i528 := $trunc.i8.i1($i527);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $p529 := $bitcast.ref.ref($p0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p530 := debugfs_create_file(.str.89, 256, $p10, $p529, event_phy_transmit_error_ops);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i531 := $p2i.ref.i64($p530);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i532 := $eq.i64($i531, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i532 == 1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p533 := $bitcast.ref.ref($p530);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i534 := IS_ERR($p533);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i535 := $zext.i1.i8($i534);
    call {:si_unique_call 387} {:cexpr "tmp___65"} boogie_si_record_i8($i535);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i536 := $trunc.i8.i1($i535);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p537 := $bitcast.ref.ref($p0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p538 := debugfs_create_file(.str.90, 256, $p10, $p537, event_tx_stuck_ops);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i539 := $p2i.ref.i64($p538);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i540 := $eq.i64($i539, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i540} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i540 == 1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p541 := $bitcast.ref.ref($p538);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i542 := IS_ERR($p541);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i543 := $zext.i1.i8($i542);
    call {:si_unique_call 390} {:cexpr "tmp___66"} boogie_si_record_i8($i543);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i544 := $trunc.i8.i1($i543);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $p545 := $bitcast.ref.ref($p0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p546 := debugfs_create_file(.str.91, 256, $p10, $p545, ps_pspoll_timeouts_ops);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i547 := $p2i.ref.i64($p546);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i548 := $eq.i64($i547, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i548 == 1);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p549 := $bitcast.ref.ref($p546);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i550 := IS_ERR($p549);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i551 := $zext.i1.i8($i550);
    call {:si_unique_call 393} {:cexpr "tmp___67"} boogie_si_record_i8($i551);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i552 := $trunc.i8.i1($i551);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i552} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p553 := $bitcast.ref.ref($p0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p554 := debugfs_create_file(.str.92, 256, $p10, $p553, ps_upsd_timeouts_ops);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p554);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i556 := $eq.i64($i555, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i556} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i556 == 1);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p557 := $bitcast.ref.ref($p554);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i558 := IS_ERR($p557);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i559 := $zext.i1.i8($i558);
    call {:si_unique_call 396} {:cexpr "tmp___68"} boogie_si_record_i8($i559);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i560 := $trunc.i8.i1($i559);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $p561 := $bitcast.ref.ref($p0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p562 := debugfs_create_file(.str.93, 256, $p10, $p561, ps_upsd_max_sptime_ops);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i563 := $p2i.ref.i64($p562);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i564 := $eq.i64($i563, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i564 == 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p565 := $bitcast.ref.ref($p562);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i566 := IS_ERR($p565);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i567 := $zext.i1.i8($i566);
    call {:si_unique_call 399} {:cexpr "tmp___69"} boogie_si_record_i8($i567);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i568 := $trunc.i8.i1($i567);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p569 := $bitcast.ref.ref($p0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p570 := debugfs_create_file(.str.94, 256, $p10, $p569, ps_upsd_max_apturn_ops);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p570);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i572 := $eq.i64($i571, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i572 == 1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p573 := $bitcast.ref.ref($p570);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i574 := IS_ERR($p573);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i575 := $zext.i1.i8($i574);
    call {:si_unique_call 402} {:cexpr "tmp___70"} boogie_si_record_i8($i575);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i576 := $trunc.i8.i1($i575);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p577 := $bitcast.ref.ref($p0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p578 := debugfs_create_file(.str.95, 256, $p10, $p577, ps_pspoll_max_apturn_ops);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i579 := $p2i.ref.i64($p578);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i580 := $eq.i64($i579, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i580} true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i580 == 1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p581 := $bitcast.ref.ref($p578);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i582 := IS_ERR($p581);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i583 := $zext.i1.i8($i582);
    call {:si_unique_call 405} {:cexpr "tmp___71"} boogie_si_record_i8($i583);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i584 := $trunc.i8.i1($i583);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p585 := $bitcast.ref.ref($p0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p586 := debugfs_create_file(.str.96, 256, $p10, $p585, ps_pspoll_utilization_ops);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i587 := $p2i.ref.i64($p586);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i588 := $eq.i64($i587, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i588 == 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p589 := $bitcast.ref.ref($p586);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i590 := IS_ERR($p589);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i591 := $zext.i1.i8($i590);
    call {:si_unique_call 408} {:cexpr "tmp___72"} boogie_si_record_i8($i591);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i592 := $trunc.i8.i1($i591);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $p593 := $bitcast.ref.ref($p0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p594 := debugfs_create_file(.str.97, 256, $p10, $p593, ps_upsd_utilization_ops);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i595 := $p2i.ref.i64($p594);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i596 := $eq.i64($i595, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i596 == 1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p597 := $bitcast.ref.ref($p594);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i598 := IS_ERR($p597);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i599 := $zext.i1.i8($i598);
    call {:si_unique_call 411} {:cexpr "tmp___73"} boogie_si_record_i8($i599);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i600 := $trunc.i8.i1($i599);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p601 := $bitcast.ref.ref($p0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p602 := debugfs_create_file(.str.98, 256, $p10, $p601, rxpipe_rx_prep_beacon_drop_ops);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i603 := $p2i.ref.i64($p602);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i604 := $eq.i64($i603, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i604} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i604 == 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p602);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i606 := IS_ERR($p605);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i607 := $zext.i1.i8($i606);
    call {:si_unique_call 414} {:cexpr "tmp___74"} boogie_si_record_i8($i607);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i608 := $trunc.i8.i1($i607);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb454, $bb455;

  $bb455:
    assume !($i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $p609 := $bitcast.ref.ref($p0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p610 := debugfs_create_file(.str.99, 256, $p10, $p609, rxpipe_descr_host_int_trig_rx_data_ops);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i611 := $p2i.ref.i64($p610);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i612 := $eq.i64($i611, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i612 == 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p613 := $bitcast.ref.ref($p610);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i614 := IS_ERR($p613);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i615 := $zext.i1.i8($i614);
    call {:si_unique_call 417} {:cexpr "tmp___75"} boogie_si_record_i8($i615);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i616 := $trunc.i8.i1($i615);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p617 := $bitcast.ref.ref($p0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p618 := debugfs_create_file(.str.100, 256, $p10, $p617, rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i619 := $p2i.ref.i64($p618);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i620 := $eq.i64($i619, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i620 == 1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p621 := $bitcast.ref.ref($p618);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i622 := IS_ERR($p621);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i623 := $zext.i1.i8($i622);
    call {:si_unique_call 420} {:cexpr "tmp___76"} boogie_si_record_i8($i623);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i624 := $trunc.i8.i1($i623);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i624} true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $p625 := $bitcast.ref.ref($p0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p626 := debugfs_create_file(.str.101, 256, $p10, $p625, rxpipe_missed_beacon_host_int_trig_rx_data_ops);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i627 := $p2i.ref.i64($p626);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i628 := $eq.i64($i627, 0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i628} true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i628 == 1);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p629 := $bitcast.ref.ref($p626);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i630 := IS_ERR($p629);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i631 := $zext.i1.i8($i630);
    call {:si_unique_call 423} {:cexpr "tmp___77"} boogie_si_record_i8($i631);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i632 := $trunc.i8.i1($i631);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i632 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p633 := $bitcast.ref.ref($p0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p634 := debugfs_create_file(.str.102, 256, $p10, $p633, rxpipe_tx_xfr_host_int_trig_rx_data_ops);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i635 := $p2i.ref.i64($p634);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i636 := $eq.i64($i635, 0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i636} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i636 == 1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p637 := $bitcast.ref.ref($p634);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i638 := IS_ERR($p637);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i639 := $zext.i1.i8($i638);
    call {:si_unique_call 426} {:cexpr "tmp___78"} boogie_si_record_i8($i639);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i640 := $trunc.i8.i1($i639);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i640} true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $i641 := 0;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $r := $i641;
    return;

  $bb478:
    assume $i640 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p5 := $p634;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p642 := $bitcast.ref.ref($p5);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i643 := IS_ERR($p642);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i644 := $zext.i1.i8($i643);
    call {:si_unique_call 189} {:cexpr "tmp___80"} boogie_si_record_i8($i644);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i645 := $trunc.i8.i1($i644);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i645} true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    $i649 := $sub.i32(0, 12);
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i641 := $i649;
    goto $bb482;

  $bb483:
    assume $i645 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p646 := $bitcast.ref.ref($p5);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i647 := PTR_ERR($p646);
    call {:si_unique_call 428} {:cexpr "tmp___79"} boogie_si_record_i64($i647);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i648 := $trunc.i64.i32($i647);
    call {:si_unique_call 429} {:cexpr "ret"} boogie_si_record_i32($i648);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i649 := $i648;
    goto $bb485;

  $bb476:
    assume $i636 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p5 := $p634;
    goto $bb3;

  $bb472:
    assume $i632 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p5 := $p626;
    goto $bb3;

  $bb470:
    assume $i628 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p5 := $p626;
    goto $bb3;

  $bb466:
    assume $i624 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p5 := $p618;
    goto $bb3;

  $bb464:
    assume $i620 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p5 := $p618;
    goto $bb3;

  $bb460:
    assume $i616 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p5 := $p610;
    goto $bb3;

  $bb458:
    assume $i612 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p5 := $p610;
    goto $bb3;

  $bb454:
    assume $i608 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p5 := $p602;
    goto $bb3;

  $bb452:
    assume $i604 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p5 := $p602;
    goto $bb3;

  $bb448:
    assume $i600 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p5 := $p594;
    goto $bb3;

  $bb446:
    assume $i596 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p5 := $p594;
    goto $bb3;

  $bb442:
    assume $i592 == 1;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p5 := $p586;
    goto $bb3;

  $bb440:
    assume $i588 == 1;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p5 := $p586;
    goto $bb3;

  $bb436:
    assume $i584 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p5 := $p578;
    goto $bb3;

  $bb434:
    assume $i580 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p5 := $p578;
    goto $bb3;

  $bb430:
    assume $i576 == 1;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p5 := $p570;
    goto $bb3;

  $bb428:
    assume $i572 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p5 := $p570;
    goto $bb3;

  $bb424:
    assume $i568 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p5 := $p562;
    goto $bb3;

  $bb422:
    assume $i564 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p5 := $p562;
    goto $bb3;

  $bb418:
    assume $i560 == 1;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p5 := $p554;
    goto $bb3;

  $bb416:
    assume $i556 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p5 := $p554;
    goto $bb3;

  $bb412:
    assume $i552 == 1;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p5 := $p546;
    goto $bb3;

  $bb410:
    assume $i548 == 1;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p5 := $p546;
    goto $bb3;

  $bb406:
    assume $i544 == 1;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p5 := $p538;
    goto $bb3;

  $bb404:
    assume $i540 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p5 := $p538;
    goto $bb3;

  $bb400:
    assume $i536 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p5 := $p530;
    goto $bb3;

  $bb398:
    assume $i532 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p5 := $p530;
    goto $bb3;

  $bb394:
    assume $i528 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p5 := $p522;
    goto $bb3;

  $bb392:
    assume $i524 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p5 := $p522;
    goto $bb3;

  $bb388:
    assume $i520 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p5 := $p514;
    goto $bb3;

  $bb386:
    assume $i516 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p5 := $p514;
    goto $bb3;

  $bb382:
    assume $i512 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p5 := $p506;
    goto $bb3;

  $bb380:
    assume $i508 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p5 := $p506;
    goto $bb3;

  $bb376:
    assume $i504 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p5 := $p498;
    goto $bb3;

  $bb374:
    assume $i500 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p5 := $p498;
    goto $bb3;

  $bb370:
    assume $i496 == 1;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p5 := $p490;
    goto $bb3;

  $bb368:
    assume $i492 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p5 := $p490;
    goto $bb3;

  $bb364:
    assume $i488 == 1;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p5 := $p482;
    goto $bb3;

  $bb362:
    assume $i484 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p5 := $p482;
    goto $bb3;

  $bb358:
    assume $i480 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p5 := $p474;
    goto $bb3;

  $bb356:
    assume $i476 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p5 := $p474;
    goto $bb3;

  $bb352:
    assume $i472 == 1;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p5 := $p466;
    goto $bb3;

  $bb350:
    assume $i468 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p5 := $p466;
    goto $bb3;

  $bb346:
    assume $i464 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p5 := $p458;
    goto $bb3;

  $bb344:
    assume $i460 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p5 := $p458;
    goto $bb3;

  $bb340:
    assume $i456 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p5 := $p450;
    goto $bb3;

  $bb338:
    assume $i452 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p5 := $p450;
    goto $bb3;

  $bb334:
    assume $i448 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p5 := $p442;
    goto $bb3;

  $bb332:
    assume $i444 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p5 := $p442;
    goto $bb3;

  $bb328:
    assume $i440 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p5 := $p434;
    goto $bb3;

  $bb326:
    assume $i436 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p5 := $p434;
    goto $bb3;

  $bb322:
    assume $i432 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p5 := $p426;
    goto $bb3;

  $bb320:
    assume $i428 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p5 := $p426;
    goto $bb3;

  $bb316:
    assume $i424 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p5 := $p418;
    goto $bb3;

  $bb314:
    assume $i420 == 1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p5 := $p418;
    goto $bb3;

  $bb310:
    assume $i416 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p5 := $p410;
    goto $bb3;

  $bb308:
    assume $i412 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p5 := $p410;
    goto $bb3;

  $bb304:
    assume $i408 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p5 := $p402;
    goto $bb3;

  $bb302:
    assume $i404 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p5 := $p402;
    goto $bb3;

  $bb298:
    assume $i400 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p5 := $p394;
    goto $bb3;

  $bb296:
    assume $i396 == 1;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p5 := $p394;
    goto $bb3;

  $bb292:
    assume $i392 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p5 := $p386;
    goto $bb3;

  $bb290:
    assume $i388 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p5 := $p386;
    goto $bb3;

  $bb286:
    assume $i384 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p5 := $p378;
    goto $bb3;

  $bb284:
    assume $i380 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p5 := $p378;
    goto $bb3;

  $bb280:
    assume $i376 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p5 := $p370;
    goto $bb3;

  $bb278:
    assume $i372 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p5 := $p370;
    goto $bb3;

  $bb274:
    assume $i368 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p5 := $p362;
    goto $bb3;

  $bb272:
    assume $i364 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p5 := $p362;
    goto $bb3;

  $bb268:
    assume $i360 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p5 := $p354;
    goto $bb3;

  $bb266:
    assume $i356 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p5 := $p354;
    goto $bb3;

  $bb262:
    assume $i352 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p5 := $p346;
    goto $bb3;

  $bb260:
    assume $i348 == 1;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p5 := $p346;
    goto $bb3;

  $bb256:
    assume $i344 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p5 := $p338;
    goto $bb3;

  $bb254:
    assume $i340 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p5 := $p338;
    goto $bb3;

  $bb250:
    assume $i336 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p5 := $p330;
    goto $bb3;

  $bb248:
    assume $i332 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p5 := $p330;
    goto $bb3;

  $bb244:
    assume $i328 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p5 := $p322;
    goto $bb3;

  $bb242:
    assume $i324 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p5 := $p322;
    goto $bb3;

  $bb238:
    assume $i320 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p5 := $p314;
    goto $bb3;

  $bb236:
    assume $i316 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p5 := $p314;
    goto $bb3;

  $bb232:
    assume $i312 == 1;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p5 := $p306;
    goto $bb3;

  $bb230:
    assume $i308 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p5 := $p306;
    goto $bb3;

  $bb226:
    assume $i304 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p5 := $p298;
    goto $bb3;

  $bb224:
    assume $i300 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p5 := $p298;
    goto $bb3;

  $bb220:
    assume $i296 == 1;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p5 := $p290;
    goto $bb3;

  $bb218:
    assume $i292 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p5 := $p290;
    goto $bb3;

  $bb214:
    assume $i288 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p5 := $p282;
    goto $bb3;

  $bb212:
    assume $i284 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p5 := $p282;
    goto $bb3;

  $bb208:
    assume $i280 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p5 := $p274;
    goto $bb3;

  $bb206:
    assume $i276 == 1;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p5 := $p274;
    goto $bb3;

  $bb202:
    assume $i272 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p5 := $p266;
    goto $bb3;

  $bb200:
    assume $i268 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p5 := $p266;
    goto $bb3;

  $bb196:
    assume $i264 == 1;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p5 := $p258;
    goto $bb3;

  $bb194:
    assume $i260 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p5 := $p258;
    goto $bb3;

  $bb190:
    assume $i256 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p5 := $p250;
    goto $bb3;

  $bb188:
    assume $i252 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p5 := $p250;
    goto $bb3;

  $bb184:
    assume $i248 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p5 := $p242;
    goto $bb3;

  $bb182:
    assume $i244 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p5 := $p242;
    goto $bb3;

  $bb178:
    assume $i240 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p5 := $p234;
    goto $bb3;

  $bb176:
    assume $i236 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p5 := $p234;
    goto $bb3;

  $bb172:
    assume $i232 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p5 := $p226;
    goto $bb3;

  $bb170:
    assume $i228 == 1;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p5 := $p226;
    goto $bb3;

  $bb166:
    assume $i224 == 1;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p5 := $p218;
    goto $bb3;

  $bb164:
    assume $i220 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p5 := $p218;
    goto $bb3;

  $bb160:
    assume $i216 == 1;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p5 := $p210;
    goto $bb3;

  $bb158:
    assume $i212 == 1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p5 := $p210;
    goto $bb3;

  $bb154:
    assume $i208 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p5 := $p202;
    goto $bb3;

  $bb152:
    assume $i204 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p5 := $p202;
    goto $bb3;

  $bb148:
    assume $i200 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p5 := $p194;
    goto $bb3;

  $bb146:
    assume $i196 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p5 := $p194;
    goto $bb3;

  $bb142:
    assume $i192 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p5 := $p186;
    goto $bb3;

  $bb140:
    assume $i188 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p5 := $p186;
    goto $bb3;

  $bb136:
    assume $i184 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p5 := $p178;
    goto $bb3;

  $bb134:
    assume $i180 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p5 := $p178;
    goto $bb3;

  $bb130:
    assume $i176 == 1;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p5 := $p170;
    goto $bb3;

  $bb128:
    assume $i172 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p5 := $p170;
    goto $bb3;

  $bb124:
    assume $i168 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p5 := $p162;
    goto $bb3;

  $bb122:
    assume $i164 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p5 := $p162;
    goto $bb3;

  $bb118:
    assume $i160 == 1;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p5 := $p154;
    goto $bb3;

  $bb116:
    assume $i156 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p5 := $p154;
    goto $bb3;

  $bb112:
    assume $i152 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p5 := $p146;
    goto $bb3;

  $bb110:
    assume $i148 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p5 := $p146;
    goto $bb3;

  $bb106:
    assume $i144 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p5 := $p138;
    goto $bb3;

  $bb104:
    assume $i140 == 1;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p5 := $p138;
    goto $bb3;

  $bb100:
    assume $i136 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p5 := $p130;
    goto $bb3;

  $bb98:
    assume $i132 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p5 := $p130;
    goto $bb3;

  $bb94:
    assume $i128 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p5 := $p122;
    goto $bb3;

  $bb92:
    assume $i124 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p5 := $p122;
    goto $bb3;

  $bb88:
    assume $i120 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p5 := $p114;
    goto $bb3;

  $bb86:
    assume $i116 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p5 := $p114;
    goto $bb3;

  $bb82:
    assume $i112 == 1;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p5 := $p106;
    goto $bb3;

  $bb80:
    assume $i108 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p5 := $p106;
    goto $bb3;

  $bb76:
    assume $i104 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p5 := $p98;
    goto $bb3;

  $bb74:
    assume $i100 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p5 := $p98;
    goto $bb3;

  $bb70:
    assume $i96 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p5 := $p90;
    goto $bb3;

  $bb68:
    assume $i92 == 1;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p5 := $p90;
    goto $bb3;

  $bb64:
    assume $i88 == 1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p5 := $p82;
    goto $bb3;

  $bb62:
    assume $i84 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p5 := $p82;
    goto $bb3;

  $bb58:
    assume $i80 == 1;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p5 := $p74;
    goto $bb3;

  $bb56:
    assume $i76 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p5 := $p74;
    goto $bb3;

  $bb52:
    assume $i72 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p5 := $p66;
    goto $bb3;

  $bb50:
    assume $i68 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p5 := $p66;
    goto $bb3;

  $bb46:
    assume $i64 == 1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p5 := $p58;
    goto $bb3;

  $bb44:
    assume $i60 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p5 := $p58;
    goto $bb3;

  $bb40:
    assume $i56 == 1;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p5 := $p50;
    goto $bb3;

  $bb38:
    assume $i52 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p5 := $p50;
    goto $bb3;

  $bb34:
    assume $i48 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p5 := $p42;
    goto $bb3;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p5 := $p42;
    goto $bb3;

  $bb28:
    assume $i40 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p5 := $p34;
    goto $bb3;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p5 := $p34;
    goto $bb3;

  $bb22:
    assume $i32 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p5 := $p26;
    goto $bb3;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p5 := $p26;
    goto $bb3;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p5 := $p18;
    goto $bb3;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p5 := $p18;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p5 := $p10;
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p5 := $p10;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb3;
}



const wl12xx_scan_start: ref;

axiom wl12xx_scan_start == $sub.ref(0, 689104);

procedure wl12xx_scan_start($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl12xx_scan_start($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} wl1271_scan_stm($p0, $p1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const wl12xx_scan_stop: ref;

axiom wl12xx_scan_stop == $sub.ref(0, 690136);

procedure wl12xx_scan_stop($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl12xx_scan_stop($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i47: i32;
  var $p52: ref;
  var $i19: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 432} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 437} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 4096);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 439} {:cexpr "tmp___2"} boogie_si_record_i64($i25);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p43 := kzalloc(4, 208);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p44);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i49 := wl1271_cmd_send($p0, 8, $p48, 4, 0);
    call {:si_unique_call 446} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i47 := $i49;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p44);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} kfree($p52);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i19 := $i47;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_83 := printk.ref(.str.106);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i47 := $i49;
    goto $bb16;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 12);
    goto $bb16;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str.104);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p29, .str.103);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p30, .str.105);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.7, $p32);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 195);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p32, $i35);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p36, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.8, $p37);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 441} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __dynamic_pr_debug.ref.ref($p2, .str.105);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} warn_slowpath_null(.str.103, 192);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wl12xx_sched_scan_start: ref;

axiom wl12xx_sched_scan_start == $sub.ref(0, 691168);

procedure wl12xx_sched_scan_start($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation wl12xx_sched_scan_start($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i4 := wl1271_scan_sched_scan_config($p0, $p1, $p2, $p3);
    call {:si_unique_call 449} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i7 := wl1271_scan_sched_scan_start($p0, $p1);
    call {:si_unique_call 451} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const wl12xx_scan_sched_scan_stop: ref;

axiom wl12xx_scan_sched_scan_stop == $sub.ref(0, 692200);

procedure wl12xx_scan_sched_scan_stop($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation wl12xx_scan_sched_scan_stop($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4096);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 454} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p26 := kzalloc(8, 208);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p27);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i36 := wl1271_cmd_send($p0, 30, $p35, 8, 0);
    call {:si_unique_call 461} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p27);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} kfree($p39);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_85 := printk.ref(.str.122);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_84 := printk.ref(.str.121);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.119);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.103);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.120);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.7, $p15);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 474);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p15, $i18);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p19, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.8, $p20);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} __dynamic_pr_debug.ref.ref($p2, .str.120);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const wl12xx_get_spare_blocks: ref;

axiom wl12xx_get_spare_blocks == $sub.ref(0, 693232);

procedure wl12xx_get_spare_blocks($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_get_spare_blocks($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 464} {:cexpr "wl12xx_get_spare_blocks:arg:is_gem"} boogie_si_record_i1($i1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;
}



const wl12xx_set_key: ref;

axiom wl12xx_set_key == $sub.ref(0, 694264);

procedure wl12xx_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} {:cexpr "wl12xx_set_key:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i5 := wlcore_set_key($p0, $i1, $p2, $p3, $p4);
    call {:si_unique_call 467} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const wl12xx_cmd_channel_switch: ref;

axiom wl12xx_cmd_channel_switch == $sub.ref(0, 695296);

procedure wl12xx_cmd_channel_switch($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation wl12xx_cmd_channel_switch($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i8;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i31: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8192);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 470} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p27 := kzalloc(12, 208);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i16.i8($i39);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i47);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p28);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i52 := wl1271_cmd_send($p0, 20, $p51, 12, 0);
    call {:si_unique_call 476} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p28);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} kfree($p55);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i31 := $i52;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_86 := printk.ref(.str.22);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.20);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.2);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.21);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.7, $p16);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 295);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p16, $i19);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p20, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.8, $p21);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 472} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __dynamic_pr_debug.ref.ref($p3, .str.21);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const wl12xx_set_peer_cap: ref;

axiom wl12xx_set_peer_cap == $sub.ref(0, 696328);

procedure wl12xx_set_peer_cap($p0: ref, $p1: ref, $i2: i1, $i3: i32, $i4: i8) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_set_peer_cap($p0: ref, $p1: ref, $i2: i1, $i3: i32, $i4: i8) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 479} {:cexpr "wl12xx_set_peer_cap:arg:allow_ht_operation"} boogie_si_record_i1($i2);
    call {:si_unique_call 480} {:cexpr "wl12xx_set_peer_cap:arg:rate_set"} boogie_si_record_i32($i3);
    call {:si_unique_call 481} {:cexpr "wl12xx_set_peer_cap:arg:hlid"} boogie_si_record_i8($i4);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i4);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i9 := wl1271_acx_set_ht_capabilities($p0, $p1, $i6, $i8);
    call {:si_unique_call 483} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const wl12xx_convert_hwaddr: ref;

axiom wl12xx_convert_hwaddr == $sub.ref(0, 697360);

procedure wl12xx_convert_hwaddr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_convert_hwaddr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "wl12xx_convert_hwaddr:arg:hwaddr"} boogie_si_record_i32($i1);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 5);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl12xx_lnk_high_prio: ref;

axiom wl12xx_lnk_high_prio == $sub.ref(0, 698392);

procedure wl12xx_lnk_high_prio($p0: ref, $i1: i8, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation wl12xx_lnk_high_prio($p0: ref, $i1: i8, $p2: ref) returns ($r: i1)
{
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i8;
  var $p14: ref;
  var $i15: i8;
  var $i11: i8;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} {:cexpr "wl12xx_lnk_high_prio:arg:hlid"} boogie_si_record_i8($i1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i64($i1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10376, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i5 := variable_test_bit($i3, $p4);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(296, 1)), $mul.ref(204, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 489} {:cexpr "thold"} boogie_si_record_i8($i15);
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i11);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, $i19);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(296, 1)), $mul.ref(205, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 488} {:cexpr "thold"} boogie_si_record_i8($i10);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const wl12xx_lnk_low_prio: ref;

axiom wl12xx_lnk_low_prio == $sub.ref(0, 699424);

procedure wl12xx_lnk_low_prio($p0: ref, $i1: i8, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation wl12xx_lnk_low_prio($p0: ref, $i1: i8, $p2: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} {:cexpr "wl12xx_lnk_low_prio:arg:hlid"} boogie_si_record_i8($i1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 700456);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 492} $i2 := devirtbounce.1(0, $p1, $i0);
    call {:si_unique_call 493} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl1271_acx_set_ht_capabilities: ref;

axiom wl1271_acx_set_ht_capabilities == $sub.ref(0, 701488);

procedure wl1271_acx_set_ht_capabilities($p0: ref, $p1: ref, $i2: i1, $i3: i8) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_acx_set_ht_capabilities($p0: ref, $p1: ref, $i2: i1, $i3: i8) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 494} {:cexpr "wl1271_acx_set_ht_capabilities:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 495} {:cexpr "wl1271_acx_set_ht_capabilities:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 496} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 497} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 702520);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 499} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 703552);

procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 704584);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 501} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const wl1271_cmd_send: ref;

axiom wl1271_cmd_send == $sub.ref(0, 705616);

procedure wl1271_cmd_send($p0: ref, $i1: i16, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_cmd_send($p0: ref, $i1: i16, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 503} {:cexpr "wl1271_cmd_send:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 504} {:cexpr "wl1271_cmd_send:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 505} {:cexpr "wl1271_cmd_send:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 706648);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 508} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 509} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 510} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 511} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 512} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 513} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 514} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 515} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 707680);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} free_($p0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 708712);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 517} $free($p0);
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 709744);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 519} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 710776);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 522} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p2 := ldv_malloc($i0);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const wlcore_set_key: ref;

axiom wlcore_set_key == $sub.ref(0, 711808);

procedure wlcore_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 524} {:cexpr "wlcore_set_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 1} true;
    call {:si_unique_call 525} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const wl1271_scan_sched_scan_config: ref;

axiom wl1271_scan_sched_scan_config == $sub.ref(0, 712840);

procedure wl1271_scan_sched_scan_config($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation wl1271_scan_sched_scan_config($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i67: i8;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i111: i1;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i122: i8;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i64;
  var $i132: i32;
  var $i133: i64;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i64;
  var $p140: ref;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i32;
  var $i147: i1;
  var $i149: i1;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i8;
  var $i159: i32;
  var $i160: i8;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i64;
  var $i170: i32;
  var $i171: i64;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i64;
  var $p178: ref;
  var $i179: i64;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i32;
  var $i185: i1;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i24;
  var $i197: i24;
  var $i198: i24;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $i207: i1;
  var $i208: i64;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p65: ref;
  var $i66: i32;
  var $p213: ref;
  var $p214: ref;
  var $i40: i32;
  var $p215: ref;
  var $i216: i32;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $p222: ref;
  var $p223: ref;
  var $i224: i32;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $p254: ref;
  var $p255: ref;
  var $i256: i32;
  var $p258: ref;
  var $p259: ref;
  var $i260: i32;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $p274: ref;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 530} {:cexpr "force_passive"} boogie_si_record_i8($i12);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4096);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 532} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p36 := kzalloc(612, 208);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(118, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(864, 1)), $mul.ref(25, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(68, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(864, 1)), $mul.ref(26, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(69, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(864, 1)), $mul.ref(24, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(109, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(70, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(71, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(72, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(73, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(74, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 2);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, $i216);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, $i220);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(3, 4));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $i224);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(4, 4));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p230, $i228);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p231);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(5, 4));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p234, $i232);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(6, 4));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p238, $i236);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(7, 4));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p242, $i240);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(8, 4));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p246, $i244);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(9, 4));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, $i248);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(10, 4));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, $i252);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p255);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(11, 4));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p258, $i256);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p259);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(12, 4));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, $i260);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(13, 4));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p266, $i264);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(14, 4));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, $i268);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(4, 1)), $mul.ref(15, 4));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p274, $i272);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(76, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i63 := wlcore_scan_sched_scan_ssid_list($p0, $p1, $p2);
    call {:si_unique_call 538} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i63);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(75, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i67);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 256);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i32($i71);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 542} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p95 := kzalloc(728, 208);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(128, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i105 := wlcore_set_scan_chan_params($p0, $p96, $p100, $i102, $i104, 1);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    call {:si_unique_call 548} {:cexpr "tmp___5"} boogie_si_record_i8($i106);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} wl12xx_adjust_channels($p37, $p96);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i12);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i111 == 1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(113, 1)), $mul.ref(0, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i8.i1($i12);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i149 == 1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(113, 1)), $mul.ref(1, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i188 := $and.i32($i187, 256);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p37);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i210 := wl1271_cmd_send($p0, 27, $p209, 612, 0);
    call {:si_unique_call 561} {:cexpr "ret"} boogie_si_record_i32($i210);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i211 := $slt.i32($i210, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p95, $i210;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p65);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} kfree($p213);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p37);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} kfree($p214);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i40 := $i66;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb61:
    assume $i211 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_90 := printk.ref(.str.115);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p95, $i210;
    goto $bb17;

  $bb52:
    assume $i189 == 1;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p190, .str);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p191, .str.108);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p192, .str.103);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p193, .str.114);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i196 := $load.i24($M.14, $p195);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i197 := $and.i24($i196, $sub.i24(0, 262144));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i198 := $or.i24($i197, 409);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p195, $i198);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p199, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.15, $p200);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i64($i201);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i203 := $and.i64($i202, 1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i204 := ldv__builtin_expect($i203, 0);
    call {:si_unique_call 558} {:cexpr "tmp___7"} boogie_si_record_i64($i204);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb54:
    assume $i205 == 1;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p37);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i207 := $ult.i64(612, 1024);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i207 == 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i208 := 1024;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} print_hex_dump(.str.4, .str.114, 2, 16, 1, $p206, $i208, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i207 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i208 := 612;
    goto $bb58;

  $bb46:
    assume $i154 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i8($i157);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32(1);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 33)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 33)), $mul.ref(32, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i64($i168);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32(1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i170);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref($i171, 8));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32(1);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i175);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1)), $mul.ref($i176, 8));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i179 := $load.i64($M.0, $p178);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.0, $p182);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i184 := wl12xx_cmd_build_probe_req($p0, $p1, $i158, $i160, $p164, $i169, $p174, $i179, $p181, $i183, 1);
    call {:si_unique_call 555} {:cexpr "ret"} boogie_si_record_i32($i184);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i184, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i185 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_89 := printk.ref(.str.113);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p95, $i184;
    goto $bb17;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb44;

  $bb37:
    assume $i116 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32(0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 33)), $mul.ref(0, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 33)), $mul.ref(32, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i64($i130);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32(0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i133 := $sext.i32.i64($i132);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref($i133, 8));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32(0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i137);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1)), $mul.ref($i138, 8));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p140);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.0, $p144);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i146 := wl12xx_cmd_build_probe_req($p0, $p1, $i120, $i122, $p126, $i131, $p136, $i141, $p143, $i145, 1);
    call {:si_unique_call 552} {:cexpr "ret"} boogie_si_record_i32($i146);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i146, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i147 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_88 := printk.ref(.str.112);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p95, $i146;
    goto $bb17;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb35;

  $bb31:
    assume $i109 == 1;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_87 := printk.ref(.str.111);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p95, $sub.i32(0, 22);
    goto $bb17;

  $bb28:
    assume $i107 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb30;

  $bb25:
    assume $i98 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p95, $sub.i32(0, 12);
    goto $bb17;

  $bb19:
    assume $i75 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p76, .str);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p77, .str.108);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p78, .str.103);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p79, .str.110);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.7, $p81);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 358);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p81, $i84);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p85, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.8, $p86);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 544} {:cexpr "tmp___2"} boogie_si_record_i64($i90);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i91 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p37, $mul.ref(0, 612)), $mul.ref(75, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __dynamic_pr_debug.ref.ref.i32($p5, .str.110, $i94);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p65, $i66 := $0.ref, $i63;
    goto $bb17;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 12);
    goto $bb9;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.108);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p22, .str.103);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, .str.109);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.7, $p25);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 328);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p25, $i28);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p29, 0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.8, $p30);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 534} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i35 == 1;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} __dynamic_pr_debug.ref.ref($p4, .str.109);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const wl1271_scan_sched_scan_start: ref;

axiom wl1271_scan_sched_scan_start == $sub.ref(0, 713872);

procedure wl1271_scan_sched_scan_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation wl1271_scan_sched_scan_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i30: i32;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4096);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 565} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(32, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 2);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 512);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p39 := kzalloc(8, 208);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i44);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p40, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p40);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i48 := wl1271_cmd_send($p0, 29, $p47, 8, 0);
    call {:si_unique_call 573} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p40);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} kfree($p51);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i30 := $i48;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_91 := printk.ref(.str.118);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb9;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(24, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i37 := constant_test_bit(11, $p36);
    call {:si_unique_call 570} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb9;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 95);
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.116);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.103);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.117);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.7, $p15);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 428);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p15, $i18);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p19, 0);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.8, $p20);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 567} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} __dynamic_pr_debug.ref.ref($p2, .str.117);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 714904);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const wlcore_scan_sched_scan_ssid_list: ref;

axiom wlcore_scan_sched_scan_ssid_list == $sub.ref(0, 715936);

procedure wlcore_scan_sched_scan_ssid_list($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_scan_sched_scan_ssid_list($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wlcore_set_scan_chan_params: ref;

axiom wlcore_set_scan_chan_params == $sub.ref(0, 716968);

procedure wlcore_set_scan_chan_params($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i1);
  free requires assertsPassed;



implementation wlcore_set_scan_chan_params($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i1)
{
  var $i6: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} {:cexpr "wlcore_set_scan_chan_params:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 580} {:cexpr "wlcore_set_scan_chan_params:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 581} {:cexpr "wlcore_set_scan_chan_params:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i6 := __VERIFIER_nondet_bool();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i6);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const wl12xx_adjust_channels: ref;

axiom wl12xx_adjust_channels == $sub.ref(0, 718000);

procedure wl12xx_adjust_channels($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_adjust_channels($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 612)), $mul.ref(110, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 728)), $mul.ref(0, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 584} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p3, $p5, 3, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 612)), $mul.ref(113, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 728)), $mul.ref(3, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 585} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p7, $p9, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 728)), $mul.ref(6, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 612)), $mul.ref(116, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 728)), $mul.ref(7, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 612)), $mul.ref(117, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 612)), $mul.ref(120, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 728)), $mul.ref(8, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 586} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p17, $p19, 168, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 612)), $mul.ref(288, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 728)), $mul.ref(176, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 587} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p21, $p23, 276, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_cmd_build_probe_req: ref;

axiom wl12xx_cmd_build_probe_req == $sub.ref(0, 719032);

procedure wl12xx_cmd_build_probe_req($p0: ref, $p1: ref, $i2: i8, $i3: i8, $p4: ref, $i5: i64, $p6: ref, $i7: i64, $p8: ref, $i9: i64, $i10: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_cmd_build_probe_req($p0: ref, $p1: ref, $i2: i8, $i3: i8, $p4: ref, $i5: i64, $p6: ref, $i7: i64, $p8: ref, $i9: i64, $i10: i1) returns ($r: i32)
{
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} {:cexpr "wl12xx_cmd_build_probe_req:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 589} {:cexpr "wl12xx_cmd_build_probe_req:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 590} {:cexpr "wl12xx_cmd_build_probe_req:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 591} {:cexpr "wl12xx_cmd_build_probe_req:arg:arg7"} boogie_si_record_i64($i7);
    call {:si_unique_call 592} {:cexpr "wl12xx_cmd_build_probe_req:arg:arg9"} boogie_si_record_i64($i9);
    call {:si_unique_call 593} {:cexpr "wl12xx_cmd_build_probe_req:arg:arg10"} boogie_si_record_i1($i10);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 594} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const print_hex_dump: ref;

axiom print_hex_dump == $sub.ref(0, 720064);

procedure print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1);
  free requires assertsPassed;



implementation print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "print_hex_dump:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 597} {:cexpr "print_hex_dump:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 598} {:cexpr "print_hex_dump:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 599} {:cexpr "print_hex_dump:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 600} {:cexpr "print_hex_dump:arg:arg7"} boogie_si_record_i1($i7);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 721096);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 722128);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    return;
}



const wl1271_scan_stm: ref;

axiom wl1271_scan_stm == $sub.ref(0, 723160);

procedure wl1271_scan_stm($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl1271_scan_stm($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i1;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i13: i32;
  var $i84: i1;
  var $p85: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var vslice_dummy_var_92: i1;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_93 := printk.ref(.str.107);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i13, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i84 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1768, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_94 := cancel_delayed_work($p85);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i87 := msecs_to_jiffies(0);
    call {:si_unique_call 633} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(8, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1768, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} ieee80211_queue_delayed_work($p89, $p90, $i87);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(16, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1768, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_92 := cancel_delayed_work($p77);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i79 := msecs_to_jiffies(0);
    call {:si_unique_call 612} {:cexpr "tmp"} boogie_si_record_i64($i79);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(8, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1768, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} ieee80211_queue_delayed_work($p81, $p82, $i79);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb17;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64(1);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(256, 1)), $mul.ref($i66, 4));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i70 := wl1271_tx_min_rate_get($p0, $i69);
    call {:si_unique_call 607} {:cexpr "rate"} boogie_si_record_i32($i70);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i71 := wl1271_scan_send($p0, $p1, 1, 1, $i70);
    call {:si_unique_call 609} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i13 := $i71;
    goto $bb17;

  $bb42:
    assume $i72 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 5);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} wl1271_scan_stm($p0, $p1);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64(1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(256, 1)), $mul.ref($i57, 4));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i61 := wl1271_tx_min_rate_get($p0, $i60);
    call {:si_unique_call 603} {:cexpr "rate"} boogie_si_record_i32($i61);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i62 := wl1271_scan_send($p0, $p1, 1, 0, $i61);
    call {:si_unique_call 605} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i13 := $i62;
    goto $bb17;

  $bb39:
    assume $i63 == 1;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 4);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} wl1271_scan_stm($p0, $p1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64(0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(256, 1)), $mul.ref($i33, 4));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    call {:si_unique_call 615} {:cexpr "mask"} boogie_si_record_i32($i36);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(0, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 104)), $mul.ref(98, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i36;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i47 := wl1271_tx_min_rate_get($p0, $i46);
    call {:si_unique_call 624} {:cexpr "rate"} boogie_si_record_i32($i47);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i48 := wl1271_scan_send($p0, $p1, 0, 1, $i47);
    call {:si_unique_call 626} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i13 := $i48;
    goto $bb17;

  $bb33:
    assume $i49 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(3545, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i52 == 1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 5);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} wl1271_scan_stm($p0, $p1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 3);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i36, $sub.i32(0, 40));
    call {:si_unique_call 622} {:cexpr "mask"} boogie_si_record_i32($i43);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb32;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i45 := 8;
    goto $bb31;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64(0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(256, 1)), $mul.ref($i14, 4));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 614} {:cexpr "mask"} boogie_si_record_i32($i17);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(0, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(98, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i17;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i28 := wl1271_tx_min_rate_get($p0, $i27);
    call {:si_unique_call 618} {:cexpr "rate"} boogie_si_record_i32($i28);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i29 := wl1271_scan_send($p0, $p1, 0, 0, $i28);
    call {:si_unique_call 620} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i13 := $i29;
    goto $bb17;

  $bb24:
    assume $i30 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(17, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} wl1271_scan_stm($p0, $p1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i17, $sub.i32(0, 40));
    call {:si_unique_call 616} {:cexpr "mask"} boogie_si_record_i32($i24);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb23;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i26 := 8;
    goto $bb22;

  $bb11:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb17;
}



const wl1271_tx_min_rate_get: ref;

axiom wl1271_tx_min_rate_get == $sub.ref(0, 724192);

procedure wl1271_tx_min_rate_get($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_tx_min_rate_get($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 635} {:cexpr "wl1271_tx_min_rate_get:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 637} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl1271_scan_send: ref;

axiom wl1271_scan_send == $sub.ref(0, 725224);

procedure wl1271_scan_send($p0: ref, $p1: ref, $i2: i32, $i3: i1, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl1271_scan_send($p0: ref, $p1: ref, $i2: i32, $i3: i1, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $i33: i16;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i16;
  var $p39: ref;
  var $i40: i8;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i1;
  var $i67: i32;
  var $i68: i8;
  var $p70: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i8;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $i89: i1;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p103: ref;
  var $i104: i64;
  var $i105: i8;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i8;
  var $i126: i8;
  var $i127: i32;
  var $i128: i8;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $i134: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i32;
  var $i146: i1;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i24;
  var $i167: i24;
  var $i168: i24;
  var $p169: ref;
  var $p170: ref;
  var $i171: i8;
  var $i172: i64;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $i177: i1;
  var $i178: i64;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $i24: i32;
  var $p183: ref;
  var $p184: ref;
  var $i15: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 639} {:cexpr "wl1271_scan_send:arg:band"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 640} {:cexpr "wl1271_scan_send:arg:passive"} boogie_si_record_i1($i3);
    call {:si_unique_call 641} {:cexpr "wl1271_scan_send:arg:basic_rate"} boogie_si_record_i32($i4);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p7 := wl12xx_wlvif_to_vif($p1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i6);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(0, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p16 := kzalloc(540, 208);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p18 := kzalloc(8, 208);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p17);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p19);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(28, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i6);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i33;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 1408)), $mul.ref(34, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i40);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 255);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 649} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i48);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 651} {:cexpr "tmp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i48, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 654} {:cexpr "tmp___3"} boogie_si_record_i64($i57);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $i38);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(0, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(52, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i6);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i67 := wl1271_get_scan_channels($p0, $p63, $p65, $i2, $i66);
    call {:si_unique_call 656} {:cexpr "tmp___4"} boogie_si_record_i32($i67);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i68);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i4);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(24, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i16.i8($i81);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i82);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(5, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, $sub.i8(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(45, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i2, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i89 == 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(44, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(56, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(532, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 658} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p118, $p120, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i2);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(18, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(56, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i134 := $load.i64($M.0, $p133);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(0, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(0, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.0, $p143);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i145 := wl12xx_cmd_build_probe_req($p0, $p1, $i125, $i128, $p131, $i134, $p139, $i144, $0.ref, 0, 0);
    call {:si_unique_call 660} {:cexpr "ret"} boogie_si_record_i32($i145);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i145, 0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(28, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, $i151);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p19);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i154 := wl1271_cmd_send($p0, 26, $p153, 8, 0);
    call {:si_unique_call 663} {:cexpr "ret"} boogie_si_record_i32($i154);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i154, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, 256);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p17);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i180 := wl1271_cmd_send($p0, 7, $p179, 540, 0);
    call {:si_unique_call 669} {:cexpr "ret"} boogie_si_record_i32($i180);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i24 := $i180;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p17);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} kfree($p183);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p19);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} kfree($p184);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i15 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb54:
    assume $i181 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_97 := printk.ref(.str.183);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i24 := $i180;
    goto $bb13;

  $bb45:
    assume $i159 == 1;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p160, .str);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p161, .str.181);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p162, .str.103);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p163, .str.182);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i166 := $load.i24($M.20, $p165);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i167 := $and.i24($i166, $sub.i24(0, 262144));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i168 := $or.i24($i167, 173);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.20 := $store.i24($M.20, $p165, $i168);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p169, 0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.21, $p170);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i64($i171);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i173 := $and.i64($i172, 1);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i174 := ldv__builtin_expect($i173, 0);
    call {:si_unique_call 666} {:cexpr "tmp___5"} boogie_si_record_i64($i174);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i175 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p17);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i177 := $ult.i64(540, 1024);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i177 == 1);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i178 := 1024;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} print_hex_dump(.str.4, .str.182, 2, 16, 1, $p176, $i178, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i177 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i178 := 540;
    goto $bb51;

  $bb42:
    assume $i155 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_96 := printk.ref(.str.180);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i24 := $i154;
    goto $bb13;

  $bb39:
    assume $i146 == 1;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_95 := printk.ref(.str.179);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i24 := $i145;
    goto $bb13;

  $bb33:
    assume $i97 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(18, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb35;

  $bb36:
    assume $i101 == 1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(56, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i8($i104);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(6, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i105);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(18, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(56, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.0, $p115);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 657} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p110, $p113, $i116, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i89 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 540)), $mul.ref(4, 1)), $mul.ref(44, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i75 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb13;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb13;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} warn_slowpath_null(.str.103, 123);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i33);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    call {:si_unique_call 648} {:cexpr "scan_options"} boogie_si_record_i16($i37);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb20;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32(0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 2);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    call {:si_unique_call 647} {:cexpr "scan_options"} boogie_si_record_i16($i32);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb17;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 726256);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 671} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 672} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 727288);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 675} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ieee80211_queue_delayed_work: ref;

axiom ieee80211_queue_delayed_work == $sub.ref(0, 728320);

procedure ieee80211_queue_delayed_work($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation ieee80211_queue_delayed_work($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} {:cexpr "ieee80211_queue_delayed_work:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 729352);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 679} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl12xx_wlvif_to_vif: ref;

axiom wl12xx_wlvif_to_vif == $sub.ref(0, 730384);

procedure wl12xx_wlvif_to_vif($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wl12xx_wlvif_to_vif($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 296), 304));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const wl1271_get_scan_channels: ref;

axiom wl1271_get_scan_channels == $sub.ref(0, 731416);

procedure wl1271_get_scan_channels($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation wl1271_get_scan_channels($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i24;
  var $i92: i24;
  var $i93: i24;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $i101: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i64;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i24;
  var $i128: i24;
  var $i129: i24;
  var $p130: ref;
  var $p131: ref;
  var $i132: i8;
  var $i133: i64;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $i137: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $i172: i64;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i64;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i64;
  var $p200: ref;
  var $i201: i64;
  var $p203: ref;
  var $i204: i64;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i8;
  var $i211: i64;
  var $p213: ref;
  var $i214: i64;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i16;
  var $i220: i8;
  var $i221: i64;
  var $p223: ref;
  var $i224: i64;
  var $p226: ref;
  var $p227: ref;
  var $i228: i64;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $i241: i1;
  var $i242: i1;
  var $i16: i32;
  var $i17: i32;
  var $i243: i32;
  var $i15: i32;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 684} {:cexpr "wl1271_get_scan_channels:arg:band"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i4);
    call {:si_unique_call 685} {:cexpr "wl1271_get_scan_channels:arg:passive"} boogie_si_record_i1($i4);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, 0;
    goto $bb4;

  $bb4:
    call $i18, $p20, $p21, $p22, $i23, $i24, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $i57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p67, $p68, $p69, $i70, $i71, $p73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $p85, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $p103, $p104, $p105, $i106, $i107, $i108, $p110, $p111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $p139, $p140, $p141, $i142, $i143, $p145, $p146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $i170, $i171, $i172, $p174, $p175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $p185, $p186, $i187, $i188, $p190, $p191, $i192, $i193, $p195, $p196, $i197, $i198, $p200, $i201, $p203, $i204, $p206, $p207, $p208, $i209, $i210, $i211, $p213, $i214, $p216, $p217, $p218, $i219, $i220, $i221, $p223, $i224, $p226, $p227, $i228, $p230, $p231, $i232, $p234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i16, $i17, $i243, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27 := wl1271_get_scan_channels_loop_$bb4($p0, $p1, $p2, $i3, $p5, $p6, $p7, $p8, $i9, $p12, $i18, $p20, $p21, $p22, $i23, $i24, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $i57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p67, $p68, $p69, $i70, $i71, $p73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $p85, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $p103, $p104, $p105, $i106, $i107, $i108, $p110, $p111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $p139, $p140, $p141, $i142, $i143, $p145, $p146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $i170, $i171, $i172, $p174, $p175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $p185, $p186, $i187, $i188, $p190, $p191, $i192, $i193, $p195, $p196, $i197, $i198, $p200, $i201, $p203, $i204, $p206, $p207, $p208, $i209, $i210, $i211, $p213, $i214, $p216, $p217, $p218, $i219, $i220, $i221, $p223, $i224, $p226, $p227, $i228, $p230, $p231, $i232, $p234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i16, $i17, $i243, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27);
    goto $bb4_last;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i18, 8));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 686} {:cexpr "flags"} boogie_si_record_i32($i23);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i17);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(8, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i28 := variable_test_bit($i24, $p27);
    call {:si_unique_call 688} {:cexpr "tmp___7"} boogie_si_record_i32($i28);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i237 := $i16;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i238 := $add.i32($i17, 1);
    call {:si_unique_call 713} {:cexpr "i"} boogie_si_record_i32($i238);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p12);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i240 := $ult.i32($i238, $i239);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i241 := $sle.i32($i237, 23);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i242 := $and.i1($i240, $i241);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i243 := $i237;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i15 := $i243;
    goto $bb3;

  $bb46:
    assume $i242 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i237, $i238;
    goto $bb46_dummy;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i23, 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb8;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i17);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i32, 8));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, $i3);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb8;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i9);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i39 == 1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i23, 2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 256);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 690} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 256);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i83 := ldv__builtin_expect($i82, 0);
    call {:si_unique_call 695} {:cexpr "tmp___2"} boogie_si_record_i64($i83);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 256);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i116);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i117);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i119 := ldv__builtin_expect($i118, 0);
    call {:si_unique_call 700} {:cexpr "tmp___4"} boogie_si_record_i64($i119);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 256);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i152 := $zext.i1.i32($i151);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i152);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 705} {:cexpr "tmp___6"} boogie_si_record_i64($i154);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i8.i1($i9);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i180 == 1);
    $p181 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(0, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i16);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p2, $mul.ref($i183, 20)), $mul.ref(0, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, $i182);
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(4, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i16);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p2, $mul.ref($i188, 20)), $mul.ref(4, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, $i187);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i16);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p2, $mul.ref($i201, 20)), $mul.ref(14, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i204 := $sext.i32.i64($i17);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i204, 8));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i32.i8($i209);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i16);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p2, $mul.ref($i211, 20)), $mul.ref(15, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p213, $i210);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i214 := $sext.i32.i64($i17);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i214, 8));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i219 := $load.i16($M.0, $p218);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i16.i8($i219);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i221 := $sext.i32.i64($i16);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p2, $mul.ref($i221, 20)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p223, $i220);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i224 := $sext.i32.i64($i16);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p2, $mul.ref($i224, 20)), $mul.ref(8, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 709} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p227, $sub.i8(0, 1), 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i228 := $sext.i32.i64($i16);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p2, $mul.ref($i228, 20)), $mul.ref(12, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 710} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p231, $sub.i8(0, 1), 2, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i17);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(8, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} set_bit($i232, $p235);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i236 := $add.i32($i16, 1);
    call {:si_unique_call 712} {:cexpr "j"} boogie_si_record_i32($i236);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i237 := $i236;
    goto $bb45;

  $bb42:
    assume $i180 == 1;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(16, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i16);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref($i193, 20)), $mul.ref(0, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, $i192);
    $p196 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(16, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i16);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p2, $mul.ref($i198, 20)), $mul.ref(4, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, $i197);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i155 == 1;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p156, .str);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p157, .str.184);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p158, .str.103);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p159, .str.188);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.7, $p161);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 62);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p161, $i164);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p165, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.8, $p166);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 707} {:cexpr "tmp___5"} boogie_si_record_i64($i170);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i171 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i17);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i172, 8));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.0, $p176);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i8.i1($i177);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i179 := $zext.i1.i32($i178);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} __dynamic_pr_debug.ref.ref.i32($p8, .str.188, $i179);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i120 == 1;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p121, .str);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p122, .str.184);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p123, .str.103);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p124, .str.187);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i127 := $load.i24($M.7, $p126);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i128 := $and.i24($i127, $sub.i24(0, 262144));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i129 := $or.i24($i128, 60);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p126, $i129);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p130, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.8, $p131);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i64($i132);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i134 := $and.i64($i133, 1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i135 := ldv__builtin_expect($i134, 0);
    call {:si_unique_call 702} {:cexpr "tmp___3"} boogie_si_record_i64($i135);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i136 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i17);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i137, 8));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i17);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i143, 8));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} __dynamic_pr_debug.ref.ref.i32.i32($p7, .str.187, $i142, $i148);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i84 == 1;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p85, .str);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p86, .str.184);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p87, .str.103);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p88, .str.186);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i91 := $load.i24($M.7, $p90);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i92 := $and.i24($i91, $sub.i24(0, 262144));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i93 := $or.i24($i92, 56);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p90, $i93);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p94, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.8, $p95);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i64($i96);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, 1);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 697} {:cexpr "tmp___1"} boogie_si_record_i64($i99);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i100 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i17);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i101, 8));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i17);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i108, 8));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __dynamic_pr_debug.ref.ref.i32.i32($p6, .str.186, $i107, $i113);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.184);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.103);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, .str.185);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.7, $p54);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 53);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p54, $i57);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p58, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.8, $p59);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 692} {:cexpr "tmp"} boogie_si_record_i64($i63);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i17);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i65, 8));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i17);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref($i71, 8));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __dynamic_pr_debug.ref.ref.i32.i32($p5, .str.185, $i70, $i77);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb14;

  $bb46_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 732448);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 733480);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 715} devirtbounce.2(0, $p1, $i0, $p1);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    return;
}



const debugfs_create_dir: ref;

axiom debugfs_create_dir == $sub.ref(0, 734512);

procedure debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p2 := external_alloc();
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 735544);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i1 := ldv_is_err($p0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 718} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debugfs_create_file: ref;

axiom debugfs_create_file == $sub.ref(0, 736576);

procedure debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} {:cexpr "debugfs_create_file:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p5 := external_alloc();
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 737608);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 738640);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 739672);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 740704);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl12xx_mac_in_fuse: ref;

axiom wl12xx_mac_in_fuse == $sub.ref(0, 741736);

procedure wl12xx_mac_in_fuse($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl12xx_mac_in_fuse($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 84082961);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(488, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 3);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 728} {:cexpr "major"} boogie_si_record_i8($i31);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(488, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 12);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i36 := $ashr.i32($i35, 2);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    call {:si_unique_call 729} {:cexpr "minor"} boogie_si_record_i8($i37);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i31);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 3);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := $i31, $i42, $i37;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 262144);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 731} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i25);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $r := $i70;
    return;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p50, .str);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p51, .str.145);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p52, .str.146);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, .str.147);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.7, $p55);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 1511);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p55, $i58);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p59, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.8, $p60);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 733} {:cexpr "tmp"} boogie_si_record_i64($i64);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i24);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i26);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i25);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p69 := (if $i68 == 1 then .str.148 else .str.149);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} __dynamic_pr_debug.ref.ref.i32.i32.ref($p1, .str.147, $i66, $i67, $p69);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i37);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb15;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb18;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(488, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 12);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 2);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 726} {:cexpr "major"} boogie_si_record_i8($i11);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(488, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 3);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 727} {:cexpr "minor"} boogie_si_record_i8($i16);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i11);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 2);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i11);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := $i11, $i23, $i16;
    goto $bb12;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i16);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb11;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb4;
}



const wl12xx_get_fuse_mac: ref;

axiom wl12xx_get_fuse_mac == $sub.ref(0, 742768);

procedure wl12xx_get_fuse_mac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22;



implementation wl12xx_get_fuse_mac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10664, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(3, 32));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i6 := wlcore_set_partition($p0, $p5);
    call {:si_unique_call 738} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i9 := wlcore_read32($p0, 3215028, $p1);
    call {:si_unique_call 740} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i11 := wlcore_read32($p0, 3215032, $p2);
    call {:si_unique_call 742} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.22, $p2);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 65535);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 8);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.22, $p1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i16, 24);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i15, $i17);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(492, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.22, $p1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 16777215);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(496, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10664, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i25 := wlcore_set_partition($p0, $p24);
    call {:si_unique_call 744} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const wlcore_set_partition: ref;

axiom wlcore_set_partition == $sub.ref(0, 743800);

procedure wlcore_set_partition($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_set_partition($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 746} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wlcore_read32: ref;

axiom wlcore_read32 == $sub.ref(0, 744832);

procedure wlcore_read32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22;



implementation wlcore_read32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} {:cexpr "wlcore_read32:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i3 := wlcore_translate_addr($p0, $i1);
    call {:si_unique_call 749} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i4 := wlcore_raw_read32($p0, $i3, $p2);
    call {:si_unique_call 751} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wlcore_translate_addr: ref;

axiom wlcore_translate_addr == $sub.ref(0, 745864);

procedure wlcore_translate_addr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_translate_addr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} {:cexpr "wlcore_translate_addr:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wlcore_raw_read32: ref;

axiom wlcore_raw_read32 == $sub.ref(0, 746896);

procedure wlcore_raw_read32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22;



implementation wlcore_raw_read32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "wlcore_raw_read32:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2512, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i6 := wlcore_raw_read($p0, $i1, $p5, 4, 0);
    call {:si_unique_call 757} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2512, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p2, $i13);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const wlcore_raw_read: ref;

axiom wlcore_raw_read == $sub.ref(0, 747928);

procedure wlcore_raw_read($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_raw_read($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32)
{
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "wlcore_raw_read:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 759} {:cexpr "wlcore_raw_read:arg:len"} boogie_si_record_i64($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 760} {:cexpr "wlcore_raw_read:arg:fixed"} boogie_si_record_i1($i4);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(320, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i7 := constant_test_bit(14, $p6);
    call {:si_unique_call 762} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(320, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i11 := constant_test_bit(3, $p10);
    call {:si_unique_call 764} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i13);
    call {:si_unique_call 765} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i15);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 767} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 770} {:cexpr "tmp___2"} boogie_si_record_i64($i24);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(48, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(24, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i5);
    call {:si_unique_call 771} $i33 := devirtbounce.3($p29, $p31, $i1, $p2, $i3, $i32);
    call {:si_unique_call 772} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(136, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(320, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} set_bit(14, $p38);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} warn_slowpath_null(.str.128, 83);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i1, 131068);
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;
}



const wl12xx_top_reg_read: ref;

axiom wl12xx_top_reg_read == $sub.ref(0, 748960);

procedure wl12xx_top_reg_read($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.22, $CurrAddr, $M.0;



implementation wl12xx_top_reg_read($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i13: i32;
  var $i14: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i23: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i38: i16;
  var $i8: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 775} {:cexpr "wl12xx_top_reg_read:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i4 := $ashr.i32($i1, 1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 196608);
    call {:si_unique_call 776} {:cexpr "addr"} boogie_si_record_i32($i5);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i6 := wlcore_write32($p0, 3148212, $i5);
    call {:si_unique_call 778} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i9 := wlcore_write32($p0, 3148224, 2);
    call {:si_unique_call 780} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i11 := wlcore_read32($p0, 3148220, $p3);
    call {:si_unique_call 782} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i14 := 32;
    goto $bb11;

  $bb11:
    call $i15, $i16, $i17, $i18, $i14, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i23 := wl12xx_top_reg_read_loop_$bb11($p0, $p3, $i15, $i16, $i17, $i18, $i14, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i23);
    goto $bb11_last;

  $bb15:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.22, $p3);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 262144);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i23 := $i14;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.22, $p3);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 196608);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 65536);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p2);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb27:
    assume $i36 == 1;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.22, $p3);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p2, $i38);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i33 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_99 := printk.ref(.str.164);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_98 := printk.ref(.str.163);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 110);
    goto $bb3;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i14, 1);
    call {:si_unique_call 785} {:cexpr "timeout"} boogie_si_record_i32($i24);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i15, $i26 := $i24, $i24;
    assume true;
    goto $bb12, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb19;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i16 := wlcore_read32($p0, 3148220, $p3);
    call {:si_unique_call 784} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb14_dummy;

  $bb13:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;
}



const wlcore_write32: ref;

axiom wlcore_write32 == $sub.ref(0, 749992);

procedure wlcore_write32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wlcore_write32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} {:cexpr "wlcore_write32:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 789} {:cexpr "wlcore_write32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i3 := wlcore_translate_addr($p0, $i1);
    call {:si_unique_call 791} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i4 := wlcore_raw_write32($p0, $i3, $i2);
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wlcore_raw_write32: ref;

axiom wlcore_raw_write32 == $sub.ref(0, 751024);

procedure wlcore_raw_write32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wlcore_raw_write32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} {:cexpr "wlcore_raw_write32:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 795} {:cexpr "wlcore_raw_write32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2512, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i2);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2512, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i8 := wlcore_raw_write($p0, $i1, $p7, 4, 0);
    call {:si_unique_call 797} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const wlcore_raw_write: ref;

axiom wlcore_raw_write == $sub.ref(0, 752056);

procedure wlcore_raw_write($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_raw_write($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32)
{
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} {:cexpr "wlcore_raw_write:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 799} {:cexpr "wlcore_raw_write:arg:len"} boogie_si_record_i64($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 800} {:cexpr "wlcore_raw_write:arg:fixed"} boogie_si_record_i1($i4);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(320, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i7 := constant_test_bit(14, $p6);
    call {:si_unique_call 802} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(320, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i11 := constant_test_bit(3, $p10);
    call {:si_unique_call 804} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i13);
    call {:si_unique_call 805} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i15);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 807} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 810} {:cexpr "tmp___2"} boogie_si_record_i64($i24);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(48, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(24, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i5);
    call {:si_unique_call 811} $i33 := devirtbounce.3($p29, $p31, $i1, $p2, $i3, $i32);
    call {:si_unique_call 812} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(136, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(320, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} set_bit(14, $p38);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} warn_slowpath_null(.str.128, 65);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i1, 131068);
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;
}



const wl128x_cmd_general_parms: ref;

axiom wl128x_cmd_general_parms == $sub.ref(0, 753088);

procedure wl128x_cmd_general_parms($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl128x_cmd_general_parms($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i8;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p58: ref;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p96: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i56: i32;
  var $p104: ref;
  var $i13: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1)), $mul.ref(11, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 3);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p19 := kzalloc(96, 208);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 30);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 817} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p26, $p27, 65, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(10, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i41);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(3, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i46);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p20);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i38);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i53 := wl1271_cmd_test($p0, $p49, 96, $i52);
    call {:si_unique_call 819} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(11, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1)), $mul.ref(11, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i59);
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1)), $mul.ref(11, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i32($i63, 3);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 4096);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 824} {:cexpr "tmp___1"} boogie_si_record_i64($i77);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i56 := $i53;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p20);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} kfree($p104);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i13 := $i56;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb27:
    assume $i78 == 1;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.15);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p81, .str.2);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p82, .str.10);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.7, $p84);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 191);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p84, $i87);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p88, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.8, $p89);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 826} {:cexpr "tmp___0"} boogie_si_record_i64($i93);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i94 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i38);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i95 == 1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p96 := .str.11;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1)), $mul.ref(11, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} __dynamic_pr_debug.ref.ref.ref.i32($p1, .str.10, $p96, $i103);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i95 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p100 := (if $i99 == 1 then .str.12 else .str.13);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p96 := $p100;
    goto $bb33;

  $bb24:
    assume $i68 == 1;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1)), $mul.ref(11, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(152, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_102 := printk.ref(.str.8);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb19;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_101 := printk.ref(.str.7);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i56 := $i53;
    goto $bb19;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(10, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_100 := printk.ref(.str.14);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;
}



const wl128x_cmd_radio_parms: ref;

axiom wl128x_cmd_radio_parms == $sub.ref(0, 754120);

procedure wl128x_cmd_radio_parms($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation wl128x_cmd_radio_parms($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i1;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i10: i32;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p11 := kzalloc(340, 208);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 342)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 25);
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(468, 1)), $mul.ref(11, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 830} {:cexpr "fem_idx"} boogie_si_record_i32($i21);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 342)), $mul.ref(8, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(534, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 831} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p23, $p25, 30, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 342)), $mul.ref(96, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i21);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(566, 1)), $mul.ref($i28, 90)), $mul.ref(0, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 832} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p27, $p32, 87, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 342)), $mul.ref(38, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(746, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 833} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p34, $p36, 57, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 342)), $mul.ref(186, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i21);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(804, 1)), $mul.ref($i39, 158)), $mul.ref(0, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 834} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p38, $p43, 156, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 1120)), $mul.ref(533, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p12, $mul.ref(0, 342)), $mul.ref(95, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 4096);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p12);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i70 := wl1271_cmd_test($p0, $p69, 340, 0);
    call {:si_unique_call 839} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p12);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} kfree($p73);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i10 := $i70;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_103 := printk.ref(.str.18);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p50, .str);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p51, .str.19);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p52, .str.2);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p53, .str.17);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.27, $p55);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 278);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p55, $i58);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p59, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.28, $p60);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i65 == 1;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p12);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i67 := $ult.i64(340, 1024);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i67 == 1);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i68 := 1024;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} print_hex_dump(.str.4, .str.17, 2, 16, 1, $p66, $i68, 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i67 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i68 := 340;
    goto $bb14;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;
}



const wl1271_acx_host_if_cfg_bitmap: ref;

axiom wl1271_acx_host_if_cfg_bitmap == $sub.ref(0, 755152);

procedure wl1271_acx_host_if_cfg_bitmap($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wl1271_acx_host_if_cfg_bitmap($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i6: i32;
  var $p12: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} {:cexpr "wl1271_acx_host_if_cfg_bitmap:arg:host_cfg_bitmap"} boogie_si_record_i32($i1);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p2 := kzalloc(12, 208);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i9 := wl1271_cmd_configure($p0, 57, $p8, 12);
    call {:si_unique_call 846} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} kfree($p12);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_104 := printk.ref.i32(.str.23, $i9);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const wl1271_cmd_general_parms: ref;

axiom wl1271_cmd_general_parms == $sub.ref(0, 756184);

procedure wl1271_cmd_general_parms($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl1271_cmd_general_parms($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p53: ref;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i24;
  var $i81: i24;
  var $i82: i24;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $i90: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p91: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i51: i32;
  var $p99: ref;
  var $i13: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1)), $mul.ref(6, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 3);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p19 := kzalloc(88, 208);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 88)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 30);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 851} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p26, $p27, 57, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i41);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p20);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i38);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i48 := wl1271_cmd_test($p0, $p44, 88, $i47);
    call {:si_unique_call 853} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    $p55 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1)), $mul.ref(6, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i54);
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1)), $mul.ref(6, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i58, 3);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 4096);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 858} {:cexpr "tmp___1"} boogie_si_record_i64($i72);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i51 := $i48;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p20);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} kfree($p99);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i13 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb27:
    assume $i73 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p74, .str);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p75, .str.9);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p76, .str.2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p77, .str.10);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i80 := $load.i24($M.7, $p79);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i81 := $and.i24($i80, $sub.i24(0, 262144));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i82 := $or.i24($i81, 123);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p79, $i82);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p83, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.8, $p84);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 860} {:cexpr "tmp___0"} boogie_si_record_i64($i88);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i89 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i38);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i90 == 1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p91 := .str.11;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1)), $mul.ref(6, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} __dynamic_pr_debug.ref.ref.ref.i32($p1, .str.10, $p91, $i98);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i90 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(148, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p95 := (if $i94 == 1 then .str.12 else .str.13);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p91 := $p95;
    goto $bb33;

  $bb24:
    assume $i63 == 1;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1)), $mul.ref(6, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(152, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i65);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_107 := printk.ref(.str.8);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 22);
    goto $bb19;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_106 := printk.ref(.str.7);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i51 := $i48;
    goto $bb19;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 1);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_105 := printk.ref(.str.6);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;
}



const wl1271_cmd_radio_parms: ref;

axiom wl1271_cmd_radio_parms == $sub.ref(0, 757216);

procedure wl1271_cmd_radio_parms($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr;



implementation wl1271_cmd_radio_parms($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i1;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i10: i32;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p11 := kzalloc(224, 208);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 226)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 25);
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(468, 1)), $mul.ref(6, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 864} {:cexpr "fem_idx"} boogie_si_record_i32($i21);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 226)), $mul.ref(8, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(526, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 865} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p23, $p25, 17, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 226)), $mul.ref(54, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i21);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(544, 1)), $mul.ref($i28, 68)), $mul.ref(0, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 866} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p27, $p32, 65, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 226)), $mul.ref(25, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(680, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 867} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p34, $p36, 29, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 226)), $mul.ref(122, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i21);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 918)), $mul.ref(710, 1)), $mul.ref($i39, 104)), $mul.ref(0, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 868} cmdloc_dummy_var_57 := $memcpy.i8(cmdloc_dummy_var_55, cmdloc_dummy_var_56, $p38, $p43, 102, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 4096);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p12);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i67 := wl1271_cmd_test($p0, $p66, 224, 0);
    call {:si_unique_call 873} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p12);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} kfree($p70);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i10 := $i67;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_108 := printk.ref(.str.18);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p47, .str);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p48, .str.16);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p49, .str.2);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p50, .str.17);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.33, $p52);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 232);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, $p52, $i55);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p56, 0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.34, $p57);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 870} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i62 == 1;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p12);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i64 := $ult.i64(224, 1024);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i64 == 1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i65 := 1024;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} print_hex_dump(.str.4, .str.17, 2, 16, 1, $p63, $i65, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i64 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i65 := 224;
    goto $bb14;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;
}



const wl1271_cmd_ext_radio_parms: ref;

axiom wl1271_cmd_ext_radio_parms == $sub.ref(0, 758248);

procedure wl1271_cmd_ext_radio_parms($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr;



implementation wl1271_cmd_ext_radio_parms($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i1;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i11: i32;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(472, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p12 := kzalloc(36, 208);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 38);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    cmdloc_dummy_var_59 := $M.0;
    call {:si_unique_call 878} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p19, $p21, 7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_60;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 36)), $mul.ref(15, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    $p24 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 879} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p23, $p25, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4096);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p13);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i49 := wl1271_cmd_test($p0, $p48, 36, 0);
    call {:si_unique_call 884} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p13);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} kfree($p52);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_109 := printk.ref(.str.5);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p29, .str);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p30, .str.1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p31, .str.2);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p32, .str.3);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.39, $p34);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 53);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p34, $i37);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p38, 0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.40, $p39);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 881} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p13);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i46 := $ult.i64(36, 1024);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i47 := 1024;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} print_hex_dump(.str.4, .str.3, 2, 16, 1, $p45, $i47, 0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i47 := 36;
    goto $bb14;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb3;
}



const wl1271_cmd_test: ref;

axiom wl1271_cmd_test == $sub.ref(0, 759280);

procedure wl1271_cmd_test($p0: ref, $p1: ref, $i2: i64, $i3: i8) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_cmd_test($p0: ref, $p1: ref, $i2: i64, $i3: i8) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 887} {:cexpr "wl1271_cmd_test:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 888} {:cexpr "wl1271_cmd_test:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wl1271_cmd_configure: ref;

axiom wl1271_cmd_configure == $sub.ref(0, 760312);

procedure wl1271_cmd_configure($p0: ref, $i1: i16, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_cmd_configure($p0: ref, $i1: i16, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 891} {:cexpr "wl1271_cmd_configure:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 892} {:cexpr "wl1271_cmd_configure:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 1} true;
    call {:si_unique_call 893} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 894} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wlcore_tx_complete: ref;

axiom wlcore_tx_complete == $sub.ref(0, 761344);

procedure wlcore_tx_complete($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_tx_complete($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wlcore_calc_packet_alignment: ref;

axiom wlcore_calc_packet_alignment == $sub.ref(0, 762376);

procedure wlcore_calc_packet_alignment($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_calc_packet_alignment($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} {:cexpr "wlcore_calc_packet_alignment:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 899} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl12xx_scan_completed: ref;

axiom wl12xx_scan_completed == $sub.ref(0, 763408);

procedure wl12xx_scan_completed($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation wl12xx_scan_completed($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} wl1271_scan_stm($p0, $p1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_scan_sched_scan_results: ref;

axiom wlcore_scan_sched_scan_results == $sub.ref(0, 764440);

procedure wlcore_scan_sched_scan_results($p0: ref);
  free requires assertsPassed;



implementation wlcore_scan_sched_scan_results($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_sched_scan_completed: ref;

axiom wlcore_event_sched_scan_completed == $sub.ref(0, 765472);

procedure wlcore_event_sched_scan_completed($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation wlcore_event_sched_scan_completed($p0: ref, $i1: i8)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} {:cexpr "wlcore_event_sched_scan_completed:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_soft_gemini_sense: ref;

axiom wlcore_event_soft_gemini_sense == $sub.ref(0, 766504);

procedure wlcore_event_soft_gemini_sense($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation wlcore_event_soft_gemini_sense($p0: ref, $i1: i8)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} {:cexpr "wlcore_event_soft_gemini_sense:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_beacon_loss: ref;

axiom wlcore_event_beacon_loss == $sub.ref(0, 767536);

procedure wlcore_event_beacon_loss($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation wlcore_event_beacon_loss($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} {:cexpr "wlcore_event_beacon_loss:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_rssi_trigger: ref;

axiom wlcore_event_rssi_trigger == $sub.ref(0, 768568);

procedure wlcore_event_rssi_trigger($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation wlcore_event_rssi_trigger($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_ba_rx_constraint: ref;

axiom wlcore_event_ba_rx_constraint == $sub.ref(0, 769600);

procedure wlcore_event_ba_rx_constraint($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation wlcore_event_ba_rx_constraint($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "wlcore_event_ba_rx_constraint:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 905} {:cexpr "wlcore_event_ba_rx_constraint:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_channel_switch: ref;

axiom wlcore_event_channel_switch == $sub.ref(0, 770632);

procedure wlcore_event_channel_switch($p0: ref, $i1: i64, $i2: i1);
  free requires assertsPassed;



implementation wlcore_event_channel_switch($p0: ref, $i1: i64, $i2: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "wlcore_event_channel_switch:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 907} {:cexpr "wlcore_event_channel_switch:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_dummy_packet: ref;

axiom wlcore_event_dummy_packet == $sub.ref(0, 771664);

procedure wlcore_event_dummy_packet($p0: ref);
  free requires assertsPassed;



implementation wlcore_event_dummy_packet($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_max_tx_failure: ref;

axiom wlcore_event_max_tx_failure == $sub.ref(0, 772696);

procedure wlcore_event_max_tx_failure($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation wlcore_event_max_tx_failure($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "wlcore_event_max_tx_failure:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_inactive_sta: ref;

axiom wlcore_event_inactive_sta == $sub.ref(0, 773728);

procedure wlcore_event_inactive_sta($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation wlcore_event_inactive_sta($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} {:cexpr "wlcore_event_inactive_sta:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_event_roc_complete: ref;

axiom wlcore_event_roc_complete == $sub.ref(0, 774760);

procedure wlcore_event_roc_complete($p0: ref);
  free requires assertsPassed;



implementation wlcore_event_roc_complete($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_cmd_wait_for_event_or_timeout: ref;

axiom wlcore_cmd_wait_for_event_or_timeout == $sub.ref(0, 775792);

procedure wlcore_cmd_wait_for_event_or_timeout($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_cmd_wait_for_event_or_timeout($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 910} {:cexpr "wlcore_cmd_wait_for_event_or_timeout:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 911} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wlcore_write_reg: ref;

axiom wlcore_write_reg == $sub.ref(0, 776824);

procedure wlcore_write_reg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wlcore_write_reg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} {:cexpr "wlcore_write_reg:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 914} {:cexpr "wlcore_write_reg:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10672, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 4));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i8 := wlcore_translate_addr($p0, $i7);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i9 := wlcore_raw_write32($p0, $i8, $i2);
    call {:si_unique_call 918} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const wlcore_write: ref;

axiom wlcore_write == $sub.ref(0, 777856);

procedure wlcore_write($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_write($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} {:cexpr "wlcore_write:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 920} {:cexpr "wlcore_write:arg:len"} boogie_si_record_i64($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 921} {:cexpr "wlcore_write:arg:fixed"} boogie_si_record_i1($i4);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i6 := wlcore_translate_addr($p0, $i1);
    call {:si_unique_call 923} {:cexpr "physical"} boogie_si_record_i32($i6);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i5);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i8 := wlcore_raw_write($p0, $i6, $p2, $i3, $i7);
    call {:si_unique_call 925} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const wl1271_acx_init_mem_config: ref;

axiom wl1271_acx_init_mem_config == $sub.ref(0, 778888);

procedure wl1271_acx_init_mem_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_acx_init_mem_config($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 927} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl12xx_acx_mem_cfg: ref;

axiom wl12xx_acx_mem_cfg == $sub.ref(0, 779920);

procedure wl12xx_acx_mem_cfg($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_acx_mem_cfg($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl1271_cmd_data_path: ref;

axiom wl1271_cmd_data_path == $sub.ref(0, 780952);

procedure wl1271_cmd_data_path($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_cmd_data_path($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 930} {:cexpr "wl1271_cmd_data_path:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl1271_acx_sleep_auth: ref;

axiom wl1271_acx_sleep_auth == $sub.ref(0, 781984);

procedure wl1271_acx_sleep_auth($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_acx_sleep_auth($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} {:cexpr "wl1271_acx_sleep_auth:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 934} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 935} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl1271_acx_pm_config: ref;

axiom wl1271_acx_pm_config == $sub.ref(0, 783016);

procedure wl1271_acx_pm_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_acx_pm_config($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 937} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_12: ref;

axiom ldv_mutex_unlock_12 == $sub.ref(0, 784048);

procedure ldv_mutex_unlock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_unlock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_mutex_unlock_mutex_of_wl1271($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} mutex_unlock($p0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const wlcore_disable_interrupts: ref;

axiom wlcore_disable_interrupts == $sub.ref(0, 785080);

procedure wlcore_disable_interrupts($p0: ref);
  free requires assertsPassed;



implementation wlcore_disable_interrupts($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_13: ref;

axiom ldv_mutex_lock_13 == $sub.ref(0, 786112);

procedure ldv_mutex_lock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_lock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ldv_mutex_lock_mutex_of_wl1271($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} mutex_lock($p0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_mutex_of_wl1271: ref;

axiom ldv_mutex_lock_mutex_of_wl1271 == $sub.ref(0, 787144);

procedure ldv_mutex_lock_mutex_of_wl1271($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_lock_mutex_of_wl1271($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i1 := $M.41;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_mutex_mutex_of_wl1271"} boogie_si_record_i32(2);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 788176);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 789208);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex_of_wl1271: ref;

axiom ldv_mutex_unlock_mutex_of_wl1271 == $sub.ref(0, 790240);

procedure ldv_mutex_unlock_mutex_of_wl1271($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_unlock_mutex_of_wl1271($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i1 := $M.41;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 946} {:cexpr "ldv_mutex_mutex_of_wl1271"} boogie_si_record_i32(1);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 791272);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_pre_boot: ref;

axiom wl12xx_pre_boot == $sub.ref(0, 792304);

procedure wl12xx_pre_boot($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.22, $M.0, $M.9, $CurrAddr;



implementation wl12xx_pre_boot($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p2, $sub.i32(0, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 84082961);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i14 := wl127x_boot_clk($p0);
    call {:si_unique_call 953} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i16 := wlcore_write32($p0, 3170560, 4);
    call {:si_unique_call 955} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} __const_udelay(2147500);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10664, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(3, 32));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i21 := wlcore_set_partition($p0, $p20);
    call {:si_unique_call 958} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i23 := wlcore_read32($p0, 3211308, $p1);
    call {:si_unique_call 960} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 962} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 84082961);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i60 := $shl.i32($i59, 5);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.22, $p1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i60, $i61);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p1, $i62);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.22, $p1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i64 := wlcore_write32($p0, 3211308, $i63);
    call {:si_unique_call 967} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10664, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(1, 32));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i69 := wlcore_set_partition($p0, $p68);
    call {:si_unique_call 969} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i71 := wlcore_write_reg($p0, 6, $sub.i32(0, 1));
    call {:si_unique_call 971} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i73 := wl1271_boot_soft_reset($p0);
    call {:si_unique_call 973} {:cexpr "ret"} boogie_si_record_i32($i73);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i13 := $i73;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb38:
    assume $i74 == 1;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i72 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i13 := $i71;
    goto $bb5;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i13 := $i69;
    goto $bb5;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i13 := $i64;
    goto $bb5;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.42, $p2);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 3);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 5);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.22, $p1);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i55, $i56);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p1, $i57);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.161);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p34, .str.146);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p35, .str.162);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.7, $p37);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 1130);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p37, $i40);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p41, 0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.8, $p42);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 964} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.22, $p1);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} __dynamic_pr_debug.ref.ref.i32($p3, .str.162, $i48);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i13 := $i23;
    goto $bb5;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i13 := $i21;
    goto $bb5;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb5;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb5;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i11 := wl128x_boot_clk($p0, $p2);
    call {:si_unique_call 951} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb5;
}



const wlcore_boot_upload_nvs: ref;

axiom wlcore_boot_upload_nvs == $sub.ref(0, 793336);

procedure wlcore_boot_upload_nvs($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_boot_upload_nvs($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl12xx_pre_upload: ref;

axiom wl12xx_pre_upload == $sub.ref(0, 794368);

procedure wl12xx_pre_upload($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.22, $CurrAddr;



implementation wl12xx_pre_upload($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i16;
  var $i68: i32;
  var $i69: i32;
  var $i70: i16;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 981} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i28 := wlcore_write32($p0, 3167768, 3167768);
    call {:si_unique_call 986} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i31 := wlcore_read_reg($p0, 8, $p1);
    call {:si_unique_call 988} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 4);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 990} {:cexpr "tmp___3"} boogie_si_record_i64($i38);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i57 := wlcore_read32($p0, 3167760, $p1);
    call {:si_unique_call 995} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 84082961);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i65 := wl12xx_top_reg_read($p0, 100, $p2);
    call {:si_unique_call 999} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.9, $p2);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 65533);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p2, $i70);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.9, $p2);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i74 := wl12xx_top_reg_write($p0, 100, $i73);
    call {:si_unique_call 1001} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i30 := $i74;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i30 := $i65;
    goto $bb9;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i63 := wl12xx_top_reg_write($p0, 3348, 2);
    call {:si_unique_call 997} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i30 := $i63;
    goto $bb9;

  $bb20:
    assume $i58 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i30 := $i57;
    goto $bb9;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.170);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p42, .str.146);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, .str.172);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.7, $p45);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 1176);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p45, $i48);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p49, 0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.8, $p50);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 992} {:cexpr "tmp___2"} boogie_si_record_i64($i54);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.22, $p1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __dynamic_pr_debug.ref.ref.i32($p4, .str.172, $i56);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb9;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.170);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.146);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.171);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.7, $p17);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1166);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p17, $i20);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p21, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.8, $p22);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 983} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} __dynamic_pr_debug.ref.ref($p3, .str.171);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const wlcore_boot_upload_firmware: ref;

axiom wlcore_boot_upload_firmware == $sub.ref(0, 795400);

procedure wlcore_boot_upload_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_boot_upload_firmware($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1003} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wlcore_boot_run_firmware: ref;

axiom wlcore_boot_run_firmware == $sub.ref(0, 796432);

procedure wlcore_boot_run_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_boot_run_firmware($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1005} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl12xx_enable_interrupts: ref;

axiom wl12xx_enable_interrupts == $sub.ref(0, 797464);

procedure wl12xx_enable_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_enable_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i6: i32;
  var $i3: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i1 := wlcore_write_reg($p0, 6, 127);
    call {:si_unique_call 1007} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} wlcore_enable_interrupts($p0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i4 := wlcore_write_reg($p0, 6, $sub.i32(0, 110));
    call {:si_unique_call 1010} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i7 := wlcore_write32($p0, 3147784, 60);
    call {:si_unique_call 1013} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} wlcore_disable_interrupts($p0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    goto $bb12;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const wlcore_enable_interrupts: ref;

axiom wlcore_enable_interrupts == $sub.ref(0, 798496);

procedure wlcore_enable_interrupts($p0: ref);
  free requires assertsPassed;



implementation wlcore_enable_interrupts($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    return;
}



const wlcore_read_reg: ref;

axiom wlcore_read_reg == $sub.ref(0, 799528);

procedure wlcore_read_reg($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22;



implementation wlcore_read_reg($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} {:cexpr "wlcore_read_reg:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10672, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 4));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i8 := wlcore_translate_addr($p0, $i7);
    call {:si_unique_call 1016} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i9 := wlcore_raw_read32($p0, $i8, $p2);
    call {:si_unique_call 1018} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const wl12xx_top_reg_write: ref;

axiom wl12xx_top_reg_write == $sub.ref(0, 800560);

procedure wl12xx_top_reg_write($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_top_reg_write($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} {:cexpr "wl12xx_top_reg_write:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1020} {:cexpr "wl12xx_top_reg_write:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i1, 1);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 196608);
    call {:si_unique_call 1021} {:cexpr "addr"} boogie_si_record_i32($i4);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i5 := wlcore_write32($p0, 3148212, $i4);
    call {:si_unique_call 1023} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i9 := wlcore_write32($p0, 3148216, $i8);
    call {:si_unique_call 1025} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i11 := wlcore_write32($p0, 3148224, 1);
    call {:si_unique_call 1027} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const wl128x_boot_clk: ref;

axiom wl128x_boot_clk == $sub.ref(0, 801592);

procedure wl128x_boot_clk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.42, $M.22, $CurrAddr, $M.0;



implementation wl128x_boot_clk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i20: i16;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 5);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i15 := wl12xx_top_reg_read($p0, 8704, $p2);
    call {:si_unique_call 1034} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.9, $p2);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 65535);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.9, $p2);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i64($i20);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 16);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 4);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i26 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 5);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i32 := wl128x_is_tcxo_valid($p0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 1038} {:cexpr "tmp___1"} boogie_si_record_i8($i33);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p1, $i38);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.42, $p1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i47 := wl128x_configure_mcs_pll($p0, $i46);
    call {:si_unique_call 1040} {:cexpr "tmp___5"} boogie_si_record_i32($i47);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i14 := $i47;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb33:
    assume $i36 == 1;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb8;

  $bb30:
    assume $i34 == 1;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb32;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i30 := wl128x_switch_tcxo_to_fref($p0);
    call {:si_unique_call 1036} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i39 := wl128x_is_fref_valid($p0);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 1032} {:cexpr "tmp___3"} boogie_si_record_i8($i40);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p1, $i45);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume $i43 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb8;

  $bb37:
    assume $i41 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb39;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb8;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb22;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb8;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i12 := wl128x_switch_tcxo_to_fref($p0);
    call {:si_unique_call 1030} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const wl127x_boot_clk: ref;

axiom wl127x_boot_clk == $sub.ref(0, 802624);

procedure wl127x_boot_clk($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.22, $CurrAddr;



implementation wl127x_boot_clk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i26: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $i73: i16;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i24;
  var $i96: i24;
  var $i97: i24;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i42: i32;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(488, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 3);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i12 := $sle.i32($i11, 2);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 4);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 5);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := 5;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i63 := wl12xx_top_reg_read($p0, 3250, $p3);
    call {:si_unique_call 1048} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.9, $p3);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 63743);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p3, $i68);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.9, $p3);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 1792);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p3, $i72);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.9, $p3);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i76 := wl12xx_top_reg_write($p0, 3250, $i75);
    call {:si_unique_call 1058} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i78 := wlcore_write32($p0, 3170368, $i26);
    call {:si_unique_call 1056} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i80 := wlcore_read32($p0, 3170368, $p1);
    call {:si_unique_call 1060} {:cexpr "ret"} boogie_si_record_i32($i80);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 4);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 1062} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.22, $p1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, $sub.i32(0, 1024));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p1, $i107);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.22, $p1);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, 1023);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p1, $i109);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.22, $p1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i111 := wlcore_write32($p0, 3170312, $i110);
    call {:si_unique_call 1067} {:cexpr "ret"} boogie_si_record_i32($i111);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i42 := $i111;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i36 := $i42;
    goto $bb20;

  $bb49:
    assume $i88 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p89, .str);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p90, .str.165);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p91, .str.146);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p92, .str.166);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i95 := $load.i24($M.7, $p94);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i96 := $and.i24($i95, $sub.i24(0, 262144));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i97 := $or.i24($i96, 1040);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p94, $i97);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p98, 0);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.8, $p99);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 1);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 1064} {:cexpr "tmp"} boogie_si_record_i64($i103);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i104 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.22, $p1);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __dynamic_pr_debug.ref.ref.i32($p4, .str.166, $i105);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb46:
    assume $i81 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i42 := $i80;
    goto $bb25;

  $bb43:
    assume $i79 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i42 := $i78;
    goto $bb25;

  $bb40:
    assume $i77 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i42 := $i76;
    goto $bb25;

  $bb37:
    assume $i64 == 1;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i42 := $i63;
    goto $bb25;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i40 := wl12xx_top_reg_read($p0, 1096, $p2);
    call {:si_unique_call 1046} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.9, $p2);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 65151);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p2, $i46);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.9, $p2);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i50 := wl12xx_top_reg_write($p0, 1096, $i49);
    call {:si_unique_call 1050} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i52 := wl12xx_top_reg_read($p0, 3252, $p2);
    call {:si_unique_call 1052} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.9, $p2);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 49152);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p2, $i57);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.9, $p2);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i61 := wl12xx_top_reg_write($p0, 3252, $i60);
    call {:si_unique_call 1054} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i62 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i42 := $i61;
    goto $bb25;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i42 := $i52;
    goto $bb25;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i42 := $i50;
    goto $bb25;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb25;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb13;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := 3;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb5;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10400, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 803656);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    return;
}



const wl1271_boot_soft_reset: ref;

axiom wl1271_boot_soft_reset == $sub.ref(0, 804688);

procedure wl1271_boot_soft_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.22, $CurrAddr;



implementation wl1271_boot_soft_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i11: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i5: i32;
  var $i45: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i3 := wlcore_write32($p0, 3145728, 2);
    call {:si_unique_call 1072} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i6 := usecs_to_jiffies(1000000);
    call {:si_unique_call 1074} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, jiffies);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i6, $i7);
    call {:si_unique_call 1075} {:cexpr "timeout"} boogie_si_record_i64($i8);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i9 := wlcore_read32($p0, 3145728, $p1);
    call {:si_unique_call 1077} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    assume {:branchcond $i10} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i46, $i47 := wl1271_boot_soft_reset_loop_$bb8($p0, $p1, $p2, $i8, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i46, $i47);
    goto $bb8_last;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.22, $p1);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 2);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, jiffies);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64($i8, $i41);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i43 := $slt.i64($i42, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __const_udelay(4295000);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i46 := wlcore_read32($p0, 3145728, $p1);
    call {:si_unique_call 1088} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    assume true;
    goto $bb9, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb25_dummy;

  $bb9:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i45 := $i5;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_110 := printk.ref(.str.169);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 1);
    goto $bb23;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i48 := wlcore_write32($p0, 3167312, 0);
    call {:si_unique_call 1084} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i50 := wlcore_write32($p0, 3148184, 65535);
    call {:si_unique_call 1090} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i5 := $i50;
    goto $bb3;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i5 := $i48;
    goto $bb3;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.167);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p22, .str.146);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, .str.168);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.7, $p25);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 1068);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p25, $i28);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p29, 0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.8, $p30);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1081} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.22, $p1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __dynamic_pr_debug.ref.ref.i32($p2, .str.168, $i36);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const usecs_to_jiffies: ref;

axiom usecs_to_jiffies == $sub.ref(0, 805720);

procedure usecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation usecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} {:cexpr "usecs_to_jiffies:arg:u"} boogie_si_record_i32($i0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i1 := __usecs_to_jiffies($i0);
    call {:si_unique_call 1093} {:cexpr "tmp___1"} boogie_si_record_i64($i1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __usecs_to_jiffies: ref;

axiom __usecs_to_jiffies == $sub.ref(0, 806752);

procedure __usecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __usecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1094} {:cexpr "__usecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1096} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wl128x_switch_tcxo_to_fref: ref;

axiom wl128x_switch_tcxo_to_fref == $sub.ref(0, 807784);

procedure wl128x_switch_tcxo_to_fref($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.22, $M.0, $CurrAddr;



implementation wl128x_switch_tcxo_to_fref($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i2 := wl12xx_top_reg_read($p0, 8992, $p1);
    call {:si_unique_call 1099} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.9, $p1);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 65535);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.9, $p1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 104);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p1, $i11);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.9, $p1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i15 := wl12xx_top_reg_write($p0, 8992, $i14);
    call {:si_unique_call 1101} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i17 := wl12xx_top_reg_write($p0, 8704, 13);
    call {:si_unique_call 1103} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __const_udelay(4295000);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(4295000);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __const_udelay(4295000);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(4295000);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __const_udelay(4295000);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i4 := $i17;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i4 := $i15;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const wl128x_is_tcxo_valid: ref;

axiom wl128x_is_tcxo_valid == $sub.ref(0, 808816);

procedure wl128x_is_tcxo_valid($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.9, $M.22, $CurrAddr, $M.0;



implementation wl128x_is_tcxo_valid($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i16;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i2 := wl12xx_top_reg_read($p0, 8806, $p1);
    call {:si_unique_call 1121} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.9, $p1);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i64($i5);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 16);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const wl128x_is_fref_valid: ref;

axiom wl128x_is_fref_valid == $sub.ref(0, 809848);

procedure wl128x_is_fref_valid($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.9, $M.22, $CurrAddr, $M.0;



implementation wl128x_is_fref_valid($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i16;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i2 := wl12xx_top_reg_read($p0, 8326, $p1);
    call {:si_unique_call 1124} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.9, $p1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i64($i5);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 16);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const wl128x_configure_mcs_pll: ref;

axiom wl128x_configure_mcs_pll == $sub.ref(0, 810880);

procedure wl128x_configure_mcs_pll($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.22, $M.0, $CurrAddr;



implementation wl128x_configure_mcs_pll($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1127} {:cexpr "wl128x_configure_mcs_pll:arg:clk"} boogie_si_record_i32($i1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i7 := wl12xx_top_reg_read($p0, 8992, $p2);
    call {:si_unique_call 1129} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.9, $p2);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 65535);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.9, $p2);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 4);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p2, $i16);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.9, $p2);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i20 := wl12xx_top_reg_write($p0, 8992, $i19);
    call {:si_unique_call 1131} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 6);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 7);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i1);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    call {:si_unique_call 1134} {:cexpr "input_freq"} boogie_si_record_i8($i33);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i34 := wl12xx_top_reg_read($p0, 3474, $p3);
    call {:si_unique_call 1136} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.9, $p3);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 65535);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i33);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 4);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.9, $p3);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i42, $i44);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p3, $i46);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.9, $p3);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 3);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p3, $i50);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.9, $p3);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i54 := wl12xx_top_reg_write($p0, 3474, $i53);
    call {:si_unique_call 1138} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i9 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i9 := $i34;
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i28 := wl128x_manually_configure_mcs_pll($p0);
    call {:si_unique_call 1133} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb12;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const wl128x_manually_configure_mcs_pll: ref;

axiom wl128x_manually_configure_mcs_pll == $sub.ref(0, 811912);

procedure wl128x_manually_configure_mcs_pll($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wl128x_manually_configure_mcs_pll($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i1 := wl12xx_top_reg_write($p0, 3476, 200);
    call {:si_unique_call 1140} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i4 := wl12xx_top_reg_write($p0, 3478, 7);
    call {:si_unique_call 1142} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i6 := wl12xx_top_reg_write($p0, 3474, 115);
    call {:si_unique_call 1144} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const wl127x_prepare_read: ref;

axiom wl127x_prepare_read == $sub.ref(0, 812944);

procedure wl127x_prepare_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const wlcore_set_min_fw_ver: ref;

axiom wlcore_set_min_fw_ver == $sub.ref(0, 813976);

procedure wlcore_set_min_fw_ver($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $i9: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wlcore_set_min_fw_ver($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $i9: i32)
{
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} {:cexpr "wlcore_set_min_fw_ver:arg:chip"} boogie_si_record_i32($i1);
    call {:si_unique_call 1146} {:cexpr "wlcore_set_min_fw_ver:arg:iftype_sr"} boogie_si_record_i32($i2);
    call {:si_unique_call 1147} {:cexpr "wlcore_set_min_fw_ver:arg:major_sr"} boogie_si_record_i32($i3);
    call {:si_unique_call 1148} {:cexpr "wlcore_set_min_fw_ver:arg:subtype_sr"} boogie_si_record_i32($i4);
    call {:si_unique_call 1149} {:cexpr "wlcore_set_min_fw_ver:arg:minor_sr"} boogie_si_record_i32($i5);
    call {:si_unique_call 1150} {:cexpr "wlcore_set_min_fw_ver:arg:iftype_mr"} boogie_si_record_i32($i6);
    call {:si_unique_call 1151} {:cexpr "wlcore_set_min_fw_ver:arg:major_mr"} boogie_si_record_i32($i7);
    call {:si_unique_call 1152} {:cexpr "wlcore_set_min_fw_ver:arg:subtype_mr"} boogie_si_record_i32($i8);
    call {:si_unique_call 1153} {:cexpr "wlcore_set_min_fw_ver:arg:minor_mr"} boogie_si_record_i32($i9);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11008, 1)), $mul.ref(0, 4));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i1);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11008, 1)), $mul.ref(1, 4));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i2);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11008, 1)), $mul.ref(2, 4));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i3);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11008, 1)), $mul.ref(3, 4));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i4);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11008, 1)), $mul.ref(4, 4));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i5);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11028, 1)), $mul.ref(0, 4));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i1);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11028, 1)), $mul.ref(1, 4));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i6);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11028, 1)), $mul.ref(2, 4));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i7);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11028, 1)), $mul.ref(3, 4));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i8);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(11028, 1)), $mul.ref(4, 4));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i9);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 815008);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(504, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const wlcore_set_ht_cap: ref;

axiom wlcore_set_ht_cap == $sub.ref(0, 816040);

procedure wlcore_set_ht_cap($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wlcore_set_ht_cap($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} {:cexpr "wlcore_set_ht_cap:arg:band"} boogie_si_record_i32($i1);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10746, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 1155} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p6, $p7, 22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_conf_init: ref;

axiom wl12xx_conf_init == $sub.ref(0, 817072);

procedure wl12xx_conf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wl12xx_conf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11160)), $mul.ref(2552, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 1156} cmdloc_dummy_var_69 := $memcpy.i8(cmdloc_dummy_var_67, cmdloc_dummy_var_68, $p5, wl12xx_conf, 921, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 1157} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p7, wl12xx_default_priv_conf, 33, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_get_clock_idx: ref;

axiom wl12xx_get_clock_idx == $sub.ref(0, 818104);

procedure wl12xx_get_clock_idx($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation wl12xx_get_clock_idx($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i7: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} {:cexpr "wl12xx_get_clock_idx:arg:freq"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1159} {:cexpr "wl12xx_get_clock_idx:arg:xtal"} boogie_si_record_i1($i2);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.47, $p4);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $i11, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i29, $i30, $p32, $i33, $i34, $i7 := wl12xx_get_clock_idx_loop_$bb4($p0, $i1, $i3, $i8, $p10, $i11, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i29, $i30, $p32, $i33, $i34, $i7);
    goto $bb4_last;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref($i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.47, $p10);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $i1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i7, 1);
    call {:si_unique_call 1160} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref($i30, 8)), $mul.ref(0, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.47, $p32);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb13_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i7);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref($i13, 8)), $mul.ref(4, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.48, $p15);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i3);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, $i20);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i22 := $i7;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref($i23, 8)), $mul.ref(5, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.49, $p25);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 819136);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const wl12xx_probe: ref;

axiom wl12xx_probe == $sub.ref(0, 820168);

procedure wl12xx_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $CurrAddr;



implementation wl12xx_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i10: i32;
  var $i18: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p1 := wlcore_alloc_hw(56, 16384, 64);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i3 := IS_ERR($p2);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1163} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 11160)), $mul.ref(10656, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, wl12xx_ops);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 11160)), $mul.ref(10664, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, wl12xx_ptable);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i16 := ldv_wlcore_probe_14($p13, $p0);
    call {:si_unique_call 1169} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_112 := wlcore_free_hw($p13);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i18 := $i10;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} vslice_dummy_var_111 := printk.ref(.str.176);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $i8 := PTR_ERR($p7);
    call {:si_unique_call 1166} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 1167} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const wl12xx_remove: ref;

axiom wl12xx_remove == $sub.ref(0, 821200);

procedure wl12xx_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50;



implementation wl12xx_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 11160)), $mul.ref(10712, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} kfree($p10);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i11 := ldv_wlcore_remove_15($p0);
    call {:si_unique_call 1173} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 822232);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_wlcore_remove_15: ref;

axiom ldv_wlcore_remove_15 == $sub.ref(0, 823264);

procedure ldv_wlcore_remove_15($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50;



implementation ldv_wlcore_remove_15($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i1 := wlcore_remove($p0);
    call {:si_unique_call 1177} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wlcore_remove: ref;

axiom wlcore_remove == $sub.ref(0, 824296);

procedure wlcore_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_remove($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1179} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 825328);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const wlcore_alloc_hw: ref;

axiom wlcore_alloc_hw == $sub.ref(0, 826360);

procedure wlcore_alloc_hw($i0: i64, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation wlcore_alloc_hw($i0: i64, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} {:cexpr "wlcore_alloc_hw:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1182} {:cexpr "wlcore_alloc_hw:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1183} {:cexpr "wlcore_alloc_hw:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p3 := external_alloc();
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_wlcore_probe_14: ref;

axiom ldv_wlcore_probe_14 == $sub.ref(0, 827392);

procedure ldv_wlcore_probe_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_wlcore_probe_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i2 := wlcore_probe($p0, $p1);
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1187} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_initialize_wlcore_ops_80();
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wlcore_free_hw: ref;

axiom wlcore_free_hw == $sub.ref(0, 828424);

procedure wlcore_free_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_free_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1189} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1190} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wlcore_probe: ref;

axiom wlcore_probe == $sub.ref(0, 829456);

procedure wlcore_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wlcore_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1192} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_initialize_wlcore_ops_80: ref;

axiom ldv_initialize_wlcore_ops_80 == $sub.ref(0, 830488);

procedure ldv_initialize_wlcore_ops_80();
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.53, $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_wlcore_ops_80()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p0 := ldv_init_zalloc(11088);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p2 := ldv_init_zalloc(416);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.52 := $p2;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p4 := ldv_init_zalloc(1408);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.53 := $p4;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p6 := ldv_init_zalloc(232);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.54 := $p6;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $p8 := ldv_init_zalloc(16);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.55 := $p8;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 831520);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p1 := calloc(1, $i0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1200} __VERIFIER_assume($i4);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const generic_file_llseek: ref;

axiom generic_file_llseek == $sub.ref(0, 832552);

procedure generic_file_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation generic_file_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} {:cexpr "generic_file_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1202} {:cexpr "generic_file_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1203} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1204} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tx_internal_desc_overflow_read: ref;

axiom tx_internal_desc_overflow_read == $sub.ref(0, 833584);

procedure tx_internal_desc_overflow_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tx_internal_desc_overflow_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "tx_internal_desc_overflow_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.57, $p12);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1208} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const simple_open: ref;

axiom simple_open == $sub.ref(0, 834616);

procedure simple_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation simple_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wl1271_debugfs_update_stats: ref;

axiom wl1271_debugfs_update_stats == $sub.ref(0, 835648);

procedure wl1271_debugfs_update_stats($p0: ref);
  free requires assertsPassed;



implementation wl1271_debugfs_update_stats($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    return;
}



const wl1271_format_buffer: ref;

axiom wl1271_format_buffer == $sub.ref(0, 836680);

procedure wl1271_format_buffer.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, $p3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wl1271_format_buffer.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, $p3: ref, p.4: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1211} {:cexpr "wl1271_format_buffer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1212} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rx_out_of_mem_read: ref;

axiom rx_out_of_mem_read == $sub.ref(0, 837712);

procedure rx_out_of_mem_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_out_of_mem_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} {:cexpr "rx_out_of_mem_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.58, $p12);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1217} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_hdr_overflow_read: ref;

axiom rx_hdr_overflow_read == $sub.ref(0, 838744);

procedure rx_hdr_overflow_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_hdr_overflow_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} {:cexpr "rx_hdr_overflow_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.59, $p12);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1221} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_hw_stuck_read: ref;

axiom rx_hw_stuck_read == $sub.ref(0, 839776);

procedure rx_hw_stuck_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_hw_stuck_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} {:cexpr "rx_hw_stuck_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(8, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.60, $p12);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1225} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_dropped_read: ref;

axiom rx_dropped_read == $sub.ref(0, 840808);

procedure rx_dropped_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_dropped_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "rx_dropped_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(12, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.61, $p12);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1229} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_fcs_err_read: ref;

axiom rx_fcs_err_read == $sub.ref(0, 841840);

procedure rx_fcs_err_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_fcs_err_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} {:cexpr "rx_fcs_err_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(16, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.62, $p12);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1233} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_xfr_hint_trig_read: ref;

axiom rx_xfr_hint_trig_read == $sub.ref(0, 842872);

procedure rx_xfr_hint_trig_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_xfr_hint_trig_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} {:cexpr "rx_xfr_hint_trig_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(20, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.63, $p12);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1237} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_path_reset_read: ref;

axiom rx_path_reset_read == $sub.ref(0, 843904);

procedure rx_path_reset_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_path_reset_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} {:cexpr "rx_path_reset_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(24, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.64, $p12);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1241} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rx_reset_counter_read: ref;

axiom rx_reset_counter_read == $sub.ref(0, 844936);

procedure rx_reset_counter_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rx_reset_counter_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} {:cexpr "rx_reset_counter_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(12, 1)), $mul.ref(28, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.65, $p12);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1245} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const dma_rx_requested_read: ref;

axiom dma_rx_requested_read == $sub.ref(0, 845968);

procedure dma_rx_requested_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_rx_requested_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} {:cexpr "dma_rx_requested_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.66, $p12);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1249} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const dma_rx_errors_read: ref;

axiom dma_rx_errors_read == $sub.ref(0, 847000);

procedure dma_rx_errors_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_rx_errors_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} {:cexpr "dma_rx_errors_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.67, $p12);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1253} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const dma_tx_requested_read: ref;

axiom dma_tx_requested_read == $sub.ref(0, 848032);

procedure dma_tx_requested_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_tx_requested_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} {:cexpr "dma_tx_requested_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(44, 1)), $mul.ref(8, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.68, $p12);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1257} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const dma_tx_errors_read: ref;

axiom dma_tx_errors_read == $sub.ref(0, 849064);

procedure dma_tx_errors_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_tx_errors_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} {:cexpr "dma_tx_errors_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(44, 1)), $mul.ref(12, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.69, $p12);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1261} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_cmd_cmplt_read: ref;

axiom isr_cmd_cmplt_read == $sub.ref(0, 850096);

procedure isr_cmd_cmplt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_cmd_cmplt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} {:cexpr "isr_cmd_cmplt_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(0, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.70, $p12);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1265} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_fiqs_read: ref;

axiom isr_fiqs_read == $sub.ref(0, 851128);

procedure isr_fiqs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_fiqs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} {:cexpr "isr_fiqs_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(4, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.71, $p12);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1269} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_rx_headers_read: ref;

axiom isr_rx_headers_read == $sub.ref(0, 852160);

procedure isr_rx_headers_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_rx_headers_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} {:cexpr "isr_rx_headers_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.72, $p12);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1273} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_rx_mem_overflow_read: ref;

axiom isr_rx_mem_overflow_read == $sub.ref(0, 853192);

procedure isr_rx_mem_overflow_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_rx_mem_overflow_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} {:cexpr "isr_rx_mem_overflow_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(16, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.73, $p12);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1277} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_rx_rdys_read: ref;

axiom isr_rx_rdys_read == $sub.ref(0, 854224);

procedure isr_rx_rdys_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_rx_rdys_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "isr_rx_rdys_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(20, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.74, $p12);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1281} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_irqs_read: ref;

axiom isr_irqs_read == $sub.ref(0, 855256);

procedure isr_irqs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_irqs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} {:cexpr "isr_irqs_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(24, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.75, $p12);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1285} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_tx_procs_read: ref;

axiom isr_tx_procs_read == $sub.ref(0, 856288);

procedure isr_tx_procs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_tx_procs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} {:cexpr "isr_tx_procs_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(28, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.76, $p12);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1289} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_decrypt_done_read: ref;

axiom isr_decrypt_done_read == $sub.ref(0, 857320);

procedure isr_decrypt_done_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_decrypt_done_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} {:cexpr "isr_decrypt_done_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(32, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.77, $p12);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1293} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_dma0_done_read: ref;

axiom isr_dma0_done_read == $sub.ref(0, 858352);

procedure isr_dma0_done_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_dma0_done_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} {:cexpr "isr_dma0_done_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(36, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.78, $p12);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1297} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_dma1_done_read: ref;

axiom isr_dma1_done_read == $sub.ref(0, 859384);

procedure isr_dma1_done_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_dma1_done_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} {:cexpr "isr_dma1_done_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(40, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.79, $p12);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1301} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_tx_exch_complete_read: ref;

axiom isr_tx_exch_complete_read == $sub.ref(0, 860416);

procedure isr_tx_exch_complete_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_tx_exch_complete_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} {:cexpr "isr_tx_exch_complete_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(44, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.80, $p12);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1305} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_commands_read: ref;

axiom isr_commands_read == $sub.ref(0, 861448);

procedure isr_commands_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_commands_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} {:cexpr "isr_commands_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(48, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.81, $p12);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1309} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_rx_procs_read: ref;

axiom isr_rx_procs_read == $sub.ref(0, 862480);

procedure isr_rx_procs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_rx_procs_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} {:cexpr "isr_rx_procs_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(52, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.82, $p12);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1313} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_hw_pm_mode_changes_read: ref;

axiom isr_hw_pm_mode_changes_read == $sub.ref(0, 863512);

procedure isr_hw_pm_mode_changes_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_hw_pm_mode_changes_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} {:cexpr "isr_hw_pm_mode_changes_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(56, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.83, $p12);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1317} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_host_acknowledges_read: ref;

axiom isr_host_acknowledges_read == $sub.ref(0, 864544);

procedure isr_host_acknowledges_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_host_acknowledges_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} {:cexpr "isr_host_acknowledges_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(60, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.84, $p12);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1321} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_pci_pm_read: ref;

axiom isr_pci_pm_read == $sub.ref(0, 865576);

procedure isr_pci_pm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_pci_pm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} {:cexpr "isr_pci_pm_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(64, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.85, $p12);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1325} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_wakeups_read: ref;

axiom isr_wakeups_read == $sub.ref(0, 866608);

procedure isr_wakeups_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_wakeups_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} {:cexpr "isr_wakeups_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(68, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.86, $p12);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1329} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isr_low_rssi_read: ref;

axiom isr_low_rssi_read == $sub.ref(0, 867640);

procedure isr_low_rssi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation isr_low_rssi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} {:cexpr "isr_low_rssi_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(60, 1)), $mul.ref(72, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.87, $p12);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1333} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const wep_addr_key_count_read: ref;

axiom wep_addr_key_count_read == $sub.ref(0, 868672);

procedure wep_addr_key_count_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wep_addr_key_count_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} {:cexpr "wep_addr_key_count_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.88, $p12);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1337} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const wep_default_key_count_read: ref;

axiom wep_default_key_count_read == $sub.ref(0, 869704);

procedure wep_default_key_count_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wep_default_key_count_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} {:cexpr "wep_default_key_count_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(136, 1)), $mul.ref(4, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.89, $p12);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1341} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const wep_key_not_found_read: ref;

axiom wep_key_not_found_read == $sub.ref(0, 870736);

procedure wep_key_not_found_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wep_key_not_found_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} {:cexpr "wep_key_not_found_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.90, $p12);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1345} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const wep_decrypt_fail_read: ref;

axiom wep_decrypt_fail_read == $sub.ref(0, 871768);

procedure wep_decrypt_fail_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wep_decrypt_fail_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} {:cexpr "wep_decrypt_fail_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.91, $p12);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1349} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const wep_packets_read: ref;

axiom wep_packets_read == $sub.ref(0, 872800);

procedure wep_packets_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wep_packets_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} {:cexpr "wep_packets_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.92, $p12);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1353} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const wep_interrupt_read: ref;

axiom wep_interrupt_read == $sub.ref(0, 873832);

procedure wep_interrupt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wep_interrupt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} {:cexpr "wep_interrupt_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.93, $p12);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1357} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_ps_enter_read: ref;

axiom pwr_ps_enter_read == $sub.ref(0, 874864);

procedure pwr_ps_enter_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_ps_enter_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} {:cexpr "pwr_ps_enter_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(0, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.94, $p12);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1361} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_elp_enter_read: ref;

axiom pwr_elp_enter_read == $sub.ref(0, 875896);

procedure pwr_elp_enter_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_elp_enter_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} {:cexpr "pwr_elp_enter_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(4, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.95, $p12);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_missing_bcns_read: ref;

axiom pwr_missing_bcns_read == $sub.ref(0, 876928);

procedure pwr_missing_bcns_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_missing_bcns_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} {:cexpr "pwr_missing_bcns_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(8, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.96, $p12);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1369} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_wake_on_host_read: ref;

axiom pwr_wake_on_host_read == $sub.ref(0, 877960);

procedure pwr_wake_on_host_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_wake_on_host_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} {:cexpr "pwr_wake_on_host_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(12, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.97, $p12);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1373} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_wake_on_timer_exp_read: ref;

axiom pwr_wake_on_timer_exp_read == $sub.ref(0, 878992);

procedure pwr_wake_on_timer_exp_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_wake_on_timer_exp_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} {:cexpr "pwr_wake_on_timer_exp_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(16, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.98, $p12);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1377} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_tx_with_ps_read: ref;

axiom pwr_tx_with_ps_read == $sub.ref(0, 880024);

procedure pwr_tx_with_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_tx_with_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} {:cexpr "pwr_tx_with_ps_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(20, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.99, $p12);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1381} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_tx_without_ps_read: ref;

axiom pwr_tx_without_ps_read == $sub.ref(0, 881056);

procedure pwr_tx_without_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_tx_without_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} {:cexpr "pwr_tx_without_ps_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(24, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.100, $p12);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1385} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_rcvd_beacons_read: ref;

axiom pwr_rcvd_beacons_read == $sub.ref(0, 882088);

procedure pwr_rcvd_beacons_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_rcvd_beacons_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} {:cexpr "pwr_rcvd_beacons_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(28, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.101, $p12);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1389} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_power_save_off_read: ref;

axiom pwr_power_save_off_read == $sub.ref(0, 883120);

procedure pwr_power_save_off_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_power_save_off_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} {:cexpr "pwr_power_save_off_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(32, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.102, $p12);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1393} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_enable_ps_read: ref;

axiom pwr_enable_ps_read == $sub.ref(0, 884152);

procedure pwr_enable_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_enable_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} {:cexpr "pwr_enable_ps_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(36, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.103, $p12);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i15 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i14);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const pwr_disable_ps_read: ref;

axiom pwr_disable_ps_read == $sub.ref(0, 885184);

procedure pwr_disable_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_disable_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} {:cexpr "pwr_disable_ps_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(38, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.104, $p12);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i15 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i14);
    call {:si_unique_call 1401} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const pwr_fix_tsf_ps_read: ref;

axiom pwr_fix_tsf_ps_read == $sub.ref(0, 886216);

procedure pwr_fix_tsf_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_fix_tsf_ps_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} {:cexpr "pwr_fix_tsf_ps_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(40, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.105, $p12);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1405} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const pwr_rcvd_awake_beacons_read: ref;

axiom pwr_rcvd_awake_beacons_read == $sub.ref(0, 887248);

procedure pwr_rcvd_awake_beacons_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pwr_rcvd_awake_beacons_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} {:cexpr "pwr_rcvd_awake_beacons_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(164, 1)), $mul.ref(84, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.106, $p12);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1409} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const mic_rx_pkts_read: ref;

axiom mic_rx_pkts_read == $sub.ref(0, 888280);

procedure mic_rx_pkts_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mic_rx_pkts_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} {:cexpr "mic_rx_pkts_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(276, 1)), $mul.ref(0, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.107, $p12);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1413} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const mic_calc_failure_read: ref;

axiom mic_calc_failure_read == $sub.ref(0, 889312);

procedure mic_calc_failure_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mic_calc_failure_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "mic_calc_failure_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(276, 1)), $mul.ref(4, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.108, $p12);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1417} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const aes_encrypt_fail_read: ref;

axiom aes_encrypt_fail_read == $sub.ref(0, 890344);

procedure aes_encrypt_fail_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aes_encrypt_fail_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} {:cexpr "aes_encrypt_fail_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(252, 1)), $mul.ref(0, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.109, $p12);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1421} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const aes_decrypt_fail_read: ref;

axiom aes_decrypt_fail_read == $sub.ref(0, 891376);

procedure aes_decrypt_fail_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aes_decrypt_fail_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} {:cexpr "aes_decrypt_fail_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(252, 1)), $mul.ref(4, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.110, $p12);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1425} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const aes_encrypt_packets_read: ref;

axiom aes_encrypt_packets_read == $sub.ref(0, 892408);

procedure aes_encrypt_packets_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aes_encrypt_packets_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "aes_encrypt_packets_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.111, $p12);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1429} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const aes_decrypt_packets_read: ref;

axiom aes_decrypt_packets_read == $sub.ref(0, 893440);

procedure aes_decrypt_packets_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aes_decrypt_packets_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} {:cexpr "aes_decrypt_packets_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(252, 1)), $mul.ref(12, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.112, $p12);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1433} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const aes_encrypt_interrupt_read: ref;

axiom aes_encrypt_interrupt_read == $sub.ref(0, 894472);

procedure aes_encrypt_interrupt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aes_encrypt_interrupt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} {:cexpr "aes_encrypt_interrupt_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(252, 1)), $mul.ref(16, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.113, $p12);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1437} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const aes_decrypt_interrupt_read: ref;

axiom aes_decrypt_interrupt_read == $sub.ref(0, 895504);

procedure aes_decrypt_interrupt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aes_decrypt_interrupt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} {:cexpr "aes_decrypt_interrupt_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(252, 1)), $mul.ref(20, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.114, $p12);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1441} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_heart_beat_read: ref;

axiom event_heart_beat_read == $sub.ref(0, 896536);

procedure event_heart_beat_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_heart_beat_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} {:cexpr "event_heart_beat_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(0, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.115, $p12);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1445} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_calibration_read: ref;

axiom event_calibration_read == $sub.ref(0, 897568);

procedure event_calibration_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_calibration_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} {:cexpr "event_calibration_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(4, 1));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.116, $p12);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1449} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_rx_mismatch_read: ref;

axiom event_rx_mismatch_read == $sub.ref(0, 898600);

procedure event_rx_mismatch_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_rx_mismatch_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} {:cexpr "event_rx_mismatch_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(8, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.117, $p12);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1453} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_rx_mem_empty_read: ref;

axiom event_rx_mem_empty_read == $sub.ref(0, 899632);

procedure event_rx_mem_empty_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_rx_mem_empty_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} {:cexpr "event_rx_mem_empty_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(12, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.118, $p12);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1457} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_rx_pool_read: ref;

axiom event_rx_pool_read == $sub.ref(0, 900664);

procedure event_rx_pool_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_rx_pool_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} {:cexpr "event_rx_pool_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(16, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.119, $p12);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1461} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_oom_late_read: ref;

axiom event_oom_late_read == $sub.ref(0, 901696);

procedure event_oom_late_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_oom_late_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} {:cexpr "event_oom_late_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(20, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.120, $p12);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1465} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_phy_transmit_error_read: ref;

axiom event_phy_transmit_error_read == $sub.ref(0, 902728);

procedure event_phy_transmit_error_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_phy_transmit_error_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} {:cexpr "event_phy_transmit_error_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(24, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.121, $p12);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1469} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const event_tx_stuck_read: ref;

axiom event_tx_stuck_read == $sub.ref(0, 903760);

procedure event_tx_stuck_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation event_tx_stuck_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} {:cexpr "event_tx_stuck_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(284, 1)), $mul.ref(28, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.122, $p12);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1473} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_pspoll_timeouts_read: ref;

axiom ps_pspoll_timeouts_read == $sub.ref(0, 904792);

procedure ps_pspoll_timeouts_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_pspoll_timeouts_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} {:cexpr "ps_pspoll_timeouts_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(0, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.123, $p12);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1477} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_upsd_timeouts_read: ref;

axiom ps_upsd_timeouts_read == $sub.ref(0, 905824);

procedure ps_upsd_timeouts_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_upsd_timeouts_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} {:cexpr "ps_upsd_timeouts_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(4, 1));
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.124, $p12);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1481} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_upsd_max_sptime_read: ref;

axiom ps_upsd_max_sptime_read == $sub.ref(0, 906856);

procedure ps_upsd_max_sptime_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_upsd_max_sptime_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} {:cexpr "ps_upsd_max_sptime_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(8, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.125, $p12);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1485} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_upsd_max_apturn_read: ref;

axiom ps_upsd_max_apturn_read == $sub.ref(0, 907888);

procedure ps_upsd_max_apturn_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_upsd_max_apturn_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} {:cexpr "ps_upsd_max_apturn_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(12, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.126, $p12);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1489} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_pspoll_max_apturn_read: ref;

axiom ps_pspoll_max_apturn_read == $sub.ref(0, 908920);

procedure ps_pspoll_max_apturn_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_pspoll_max_apturn_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} {:cexpr "ps_pspoll_max_apturn_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(16, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.127, $p12);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1493} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_pspoll_utilization_read: ref;

axiom ps_pspoll_utilization_read == $sub.ref(0, 909952);

procedure ps_pspoll_utilization_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_pspoll_utilization_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} {:cexpr "ps_pspoll_utilization_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(20, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.128, $p12);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1497} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ps_upsd_utilization_read: ref;

axiom ps_upsd_utilization_read == $sub.ref(0, 910984);

procedure ps_upsd_utilization_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ps_upsd_utilization_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} {:cexpr "ps_upsd_utilization_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(316, 1)), $mul.ref(24, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.129, $p12);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1501} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rxpipe_rx_prep_beacon_drop_read: ref;

axiom rxpipe_rx_prep_beacon_drop_read == $sub.ref(0, 912016);

procedure rxpipe_rx_prep_beacon_drop_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rxpipe_rx_prep_beacon_drop_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} {:cexpr "rxpipe_rx_prep_beacon_drop_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.130, $p12);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1505} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rxpipe_descr_host_int_trig_rx_data_read: ref;

axiom rxpipe_descr_host_int_trig_rx_data_read == $sub.ref(0, 913048);

procedure rxpipe_descr_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rxpipe_descr_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} {:cexpr "rxpipe_descr_host_int_trig_rx_data_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(344, 1)), $mul.ref(4, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.131, $p12);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1509} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read: ref;

axiom rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read == $sub.ref(0, 914080);

procedure rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} {:cexpr "rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(344, 1)), $mul.ref(8, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.132, $p12);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1513} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rxpipe_missed_beacon_host_int_trig_rx_data_read: ref;

axiom rxpipe_missed_beacon_host_int_trig_rx_data_read == $sub.ref(0, 915112);

procedure rxpipe_missed_beacon_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rxpipe_missed_beacon_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} {:cexpr "rxpipe_missed_beacon_host_int_trig_rx_data_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(344, 1)), $mul.ref(12, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.133, $p12);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1517} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const rxpipe_tx_xfr_host_int_trig_rx_data_read: ref;

axiom rxpipe_tx_xfr_host_int_trig_rx_data_read == $sub.ref(0, 916144);

procedure rxpipe_tx_xfr_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rxpipe_tx_xfr_host_int_trig_rx_data_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} {:cexpr "rxpipe_tx_xfr_host_int_trig_rx_data_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11160)), $mul.ref(2480, 1)), $mul.ref(0, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p8);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} wl1271_debugfs_update_stats($p6);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(344, 1)), $mul.ref(16, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.134, $p12);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i14 := wl1271_format_buffer.ref.i64.ref.ref.i32($p1, $i2, $p3, .str.178, $i13);
    call {:si_unique_call 1521} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 917176);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.135;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1523} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.135;
    call {:si_unique_call 1524} cmdloc_dummy_var_74 := $memset.i8(cmdloc_dummy_var_73, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.135 := cmdloc_dummy_var_74;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_platform_driver_init_79: ref;

axiom ldv_platform_driver_init_79 == $sub.ref(0, 918208);

procedure ldv_platform_driver_init_79();
  free requires assertsPassed;
  modifies $M.136, $M.0, $CurrAddr;



implementation ldv_platform_driver_init_79()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p0 := ldv_init_zalloc(1472);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.136 := $p0;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 919240);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.135, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.50, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.0, $M.218, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.219, $M.220, $M.221, $M.222, $M.136, $M.51, $M.52, $M.53, $M.54, $M.55, $M.271, $M.272, $M.241, $M.242, $M.334, $M.335, $M.238, $M.239, $M.313, $M.314, $M.382, $M.383, $M.346, $M.347, $M.250, $M.251, $M.340, $M.341, $M.397, $M.398, $M.301, $M.302, $M.328, $M.329, $M.364, $M.365, $M.425, $M.426, $M.409, $M.410, $M.268, $M.269, $M.316, $M.317, $M.417, $M.418, $M.415, $M.416, $M.304, $M.305, $M.433, $M.434, $M.274, $M.275, $M.367, $M.368, $M.307, $M.308, $M.277, $M.278, $M.295, $M.296, $M.435, $M.436, $M.298, $M.299, $M.310, $M.311, $M.406, $M.407, $M.223, $M.224, $M.256, $M.257, $M.289, $M.290, $M.370, $M.371, $M.437, $M.438, $M.355, $M.356, $M.343, $M.344, $M.394, $M.395, $M.292, $M.293, $M.226, $M.227, $M.349, $M.350, $M.379, $M.380, $M.388, $M.389, $M.358, $M.359, $M.319, $M.320, $M.361, $M.362, $M.373, $M.374, $M.385, $M.386, $M.325, $M.326, $M.337, $M.338, $M.376, $M.377, $M.229, $M.230, $M.411, $M.412, $M.419, $M.420, $M.427, $M.428, $M.235, $M.236, $M.403, $M.404, $M.280, $M.281, $M.265, $M.266, $M.439, $M.440, $M.259, $M.260, $M.286, $M.287, $M.253, $M.254, $M.413, $M.414, $M.352, $M.353, $M.232, $M.233, $M.429, $M.430, $M.431, $M.432, $M.247, $M.248, $M.244, $M.245, $M.262, $M.263, $M.421, $M.422, $M.391, $M.392, $M.331, $M.332, $M.283, $M.284, $M.322, $M.323, $M.423, $M.424, $M.400, $M.401, $M.225, $M.228, $M.231, $M.234, $M.237, $M.240, $M.243, $M.246, $M.249, $M.252, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.282, $M.285, $M.288, $M.291, $M.294, $M.297, $M.300, $M.303, $M.306, $M.309, $M.312, $M.315, $M.318, $M.321, $M.324, $M.327, $M.330, $M.333, $M.336, $M.339, $M.342, $M.345, $M.348, $M.351, $M.354, $M.357, $M.360, $M.363, $M.366, $M.369, $M.372, $M.375, $M.378, $M.381, $M.384, $M.387, $M.390, $M.393, $M.396, $M.399, $M.402, $M.405, $M.408, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.461, $M.41, $M.459, $M.458, $M.457, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.47, $M.48, $M.49, $M.2, $M.1, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.22, $M.9, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p54: ref;
  var $p58: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i1;
  var $i171: i1;
  var $i172: i1;
  var $i173: i1;
  var $i174: i1;
  var $i175: i1;
  var $i176: i1;
  var $i177: i1;
  var $i178: i1;
  var $i179: i1;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i32;
  var $i208: i64;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i64;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i219: i32;
  var $i220: i64;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i32;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $p253: ref;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $p258: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $p284: ref;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i8;
  var $i309: i32;
  var $i310: i8;
  var $p311: ref;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i316: i8;
  var $i317: i32;
  var $i318: i8;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i324: i8;
  var $i325: i32;
  var $i326: i8;
  var $p327: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $p364: ref;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $p380: ref;
  var $i382: i32;
  var $i383: i1;
  var $p384: ref;
  var $p385: ref;
  var $i387: i32;
  var $i388: i1;
  var $p389: ref;
  var $p390: ref;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $i396: i32;
  var $i397: i1;
  var $p398: ref;
  var $i400: i32;
  var $i401: i1;
  var $p402: ref;
  var $i404: i32;
  var $i405: i1;
  var $p406: ref;
  var $i407: i32;
  var $i409: i32;
  var $i410: i1;
  var $p411: ref;
  var $i412: i32;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i417: i32;
  var $i419: i32;
  var $i420: i1;
  var $p421: ref;
  var $i422: i8;
  var $i423: i32;
  var $i424: i8;
  var $p425: ref;
  var $i427: i32;
  var $i428: i1;
  var $p429: ref;
  var $i430: i8;
  var $i431: i32;
  var $i432: i8;
  var $p433: ref;
  var $i435: i32;
  var $i436: i1;
  var $p437: ref;
  var $i438: i8;
  var $i439: i32;
  var $i440: i8;
  var $p441: ref;
  var $i443: i32;
  var $i444: i1;
  var $p445: ref;
  var $i447: i32;
  var $i448: i1;
  var $p449: ref;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $i455: i32;
  var $i456: i1;
  var $p457: ref;
  var $i458: i8;
  var $i459: i1;
  var $i460: i32;
  var $i461: i8;
  var $i462: i32;
  var $i463: i8;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i468: i8;
  var $i469: i1;
  var $i470: i32;
  var $i471: i8;
  var $i472: i32;
  var $i473: i8;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $i478: i8;
  var $i479: i1;
  var $i480: i32;
  var $i481: i8;
  var $i482: i32;
  var $i483: i8;
  var $i485: i32;
  var $i486: i1;
  var $p487: ref;
  var $i489: i32;
  var $i490: i1;
  var $p491: ref;
  var $i493: i32;
  var $i494: i1;
  var $p495: ref;
  var $i497: i32;
  var $i498: i1;
  var $p499: ref;
  var $i500: i32;
  var $i501: i1;
  var $p502: ref;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $i506: i32;
  var $i507: i1;
  var $p508: ref;
  var $p509: ref;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $p514: ref;
  var $i516: i32;
  var $i517: i1;
  var $p518: ref;
  var $p519: ref;
  var $i521: i32;
  var $i522: i1;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $i526: i32;
  var $i527: i1;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $i531: i32;
  var $i532: i1;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $i536: i32;
  var $i537: i1;
  var $p538: ref;
  var $i540: i32;
  var $i541: i1;
  var $p542: ref;
  var $i544: i32;
  var $i545: i1;
  var $p546: ref;
  var $i548: i32;
  var $i549: i1;
  var $p550: ref;
  var $i551: i32;
  var $i552: i32;
  var $i554: i32;
  var $i555: i1;
  var $p556: ref;
  var $i557: i32;
  var $i558: i32;
  var $i560: i32;
  var $i561: i1;
  var $p562: ref;
  var $i563: i32;
  var $i564: i32;
  var $i566: i32;
  var $i567: i1;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $i571: i32;
  var $i572: i1;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $i576: i32;
  var $i577: i1;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $i581: i32;
  var $i582: i1;
  var $p583: ref;
  var $p584: ref;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $p589: ref;
  var $i591: i32;
  var $i592: i1;
  var $p593: ref;
  var $p594: ref;
  var $i596: i32;
  var $i597: i1;
  var $p598: ref;
  var $p599: ref;
  var $i601: i32;
  var $i602: i1;
  var $p603: ref;
  var $p604: ref;
  var $i606: i32;
  var $i607: i1;
  var $p608: ref;
  var $p609: ref;
  var $i611: i32;
  var $i612: i1;
  var $p613: ref;
  var $i614: i32;
  var $i616: i32;
  var $i617: i1;
  var $p618: ref;
  var $i619: i32;
  var $i621: i32;
  var $i622: i1;
  var $p623: ref;
  var $i624: i32;
  var $i626: i32;
  var $i627: i1;
  var $p628: ref;
  var $i630: i32;
  var $i631: i1;
  var $p632: ref;
  var $i634: i32;
  var $i635: i1;
  var $p636: ref;
  var $i638: i32;
  var $i639: i1;
  var $p640: ref;
  var $i641: i32;
  var $i643: i32;
  var $i644: i1;
  var $p645: ref;
  var $i646: i32;
  var $i648: i32;
  var $i649: i1;
  var $p650: ref;
  var $i651: i32;
  var $i653: i32;
  var $i654: i1;
  var $p655: ref;
  var $i656: i8;
  var $i657: i1;
  var $i659: i32;
  var $i660: i1;
  var $p661: ref;
  var $i662: i8;
  var $i663: i1;
  var $i665: i32;
  var $i666: i1;
  var $p667: ref;
  var $i668: i8;
  var $i669: i1;
  var $i671: i32;
  var $i672: i1;
  var $p673: ref;
  var $i675: i32;
  var $i676: i1;
  var $p677: ref;
  var $i679: i32;
  var $i680: i1;
  var $p681: ref;
  var $i683: i32;
  var $i684: i1;
  var $i686: i32;
  var $i687: i32;
  var $i688: i32;
  var $i689: i1;
  var $i691: i32;
  var $i692: i32;
  var $i693: i32;
  var $i694: i1;
  var $i696: i32;
  var $i697: i1;
  var $i698: i32;
  var $i699: i1;
  var $i700: i32;
  var $i701: i1;
  var $i702: i32;
  var $i703: i1;
  var $i704: i32;
  var $i705: i1;
  var $i706: i32;
  var $i707: i1;
  var $i708: i32;
  var $i709: i1;
  var $i710: i32;
  var $i711: i1;
  var $i712: i32;
  var $i713: i1;
  var $i714: i32;
  var $i715: i1;
  var $i716: i32;
  var $i717: i1;
  var $i718: i32;
  var $i719: i1;
  var $i720: i32;
  var $i721: i1;
  var $i722: i32;
  var $i723: i1;
  var $i724: i32;
  var $i725: i1;
  var $i726: i32;
  var $i727: i1;
  var $i728: i32;
  var $i729: i1;
  var $i730: i32;
  var $i731: i1;
  var $i732: i32;
  var $i733: i1;
  var $i734: i32;
  var $i735: i1;
  var $i736: i32;
  var $i737: i1;
  var $i738: i32;
  var $i739: i1;
  var $i740: i32;
  var $i741: i1;
  var $i742: i32;
  var $i743: i1;
  var $i744: i32;
  var $i745: i1;
  var $i746: i32;
  var $i747: i1;
  var $i748: i32;
  var $i749: i1;
  var $i750: i32;
  var $i751: i1;
  var $i752: i32;
  var $i753: i1;
  var $i754: i32;
  var $i755: i1;
  var $i756: i32;
  var $i757: i1;
  var $i758: i32;
  var $i759: i1;
  var $i760: i32;
  var $i761: i1;
  var $i762: i32;
  var $i763: i1;
  var $i764: i32;
  var $i765: i1;
  var $i766: i32;
  var $i767: i1;
  var $i768: i32;
  var $i769: i1;
  var $i770: i32;
  var $i771: i1;
  var $i772: i32;
  var $i773: i1;
  var $i774: i32;
  var $i775: i1;
  var $i776: i32;
  var $i777: i1;
  var $i778: i32;
  var $i779: i1;
  var $i780: i32;
  var $i781: i1;
  var $i782: i32;
  var $i783: i1;
  var $i784: i32;
  var $i785: i1;
  var $i786: i32;
  var $i787: i1;
  var $i788: i32;
  var $i789: i1;
  var $i790: i32;
  var $i791: i1;
  var $i792: i32;
  var $i793: i1;
  var $i794: i32;
  var $i795: i1;
  var $i796: i32;
  var $i797: i1;
  var $i798: i32;
  var $i799: i1;
  var $i800: i32;
  var $i801: i1;
  var $i802: i32;
  var $i803: i1;
  var $i804: i32;
  var $i805: i1;
  var $i806: i32;
  var $i807: i1;
  var $i808: i1;
  var $i809: i1;
  var $i810: i32;
  var $i811: i1;
  var $p812: ref;
  var $i813: i32;
  var $i814: i32;
  var $i815: i1;
  var $i816: i32;
  var $i817: i32;
  var $i818: i32;
  var $i819: i1;
  var $i820: i32;
  var $i821: i1;
  var $p822: ref;
  var $i823: i32;
  var $i824: i32;
  var $i825: i1;
  var $i826: i32;
  var $i827: i32;
  var $i828: i32;
  var $i829: i1;
  var $i830: i32;
  var $i831: i1;
  var $p832: ref;
  var $i833: i32;
  var $i834: i32;
  var $i835: i1;
  var $i836: i32;
  var $i837: i32;
  var $i838: i32;
  var $i839: i1;
  var $i840: i32;
  var $i841: i1;
  var $i842: i32;
  var $i843: i1;
  var $i844: i32;
  var $i845: i1;
  var $i846: i1;
  var $i847: i1;
  var $i848: i32;
  var $i849: i1;
  var $i850: i32;
  var $i851: i1;
  var $i852: i32;
  var $i853: i1;
  var $i854: i32;
  var $i855: i32;
  var $i856: i1;
  var $i857: i32;
  var $i858: i1;
  var $i859: i32;
  var $i860: i1;
  var $i861: i32;
  var $i862: i1;
  var $i863: i32;
  var $i864: i1;
  var $i865: i32;
  var $i866: i1;
  var $i867: i32;
  var $i868: i1;
  var $i869: i32;
  var $i870: i1;
  var $i871: i32;
  var $i872: i1;
  var $i873: i32;
  var $i874: i1;
  var $i875: i32;
  var $i876: i1;
  var $i877: i32;
  var $i878: i1;
  var $i879: i32;
  var $i880: i1;
  var $i881: i32;
  var $i882: i1;
  var $i883: i32;
  var $i884: i1;
  var $i885: i32;
  var $i886: i1;
  var $i887: i32;
  var $i888: i1;
  var $i889: i32;
  var $i890: i1;
  var vslice_dummy_var_113: ref;
  var vslice_dummy_var_114: ref;
  var vslice_dummy_var_115: ref;
  var vslice_dummy_var_116: ref;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: ref;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: ref;
  var vslice_dummy_var_124: ref;
  var vslice_dummy_var_125: ref;
  var vslice_dummy_var_126: ref;
  var vslice_dummy_var_127: ref;
  var vslice_dummy_var_128: ref;
  var vslice_dummy_var_129: ref;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i1;
  var vslice_dummy_var_146: i1;
  var vslice_dummy_var_147: i1;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i1;
  var vslice_dummy_var_167: i1;
  var vslice_dummy_var_168: i1;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;

  $bb0:
    call {:si_unique_call 1526} $initialize();
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $p9 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p11 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $p17 := ldv_init_zalloc(22);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $p19 := ldv_init_zalloc(296);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $p21 := ldv_init_zalloc(64);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $p23 := ldv_init_zalloc(24);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $p25 := ldv_init_zalloc(48);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $p27 := ldv_init_zalloc(80);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $p29 := ldv_init_zalloc(320);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p32 := ldv_init_zalloc(128);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p34 := ldv_init_zalloc(1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p36 := ldv_init_zalloc(216);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $p39 := ldv_init_zalloc(104);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_initialize();
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_113 := ldv_memset($p42, 0, 4);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_114 := ldv_memset($p44, 0, 4);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_115 := ldv_memset($p2, 0, 1);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_116 := ldv_memset($p47, 0, 4);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p4);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_117 := ldv_memset($p49, 0, 4);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p5);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_118 := ldv_memset($p51, 0, 4);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_119 := ldv_memset($p6, 0, 1);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p7);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_120 := ldv_memset($p54, 0, 4);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_121 := ldv_memset($p8, 0, 1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_122 := ldv_memset($p9, 0, 1);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p10);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_123 := ldv_memset($p58, 0, 8);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_124 := ldv_memset($p11, 0, 1);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p12);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_125 := ldv_memset($p61, 0, 4);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p13);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_126 := ldv_memset($p63, 0, 4);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p14);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_127 := ldv_memset($p65, 0, 4);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p15);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_128 := ldv_memset($p67, 0, 4);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p16);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_129 := ldv_memset($p69, 0, 4);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.137 := 0;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(0);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.138 := 0;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.139 := 0;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(0);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.140 := 0;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.141 := 0;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $M.142 := 0;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(0);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.143 := 0;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.144 := 0;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $M.145 := 0;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(0);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.146 := 0;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.147 := 0;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.148 := 0;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(0);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $M.149 := 0;
    call {:si_unique_call 1591} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.150 := 0;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.151 := 0;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.152 := 0;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(0);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.153 := 0;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.154 := 0;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.155 := 0;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.156 := 0;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $M.157 := 0;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.158 := 0;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $M.159 := 0;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(0);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $M.160 := 0;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $M.161 := 0;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $M.162 := 0;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $M.163 := 0;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.164 := 0;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(0);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $M.165 := 0;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $M.166 := 0;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $M.167 := 0;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.168 := 0;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $M.169 := 0;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.170 := 0;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(0);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $M.171 := 0;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $M.172 := 0;
    call {:si_unique_call 1614} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.173 := 0;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(0);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $M.174 := 0;
    call {:si_unique_call 1616} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(0);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.175 := 0;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $M.176 := 0;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(0);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $M.177 := 0;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $M.178 := 0;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(0);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.179 := 0;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.180 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(0);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $M.181 := 0;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $M.182 := 0;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $M.183 := 0;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $M.184 := 0;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $M.185 := 0;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $M.186 := 0;
    call {:si_unique_call 1628} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $M.187 := 0;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.188 := 0;
    call {:si_unique_call 1630} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.189 := 0;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(0);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $M.190 := 0;
    call {:si_unique_call 1632} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $M.191 := 0;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $M.192 := 0;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $M.193 := 0;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $M.194 := 0;
    call {:si_unique_call 1636} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(0);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $M.195 := 0;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $M.196 := 0;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(0);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.197 := 0;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(0);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $M.198 := 0;
    call {:si_unique_call 1640} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $M.199 := 0;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.200 := 0;
    call {:si_unique_call 1642} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.201 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $M.202 := 0;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.203 := 0;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.204 := 0;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.205 := 0;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.206 := 0;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $M.207 := 0;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.208 := 0;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $M.209 := 0;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $M.210 := 0;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.211 := 0;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $M.212 := 0;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $M.213 := 0;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.214 := 0;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(0);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $M.215 := 0;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(0);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $M.216 := 0;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.217 := 0;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $p206, $i207, $i208, $i210, $i211, $p212, $i213, $i214, $i216, $i217, $p218, $i219, $i220, $i222, $i223, $p224, $i225, $i227, $i228, $p229, $i230, $i232, $i233, $p234, $i235, $i237, $i238, $p239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $p247, $p248, $i250, $i251, $p252, $p253, $i255, $i256, $p257, $p258, $i260, $i261, $p262, $i263, $i265, $i266, $p267, $i268, $i270, $i271, $p272, $i273, $i275, $i276, $p277, $p278, $i279, $i280, $i281, $i282, $p283, $p284, $i285, $i286, $i287, $i288, $p289, $p290, $i291, $i292, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, $i309, $i310, $p311, $i313, $i314, $p315, $i316, $i317, $i318, $p319, $i321, $i322, $p323, $i324, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $p356, $i357, $i358, $p359, $p360, $i361, $i362, $p363, $p364, $i365, $i366, $p367, $i369, $i370, $p371, $i373, $i374, $p375, $i377, $i378, $p379, $p380, $i382, $i383, $p384, $p385, $i387, $i388, $p389, $p390, $i392, $i393, $p394, $i396, $i397, $p398, $i400, $i401, $p402, $i404, $i405, $p406, $i407, $i409, $i410, $p411, $i412, $i414, $i415, $p416, $i417, $i419, $i420, $p421, $i422, $i423, $i424, $p425, $i427, $i428, $p429, $i430, $i431, $i432, $p433, $i435, $i436, $p437, $i438, $i439, $i440, $p441, $i443, $i444, $p445, $i447, $i448, $p449, $i451, $i452, $p453, $i455, $i456, $p457, $i458, $i459, $i460, $i461, $i462, $i463, $i465, $i466, $p467, $i468, $i469, $i470, $i471, $i472, $i473, $i475, $i476, $p477, $i478, $i479, $i480, $i481, $i482, $i483, $i485, $i486, $p487, $i489, $i490, $p491, $i493, $i494, $p495, $i497, $i498, $p499, $i500, $i501, $p502, $i503, $i504, $p505, $i506, $i507, $p508, $p509, $i511, $i512, $p513, $p514, $i516, $i517, $p518, $p519, $i521, $i522, $p523, $p524, $p525, $i526, $i527, $p528, $p529, $p530, $i531, $i532, $p533, $p534, $p535, $i536, $i537, $p538, $i540, $i541, $p542, $i544, $i545, $p546, $i548, $i549, $p550, $i551, $i552, $i554, $i555, $p556, $i557, $i558, $i560, $i561, $p562, $i563, $i564, $i566, $i567, $p568, $p569, $p570, $i571, $i572, $p573, $p574, $p575, $i576, $i577, $p578, $p579, $p580, $i581, $i582, $p583, $p584, $i586, $i587, $p588, $p589, $i591, $i592, $p593, $p594, $i596, $i597, $p598, $p599, $i601, $i602, $p603, $p604, $i606, $i607, $p608, $p609, $i611, $i612, $p613, $i614, $i616, $i617, $p618, $i619, $i621, $i622, $p623, $i624, $i626, $i627, $p628, $i630, $i631, $p632, $i634, $i635, $p636, $i638, $i639, $p640, $i641, $i643, $i644, $p645, $i646, $i648, $i649, $p650, $i651, $i653, $i654, $p655, $i656, $i657, $i659, $i660, $p661, $i662, $i663, $i665, $i666, $p667, $i668, $i669, $i671, $i672, $p673, $i675, $i676, $p677, $i679, $i680, $p681, $i683, $i684, $i686, $i687, $i688, $i689, $i691, $i692, $i693, $i694, $i696, $i697, $i698, $i699, $i700, $i701, $i702, $i703, $i704, $i705, $i706, $i707, $i708, $i709, $i710, $i711, $i712, $i713, $i714, $i715, $i716, $i717, $i718, $i719, $i720, $i721, $i722, $i723, $i724, $i725, $i726, $i727, $i728, $i729, $i730, $i731, $i732, $i733, $i734, $i735, $i736, $i737, $i738, $i739, $i740, $i741, $i742, $i743, $i744, $i745, $i746, $i747, $i748, $i749, $i750, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i763, $i764, $i765, $i766, $i767, $i768, $i769, $i770, $i771, $i772, $i773, $i774, $i775, $i776, $i777, $i778, $i779, $i780, $i781, $i782, $i783, $i784, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $i792, $i793, $i794, $i795, $i796, $i797, $i798, $i799, $i800, $i801, $i802, $i803, $i804, $i805, $i806, $i807, $i808, $i809, $i810, $i811, $p812, $i813, $i814, $i815, $i816, $i817, $i818, $i819, $i820, $i821, $p822, $i823, $i824, $i825, $i826, $i827, $i828, $i829, $i830, $i831, $p832, $i833, $i834, $i835, $i836, $i837, $i838, $i839, $i840, $i841, $i842, $i843, $i844, $i845, $i846, $i847, $i848, $i849, $i850, $i851, $i852, $i853, $i854, $i855, $i856, $i857, $i858, $i859, $i860, $i861, $i862, $i863, $i864, $i865, $i866, $i867, $i868, $i869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $i886, $i887, $i888, $i889, $i890, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p18, $p20, $p22, $p24, $p26, $p28, $p30, $p31, $p33, $p34, $p35, $p37, $p38, $p40, $p41, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $p206, $i207, $i208, $i210, $i211, $p212, $i213, $i214, $i216, $i217, $p218, $i219, $i220, $i222, $i223, $p224, $i225, $i227, $i228, $p229, $i230, $i232, $i233, $p234, $i235, $i237, $i238, $p239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $p247, $p248, $i250, $i251, $p252, $p253, $i255, $i256, $p257, $p258, $i260, $i261, $p262, $i263, $i265, $i266, $p267, $i268, $i270, $i271, $p272, $i273, $i275, $i276, $p277, $p278, $i279, $i280, $i281, $i282, $p283, $p284, $i285, $i286, $i287, $i288, $p289, $p290, $i291, $i292, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, $i309, $i310, $p311, $i313, $i314, $p315, $i316, $i317, $i318, $p319, $i321, $i322, $p323, $i324, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $p356, $i357, $i358, $p359, $p360, $i361, $i362, $p363, $p364, $i365, $i366, $p367, $i369, $i370, $p371, $i373, $i374, $p375, $i377, $i378, $p379, $p380, $i382, $i383, $p384, $p385, $i387, $i388, $p389, $p390, $i392, $i393, $p394, $i396, $i397, $p398, $i400, $i401, $p402, $i404, $i405, $p406, $i407, $i409, $i410, $p411, $i412, $i414, $i415, $p416, $i417, $i419, $i420, $p421, $i422, $i423, $i424, $p425, $i427, $i428, $p429, $i430, $i431, $i432, $p433, $i435, $i436, $p437, $i438, $i439, $i440, $p441, $i443, $i444, $p445, $i447, $i448, $p449, $i451, $i452, $p453, $i455, $i456, $p457, $i458, $i459, $i460, $i461, $i462, $i463, $i465, $i466, $p467, $i468, $i469, $i470, $i471, $i472, $i473, $i475, $i476, $p477, $i478, $i479, $i480, $i481, $i482, $i483, $i485, $i486, $p487, $i489, $i490, $p491, $i493, $i494, $p495, $i497, $i498, $p499, $i500, $i501, $p502, $i503, $i504, $p505, $i506, $i507, $p508, $p509, $i511, $i512, $p513, $p514, $i516, $i517, $p518, $p519, $i521, $i522, $p523, $p524, $p525, $i526, $i527, $p528, $p529, $p530, $i531, $i532, $p533, $p534, $p535, $i536, $i537, $p538, $i540, $i541, $p542, $i544, $i545, $p546, $i548, $i549, $p550, $i551, $i552, $i554, $i555, $p556, $i557, $i558, $i560, $i561, $p562, $i563, $i564, $i566, $i567, $p568, $p569, $p570, $i571, $i572, $p573, $p574, $p575, $i576, $i577, $p578, $p579, $p580, $i581, $i582, $p583, $p584, $i586, $i587, $p588, $p589, $i591, $i592, $p593, $p594, $i596, $i597, $p598, $p599, $i601, $i602, $p603, $p604, $i606, $i607, $p608, $p609, $i611, $i612, $p613, $i614, $i616, $i617, $p618, $i619, $i621, $i622, $p623, $i624, $i626, $i627, $p628, $i630, $i631, $p632, $i634, $i635, $p636, $i638, $i639, $p640, $i641, $i643, $i644, $p645, $i646, $i648, $i649, $p650, $i651, $i653, $i654, $p655, $i656, $i657, $i659, $i660, $p661, $i662, $i663, $i665, $i666, $p667, $i668, $i669, $i671, $i672, $p673, $i675, $i676, $p677, $i679, $i680, $p681, $i683, $i684, $i686, $i687, $i688, $i689, $i691, $i692, $i693, $i694, $i696, $i697, $i698, $i699, $i700, $i701, $i702, $i703, $i704, $i705, $i706, $i707, $i708, $i709, $i710, $i711, $i712, $i713, $i714, $i715, $i716, $i717, $i718, $i719, $i720, $i721, $i722, $i723, $i724, $i725, $i726, $i727, $i728, $i729, $i730, $i731, $i732, $i733, $i734, $i735, $i736, $i737, $i738, $i739, $i740, $i741, $i742, $i743, $i744, $i745, $i746, $i747, $i748, $i749, $i750, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i763, $i764, $i765, $i766, $i767, $i768, $i769, $i770, $i771, $i772, $i773, $i774, $i775, $i776, $i777, $i778, $i779, $i780, $i781, $i782, $i783, $i784, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $i792, $i793, $i794, $i795, $i796, $i797, $i798, $i799, $i800, $i801, $i802, $i803, $i804, $i805, $i806, $i807, $i808, $i809, $i810, $i811, $p812, $i813, $i814, $i815, $i816, $i817, $i818, $i819, $i820, $i821, $p822, $i823, $i824, $i825, $i826, $i827, $i828, $i829, $i830, $i831, $p832, $i833, $i834, $i835, $i836, $i837, $i838, $i839, $i840, $i841, $i842, $i843, $i844, $i845, $i846, $i847, $i848, $i849, $i850, $i851, $i852, $i853, $i854, $i855, $i856, $i857, $i858, $i859, $i860, $i861, $i862, $i863, $i864, $i865, $i866, $i867, $i868, $i869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $i886, $i887, $i888, $i889, $i890, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 40);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i71, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i71, 70);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i71, 75);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i71, 78);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i71, 79);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i71, 80);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i71, 80);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} ldv_stop();
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb171_dummy;

  $bb17:
    assume $i79 == 1;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i889 := $M.217;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i890 := $ne.i32($i889, 0);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb840, $bb841;

  $bb841:
    assume !($i890 == 1);
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb840:
    assume $i890 == 1;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} ldv_main_exported_5();
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb15:
    assume $i78 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i887 := $M.216;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i888 := $ne.i32($i887, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb837, $bb838;

  $bb838:
    assume !($i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb837:
    assume $i888 == 1;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} ldv_main_exported_43();
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb13:
    assume $i77 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i885 := $M.215;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i886 := $ne.i32($i885, 0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb834, $bb835;

  $bb835:
    assume !($i886 == 1);
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb834:
    assume $i886 == 1;
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} ldv_main_exported_37();
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb11:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i71, 76);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i71, 77);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i81 == 1);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i883 := $M.214;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i884 := $ne.i32($i883, 0);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb831, $bb832;

  $bb832:
    assume !($i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb831:
    assume $i884 == 1;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} ldv_main_exported_34();
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb22:
    assume $i81 == 1;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i881 := $M.213;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i882 := $ne.i32($i881, 0);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb828, $bb829;

  $bb829:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb828:
    assume $i882 == 1;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} ldv_main_exported_4();
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb20:
    assume $i80 == 1;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i879 := $M.212;
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i880 := $ne.i32($i879, 0);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb825, $bb826;

  $bb826:
    assume !($i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb825:
    assume $i880 == 1;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_main_exported_38();
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb9:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i71, 72);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i71, 73);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i71, 74);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i84 == 1);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i877 := $M.211;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i878 := $ne.i32($i877, 0);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb822, $bb823;

  $bb823:
    assume !($i878 == 1);
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb822:
    assume $i878 == 1;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} ldv_main_exported_8();
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i875 := $M.210;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i876 := $ne.i32($i875, 0);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i876 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb819:
    assume $i876 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} ldv_main_exported_47();
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i873 := $M.209;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i874 := $ne.i32($i873, 0);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb816, $bb817;

  $bb817:
    assume !($i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb816:
    assume $i874 == 1;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} ldv_main_exported_51();
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb24:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i71, 71);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i85 == 1);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i871 := $M.208;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i872 := $ne.i32($i871, 0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb813, $bb814;

  $bb814:
    assume !($i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb813:
    assume $i872 == 1;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} ldv_main_exported_9();
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb30:
    assume $i85 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i869 := $M.207;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i870 := $ne.i32($i869, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb810, $bb811;

  $bb811:
    assume !($i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb810:
    assume $i870 == 1;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} ldv_main_exported_36();
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb7:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i71, 65);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i71, 67);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i71, 68);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i71, 69);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i867 := $M.206;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i868 := $ne.i32($i867, 0);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb807, $bb808;

  $bb808:
    assume !($i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb807:
    assume $i868 == 1;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} ldv_main_exported_3();
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i865 := $M.205;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i866 := $ne.i32($i865, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb804, $bb805;

  $bb805:
    assume !($i866 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb804:
    assume $i866 == 1;
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} ldv_main_exported_6();
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i863 := $M.204;
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i864 := $ne.i32($i863, 0);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb801, $bb802;

  $bb802:
    assume !($i864 == 1);
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb801:
    assume $i864 == 1;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} ldv_main_exported_13();
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb34:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i71, 66);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i90 == 1);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i861 := $M.203;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i862 := $ne.i32($i861, 0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb798, $bb799;

  $bb799:
    assume !($i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb798:
    assume $i862 == 1;
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} ldv_main_exported_23();
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb40:
    assume $i90 == 1;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i859 := $M.202;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i860 := $ne.i32($i859, 0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb795, $bb796;

  $bb796:
    assume !($i860 == 1);
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb795:
    assume $i860 == 1;
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} ldv_main_exported_46();
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb32:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i71, 62);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i71, 63);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i71, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i93 == 1);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i842 := $M.201;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i843 := $ne.i32($i842, 0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb765, $bb766;

  $bb766:
    assume !($i843 == 1);
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb765:
    assume $i843 == 1;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1946} $i844 := __VERIFIER_nondet_int();
    call {:si_unique_call 1947} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i844);
    call {:si_unique_call 1948} {:cexpr "tmp___17"} boogie_si_record_i32($i844);
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    $i845 := $slt.i32($i844, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb768, $bb769;

  $bb769:
    assume !($i845 == 1);
    assume {:verifier.code 0} true;
    $i846 := $eq.i32($i844, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb770, $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    assume !($i846 == 1);
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} ldv_stop();
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb770:
    assume $i846 == 1;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i852 := $M.201;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i853 := $eq.i32($i852, 1);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb783, $bb784;

  $bb784:
    assume !($i853 == 1);
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb783:
    assume $i853 == 1;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i854 := wl12xx_driver_init();
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.222 := $i854;
    call {:si_unique_call 1953} {:cexpr "ldv_retval_65"} boogie_si_record_i32($i854);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i855 := $M.222;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i856 := $ne.i32($i855, 0);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb785, $bb786;

  $bb786:
    assume !($i856 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $i857 := $M.222;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i858 := $eq.i32($i857, 0);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb788, $bb789;

  $bb789:
    assume !($i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb788:
    assume $i858 == 1;
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.201 := 2;
    call {:si_unique_call 1955} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $M.217 := 1;
    call {:si_unique_call 1956} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_file_operations_5();
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.216 := 1;
    call {:si_unique_call 1958} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(1);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} ldv_file_operations_43();
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.215 := 1;
    call {:si_unique_call 1960} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} ldv_file_operations_37();
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.214 := 1;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} ldv_file_operations_34();
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.213 := 1;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} ldv_file_operations_4();
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.212 := 1;
    call {:si_unique_call 1966} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(1);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ldv_file_operations_38();
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.211 := 1;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_file_operations_8();
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.210 := 1;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(1);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} ldv_file_operations_47();
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.209 := 1;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(1);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} ldv_file_operations_51();
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.208 := 1;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} ldv_file_operations_9();
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.207 := 1;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} ldv_file_operations_36();
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.206 := 1;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} ldv_file_operations_3();
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $M.205 := 1;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_file_operations_6();
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.204 := 1;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} ldv_file_operations_13();
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.203 := 1;
    call {:si_unique_call 1984} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} ldv_file_operations_23();
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $M.202 := 1;
    call {:si_unique_call 1986} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(1);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} ldv_file_operations_46();
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.199 := 1;
    call {:si_unique_call 1988} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(1);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} ldv_file_operations_42();
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.198 := 1;
    call {:si_unique_call 1990} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} ldv_file_operations_22();
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.196 := 1;
    call {:si_unique_call 1992} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(1);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} ldv_file_operations_53();
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $M.195 := 1;
    call {:si_unique_call 1994} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} ldv_file_operations_24();
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.194 := 1;
    call {:si_unique_call 1996} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(1);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} ldv_file_operations_49();
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.193 := 1;
    call {:si_unique_call 1998} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(1);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} ldv_file_operations_59();
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.192 := 1;
    call {:si_unique_call 2000} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(1);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} ldv_file_operations_69();
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.191 := 1;
    call {:si_unique_call 2002} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} ldv_file_operations_14();
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.190 := 1;
    call {:si_unique_call 2004} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(1);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} ldv_file_operations_40();
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.189 := 1;
    call {:si_unique_call 2006} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(1);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} ldv_file_operations_75();
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.188 := 1;
    call {:si_unique_call 2008} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} ldv_file_operations_28();
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.187 := 1;
    call {:si_unique_call 2010} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} ldv_file_operations_25();
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.186 := 1;
    call {:si_unique_call 2012} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} ldv_file_operations_30();
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.185 := 1;
    call {:si_unique_call 2014} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} ldv_file_operations_1();
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.184 := 1;
    call {:si_unique_call 2016} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} ldv_file_operations_17();
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $M.183 := 1;
    call {:si_unique_call 2018} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} ldv_file_operations_2();
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.182 := 1;
    call {:si_unique_call 2020} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(1);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} ldv_file_operations_68();
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.181 := 1;
    call {:si_unique_call 2022} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(1);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} ldv_file_operations_70();
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.180 := 1;
    call {:si_unique_call 2024} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(1);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} ldv_file_operations_67();
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.179 := 1;
    call {:si_unique_call 2026} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(1);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} ldv_file_operations_54();
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $M.178 := 1;
    call {:si_unique_call 2028} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(1);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} ldv_file_operations_62();
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.177 := 1;
    call {:si_unique_call 2030} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} ldv_file_operations_19();
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.176 := 1;
    call {:si_unique_call 2032} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(1);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} ldv_file_operations_76();
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.175 := 1;
    call {:si_unique_call 2034} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(1);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} ldv_file_operations_45();
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $M.174 := 1;
    call {:si_unique_call 2036} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(1);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} ldv_file_operations_66();
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.173 := 1;
    call {:si_unique_call 2038} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(1);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} ldv_file_operations_73();
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $M.172 := 1;
    call {:si_unique_call 2040} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(1);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} ldv_file_operations_56();
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $M.171 := 1;
    call {:si_unique_call 2042} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(1);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} ldv_file_operations_60();
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $M.170 := 1;
    call {:si_unique_call 2044} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(1);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} ldv_file_operations_52();
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $M.169 := 1;
    call {:si_unique_call 2046} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} ldv_file_operations_15();
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.168 := 1;
    call {:si_unique_call 2048} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} ldv_file_operations_12();
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.167 := 1;
    call {:si_unique_call 2050} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(1);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_file_operations_41();
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.166 := 1;
    call {:si_unique_call 2052} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(1);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} ldv_file_operations_58();
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.165 := 1;
    call {:si_unique_call 2054} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(1);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} ldv_file_operations_64();
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $M.164 := 1;
    call {:si_unique_call 2056} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(1);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} ldv_file_operations_39();
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.163 := 1;
    call {:si_unique_call 2058} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(1);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} ldv_file_operations_50();
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $M.162 := 1;
    call {:si_unique_call 2060} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} ldv_file_operations_29();
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $M.161 := 1;
    call {:si_unique_call 2062} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(1);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} ldv_file_operations_65();
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.160 := 1;
    call {:si_unique_call 2064} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(1);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} ldv_file_operations_77();
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.159 := 1;
    call {:si_unique_call 2066} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(1);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} ldv_file_operations_48();
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.158 := 1;
    call {:si_unique_call 2068} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(1);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} ldv_file_operations_78();
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.157 := 1;
    call {:si_unique_call 2070} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} ldv_file_operations_11();
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.156 := 1;
    call {:si_unique_call 2072} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} ldv_file_operations_35();
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.155 := 1;
    call {:si_unique_call 2074} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} ldv_file_operations_31();
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $M.154 := 1;
    call {:si_unique_call 2076} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} ldv_file_operations_10();
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.153 := 1;
    call {:si_unique_call 2078} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} ldv_file_operations_20();
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.152 := 1;
    call {:si_unique_call 2080} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(1);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} ldv_file_operations_61();
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.151 := 1;
    call {:si_unique_call 2082} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(1);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} ldv_file_operations_57();
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $M.150 := 1;
    call {:si_unique_call 2084} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} ldv_file_operations_27();
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $M.149 := 1;
    call {:si_unique_call 2086} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(1);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} ldv_file_operations_74();
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.148 := 1;
    call {:si_unique_call 2088} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(1);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} ldv_file_operations_55();
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.147 := 1;
    call {:si_unique_call 2090} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(1);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} ldv_file_operations_44();
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $M.146 := 1;
    call {:si_unique_call 2092} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} ldv_file_operations_16();
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.145 := 1;
    call {:si_unique_call 2094} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(1);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} ldv_file_operations_72();
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.144 := 1;
    call {:si_unique_call 2096} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} ldv_file_operations_18();
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.143 := 1;
    call {:si_unique_call 2098} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} ldv_file_operations_26();
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.142 := 1;
    call {:si_unique_call 2100} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} ldv_file_operations_7();
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.141 := 1;
    call {:si_unique_call 2102} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} ldv_file_operations_71();
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.140 := 1;
    call {:si_unique_call 2104} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} ldv_file_operations_21();
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.139 := 1;
    call {:si_unique_call 2106} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(1);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} ldv_file_operations_63();
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.138 := 1;
    call {:si_unique_call 2108} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} ldv_file_operations_32();
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.137 := 1;
    call {:si_unique_call 2110} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} ldv_file_operations_33();
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb785:
    assume $i856 == 1;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $M.201 := 3;
    call {:si_unique_call 1954} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_check_final_state();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb768:
    assume $i845 == 1;
    assume {:verifier.code 0} true;
    $i847 := $eq.i32($i844, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb773, $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    assume !($i847 == 1);
    goto $bb772;

  $bb773:
    assume $i847 == 1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i848 := $M.201;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i849 := $eq.i32($i848, 2);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb775, $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    assume !($i849 == 1);
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb775:
    assume $i849 == 1;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i850 := $M.200;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i850, 0);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb778, $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    assume !($i851 == 1);
    goto $bb777;

  $bb778:
    assume $i851 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} wl12xx_driver_exit();
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.201 := 3;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb46:
    assume $i93 == 1;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i840 := $M.199;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i841 := $ne.i32($i840, 0);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb762, $bb763;

  $bb763:
    assume !($i841 == 1);
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb762:
    assume $i841 == 1;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} ldv_main_exported_42();
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb44:
    assume $i92 == 1;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i838 := $M.198;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i839 := $ne.i32($i838, 0);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i839 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb759:
    assume $i839 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} ldv_main_exported_22();
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb42:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i71, 61);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i804 := $M.197;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i805 := $ne.i32($i804, 0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb721, $bb722;

  $bb722:
    assume !($i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb721:
    assume $i805 == 1;
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} $i806 := __VERIFIER_nondet_int();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i806);
    call {:si_unique_call 1927} {:cexpr "tmp___16"} boogie_si_record_i32($i806);
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $i807 := $slt.i32($i806, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    $i808 := $eq.i32($i806, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb726, $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    assume !($i808 == 1);
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_stop();
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb726:
    assume $i808 == 1;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i818 := $M.197;
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i819 := $eq.i32($i818, 1);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738, $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    assume !($i819 == 1);
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    $i828 := $M.197;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i829 := $eq.i32($i828, 2);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb747, $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    assume !($i829 == 1);
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb747:
    assume $i829 == 1;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i830 := $M.220;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i831 := $eq.i32($i830, 1);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb750, $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    assume !($i831 == 1);
    goto $bb749;

  $bb750:
    assume $i831 == 1;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p832 := $M.136;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} $i833 := wl12xx_remove($p832);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $M.221 := $i833;
    call {:si_unique_call 1939} {:cexpr "ldv_retval_61"} boogie_si_record_i32($i833);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i834 := $M.221;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i835 := $eq.i32($i834, 0);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb752, $bb753;

  $bb753:
    assume !($i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb752:
    assume $i835 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.197 := 1;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(1);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i836 := $M.200;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i837 := $sub.i32($i836, 1);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $M.200 := $i837;
    call {:si_unique_call 1941} {:cexpr "ref_cnt"} boogie_si_record_i32($i837);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.220 := 0;
    call {:si_unique_call 1942} {:cexpr "probed_79"} boogie_si_record_i32(0);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb738:
    assume $i819 == 1;
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i820 := $M.220;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i820, 1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb741, $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    assume !($i821 == 1);
    goto $bb740;

  $bb741:
    assume $i821 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p822 := $M.136;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i823 := wl12xx_remove($p822);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $M.221 := $i823;
    call {:si_unique_call 1934} {:cexpr "ldv_retval_61"} boogie_si_record_i32($i823);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i824 := $M.221;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i825 := $eq.i32($i824, 0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i825 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb743:
    assume $i825 == 1;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.197 := 1;
    call {:si_unique_call 1935} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(1);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i826 := $M.200;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i827 := $sub.i32($i826, 1);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $M.200 := $i827;
    call {:si_unique_call 1936} {:cexpr "ref_cnt"} boogie_si_record_i32($i827);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $M.220 := 0;
    call {:si_unique_call 1937} {:cexpr "probed_79"} boogie_si_record_i32(0);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb724:
    assume $i807 == 1;
    assume {:verifier.code 0} true;
    $i809 := $eq.i32($i806, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb729, $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    assume !($i809 == 1);
    goto $bb728;

  $bb729:
    assume $i809 == 1;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i810 := $M.197;
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i811 := $eq.i32($i810, 1);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb731, $bb732;

  $bb732:
    assume !($i811 == 1);
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb731:
    assume $i811 == 1;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p812 := $M.136;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i813 := wl12xx_probe($p812);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $M.219 := $i813;
    call {:si_unique_call 1929} {:cexpr "ldv_retval_62"} boogie_si_record_i32($i813);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i814 := $M.219;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i815 := $eq.i32($i814, 0);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb733, $bb734;

  $bb734:
    assume !($i815 == 1);
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb733:
    assume $i815 == 1;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $M.197 := 2;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(2);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i816 := $M.200;
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i817 := $add.i32($i816, 1);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.200 := $i817;
    call {:si_unique_call 1931} {:cexpr "ref_cnt"} boogie_si_record_i32($i817);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $M.220 := 1;
    call {:si_unique_call 1932} {:cexpr "probed_79"} boogie_si_record_i32(1);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i802 := $M.196;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i803 := $ne.i32($i802, 0);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb718, $bb719;

  $bb719:
    assume !($i803 == 1);
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb718:
    assume $i803 == 1;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_main_exported_53();
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb5:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i71, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i71, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i71, 57);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i71, 58);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i71, 59);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i99 == 1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i800 := $M.195;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i801 := $ne.i32($i800, 0);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb715, $bb716;

  $bb716:
    assume !($i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb715:
    assume $i801 == 1;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} ldv_main_exported_24();
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb58:
    assume $i99 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i798 := $M.194;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i799 := $ne.i32($i798, 0);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb712, $bb713;

  $bb713:
    assume !($i799 == 1);
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb712:
    assume $i799 == 1;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} ldv_main_exported_49();
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb56:
    assume $i98 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i796 := $M.193;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i797 := $ne.i32($i796, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb709, $bb710;

  $bb710:
    assume !($i797 == 1);
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb709:
    assume $i797 == 1;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} ldv_main_exported_59();
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb54:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i71, 56);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i100 == 1);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i794 := $M.192;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i795 := $ne.i32($i794, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb706, $bb707;

  $bb707:
    assume !($i795 == 1);
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb706:
    assume $i795 == 1;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} ldv_main_exported_69();
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb60:
    assume $i100 == 1;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i792 := $M.191;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i793 := $ne.i32($i792, 0);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i793 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb703:
    assume $i793 == 1;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} ldv_main_exported_14();
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb52:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i71, 52);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i71, 53);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i71, 54);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i103 == 1);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i790 := $M.190;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i791 := $ne.i32($i790, 0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb700:
    assume $i791 == 1;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} ldv_main_exported_40();
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb66:
    assume $i103 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i788 := $M.189;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i789 := $ne.i32($i788, 0);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb697, $bb698;

  $bb698:
    assume !($i789 == 1);
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb697:
    assume $i789 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} ldv_main_exported_75();
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb64:
    assume $i102 == 1;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i786 := $M.188;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i787 := $ne.i32($i786, 0);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb694, $bb695;

  $bb695:
    assume !($i787 == 1);
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb694:
    assume $i787 == 1;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} ldv_main_exported_28();
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb62:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i71, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i104 == 1);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i784 := $M.187;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i785 := $ne.i32($i784, 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb691, $bb692;

  $bb692:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb691:
    assume $i785 == 1;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} ldv_main_exported_25();
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb68:
    assume $i104 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i782 := $M.186;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i783 := $ne.i32($i782, 0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb688, $bb689;

  $bb689:
    assume !($i783 == 1);
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb688:
    assume $i783 == 1;
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_main_exported_30();
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb50:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i71, 45);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i71, 47);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i71, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i71, 49);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i108 == 1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i780 := $M.185;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i781 := $ne.i32($i780, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb685, $bb686;

  $bb686:
    assume !($i781 == 1);
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb685:
    assume $i781 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_main_exported_1();
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb76:
    assume $i108 == 1;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i778 := $M.184;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i779 := $ne.i32($i778, 0);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb682, $bb683;

  $bb683:
    assume !($i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb682:
    assume $i779 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} ldv_main_exported_17();
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb74:
    assume $i107 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i776 := $M.183;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i777 := $ne.i32($i776, 0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb679:
    assume $i777 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} ldv_main_exported_2();
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb72:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i71, 46);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i109 == 1);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i774 := $M.182;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i775 := $ne.i32($i774, 0);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb676:
    assume $i775 == 1;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_main_exported_68();
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb78:
    assume $i109 == 1;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i772 := $M.181;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i773 := $ne.i32($i772, 0);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb673, $bb674;

  $bb674:
    assume !($i773 == 1);
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb673:
    assume $i773 == 1;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_main_exported_70();
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb70:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i71, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i71, 43);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i71, 44);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i112 == 1);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i770 := $M.180;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i771 := $ne.i32($i770, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb670, $bb671;

  $bb671:
    assume !($i771 == 1);
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb670:
    assume $i771 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_main_exported_67();
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb84:
    assume $i112 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i768 := $M.179;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i769 := $ne.i32($i768, 0);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb667, $bb668;

  $bb668:
    assume !($i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb667:
    assume $i769 == 1;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_main_exported_54();
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb82:
    assume $i111 == 1;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i766 := $M.178;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i767 := $ne.i32($i766, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb664, $bb665;

  $bb665:
    assume !($i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb664:
    assume $i767 == 1;
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} ldv_main_exported_62();
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb80:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i71, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i113 == 1);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i764 := $M.177;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i765 := $ne.i32($i764, 0);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb661, $bb662;

  $bb662:
    assume !($i765 == 1);
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb661:
    assume $i765 == 1;
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_main_exported_19();
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb86:
    assume $i113 == 1;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i762 := $M.176;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i763 := $ne.i32($i762, 0);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb658, $bb659;

  $bb659:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb658:
    assume $i763 == 1;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} ldv_main_exported_76();
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb3:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i71, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i71, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i71, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i71, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i71, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i71, 39);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i119 == 1);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i760 := $M.175;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i761 := $ne.i32($i760, 0);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb655, $bb656;

  $bb656:
    assume !($i761 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb655:
    assume $i761 == 1;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} ldv_main_exported_45();
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb98:
    assume $i119 == 1;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i758 := $M.174;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i759 := $ne.i32($i758, 0);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i759 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb652:
    assume $i759 == 1;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} ldv_main_exported_66();
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb96:
    assume $i118 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i756 := $M.173;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i757 := $ne.i32($i756, 0);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i757 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb649:
    assume $i757 == 1;
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} ldv_main_exported_73();
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb94:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i71, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i120 == 1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i754 := $M.172;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i755 := $ne.i32($i754, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb646, $bb647;

  $bb647:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb646:
    assume $i755 == 1;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_main_exported_56();
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb100:
    assume $i120 == 1;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i752 := $M.171;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i753 := $ne.i32($i752, 0);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  $bb644:
    assume !($i753 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb643:
    assume $i753 == 1;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} ldv_main_exported_60();
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb92:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i71, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i71, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i71, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i123 == 1);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i750 := $M.170;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i751 := $ne.i32($i750, 0);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i751 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb640:
    assume $i751 == 1;
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} ldv_main_exported_52();
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb106:
    assume $i123 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i748 := $M.169;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i749 := $ne.i32($i748, 0);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb637:
    assume $i749 == 1;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_main_exported_15();
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb104:
    assume $i122 == 1;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i746 := $M.168;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i747 := $ne.i32($i746, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb634, $bb635;

  $bb635:
    assume !($i747 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb634:
    assume $i747 == 1;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} ldv_main_exported_12();
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb102:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i71, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i124 == 1);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i744 := $M.167;
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i745 := $ne.i32($i744, 0);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb631, $bb632;

  $bb632:
    assume !($i745 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb631:
    assume $i745 == 1;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_main_exported_41();
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb108:
    assume $i124 == 1;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i742 := $M.166;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i743 := $ne.i32($i742, 0);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb628:
    assume $i743 == 1;
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_main_exported_58();
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb90:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i71, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i71, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i71, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i71, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i128 == 1);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i740 := $M.165;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i741 := $ne.i32($i740, 0);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb625:
    assume $i741 == 1;
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} ldv_main_exported_64();
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb116:
    assume $i128 == 1;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i738 := $M.164;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i739 := $ne.i32($i738, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb622, $bb623;

  $bb623:
    assume !($i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb622:
    assume $i739 == 1;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_main_exported_39();
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb114:
    assume $i127 == 1;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i736 := $M.163;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i737 := $ne.i32($i736, 0);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb619:
    assume $i737 == 1;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} ldv_main_exported_50();
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb112:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i71, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i129 == 1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i734 := $M.162;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i735 := $ne.i32($i734, 0);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb616, $bb617;

  $bb617:
    assume !($i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb616:
    assume $i735 == 1;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_main_exported_29();
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb118:
    assume $i129 == 1;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i732 := $M.161;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i733 := $ne.i32($i732, 0);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb613:
    assume $i733 == 1;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_main_exported_65();
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb110:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i71, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i71, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i71, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i132 == 1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i730 := $M.160;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i731 := $ne.i32($i730, 0);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  $bb611:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb610:
    assume $i731 == 1;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} ldv_main_exported_77();
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb124:
    assume $i132 == 1;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i728 := $M.159;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i729 := $ne.i32($i728, 0);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb607, $bb608;

  $bb608:
    assume !($i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb607:
    assume $i729 == 1;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} ldv_main_exported_48();
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb122:
    assume $i131 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i726 := $M.158;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i727 := $ne.i32($i726, 0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i727 == 1);
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb604:
    assume $i727 == 1;
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} ldv_main_exported_78();
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb120:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i71, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i133 == 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i724 := $M.157;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i725 := $ne.i32($i724, 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  $bb602:
    assume !($i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb601:
    assume $i725 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} ldv_main_exported_11();
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb126:
    assume $i133 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i722 := $M.156;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i723 := $ne.i32($i722, 0);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb598, $bb599;

  $bb599:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb598:
    assume $i723 == 1;
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_main_exported_35();
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb88:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i71, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i71, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i71, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i71, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i71, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i138 == 1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i720 := $M.155;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i721 := $ne.i32($i720, 0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb595:
    assume $i721 == 1;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} ldv_main_exported_31();
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb136:
    assume $i138 == 1;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i718 := $M.154;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i719 := $ne.i32($i718, 0);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i719 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb592:
    assume $i719 == 1;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} ldv_main_exported_10();
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb134:
    assume $i137 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i716 := $M.153;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i717 := $ne.i32($i716, 0);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb589, $bb590;

  $bb590:
    assume !($i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb589:
    assume $i717 == 1;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} ldv_main_exported_20();
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb132:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i71, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i139 == 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i714 := $M.152;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i715 := $ne.i32($i714, 0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb586, $bb587;

  $bb587:
    assume !($i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb586:
    assume $i715 == 1;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} ldv_main_exported_61();
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb138:
    assume $i139 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i712 := $M.151;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i713 := $ne.i32($i712, 0);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb583:
    assume $i713 == 1;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} ldv_main_exported_57();
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb130:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i71, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i71, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i71, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i142 == 1);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i710 := $M.150;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i711 := $ne.i32($i710, 0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb580:
    assume $i711 == 1;
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} ldv_main_exported_27();
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb144:
    assume $i142 == 1;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i708 := $M.149;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i709 := $ne.i32($i708, 0);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb577:
    assume $i709 == 1;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} ldv_main_exported_74();
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb142:
    assume $i141 == 1;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i706 := $M.148;
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i707 := $ne.i32($i706, 0);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb574, $bb575;

  $bb575:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb574:
    assume $i707 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_main_exported_55();
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb140:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i71, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i143 == 1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i704 := $M.147;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i705 := $ne.i32($i704, 0);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i705 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb571:
    assume $i705 == 1;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ldv_main_exported_44();
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb146:
    assume $i143 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i702 := $M.146;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i703 := $ne.i32($i702, 0);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb568, $bb569;

  $bb569:
    assume !($i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb568:
    assume $i703 == 1;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} ldv_main_exported_16();
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb128:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i71, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i71, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i71, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i71, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i147 == 1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i700 := $M.145;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i701 := $ne.i32($i700, 0);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i701 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb565:
    assume $i701 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_main_exported_72();
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb154:
    assume $i147 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i698 := $M.144;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i699 := $ne.i32($i698, 0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb562:
    assume $i699 == 1;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_main_exported_18();
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb152:
    assume $i146 == 1;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i696 := $M.143;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i697 := $ne.i32($i696, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb559:
    assume $i697 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_main_exported_26();
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb150:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i71, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i148 == 1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i166 := $M.50;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb187:
    assume $i167 == 1;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} $i168 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i168);
    call {:si_unique_call 1671} {:cexpr "tmp___15"} boogie_si_record_i32($i168);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i168, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i168, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i168, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i168, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i168, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i174 := $slt.i32($i168, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i168, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb202:
    assume $i175 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i693 := $M.50;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i694 := $eq.i32($i693, 2);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i694 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb553:
    assume $i694 == 1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} vslice_dummy_var_210 := ldv_init_80();
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1869} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb200:
    assume $i174 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i683 := $M.50;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i684 := $eq.i32($i683, 3);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547, $bb548;

  $bb548:
    assume !($i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    $i688 := $M.50;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i689 := $eq.i32($i688, 2);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb550, $bb551;

  $bb551:
    assume !($i689 == 1);
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb550:
    assume $i689 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} vslice_dummy_var_209 := ldv_release_80();
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i691 := $M.200;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i692 := $sub.i32($i691, 1);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $M.200 := $i692;
    call {:si_unique_call 1867} {:cexpr "ref_cnt"} boogie_si_record_i32($i692);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb547:
    assume $i684 == 1;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} vslice_dummy_var_208 := ldv_release_80();
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i686 := $M.200;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i687 := $sub.i32($i686, 1);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $M.200 := $i687;
    call {:si_unique_call 1864} {:cexpr "ref_cnt"} boogie_si_record_i32($i687);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb198:
    assume $i173 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i671 := $M.50;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i672 := $eq.i32($i671, 1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  $bb539:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    $i675 := $M.50;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i675, 3);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb541, $bb542;

  $bb542:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    $i679 := $M.50;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i679, 2);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb544:
    assume $i680 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p681 := $M.51;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} vslice_dummy_var_207 := wl12xx_get_pg_ver($p681, $p38);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb541:
    assume $i676 == 1;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p677 := $M.51;
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} vslice_dummy_var_206 := wl12xx_get_pg_ver($p677, $p38);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb538:
    assume $i672 == 1;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $p673 := $M.51;
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} vslice_dummy_var_205 := wl12xx_get_pg_ver($p673, $p38);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb196:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i168, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i176 == 1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i653 := $M.50;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i653, 1);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $i659 := $M.50;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i659, 3);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $i665 := $M.50;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i666 := $eq.i32($i665, 2);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb535:
    assume $i666 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p667 := $M.51;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i668 := $load.i8($M.135, $p8);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i669 := $trunc.i8.i1($i668);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_204 := wl12xx_get_spare_blocks($p667, $i669);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb532:
    assume $i660 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p661 := $M.51;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i662 := $load.i8($M.135, $p8);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i663 := $trunc.i8.i1($i662);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} vslice_dummy_var_203 := wl12xx_get_spare_blocks($p661, $i663);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb529:
    assume $i654 == 1;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p655 := $M.51;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i656 := $load.i8($M.135, $p8);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i657 := $trunc.i8.i1($i656);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} vslice_dummy_var_202 := wl12xx_get_spare_blocks($p655, $i657);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb205:
    assume $i176 == 1;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i638 := $M.50;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i638, 1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520, $bb521;

  $bb521:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $i643 := $M.50;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i644 := $eq.i32($i643, 3);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    $i648 := $M.50;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i649 := $eq.i32($i648, 2);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  $bb527:
    assume !($i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb526:
    assume $i649 == 1;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p650 := $M.51;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i651 := $load.i32($M.135, $p1);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} vslice_dummy_var_201 := wl12xx_get_rx_buf_align($p650, $i651);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb523:
    assume $i644 == 1;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p645 := $M.51;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i646 := $load.i32($M.135, $p1);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} vslice_dummy_var_200 := wl12xx_get_rx_buf_align($p645, $i646);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb520:
    assume $i639 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p640 := $M.51;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i641 := $load.i32($M.135, $p1);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} vslice_dummy_var_199 := wl12xx_get_rx_buf_align($p640, $i641);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb194:
    assume $i171 == 1;
    assume {:verifier.code 0} true;
    $i177 := $slt.i32($i168, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i168, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i178 == 1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i626 := $M.50;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i626, 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    $i630 := $M.50;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i631 := $eq.i32($i630, 3);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb514, $bb515;

  $bb515:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $i634 := $M.50;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i634, 2);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb517, $bb518;

  $bb518:
    assume !($i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb517:
    assume $i635 == 1;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p636 := $M.51;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} vslice_dummy_var_198 := wl12xx_plt_init($p636);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    goto $bb519;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb514:
    assume $i631 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p632 := $M.51;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} vslice_dummy_var_197 := wl12xx_plt_init($p632);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb516;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb511:
    assume $i627 == 1;
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p628 := $M.51;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} vslice_dummy_var_196 := wl12xx_plt_init($p628);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    goto $bb513;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb209:
    assume $i178 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i611 := $M.50;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i611, 1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  $bb503:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    $i616 := $M.50;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i616, 3);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb505, $bb506;

  $bb506:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $i621 := $M.50;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i622 := $eq.i32($i621, 2);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb508:
    assume $i622 == 1;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p623 := $M.51;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i624 := $load.i32($M.135, $p7);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} vslice_dummy_var_195 := wl12xx_get_rx_packet_len($p623, $p31, $i624);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb505:
    assume $i617 == 1;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p618 := $M.51;
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i619 := $load.i32($M.135, $p7);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} vslice_dummy_var_194 := wl12xx_get_rx_packet_len($p618, $p31, $i619);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb502:
    assume $i612 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p613 := $M.51;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.135, $p7);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} vslice_dummy_var_193 := wl12xx_get_rx_packet_len($p613, $p31, $i614);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb207:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i168, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i179 == 1);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i596 := $M.50;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i596, 1);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  $bb494:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $i601 := $M.50;
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i601, 3);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $i606 := $M.50;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i606, 2);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb499:
    assume $i607 == 1;
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p608 := $M.51;
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p609 := $M.53;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} vslice_dummy_var_192 := wl12xx_sta_get_ap_rate_mask($p608, $p609);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1831} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb496:
    assume $i602 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p603 := $M.51;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p604 := $M.53;
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} vslice_dummy_var_191 := wl12xx_sta_get_ap_rate_mask($p603, $p604);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1829} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb493:
    assume $i597 == 1;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p598 := $M.51;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p599 := $M.53;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} vslice_dummy_var_190 := wl12xx_sta_get_ap_rate_mask($p598, $p599);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1827} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb211:
    assume $i179 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i581 := $M.50;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $i586 := $M.50;
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 3);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    $i591 := $M.50;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i591, 2);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb490:
    assume $i592 == 1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p593 := $M.51;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p594 := $M.53;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} vslice_dummy_var_189 := wl12xx_cmd_channel_switch($p593, $p594, $p26);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1825} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb487:
    assume $i587 == 1;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p588 := $M.51;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p589 := $M.53;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} vslice_dummy_var_188 := wl12xx_cmd_channel_switch($p588, $p589, $p26);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb484:
    assume $i582 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p583 := $M.51;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p584 := $M.53;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} vslice_dummy_var_187 := wl12xx_cmd_channel_switch($p583, $p584, $p26);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1821} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb192:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i168, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i168, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i168, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i182 == 1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i566 := $M.50;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i566, 1);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $i571 := $M.50;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i571, 3);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    $i576 := $M.50;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i577 := $eq.i32($i576, 2);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb481, $bb482;

  $bb482:
    assume !($i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb481:
    assume $i577 == 1;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p578 := $M.51;
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p579 := $M.55;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p580 := $M.54;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} wl12xx_set_tx_desc_data_len($p578, $p579, $p580);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb478:
    assume $i572 == 1;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p573 := $M.51;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p574 := $M.55;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p575 := $M.54;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} wl12xx_set_tx_desc_data_len($p573, $p574, $p575);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb475:
    assume $i567 == 1;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p568 := $M.51;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p569 := $M.55;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p570 := $M.54;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} wl12xx_set_tx_desc_data_len($p568, $p569, $p570);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1815} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb217:
    assume $i182 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i548 := $M.50;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i549 := $eq.i32($i548, 1);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    $i554 := $M.50;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i554, 3);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $i560 := $M.50;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i561 := $eq.i32($i560, 2);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb472:
    assume $i561 == 1;
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p562 := $M.51;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i563 := $load.i32($M.135, $p4);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.135, $p13);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} vslice_dummy_var_186 := wl12xx_calc_tx_blocks($p562, $i563, $i564);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1813} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb469:
    assume $i555 == 1;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p556 := $M.51;
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.135, $p4);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i558 := $load.i32($M.135, $p13);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} vslice_dummy_var_185 := wl12xx_calc_tx_blocks($p556, $i557, $i558);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb466:
    assume $i549 == 1;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p550 := $M.51;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i551 := $load.i32($M.135, $p4);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i552 := $load.i32($M.135, $p13);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} vslice_dummy_var_184 := wl12xx_calc_tx_blocks($p550, $i551, $i552);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1809} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb215:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i168, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i183 == 1);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i536 := $M.50;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i537 := $eq.i32($i536, 1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $i540 := $M.50;
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i540, 3);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $i544 := $M.50;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i545 := $eq.i32($i544, 2);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb463:
    assume $i545 == 1;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p546 := $M.51;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} vslice_dummy_var_183 := wl12xx_ack_event($p546);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1807} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb460:
    assume $i541 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p542 := $M.51;
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} vslice_dummy_var_182 := wl12xx_ack_event($p542);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb457:
    assume $i537 == 1;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p538 := $M.51;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_181 := wl12xx_ack_event($p538);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb219:
    assume $i183 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i521 := $M.50;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, 1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $i526 := $M.50;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i526, 3);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    $i531 := $M.50;
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i531, 2);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb454, $bb455;

  $bb455:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb454:
    assume $i532 == 1;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p533 := $M.51;
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p534 := $M.55;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p535 := $M.54;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} wl12xx_set_tx_desc_csum($p533, $p534, $p535);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb451:
    assume $i527 == 1;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p528 := $M.51;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p529 := $M.55;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p530 := $M.54;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} wl12xx_set_tx_desc_csum($p528, $p529, $p530);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb448:
    assume $i522 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p523 := $M.51;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p524 := $M.55;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p525 := $M.54;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} wl12xx_set_tx_desc_csum($p523, $p524, $p525);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb213:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i168, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i168, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i185 == 1);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i506 := $M.50;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i507 := $eq.i32($i506, 1);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $i511 := $M.50;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i511, 3);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $i516 := $M.50;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i516, 2);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb445:
    assume $i517 == 1;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p518 := $M.51;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p519 := $M.53;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} vslice_dummy_var_180 := wl12xx_scan_stop($p518, $p519);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb442:
    assume $i512 == 1;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p513 := $M.51;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p514 := $M.53;
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_179 := wl12xx_scan_stop($p513, $p514);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb439:
    assume $i507 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p508 := $M.51;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p509 := $M.53;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_178 := wl12xx_scan_stop($p508, $p509);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb223:
    assume $i185 == 1;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i497 := $M.50;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i497, 1);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $i500 := $M.50;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i500, 3);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $i503 := $M.50;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 2);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb436:
    assume $i504 == 1;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p505 := $M.51;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} wl12xx_convert_fw_status($p505, $p34, $p28);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb433:
    assume $i501 == 1;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p502 := $M.51;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} wl12xx_convert_fw_status($p502, $p34, $p28);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb430:
    assume $i498 == 1;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p499 := $M.51;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} wl12xx_convert_fw_status($p499, $p34, $p28);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb221:
    assume $i184 == 1;
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i168, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i186 == 1);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i485 := $M.50;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 1);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $i489 := $M.50;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i489, 3);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $i493 := $M.50;
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, 2);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb427:
    assume $i494 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p495 := $M.51;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_177 := wl12xx_boot($p495);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb424:
    assume $i490 == 1;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p491 := $M.51;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_176 := wl12xx_boot($p491);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb421:
    assume $i486 == 1;
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p487 := $M.51;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_175 := wl12xx_boot($p487);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb225:
    assume $i186 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i455 := $M.50;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i455, 1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $i465 := $M.50;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 3);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $i475 := $M.50;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 2);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb418:
    assume $i476 == 1;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p477 := $M.51;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i478 := $load.i8($M.135, $p9);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i479 := $trunc.i8.i1($i478);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i480 := $load.i32($M.135, $p14);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.135, $p2);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i482 := $zext.i8.i32($i481);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i8($i482);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_174 := wl12xx_set_peer_cap($p477, $p18, $i479, $i480, $i483);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb415:
    assume $i466 == 1;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p467 := $M.51;
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.135, $p9);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i8.i1($i468);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i470 := $load.i32($M.135, $p14);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i471 := $load.i8($M.135, $p2);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i472 := $zext.i8.i32($i471);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i473 := $trunc.i32.i8($i472);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} vslice_dummy_var_173 := wl12xx_set_peer_cap($p467, $p18, $i469, $i470, $i473);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb412:
    assume $i456 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p457 := $M.51;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i458 := $load.i8($M.135, $p9);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i8.i1($i458);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.135, $p14);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.135, $p2);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i32($i461);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i463 := $trunc.i32.i8($i462);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} vslice_dummy_var_172 := wl12xx_set_peer_cap($p457, $p18, $i459, $i460, $i463);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb190:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i168, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i168, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i168, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i168, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i168, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i191 == 1);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i443 := $M.50;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 1);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    $i447 := $M.50;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, 3);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $i451 := $M.50;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 2);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb409:
    assume $i452 == 1;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p453 := $M.51;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_171 := wl12xx_tx_delayed_compl($p453);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb406:
    assume $i448 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p449 := $M.51;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} vslice_dummy_var_170 := wl12xx_tx_delayed_compl($p449);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb403:
    assume $i444 == 1;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p445 := $M.51;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} vslice_dummy_var_169 := wl12xx_tx_delayed_compl($p445);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb235:
    assume $i191 == 1;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i419 := $M.50;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i419, 1);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $i427 := $M.50;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 3);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $i435 := $M.50;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i435, 2);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb400:
    assume $i436 == 1;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p437 := $M.51;
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i438 := $load.i8($M.135, $p6);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i439 := $zext.i8.i32($i438);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i8($i439);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p441 := $M.52;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_168 := wl12xx_lnk_high_prio($p437, $i440, $p441);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb397:
    assume $i428 == 1;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p429 := $M.51;
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i430 := $load.i8($M.135, $p6);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i431 := $zext.i8.i32($i430);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i432 := $trunc.i32.i8($i431);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p433 := $M.52;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_167 := wl12xx_lnk_high_prio($p429, $i432, $p433);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb394:
    assume $i420 == 1;
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p421 := $M.51;
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i422 := $load.i8($M.135, $p6);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i423 := $zext.i8.i32($i422);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i424 := $trunc.i32.i8($i423);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p425 := $M.52;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_166 := wl12xx_lnk_high_prio($p421, $i424, $p425);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb233:
    assume $i190 == 1;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i404 := $M.50;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i404, 1);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $i409 := $M.50;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 3);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $i414 := $M.50;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i414, 2);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb391:
    assume $i415 == 1;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p416 := $M.51;
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.135, $p15);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_165 := wl12xx_convert_hwaddr($p416, $i417);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb388:
    assume $i410 == 1;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $p411 := $M.51;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i412 := $load.i32($M.135, $p15);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_164 := wl12xx_convert_hwaddr($p411, $i412);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb385:
    assume $i405 == 1;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p406 := $M.51;
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.135, $p15);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_163 := wl12xx_convert_hwaddr($p406, $i407);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb231:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i168, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i192 == 1);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i392 := $M.50;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 1);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $i396 := $M.50;
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i396, 3);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $i400 := $M.50;
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 2);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb382:
    assume $i401 == 1;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p402 := $M.51;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_162 := wl12xx_process_mailbox_events($p402);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb379:
    assume $i397 == 1;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p398 := $M.51;
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} vslice_dummy_var_161 := wl12xx_process_mailbox_events($p398);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb376:
    assume $i393 == 1;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p394 := $M.51;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_160 := wl12xx_process_mailbox_events($p394);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb237:
    assume $i192 == 1;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i377 := $M.50;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 1);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i382 := $M.50;
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 3);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i387 := $M.50;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 2);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb373:
    assume $i388 == 1;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p389 := $M.51;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p390 := $M.53;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_159 := wl12xx_sched_scan_start($p389, $p390, $p33, $p22);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb370:
    assume $i383 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p384 := $M.51;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p385 := $M.53;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} vslice_dummy_var_158 := wl12xx_sched_scan_start($p384, $p385, $p33, $p22);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb367:
    assume $i378 == 1;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p379 := $M.51;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p380 := $M.53;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} vslice_dummy_var_157 := wl12xx_sched_scan_start($p379, $p380, $p33, $p22);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb229:
    assume $i188 == 1;
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i168, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i168, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i194 == 1);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i365 := $M.50;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 1);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $i369 := $M.50;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 3);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $i373 := $M.50;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 2);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb364:
    assume $i374 == 1;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p375 := $M.51;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} vslice_dummy_var_156 := wl12xx_debugfs_add_files($p375, $p30);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb361:
    assume $i370 == 1;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p371 := $M.51;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} vslice_dummy_var_155 := wl12xx_debugfs_add_files($p371, $p30);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb358:
    assume $i366 == 1;
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p367 := $M.51;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} vslice_dummy_var_154 := wl12xx_debugfs_add_files($p367, $p30);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb241:
    assume $i194 == 1;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i353 := $M.50;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 1);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $i357 := $M.50;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 3);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i361 := $M.50;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 2);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb355:
    assume $i362 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p363 := $M.51;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p364 := $M.53;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} wl12xx_scan_sched_scan_stop($p363, $p364);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb352:
    assume $i358 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p359 := $M.51;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p360 := $M.53;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} wl12xx_scan_sched_scan_stop($p359, $p360);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb349:
    assume $i354 == 1;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p355 := $M.51;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p356 := $M.53;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} wl12xx_scan_sched_scan_stop($p355, $p356);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb239:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i168, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i195 == 1);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i341 := $M.50;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, 1);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $i345 := $M.50;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 3);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $i349 := $M.50;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 2);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb346:
    assume $i350 == 1;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p351 := $M.51;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} vslice_dummy_var_153 := wl12xx_hw_init($p351);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb343:
    assume $i346 == 1;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p347 := $M.51;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} vslice_dummy_var_152 := wl12xx_hw_init($p347);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb340:
    assume $i342 == 1;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p343 := $M.51;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} vslice_dummy_var_151 := wl12xx_hw_init($p343);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb243:
    assume $i195 == 1;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i329 := $M.50;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 1);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $i333 := $M.50;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 3);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i337 := $M.50;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 2);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb337:
    assume $i338 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p339 := $M.51;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} vslice_dummy_var_150 := wl12xx_identify_chip($p339);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb334:
    assume $i334 == 1;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $p335 := $M.51;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} vslice_dummy_var_149 := wl12xx_identify_chip($p335);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb331:
    assume $i330 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p331 := $M.51;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} vslice_dummy_var_148 := wl12xx_identify_chip($p331);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb227:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i168, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    $i197 := $slt.i32($i168, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i168, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i198 == 1);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i305 := $M.50;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 1);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $i313 := $M.50;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 3);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $i321 := $M.50;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 2);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb328:
    assume $i322 == 1;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p323 := $M.51;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.135, $p11);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i32.i8($i325);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p327 := $M.52;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} vslice_dummy_var_147 := wl12xx_lnk_low_prio($p323, $i326, $p327);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb325:
    assume $i314 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p315 := $M.51;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.135, $p11);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i317 := $zext.i8.i32($i316);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i8($i317);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p319 := $M.52;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} vslice_dummy_var_146 := wl12xx_lnk_low_prio($p315, $i318, $p319);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb322:
    assume $i306 == 1;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p307 := $M.51;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i308 := $load.i8($M.135, $p11);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i310 := $trunc.i32.i8($i309);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p311 := $M.52;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} vslice_dummy_var_145 := wl12xx_lnk_low_prio($p307, $i310, $p311);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb249:
    assume $i198 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i293 := $M.50;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $i297 := $M.50;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 3);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i301 := $M.50;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb319:
    assume $i302 == 1;
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p303 := $M.51;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} vslice_dummy_var_144 := wl12xx_get_mac($p303);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb316:
    assume $i298 == 1;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p299 := $M.51;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vslice_dummy_var_143 := wl12xx_get_mac($p299);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb313:
    assume $i294 == 1;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p295 := $M.51;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_142 := wl12xx_get_mac($p295);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb247:
    assume $i197 == 1;
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i168, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i199 == 1);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i275 := $M.50;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i281 := $M.50;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 3);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $i287 := $M.50;
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 2);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb310:
    assume $i288 == 1;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p289 := $M.51;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p290 := $M.55;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.135, $p0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.135, $p3);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} wl12xx_set_tx_desc_blocks($p289, $p290, $i291, $i292);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb307:
    assume $i282 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p283 := $M.51;
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p284 := $M.55;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.135, $p0);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.135, $p3);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} wl12xx_set_tx_desc_blocks($p283, $p284, $i285, $i286);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb304:
    assume $i276 == 1;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p277 := $M.51;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p278 := $M.55;
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.135, $p0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.135, $p3);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} wl12xx_set_tx_desc_blocks($p277, $p278, $i279, $i280);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb251:
    assume $i199 == 1;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i260 := $M.50;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 1);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i265 := $M.50;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 3);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $i270 := $M.50;
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 2);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb301:
    assume $i271 == 1;
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p272 := $M.51;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.135, $p5);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_141 := wl12xx_wait_for_event($p272, $i273, $p41);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb298:
    assume $i266 == 1;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p267 := $M.51;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.135, $p5);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} vslice_dummy_var_140 := wl12xx_wait_for_event($p267, $i268, $p41);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb295:
    assume $i261 == 1;
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p262 := $M.51;
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.135, $p5);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} vslice_dummy_var_139 := wl12xx_wait_for_event($p262, $i263, $p41);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb245:
    assume $i196 == 1;
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i168, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i168, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i201 == 1);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i245 := $M.50;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $i250 := $M.50;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 3);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $i255 := $M.50;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 2);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb292:
    assume $i256 == 1;
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p257 := $M.51;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p258 := $M.53;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} vslice_dummy_var_138 := wl12xx_scan_start($p257, $p258, $p40);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb289:
    assume $i251 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p252 := $M.51;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p253 := $M.53;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} vslice_dummy_var_137 := wl12xx_scan_start($p252, $p253, $p40);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb286:
    assume $i246 == 1;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p247 := $M.51;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p248 := $M.53;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} vslice_dummy_var_136 := wl12xx_scan_start($p247, $p248, $p40);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb255:
    assume $i201 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i237 := $M.50;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb280:
    assume $i238 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p239 := $M.51;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i240 := wl12xx_setup($p239);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $M.218 := $i240;
    call {:si_unique_call 1685} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i240);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i241 := $M.218;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb282:
    assume $i242 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i243 := $M.200;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i243, 1);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.200 := $i244;
    call {:si_unique_call 1687} {:cexpr "ref_cnt"} boogie_si_record_i32($i244);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb253:
    assume $i200 == 1;
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i168, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i202 == 1);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i222 := $M.50;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 1);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i227 := $M.50;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 3);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i232 := $M.50;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 2);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb277:
    assume $i233 == 1;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p234 := $M.51;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.135, $p12);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_135 := wl12xx_set_key($p234, $i235, $p20, $p37, $p24);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb274:
    assume $i228 == 1;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p229 := $M.51;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.135, $p12);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} vslice_dummy_var_134 := wl12xx_set_key($p229, $i230, $p20, $p37, $p24);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume $i223 == 1;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p224 := $M.51;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.135, $p12);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} vslice_dummy_var_133 := wl12xx_set_key($p224, $i225, $p20, $p37, $p24);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb257:
    assume $i202 == 1;
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i168, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb204;

  $bb259:
    assume $i203 == 1;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i204 := $M.50;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i210 := $M.50;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 3);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i216 := $M.50;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 2);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb267:
    assume $i217 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p218 := $M.51;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.135, $p16);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i220 := $load.i64($M.135, $p10);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_132 := wl12xx_trigger_cmd($p218, $i219, $p35, $i220);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb264:
    assume $i211 == 1;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p212 := $M.51;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.135, $p16);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i214 := $load.i64($M.135, $p10);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_131 := wl12xx_trigger_cmd($p212, $i213, $p35, $i214);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb261:
    assume $i205 == 1;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p206 := $M.51;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.135, $p16);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i208 := $load.i64($M.135, $p10);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_130 := wl12xx_trigger_cmd($p206, $i207, $p35, $i208);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb156:
    assume $i148 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i164 := $M.142;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb184:
    assume $i165 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_main_exported_7();
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb148:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i71, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i71, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i71, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i151 == 1);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i162 := $M.141;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb181:
    assume $i163 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ldv_main_exported_71();
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb162:
    assume $i151 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i160 := $M.140;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb178:
    assume $i161 == 1;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_main_exported_21();
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb160:
    assume $i150 == 1;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i158 := $M.139;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb175:
    assume $i159 == 1;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_main_exported_63();
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb158:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i71, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i152 == 1);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i156 := $M.138;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb172:
    assume $i157 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_main_exported_32();
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb164:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i71, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb19;

  $bb166:
    assume $i153 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i154 := $M.137;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb168:
    assume $i155 == 1;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_main_exported_33();
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb171_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} $i71 := __VERIFIER_nondet_int();
    call {:si_unique_call 1661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i71);
    call {:si_unique_call 1662} {:cexpr "tmp___14"} boogie_si_record_i32($i71);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 920272);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_33: ref;

axiom ldv_main_exported_33 == $sub.ref(0, 921304);

procedure ldv_main_exported_33();
  free requires assertsPassed;
  modifies $M.135, $M.225, $M.137, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_33()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_211: ref;
  var vslice_dummy_var_212: ref;
  var vslice_dummy_var_213: ref;
  var vslice_dummy_var_214: i64;
  var vslice_dummy_var_215: i64;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} vslice_dummy_var_211 := ldv_memset($p6, 0, 4);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} vslice_dummy_var_212 := ldv_memset($p8, 0, 8);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} vslice_dummy_var_213 := ldv_memset($p10, 0, 8);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2138} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2140} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} ldv_stop();
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i38 := $M.137;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} vslice_dummy_var_216 := ldv_release_33();
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $M.137 := 1;
    call {:si_unique_call 2150} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2151} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i32 := $M.137;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p34 := $M.224;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} vslice_dummy_var_215 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $M.137 := 2;
    call {:si_unique_call 2148} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i27 := $M.137;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p29 := $M.224;
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} vslice_dummy_var_214 := pwr_power_save_off_read($p29, $p5, $i30, $p4);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $M.137 := 2;
    call {:si_unique_call 2146} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i18 := $M.137;
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p20 := $M.223;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p21 := $M.224;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i22 := simple_open($p20, $p21);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $M.225 := $i22;
    call {:si_unique_call 2142} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i22);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i23 := $M.225;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $M.137 := 2;
    call {:si_unique_call 2143} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2144} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_32: ref;

axiom ldv_main_exported_32 == $sub.ref(0, 922336);

procedure ldv_main_exported_32();
  free requires assertsPassed;
  modifies $M.135, $M.228, $M.138, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_32()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_217: ref;
  var vslice_dummy_var_218: ref;
  var vslice_dummy_var_219: ref;
  var vslice_dummy_var_220: i64;
  var vslice_dummy_var_221: i64;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} vslice_dummy_var_217 := ldv_memset($p6, 0, 8);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} vslice_dummy_var_218 := ldv_memset($p8, 0, 4);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} vslice_dummy_var_219 := ldv_memset($p10, 0, 8);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2161} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2163} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} ldv_stop();
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i38 := $M.138;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} vslice_dummy_var_222 := ldv_release_32();
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $M.138 := 1;
    call {:si_unique_call 2173} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2174} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i32 := $M.138;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p34 := $M.227;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} vslice_dummy_var_221 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.138 := 2;
    call {:si_unique_call 2171} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(2);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i27 := $M.138;
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p29 := $M.227;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} vslice_dummy_var_220 := pwr_enable_ps_read($p29, $p3, $i30, $p5);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $M.138 := 2;
    call {:si_unique_call 2169} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(2);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i18 := $M.138;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p20 := $M.226;
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p21 := $M.227;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} $i22 := simple_open($p20, $p21);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $M.228 := $i22;
    call {:si_unique_call 2165} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i22);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i23 := $M.228;
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $M.138 := 2;
    call {:si_unique_call 2166} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(2);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2167} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_63: ref;

axiom ldv_main_exported_63 == $sub.ref(0, 923368);

procedure ldv_main_exported_63();
  free requires assertsPassed;
  modifies $M.135, $M.231, $M.139, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_63()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_223: ref;
  var vslice_dummy_var_224: ref;
  var vslice_dummy_var_225: ref;
  var vslice_dummy_var_226: i64;
  var vslice_dummy_var_227: i64;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} vslice_dummy_var_223 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} vslice_dummy_var_224 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} vslice_dummy_var_225 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2184} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2186} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} ldv_stop();
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i38 := $M.139;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} vslice_dummy_var_228 := ldv_release_63();
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $M.139 := 1;
    call {:si_unique_call 2196} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(1);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2197} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i32 := $M.139;
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p34 := $M.230;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} vslice_dummy_var_227 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $M.139 := 2;
    call {:si_unique_call 2194} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(2);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i27 := $M.139;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p29 := $M.230;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} vslice_dummy_var_226 := isr_rx_headers_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.139 := 2;
    call {:si_unique_call 2192} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(2);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i18 := $M.139;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p20 := $M.229;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p21 := $M.230;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.231 := $i22;
    call {:si_unique_call 2188} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i22);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i23 := $M.231;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.139 := 2;
    call {:si_unique_call 2189} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(2);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2190} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_21: ref;

axiom ldv_main_exported_21 == $sub.ref(0, 924400);

procedure ldv_main_exported_21();
  free requires assertsPassed;
  modifies $M.135, $M.234, $M.140, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_21()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_229: ref;
  var vslice_dummy_var_230: ref;
  var vslice_dummy_var_231: ref;
  var vslice_dummy_var_232: i64;
  var vslice_dummy_var_233: i64;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} vslice_dummy_var_229 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} vslice_dummy_var_230 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} vslice_dummy_var_231 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2207} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2208} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2209} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} ldv_stop();
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i38 := $M.140;
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} vslice_dummy_var_234 := ldv_release_21();
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $M.140 := 1;
    call {:si_unique_call 2219} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2220} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $i32 := $M.140;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p34 := $M.233;
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} vslice_dummy_var_233 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.140 := 2;
    call {:si_unique_call 2217} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i27 := $M.140;
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p29 := $M.233;
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} vslice_dummy_var_232 := aes_decrypt_interrupt_read($p29, $p3, $i30, $p5);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $M.140 := 2;
    call {:si_unique_call 2215} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i18 := $M.140;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $p20 := $M.232;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p21 := $M.233;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $M.234 := $i22;
    call {:si_unique_call 2211} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i22);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i23 := $M.234;
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $M.140 := 2;
    call {:si_unique_call 2212} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2213} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_71: ref;

axiom ldv_main_exported_71 == $sub.ref(0, 925432);

procedure ldv_main_exported_71();
  free requires assertsPassed;
  modifies $M.135, $M.237, $M.141, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_71()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_235: ref;
  var vslice_dummy_var_236: ref;
  var vslice_dummy_var_237: ref;
  var vslice_dummy_var_238: i64;
  var vslice_dummy_var_239: i64;
  var vslice_dummy_var_240: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} vslice_dummy_var_235 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} vslice_dummy_var_236 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} vslice_dummy_var_237 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2230} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2232} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} ldv_stop();
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i38 := $M.141;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} vslice_dummy_var_240 := ldv_release_71();
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $M.141 := 1;
    call {:si_unique_call 2242} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(1);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2243} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i32 := $M.141;
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p34 := $M.236;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} vslice_dummy_var_239 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $M.141 := 2;
    call {:si_unique_call 2240} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(2);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i27 := $M.141;
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p29 := $M.236;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} vslice_dummy_var_238 := rx_path_reset_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $M.141 := 2;
    call {:si_unique_call 2238} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(2);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i18 := $M.141;
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p20 := $M.235;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p21 := $M.236;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $M.237 := $i22;
    call {:si_unique_call 2234} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i22);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i23 := $M.237;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.141 := 2;
    call {:si_unique_call 2235} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(2);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2236} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 926464);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.135, $M.240, $M.142, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_241: ref;
  var vslice_dummy_var_242: ref;
  var vslice_dummy_var_243: ref;
  var vslice_dummy_var_244: i64;
  var vslice_dummy_var_245: i64;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} vslice_dummy_var_241 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} vslice_dummy_var_242 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} vslice_dummy_var_243 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2253} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2254} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2255} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} ldv_stop();
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i38 := $M.142;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} vslice_dummy_var_246 := ldv_release_7();
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $M.142 := 1;
    call {:si_unique_call 2265} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2266} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i32 := $M.142;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p34 := $M.239;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} vslice_dummy_var_245 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $M.142 := 2;
    call {:si_unique_call 2263} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i27 := $M.142;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p29 := $M.239;
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} vslice_dummy_var_244 := ps_pspoll_utilization_read($p29, $p3, $i30, $p5);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $M.142 := 2;
    call {:si_unique_call 2261} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i18 := $M.142;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p20 := $M.238;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $p21 := $M.239;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $M.240 := $i22;
    call {:si_unique_call 2257} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i22);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i23 := $M.240;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.142 := 2;
    call {:si_unique_call 2258} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2259} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_release_80: ref;

axiom ldv_release_80 == $sub.ref(0, 927496);

procedure ldv_release_80() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_80() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2268} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_init_80: ref;

axiom ldv_init_80 == $sub.ref(0, 928528);

procedure ldv_init_80() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_init_80() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2270} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2271} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 929560);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_26: ref;

axiom ldv_main_exported_26 == $sub.ref(0, 930592);

procedure ldv_main_exported_26();
  free requires assertsPassed;
  modifies $M.135, $M.243, $M.143, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_26()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_247: ref;
  var vslice_dummy_var_248: ref;
  var vslice_dummy_var_249: ref;
  var vslice_dummy_var_250: i64;
  var vslice_dummy_var_251: i64;
  var vslice_dummy_var_252: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} vslice_dummy_var_247 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} vslice_dummy_var_248 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} vslice_dummy_var_249 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2280} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2282} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} ldv_stop();
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i38 := $M.143;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} vslice_dummy_var_252 := ldv_release_26();
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $M.143 := 1;
    call {:si_unique_call 2292} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2293} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i32 := $M.143;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p34 := $M.242;
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} vslice_dummy_var_251 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $M.143 := 2;
    call {:si_unique_call 2290} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i27 := $M.143;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p29 := $M.242;
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} vslice_dummy_var_250 := aes_encrypt_fail_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $M.143 := 2;
    call {:si_unique_call 2288} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i18 := $M.143;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p20 := $M.241;
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p21 := $M.242;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $M.243 := $i22;
    call {:si_unique_call 2284} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i22);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i23 := $M.243;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $M.143 := 2;
    call {:si_unique_call 2285} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(2);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2286} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_18: ref;

axiom ldv_main_exported_18 == $sub.ref(0, 931624);

procedure ldv_main_exported_18();
  free requires assertsPassed;
  modifies $M.135, $M.246, $M.144, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_18()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_253: ref;
  var vslice_dummy_var_254: ref;
  var vslice_dummy_var_255: ref;
  var vslice_dummy_var_256: i64;
  var vslice_dummy_var_257: i64;
  var vslice_dummy_var_258: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} vslice_dummy_var_253 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} vslice_dummy_var_254 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} vslice_dummy_var_255 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2303} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2305} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} ldv_stop();
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i38 := $M.144;
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} vslice_dummy_var_258 := ldv_release_18();
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $M.144 := 1;
    call {:si_unique_call 2315} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2316} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i32 := $M.144;
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p34 := $M.245;
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} vslice_dummy_var_257 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.144 := 2;
    call {:si_unique_call 2313} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i27 := $M.144;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p29 := $M.245;
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} vslice_dummy_var_256 := event_rx_mismatch_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.144 := 2;
    call {:si_unique_call 2311} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i18 := $M.144;
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p20 := $M.244;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p21 := $M.245;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.246 := $i22;
    call {:si_unique_call 2307} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i22);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i23 := $M.246;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $M.144 := 2;
    call {:si_unique_call 2308} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(2);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2309} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_72: ref;

axiom ldv_main_exported_72 == $sub.ref(0, 932656);

procedure ldv_main_exported_72();
  free requires assertsPassed;
  modifies $M.135, $M.249, $M.145, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_72()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_259: ref;
  var vslice_dummy_var_260: ref;
  var vslice_dummy_var_261: ref;
  var vslice_dummy_var_262: i64;
  var vslice_dummy_var_263: i64;
  var vslice_dummy_var_264: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} vslice_dummy_var_259 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} vslice_dummy_var_260 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} vslice_dummy_var_261 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2326} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2328} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} ldv_stop();
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i38 := $M.145;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} vslice_dummy_var_264 := ldv_release_72();
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $M.145 := 1;
    call {:si_unique_call 2338} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2339} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i32 := $M.145;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p34 := $M.248;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} vslice_dummy_var_263 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $M.145 := 2;
    call {:si_unique_call 2336} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(2);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $i27 := $M.145;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p29 := $M.248;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} vslice_dummy_var_262 := rx_xfr_hint_trig_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $M.145 := 2;
    call {:si_unique_call 2334} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(2);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i18 := $M.145;
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p20 := $M.247;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p21 := $M.248;
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $M.249 := $i22;
    call {:si_unique_call 2330} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i22);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i23 := $M.249;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $M.145 := 2;
    call {:si_unique_call 2331} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(2);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2332} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_16: ref;

axiom ldv_main_exported_16 == $sub.ref(0, 933688);

procedure ldv_main_exported_16();
  free requires assertsPassed;
  modifies $M.135, $M.252, $M.146, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_16()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_265: ref;
  var vslice_dummy_var_266: ref;
  var vslice_dummy_var_267: ref;
  var vslice_dummy_var_268: i64;
  var vslice_dummy_var_269: i64;
  var vslice_dummy_var_270: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} vslice_dummy_var_265 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} vslice_dummy_var_266 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} vslice_dummy_var_267 := ldv_memset($p10, 0, 4);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2349} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2351} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} ldv_stop();
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i38 := $M.146;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} vslice_dummy_var_270 := ldv_release_16();
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $M.146 := 1;
    call {:si_unique_call 2361} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2362} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i32 := $M.146;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p34 := $M.251;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} vslice_dummy_var_269 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $M.146 := 2;
    call {:si_unique_call 2359} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i27 := $M.146;
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p29 := $M.251;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} vslice_dummy_var_268 := event_rx_pool_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $M.146 := 2;
    call {:si_unique_call 2357} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i18 := $M.146;
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $p20 := $M.250;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p21 := $M.251;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $M.252 := $i22;
    call {:si_unique_call 2353} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i22);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i23 := $M.252;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $M.146 := 2;
    call {:si_unique_call 2354} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2355} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_44: ref;

axiom ldv_main_exported_44 == $sub.ref(0, 934720);

procedure ldv_main_exported_44();
  free requires assertsPassed;
  modifies $M.135, $M.255, $M.147, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_44()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_271: ref;
  var vslice_dummy_var_272: ref;
  var vslice_dummy_var_273: ref;
  var vslice_dummy_var_274: i64;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} vslice_dummy_var_271 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} vslice_dummy_var_272 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} vslice_dummy_var_273 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2372} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2374} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} ldv_stop();
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i38 := $M.147;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} vslice_dummy_var_276 := ldv_release_44();
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.147 := 1;
    call {:si_unique_call 2384} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(1);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2385} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i32 := $M.147;
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p34 := $M.254;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} vslice_dummy_var_275 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $M.147 := 2;
    call {:si_unique_call 2382} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(2);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i27 := $M.147;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $p29 := $M.254;
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} vslice_dummy_var_274 := wep_decrypt_fail_read($p29, $p3, $i30, $p5);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $M.147 := 2;
    call {:si_unique_call 2380} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(2);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i18 := $M.147;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p20 := $M.253;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p21 := $M.254;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $M.255 := $i22;
    call {:si_unique_call 2376} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i22);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i23 := $M.255;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $M.147 := 2;
    call {:si_unique_call 2377} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(2);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2378} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_55: ref;

axiom ldv_main_exported_55 == $sub.ref(0, 935752);

procedure ldv_main_exported_55();
  free requires assertsPassed;
  modifies $M.135, $M.258, $M.148, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_55()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_277: ref;
  var vslice_dummy_var_278: ref;
  var vslice_dummy_var_279: ref;
  var vslice_dummy_var_280: i64;
  var vslice_dummy_var_281: i64;
  var vslice_dummy_var_282: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} vslice_dummy_var_277 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} vslice_dummy_var_278 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} vslice_dummy_var_279 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2395} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2397} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} ldv_stop();
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i38 := $M.148;
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} vslice_dummy_var_282 := ldv_release_55();
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $M.148 := 1;
    call {:si_unique_call 2407} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(1);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2408} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i32 := $M.148;
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $p34 := $M.257;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} vslice_dummy_var_281 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 2405} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(2);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i27 := $M.148;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $p29 := $M.257;
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} vslice_dummy_var_280 := isr_tx_exch_complete_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 2403} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(2);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i18 := $M.148;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p20 := $M.256;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p21 := $M.257;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $M.258 := $i22;
    call {:si_unique_call 2399} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i22);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i23 := $M.258;
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 2400} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(2);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2401} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_74: ref;

axiom ldv_main_exported_74 == $sub.ref(0, 936784);

procedure ldv_main_exported_74();
  free requires assertsPassed;
  modifies $M.135, $M.261, $M.149, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_74()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_283: ref;
  var vslice_dummy_var_284: ref;
  var vslice_dummy_var_285: ref;
  var vslice_dummy_var_286: i64;
  var vslice_dummy_var_287: i64;
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} vslice_dummy_var_283 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} vslice_dummy_var_284 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} vslice_dummy_var_285 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2418} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2419} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2420} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} ldv_stop();
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i38 := $M.149;
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} vslice_dummy_var_288 := ldv_release_74();
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $M.149 := 1;
    call {:si_unique_call 2430} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(1);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2431} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i32 := $M.149;
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p34 := $M.260;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} vslice_dummy_var_287 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $M.149 := 2;
    call {:si_unique_call 2428} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(2);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i27 := $M.149;
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p29 := $M.260;
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} vslice_dummy_var_286 := rx_dropped_read($p29, $p3, $i30, $p5);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $M.149 := 2;
    call {:si_unique_call 2426} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(2);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i18 := $M.149;
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p20 := $M.259;
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $p21 := $M.260;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $M.261 := $i22;
    call {:si_unique_call 2422} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i22);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i23 := $M.261;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $M.149 := 2;
    call {:si_unique_call 2423} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(2);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2424} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_27: ref;

axiom ldv_main_exported_27 == $sub.ref(0, 937816);

procedure ldv_main_exported_27();
  free requires assertsPassed;
  modifies $M.135, $M.264, $M.150, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_27()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_289: ref;
  var vslice_dummy_var_290: ref;
  var vslice_dummy_var_291: ref;
  var vslice_dummy_var_292: i64;
  var vslice_dummy_var_293: i64;
  var vslice_dummy_var_294: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} vslice_dummy_var_289 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} vslice_dummy_var_290 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} vslice_dummy_var_291 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2441} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2442} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2443} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} ldv_stop();
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i38 := $M.150;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} vslice_dummy_var_294 := ldv_release_27();
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $M.150 := 1;
    call {:si_unique_call 2453} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2454} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i32 := $M.150;
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $p34 := $M.263;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} vslice_dummy_var_293 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $M.150 := 2;
    call {:si_unique_call 2451} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i27 := $M.150;
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p29 := $M.263;
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} vslice_dummy_var_292 := mic_calc_failure_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $M.150 := 2;
    call {:si_unique_call 2449} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i18 := $M.150;
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p20 := $M.262;
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p21 := $M.263;
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $M.264 := $i22;
    call {:si_unique_call 2445} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i22);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $i23 := $M.264;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $M.150 := 2;
    call {:si_unique_call 2446} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(2);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2447} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_57: ref;

axiom ldv_main_exported_57 == $sub.ref(0, 938848);

procedure ldv_main_exported_57();
  free requires assertsPassed;
  modifies $M.135, $M.267, $M.151, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_57()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_295: ref;
  var vslice_dummy_var_296: ref;
  var vslice_dummy_var_297: ref;
  var vslice_dummy_var_298: i64;
  var vslice_dummy_var_299: i64;
  var vslice_dummy_var_300: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} vslice_dummy_var_295 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} vslice_dummy_var_296 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} vslice_dummy_var_297 := ldv_memset($p10, 0, 4);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2464} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2466} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} ldv_stop();
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i38 := $M.151;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} vslice_dummy_var_300 := ldv_release_57();
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $M.151 := 1;
    call {:si_unique_call 2476} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(1);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2477} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i32 := $M.151;
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p34 := $M.266;
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} vslice_dummy_var_299 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $M.151 := 2;
    call {:si_unique_call 2474} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(2);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i27 := $M.151;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p29 := $M.266;
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} vslice_dummy_var_298 := isr_dma0_done_read($p29, $p3, $i30, $p5);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.151 := 2;
    call {:si_unique_call 2472} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(2);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i18 := $M.151;
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p20 := $M.265;
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $p21 := $M.266;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.267 := $i22;
    call {:si_unique_call 2468} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i22);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i23 := $M.267;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $M.151 := 2;
    call {:si_unique_call 2469} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(2);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2470} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_61: ref;

axiom ldv_main_exported_61 == $sub.ref(0, 939880);

procedure ldv_main_exported_61();
  free requires assertsPassed;
  modifies $M.135, $M.270, $M.152, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_61()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_301: ref;
  var vslice_dummy_var_302: ref;
  var vslice_dummy_var_303: ref;
  var vslice_dummy_var_304: i64;
  var vslice_dummy_var_305: i64;
  var vslice_dummy_var_306: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} vslice_dummy_var_301 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} vslice_dummy_var_302 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} vslice_dummy_var_303 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2487} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2488} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2489} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} ldv_stop();
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i38 := $M.152;
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} vslice_dummy_var_306 := ldv_release_61();
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $M.152 := 1;
    call {:si_unique_call 2499} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(1);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2500} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i32 := $M.152;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p34 := $M.269;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} vslice_dummy_var_305 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $M.152 := 2;
    call {:si_unique_call 2497} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(2);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i27 := $M.152;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p29 := $M.269;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} vslice_dummy_var_304 := isr_rx_rdys_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $M.152 := 2;
    call {:si_unique_call 2495} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(2);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i18 := $M.152;
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p20 := $M.268;
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p21 := $M.269;
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $M.270 := $i22;
    call {:si_unique_call 2491} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i22);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i23 := $M.270;
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $M.152 := 2;
    call {:si_unique_call 2492} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(2);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2493} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_20: ref;

axiom ldv_main_exported_20 == $sub.ref(0, 940912);

procedure ldv_main_exported_20();
  free requires assertsPassed;
  modifies $M.135, $M.273, $M.153, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_20()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_307: ref;
  var vslice_dummy_var_308: ref;
  var vslice_dummy_var_309: ref;
  var vslice_dummy_var_310: i64;
  var vslice_dummy_var_311: i64;
  var vslice_dummy_var_312: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} vslice_dummy_var_307 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} vslice_dummy_var_308 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} vslice_dummy_var_309 := ldv_memset($p10, 0, 4);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2510} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2511} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2512} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} ldv_stop();
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i38 := $M.153;
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} vslice_dummy_var_312 := ldv_release_20();
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $M.153 := 1;
    call {:si_unique_call 2522} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2523} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i32 := $M.153;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p34 := $M.272;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} vslice_dummy_var_311 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $M.153 := 2;
    call {:si_unique_call 2520} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(2);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i27 := $M.153;
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p29 := $M.272;
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} vslice_dummy_var_310 := event_heart_beat_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $M.153 := 2;
    call {:si_unique_call 2518} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(2);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i18 := $M.153;
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p20 := $M.271;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p21 := $M.272;
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $M.273 := $i22;
    call {:si_unique_call 2514} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i22);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i23 := $M.273;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $M.153 := 2;
    call {:si_unique_call 2515} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(2);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2516} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 941944);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.135, $M.276, $M.154, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_313: ref;
  var vslice_dummy_var_314: ref;
  var vslice_dummy_var_315: ref;
  var vslice_dummy_var_316: i64;
  var vslice_dummy_var_317: i64;
  var vslice_dummy_var_318: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} vslice_dummy_var_313 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} vslice_dummy_var_314 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} vslice_dummy_var_315 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2533} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2534} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2535} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} ldv_stop();
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i38 := $M.154;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} vslice_dummy_var_318 := ldv_release_10();
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.154 := 1;
    call {:si_unique_call 2545} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2546} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i32 := $M.154;
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $p34 := $M.275;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} vslice_dummy_var_317 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $M.154 := 2;
    call {:si_unique_call 2543} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i27 := $M.154;
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p29 := $M.275;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} vslice_dummy_var_316 := ps_upsd_max_sptime_read($p29, $p5, $i30, $p4);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $M.154 := 2;
    call {:si_unique_call 2541} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i18 := $M.154;
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $p20 := $M.274;
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $p21 := $M.275;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} $i22 := simple_open($p20, $p21);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $M.276 := $i22;
    call {:si_unique_call 2537} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i22);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i23 := $M.276;
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.154 := 2;
    call {:si_unique_call 2538} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2539} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_31: ref;

axiom ldv_main_exported_31 == $sub.ref(0, 942976);

procedure ldv_main_exported_31();
  free requires assertsPassed;
  modifies $M.135, $M.279, $M.155, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_31()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_319: ref;
  var vslice_dummy_var_320: ref;
  var vslice_dummy_var_321: ref;
  var vslice_dummy_var_322: i64;
  var vslice_dummy_var_323: i64;
  var vslice_dummy_var_324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} vslice_dummy_var_319 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} vslice_dummy_var_320 := ldv_memset($p8, 0, 4);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} vslice_dummy_var_321 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2556} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2558} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} ldv_stop();
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $i38 := $M.155;
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} vslice_dummy_var_324 := ldv_release_31();
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $M.155 := 1;
    call {:si_unique_call 2568} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2569} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i32 := $M.155;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p34 := $M.278;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} vslice_dummy_var_323 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $M.155 := 2;
    call {:si_unique_call 2566} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(2);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i27 := $M.155;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $p29 := $M.278;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} vslice_dummy_var_322 := pwr_disable_ps_read($p29, $p3, $i30, $p5);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $M.155 := 2;
    call {:si_unique_call 2564} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(2);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i18 := $M.155;
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p20 := $M.277;
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p21 := $M.278;
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $M.279 := $i22;
    call {:si_unique_call 2560} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i22);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i23 := $M.279;
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $M.155 := 2;
    call {:si_unique_call 2561} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(2);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2562} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_35: ref;

axiom ldv_main_exported_35 == $sub.ref(0, 944008);

procedure ldv_main_exported_35();
  free requires assertsPassed;
  modifies $M.135, $M.282, $M.156, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_35()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_325: ref;
  var vslice_dummy_var_326: ref;
  var vslice_dummy_var_327: ref;
  var vslice_dummy_var_328: i64;
  var vslice_dummy_var_329: i64;
  var vslice_dummy_var_330: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} vslice_dummy_var_325 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} vslice_dummy_var_326 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} vslice_dummy_var_327 := ldv_memset($p10, 0, 4);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2579} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2581} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} ldv_stop();
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i38 := $M.156;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} vslice_dummy_var_330 := ldv_release_35();
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $M.156 := 1;
    call {:si_unique_call 2591} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2592} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i32 := $M.156;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p34 := $M.281;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} vslice_dummy_var_329 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $M.156 := 2;
    call {:si_unique_call 2589} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(2);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i27 := $M.156;
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p29 := $M.281;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} vslice_dummy_var_328 := pwr_tx_without_ps_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $M.156 := 2;
    call {:si_unique_call 2587} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(2);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $i18 := $M.156;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p20 := $M.280;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p21 := $M.281;
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $M.282 := $i22;
    call {:si_unique_call 2583} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i22);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i23 := $M.282;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $M.156 := 2;
    call {:si_unique_call 2584} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(2);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2585} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_11: ref;

axiom ldv_main_exported_11 == $sub.ref(0, 945040);

procedure ldv_main_exported_11();
  free requires assertsPassed;
  modifies $M.135, $M.285, $M.157, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_331: ref;
  var vslice_dummy_var_332: ref;
  var vslice_dummy_var_333: ref;
  var vslice_dummy_var_334: i64;
  var vslice_dummy_var_335: i64;
  var vslice_dummy_var_336: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} vslice_dummy_var_331 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} vslice_dummy_var_332 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} vslice_dummy_var_333 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2602} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2604} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} ldv_stop();
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $i38 := $M.157;
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} vslice_dummy_var_336 := ldv_release_11();
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.157 := 1;
    call {:si_unique_call 2614} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2615} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i32 := $M.157;
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p34 := $M.284;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} vslice_dummy_var_335 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $M.157 := 2;
    call {:si_unique_call 2612} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i27 := $M.157;
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p29 := $M.284;
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} vslice_dummy_var_334 := ps_upsd_timeouts_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $M.157 := 2;
    call {:si_unique_call 2610} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i18 := $M.157;
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p20 := $M.283;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p21 := $M.284;
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $M.285 := $i22;
    call {:si_unique_call 2606} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i22);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i23 := $M.285;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $M.157 := 2;
    call {:si_unique_call 2607} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2608} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_78: ref;

axiom ldv_main_exported_78 == $sub.ref(0, 946072);

procedure ldv_main_exported_78();
  free requires assertsPassed;
  modifies $M.135, $M.288, $M.158, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_78()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_337: ref;
  var vslice_dummy_var_338: ref;
  var vslice_dummy_var_339: ref;
  var vslice_dummy_var_340: i64;
  var vslice_dummy_var_341: i64;
  var vslice_dummy_var_342: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} vslice_dummy_var_337 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} vslice_dummy_var_338 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} vslice_dummy_var_339 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2625} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2627} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} ldv_stop();
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i38 := $M.158;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} vslice_dummy_var_342 := ldv_release_78();
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $M.158 := 1;
    call {:si_unique_call 2637} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(1);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2638} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i32 := $M.158;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p34 := $M.287;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} vslice_dummy_var_341 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $M.158 := 2;
    call {:si_unique_call 2635} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(2);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i27 := $M.158;
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p29 := $M.287;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} vslice_dummy_var_340 := tx_internal_desc_overflow_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $M.158 := 2;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(2);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i18 := $M.158;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p20 := $M.286;
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $p21 := $M.287;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.288 := $i22;
    call {:si_unique_call 2629} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i22);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i23 := $M.288;
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $M.158 := 2;
    call {:si_unique_call 2630} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(2);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2631} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_48: ref;

axiom ldv_main_exported_48 == $sub.ref(0, 947104);

procedure ldv_main_exported_48();
  free requires assertsPassed;
  modifies $M.135, $M.291, $M.159, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_48()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_343: ref;
  var vslice_dummy_var_344: ref;
  var vslice_dummy_var_345: ref;
  var vslice_dummy_var_346: i64;
  var vslice_dummy_var_347: i64;
  var vslice_dummy_var_348: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} vslice_dummy_var_343 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} vslice_dummy_var_344 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} vslice_dummy_var_345 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2648} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2649} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2650} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} ldv_stop();
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i38 := $M.159;
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} vslice_dummy_var_348 := ldv_release_48();
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $M.159 := 1;
    call {:si_unique_call 2660} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(1);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2661} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i32 := $M.159;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p34 := $M.290;
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} vslice_dummy_var_347 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $M.159 := 2;
    call {:si_unique_call 2658} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(2);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i27 := $M.159;
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p29 := $M.290;
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} vslice_dummy_var_346 := isr_low_rssi_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $M.159 := 2;
    call {:si_unique_call 2656} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(2);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i18 := $M.159;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p20 := $M.289;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $p21 := $M.290;
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $M.291 := $i22;
    call {:si_unique_call 2652} {:cexpr "ldv_retval_23"} boogie_si_record_i32($i22);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i23 := $M.291;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $M.159 := 2;
    call {:si_unique_call 2653} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(2);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2654} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_77: ref;

axiom ldv_main_exported_77 == $sub.ref(0, 948136);

procedure ldv_main_exported_77();
  free requires assertsPassed;
  modifies $M.135, $M.294, $M.160, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_77()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_349: ref;
  var vslice_dummy_var_350: ref;
  var vslice_dummy_var_351: ref;
  var vslice_dummy_var_352: i64;
  var vslice_dummy_var_353: i64;
  var vslice_dummy_var_354: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} vslice_dummy_var_349 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} vslice_dummy_var_350 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} vslice_dummy_var_351 := ldv_memset($p10, 0, 4);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2671} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2672} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2673} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} ldv_stop();
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i38 := $M.160;
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} vslice_dummy_var_354 := ldv_release_77();
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $M.160 := 1;
    call {:si_unique_call 2683} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(1);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2684} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i32 := $M.160;
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p34 := $M.293;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} vslice_dummy_var_353 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $M.160 := 2;
    call {:si_unique_call 2681} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(2);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i27 := $M.160;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p29 := $M.293;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} vslice_dummy_var_352 := rx_out_of_mem_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.160 := 2;
    call {:si_unique_call 2679} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(2);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i18 := $M.160;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p20 := $M.292;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $p21 := $M.293;
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $M.294 := $i22;
    call {:si_unique_call 2675} {:cexpr "ldv_retval_24"} boogie_si_record_i32($i22);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i23 := $M.294;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $M.160 := 2;
    call {:si_unique_call 2676} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(2);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2677} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_65: ref;

axiom ldv_main_exported_65 == $sub.ref(0, 949168);

procedure ldv_main_exported_65();
  free requires assertsPassed;
  modifies $M.135, $M.297, $M.161, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_65()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_355: ref;
  var vslice_dummy_var_356: ref;
  var vslice_dummy_var_357: ref;
  var vslice_dummy_var_358: i64;
  var vslice_dummy_var_359: i64;
  var vslice_dummy_var_360: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} vslice_dummy_var_355 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} vslice_dummy_var_356 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} vslice_dummy_var_357 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2694} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2695} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2696} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} ldv_stop();
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i38 := $M.161;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} vslice_dummy_var_360 := ldv_release_65();
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $M.161 := 1;
    call {:si_unique_call 2706} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(1);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2707} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i32 := $M.161;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p34 := $M.296;
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_359 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $M.161 := 2;
    call {:si_unique_call 2704} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(2);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i27 := $M.161;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p29 := $M.296;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} vslice_dummy_var_358 := isr_cmd_cmplt_read($p29, $p3, $i30, $p5);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.161 := 2;
    call {:si_unique_call 2702} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(2);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i18 := $M.161;
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p20 := $M.295;
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p21 := $M.296;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $M.297 := $i22;
    call {:si_unique_call 2698} {:cexpr "ldv_retval_25"} boogie_si_record_i32($i22);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i23 := $M.297;
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $M.161 := 2;
    call {:si_unique_call 2699} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(2);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2700} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_29: ref;

axiom ldv_main_exported_29 == $sub.ref(0, 950200);

procedure ldv_main_exported_29();
  free requires assertsPassed;
  modifies $M.135, $M.300, $M.162, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_29()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_361: ref;
  var vslice_dummy_var_362: ref;
  var vslice_dummy_var_363: ref;
  var vslice_dummy_var_364: i64;
  var vslice_dummy_var_365: i64;
  var vslice_dummy_var_366: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} vslice_dummy_var_361 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} vslice_dummy_var_362 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} vslice_dummy_var_363 := ldv_memset($p10, 0, 4);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2717} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2719} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} ldv_stop();
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i38 := $M.162;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} vslice_dummy_var_366 := ldv_release_29();
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $M.162 := 1;
    call {:si_unique_call 2729} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2730} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i32 := $M.162;
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p34 := $M.299;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} vslice_dummy_var_365 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $M.162 := 2;
    call {:si_unique_call 2727} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(2);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i27 := $M.162;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $p29 := $M.299;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} vslice_dummy_var_364 := pwr_rcvd_awake_beacons_read($p29, $p3, $i30, $p5);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $M.162 := 2;
    call {:si_unique_call 2725} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(2);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $i18 := $M.162;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $p20 := $M.298;
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $p21 := $M.299;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $M.300 := $i22;
    call {:si_unique_call 2721} {:cexpr "ldv_retval_26"} boogie_si_record_i32($i22);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i23 := $M.300;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $M.162 := 2;
    call {:si_unique_call 2722} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(2);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2723} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_50: ref;

axiom ldv_main_exported_50 == $sub.ref(0, 951232);

procedure ldv_main_exported_50();
  free requires assertsPassed;
  modifies $M.135, $M.303, $M.163, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_50()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_367: ref;
  var vslice_dummy_var_368: ref;
  var vslice_dummy_var_369: ref;
  var vslice_dummy_var_370: i64;
  var vslice_dummy_var_371: i64;
  var vslice_dummy_var_372: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} vslice_dummy_var_367 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} vslice_dummy_var_368 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} vslice_dummy_var_369 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2740} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2741} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2742} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_stop();
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i38 := $M.163;
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} vslice_dummy_var_372 := ldv_release_50();
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.163 := 1;
    call {:si_unique_call 2752} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(1);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2753} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i32 := $M.163;
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p34 := $M.302;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} vslice_dummy_var_371 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $M.163 := 2;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(2);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i27 := $M.163;
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $p29 := $M.302;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} vslice_dummy_var_370 := isr_pci_pm_read($p29, $p3, $i30, $p5);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $M.163 := 2;
    call {:si_unique_call 2748} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(2);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i18 := $M.163;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $p20 := $M.301;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $p21 := $M.302;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.303 := $i22;
    call {:si_unique_call 2744} {:cexpr "ldv_retval_27"} boogie_si_record_i32($i22);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i23 := $M.303;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.163 := 2;
    call {:si_unique_call 2745} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(2);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2746} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_39: ref;

axiom ldv_main_exported_39 == $sub.ref(0, 952264);

procedure ldv_main_exported_39();
  free requires assertsPassed;
  modifies $M.135, $M.306, $M.164, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_39()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_373: ref;
  var vslice_dummy_var_374: ref;
  var vslice_dummy_var_375: ref;
  var vslice_dummy_var_376: i64;
  var vslice_dummy_var_377: i64;
  var vslice_dummy_var_378: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} vslice_dummy_var_373 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} vslice_dummy_var_374 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} vslice_dummy_var_375 := ldv_memset($p10, 0, 4);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2763} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2765} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} ldv_stop();
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i38 := $M.164;
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} vslice_dummy_var_378 := ldv_release_39();
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.164 := 1;
    call {:si_unique_call 2775} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(1);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2776} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i32 := $M.164;
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p34 := $M.305;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} vslice_dummy_var_377 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $M.164 := 2;
    call {:si_unique_call 2773} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(2);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i27 := $M.164;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p29 := $M.305;
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} vslice_dummy_var_376 := pwr_missing_bcns_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.164 := 2;
    call {:si_unique_call 2771} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(2);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $i18 := $M.164;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p20 := $M.304;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $p21 := $M.305;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.306 := $i22;
    call {:si_unique_call 2767} {:cexpr "ldv_retval_28"} boogie_si_record_i32($i22);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i23 := $M.306;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $M.164 := 2;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(2);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2769} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_64: ref;

axiom ldv_main_exported_64 == $sub.ref(0, 953296);

procedure ldv_main_exported_64();
  free requires assertsPassed;
  modifies $M.135, $M.309, $M.165, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_64()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_379: ref;
  var vslice_dummy_var_380: ref;
  var vslice_dummy_var_381: ref;
  var vslice_dummy_var_382: i64;
  var vslice_dummy_var_383: i64;
  var vslice_dummy_var_384: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} vslice_dummy_var_379 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} vslice_dummy_var_380 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} vslice_dummy_var_381 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2786} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2787} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2788} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} ldv_stop();
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i38 := $M.165;
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} vslice_dummy_var_384 := ldv_release_64();
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.165 := 1;
    call {:si_unique_call 2798} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(1);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2799} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i32 := $M.165;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $p34 := $M.308;
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} vslice_dummy_var_383 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.165 := 2;
    call {:si_unique_call 2796} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(2);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $i27 := $M.165;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $p29 := $M.308;
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} vslice_dummy_var_382 := isr_fiqs_read($p29, $p3, $i30, $p5);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $M.165 := 2;
    call {:si_unique_call 2794} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(2);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i18 := $M.165;
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $p20 := $M.307;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p21 := $M.308;
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.309 := $i22;
    call {:si_unique_call 2790} {:cexpr "ldv_retval_29"} boogie_si_record_i32($i22);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i23 := $M.309;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $M.165 := 2;
    call {:si_unique_call 2791} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(2);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2792} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_58: ref;

axiom ldv_main_exported_58 == $sub.ref(0, 954328);

procedure ldv_main_exported_58();
  free requires assertsPassed;
  modifies $M.135, $M.312, $M.166, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_58()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_385: ref;
  var vslice_dummy_var_386: ref;
  var vslice_dummy_var_387: ref;
  var vslice_dummy_var_388: i64;
  var vslice_dummy_var_389: i64;
  var vslice_dummy_var_390: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} vslice_dummy_var_385 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} vslice_dummy_var_386 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} vslice_dummy_var_387 := ldv_memset($p10, 0, 4);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2809} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2810} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2811} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} ldv_stop();
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i38 := $M.166;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} vslice_dummy_var_390 := ldv_release_58();
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $M.166 := 1;
    call {:si_unique_call 2821} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(1);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2822} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i32 := $M.166;
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p34 := $M.311;
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} vslice_dummy_var_389 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $M.166 := 2;
    call {:si_unique_call 2819} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(2);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i27 := $M.166;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p29 := $M.311;
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} vslice_dummy_var_388 := isr_decrypt_done_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $M.166 := 2;
    call {:si_unique_call 2817} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(2);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i18 := $M.166;
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $p20 := $M.310;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $p21 := $M.311;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $M.312 := $i22;
    call {:si_unique_call 2813} {:cexpr "ldv_retval_30"} boogie_si_record_i32($i22);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i23 := $M.312;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $M.166 := 2;
    call {:si_unique_call 2814} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(2);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2815} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_41: ref;

axiom ldv_main_exported_41 == $sub.ref(0, 955360);

procedure ldv_main_exported_41();
  free requires assertsPassed;
  modifies $M.135, $M.315, $M.167, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_41()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_391: ref;
  var vslice_dummy_var_392: ref;
  var vslice_dummy_var_393: ref;
  var vslice_dummy_var_394: i64;
  var vslice_dummy_var_395: i64;
  var vslice_dummy_var_396: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} vslice_dummy_var_391 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} vslice_dummy_var_392 := ldv_memset($p8, 0, 4);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} vslice_dummy_var_393 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2832} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2833} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2834} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} ldv_stop();
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i38 := $M.167;
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} vslice_dummy_var_396 := ldv_release_41();
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $M.167 := 1;
    call {:si_unique_call 2844} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(1);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2845} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i32 := $M.167;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p34 := $M.314;
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} vslice_dummy_var_395 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $M.167 := 2;
    call {:si_unique_call 2842} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(2);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i27 := $M.167;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p29 := $M.314;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} vslice_dummy_var_394 := pwr_ps_enter_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $M.167 := 2;
    call {:si_unique_call 2840} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(2);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $i18 := $M.167;
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $p20 := $M.313;
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p21 := $M.314;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $M.315 := $i22;
    call {:si_unique_call 2836} {:cexpr "ldv_retval_31"} boogie_si_record_i32($i22);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i23 := $M.315;
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.167 := 2;
    call {:si_unique_call 2837} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(2);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2838} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_12: ref;

axiom ldv_main_exported_12 == $sub.ref(0, 956392);

procedure ldv_main_exported_12();
  free requires assertsPassed;
  modifies $M.135, $M.318, $M.168, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_12()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_397: ref;
  var vslice_dummy_var_398: ref;
  var vslice_dummy_var_399: ref;
  var vslice_dummy_var_400: i64;
  var vslice_dummy_var_401: i64;
  var vslice_dummy_var_402: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} vslice_dummy_var_397 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} vslice_dummy_var_398 := ldv_memset($p8, 0, 4);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} vslice_dummy_var_399 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2855} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2856} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2857} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} ldv_stop();
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i38 := $M.168;
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} vslice_dummy_var_402 := ldv_release_12();
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $M.168 := 1;
    call {:si_unique_call 2867} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2868} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i32 := $M.168;
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p34 := $M.317;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} vslice_dummy_var_401 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.168 := 2;
    call {:si_unique_call 2865} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i27 := $M.168;
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p29 := $M.317;
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} vslice_dummy_var_400 := ps_pspoll_timeouts_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $M.168 := 2;
    call {:si_unique_call 2863} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i18 := $M.168;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p20 := $M.316;
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p21 := $M.317;
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $M.318 := $i22;
    call {:si_unique_call 2859} {:cexpr "ldv_retval_32"} boogie_si_record_i32($i22);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i23 := $M.318;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $M.168 := 2;
    call {:si_unique_call 2860} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2861} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_15: ref;

axiom ldv_main_exported_15 == $sub.ref(0, 957424);

procedure ldv_main_exported_15();
  free requires assertsPassed;
  modifies $M.135, $M.321, $M.169, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_15()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_403: ref;
  var vslice_dummy_var_404: ref;
  var vslice_dummy_var_405: ref;
  var vslice_dummy_var_406: i64;
  var vslice_dummy_var_407: i64;
  var vslice_dummy_var_408: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} vslice_dummy_var_403 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} vslice_dummy_var_404 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} vslice_dummy_var_405 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2878} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2879} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2880} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} ldv_stop();
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $i38 := $M.169;
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} vslice_dummy_var_408 := ldv_release_15();
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $M.169 := 1;
    call {:si_unique_call 2890} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2891} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i32 := $M.169;
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $p34 := $M.320;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} vslice_dummy_var_407 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $M.169 := 2;
    call {:si_unique_call 2888} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i27 := $M.169;
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $p29 := $M.320;
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} vslice_dummy_var_406 := event_oom_late_read($p29, $p5, $i30, $p4);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $M.169 := 2;
    call {:si_unique_call 2886} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i18 := $M.169;
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $p20 := $M.319;
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p21 := $M.320;
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.321 := $i22;
    call {:si_unique_call 2882} {:cexpr "ldv_retval_33"} boogie_si_record_i32($i22);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i23 := $M.321;
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $M.169 := 2;
    call {:si_unique_call 2883} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2884} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_52: ref;

axiom ldv_main_exported_52 == $sub.ref(0, 958456);

procedure ldv_main_exported_52();
  free requires assertsPassed;
  modifies $M.135, $M.324, $M.170, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_52()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_409: ref;
  var vslice_dummy_var_410: ref;
  var vslice_dummy_var_411: ref;
  var vslice_dummy_var_412: i64;
  var vslice_dummy_var_413: i64;
  var vslice_dummy_var_414: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} vslice_dummy_var_409 := ldv_memset($p6, 0, 8);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} vslice_dummy_var_410 := ldv_memset($p8, 0, 4);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} vslice_dummy_var_411 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2901} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2903} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} ldv_stop();
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i38 := $M.170;
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} vslice_dummy_var_414 := ldv_release_52();
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $M.170 := 1;
    call {:si_unique_call 2913} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(1);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2914} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i32 := $M.170;
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $p34 := $M.323;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} vslice_dummy_var_413 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $M.170 := 2;
    call {:si_unique_call 2911} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(2);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $i27 := $M.170;
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p29 := $M.323;
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} vslice_dummy_var_412 := isr_hw_pm_mode_changes_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $M.170 := 2;
    call {:si_unique_call 2909} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(2);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i18 := $M.170;
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $p20 := $M.322;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $p21 := $M.323;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} $i22 := simple_open($p20, $p21);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $M.324 := $i22;
    call {:si_unique_call 2905} {:cexpr "ldv_retval_34"} boogie_si_record_i32($i22);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i23 := $M.324;
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $M.170 := 2;
    call {:si_unique_call 2906} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(2);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2907} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_60: ref;

axiom ldv_main_exported_60 == $sub.ref(0, 959488);

procedure ldv_main_exported_60();
  free requires assertsPassed;
  modifies $M.135, $M.327, $M.171, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_60()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_415: ref;
  var vslice_dummy_var_416: ref;
  var vslice_dummy_var_417: ref;
  var vslice_dummy_var_418: i64;
  var vslice_dummy_var_419: i64;
  var vslice_dummy_var_420: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} vslice_dummy_var_415 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} vslice_dummy_var_416 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} vslice_dummy_var_417 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2924} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2925} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2926} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} ldv_stop();
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i38 := $M.171;
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} vslice_dummy_var_420 := ldv_release_60();
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $M.171 := 1;
    call {:si_unique_call 2936} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(1);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2937} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i32 := $M.171;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p34 := $M.326;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} vslice_dummy_var_419 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $M.171 := 2;
    call {:si_unique_call 2934} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(2);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i27 := $M.171;
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p29 := $M.326;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} vslice_dummy_var_418 := isr_irqs_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $M.171 := 2;
    call {:si_unique_call 2932} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(2);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i18 := $M.171;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p20 := $M.325;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p21 := $M.326;
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $M.327 := $i22;
    call {:si_unique_call 2928} {:cexpr "ldv_retval_35"} boogie_si_record_i32($i22);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i23 := $M.327;
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $M.171 := 2;
    call {:si_unique_call 2929} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(2);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2930} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_56: ref;

axiom ldv_main_exported_56 == $sub.ref(0, 960520);

procedure ldv_main_exported_56();
  free requires assertsPassed;
  modifies $M.135, $M.330, $M.172, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_56()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_421: ref;
  var vslice_dummy_var_422: ref;
  var vslice_dummy_var_423: ref;
  var vslice_dummy_var_424: i64;
  var vslice_dummy_var_425: i64;
  var vslice_dummy_var_426: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} vslice_dummy_var_421 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} vslice_dummy_var_422 := ldv_memset($p8, 0, 4);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} vslice_dummy_var_423 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2947} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2948} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2949} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} ldv_stop();
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i38 := $M.172;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} vslice_dummy_var_426 := ldv_release_56();
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $M.172 := 1;
    call {:si_unique_call 2959} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(1);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2960} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i32 := $M.172;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p34 := $M.329;
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} vslice_dummy_var_425 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $M.172 := 2;
    call {:si_unique_call 2957} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(2);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i27 := $M.172;
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $p29 := $M.329;
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} vslice_dummy_var_424 := isr_dma1_done_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $M.172 := 2;
    call {:si_unique_call 2955} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(2);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $i18 := $M.172;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $p20 := $M.328;
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $p21 := $M.329;
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $M.330 := $i22;
    call {:si_unique_call 2951} {:cexpr "ldv_retval_36"} boogie_si_record_i32($i22);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i23 := $M.330;
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $M.172 := 2;
    call {:si_unique_call 2952} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(2);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2953} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_73: ref;

axiom ldv_main_exported_73 == $sub.ref(0, 961552);

procedure ldv_main_exported_73();
  free requires assertsPassed;
  modifies $M.135, $M.333, $M.173, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_73()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_427: ref;
  var vslice_dummy_var_428: ref;
  var vslice_dummy_var_429: ref;
  var vslice_dummy_var_430: i64;
  var vslice_dummy_var_431: i64;
  var vslice_dummy_var_432: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} vslice_dummy_var_427 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} vslice_dummy_var_428 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} vslice_dummy_var_429 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2970} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2972} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} ldv_stop();
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i38 := $M.173;
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} vslice_dummy_var_432 := ldv_release_73();
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $M.173 := 1;
    call {:si_unique_call 2982} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(1);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 2983} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i32 := $M.173;
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p34 := $M.332;
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} vslice_dummy_var_431 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $M.173 := 2;
    call {:si_unique_call 2980} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(2);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $i27 := $M.173;
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $p29 := $M.332;
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} vslice_dummy_var_430 := rx_fcs_err_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $M.173 := 2;
    call {:si_unique_call 2978} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(2);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $i18 := $M.173;
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p20 := $M.331;
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p21 := $M.332;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $M.333 := $i22;
    call {:si_unique_call 2974} {:cexpr "ldv_retval_37"} boogie_si_record_i32($i22);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i23 := $M.333;
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $M.173 := 2;
    call {:si_unique_call 2975} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(2);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2976} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_66: ref;

axiom ldv_main_exported_66 == $sub.ref(0, 962584);

procedure ldv_main_exported_66();
  free requires assertsPassed;
  modifies $M.135, $M.336, $M.174, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_66()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_433: ref;
  var vslice_dummy_var_434: ref;
  var vslice_dummy_var_435: ref;
  var vslice_dummy_var_436: i64;
  var vslice_dummy_var_437: i64;
  var vslice_dummy_var_438: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} vslice_dummy_var_433 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} vslice_dummy_var_434 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} vslice_dummy_var_435 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2993} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2994} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2995} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} ldv_stop();
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i38 := $M.174;
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} vslice_dummy_var_438 := ldv_release_66();
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $M.174 := 1;
    call {:si_unique_call 3005} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(1);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3006} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i32 := $M.174;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $p34 := $M.335;
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} vslice_dummy_var_437 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $M.174 := 2;
    call {:si_unique_call 3003} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(2);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i27 := $M.174;
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $p29 := $M.335;
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} vslice_dummy_var_436 := dma_tx_errors_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $M.174 := 2;
    call {:si_unique_call 3001} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(2);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i18 := $M.174;
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $p20 := $M.334;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $p21 := $M.335;
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $M.336 := $i22;
    call {:si_unique_call 2997} {:cexpr "ldv_retval_38"} boogie_si_record_i32($i22);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i23 := $M.336;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $M.174 := 2;
    call {:si_unique_call 2998} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(2);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 2999} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_45: ref;

axiom ldv_main_exported_45 == $sub.ref(0, 963616);

procedure ldv_main_exported_45();
  free requires assertsPassed;
  modifies $M.135, $M.339, $M.175, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_45()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_439: ref;
  var vslice_dummy_var_440: ref;
  var vslice_dummy_var_441: ref;
  var vslice_dummy_var_442: i64;
  var vslice_dummy_var_443: i64;
  var vslice_dummy_var_444: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} vslice_dummy_var_439 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} vslice_dummy_var_440 := ldv_memset($p8, 0, 4);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} vslice_dummy_var_441 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3016} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3017} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3018} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} ldv_stop();
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i38 := $M.175;
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} vslice_dummy_var_444 := ldv_release_45();
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $M.175 := 1;
    call {:si_unique_call 3028} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(1);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3029} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i32 := $M.175;
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $p34 := $M.338;
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} vslice_dummy_var_443 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $M.175 := 2;
    call {:si_unique_call 3026} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(2);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i27 := $M.175;
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $p29 := $M.338;
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} vslice_dummy_var_442 := wep_key_not_found_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $M.175 := 2;
    call {:si_unique_call 3024} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(2);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $i18 := $M.175;
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p20 := $M.337;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $p21 := $M.338;
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $M.339 := $i22;
    call {:si_unique_call 3020} {:cexpr "ldv_retval_39"} boogie_si_record_i32($i22);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i23 := $M.339;
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $M.175 := 2;
    call {:si_unique_call 3021} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(2);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3022} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_76: ref;

axiom ldv_main_exported_76 == $sub.ref(0, 964648);

procedure ldv_main_exported_76();
  free requires assertsPassed;
  modifies $M.135, $M.342, $M.176, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_76()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_445: ref;
  var vslice_dummy_var_446: ref;
  var vslice_dummy_var_447: ref;
  var vslice_dummy_var_448: i64;
  var vslice_dummy_var_449: i64;
  var vslice_dummy_var_450: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} vslice_dummy_var_445 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} vslice_dummy_var_446 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} vslice_dummy_var_447 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3039} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3040} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3041} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} ldv_stop();
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i38 := $M.176;
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} vslice_dummy_var_450 := ldv_release_76();
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.176 := 1;
    call {:si_unique_call 3051} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(1);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3052} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i32 := $M.176;
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $p34 := $M.341;
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} vslice_dummy_var_449 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $M.176 := 2;
    call {:si_unique_call 3049} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(2);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i27 := $M.176;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $p29 := $M.341;
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} vslice_dummy_var_448 := rx_hdr_overflow_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $M.176 := 2;
    call {:si_unique_call 3047} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(2);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i18 := $M.176;
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $p20 := $M.340;
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $p21 := $M.341;
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $M.342 := $i22;
    call {:si_unique_call 3043} {:cexpr "ldv_retval_40"} boogie_si_record_i32($i22);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i23 := $M.342;
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $M.176 := 2;
    call {:si_unique_call 3044} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(2);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3045} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_19: ref;

axiom ldv_main_exported_19 == $sub.ref(0, 965680);

procedure ldv_main_exported_19();
  free requires assertsPassed;
  modifies $M.135, $M.345, $M.177, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_19()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_451: ref;
  var vslice_dummy_var_452: ref;
  var vslice_dummy_var_453: ref;
  var vslice_dummy_var_454: i64;
  var vslice_dummy_var_455: i64;
  var vslice_dummy_var_456: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} vslice_dummy_var_451 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} vslice_dummy_var_452 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} vslice_dummy_var_453 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3062} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3064} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} ldv_stop();
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $i38 := $M.177;
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} vslice_dummy_var_456 := ldv_release_19();
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $M.177 := 1;
    call {:si_unique_call 3074} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3075} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i32 := $M.177;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $p34 := $M.344;
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} vslice_dummy_var_455 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $M.177 := 2;
    call {:si_unique_call 3072} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i27 := $M.177;
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p29 := $M.344;
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} vslice_dummy_var_454 := event_calibration_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $M.177 := 2;
    call {:si_unique_call 3070} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i18 := $M.177;
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $p20 := $M.343;
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $p21 := $M.344;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $M.345 := $i22;
    call {:si_unique_call 3066} {:cexpr "ldv_retval_41"} boogie_si_record_i32($i22);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $i23 := $M.345;
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $M.177 := 2;
    call {:si_unique_call 3067} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3068} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_62: ref;

axiom ldv_main_exported_62 == $sub.ref(0, 966712);

procedure ldv_main_exported_62();
  free requires assertsPassed;
  modifies $M.135, $M.348, $M.178, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_62()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_457: ref;
  var vslice_dummy_var_458: ref;
  var vslice_dummy_var_459: ref;
  var vslice_dummy_var_460: i64;
  var vslice_dummy_var_461: i64;
  var vslice_dummy_var_462: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} vslice_dummy_var_457 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} vslice_dummy_var_458 := ldv_memset($p8, 0, 4);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} vslice_dummy_var_459 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3085} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3087} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} ldv_stop();
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i38 := $M.178;
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} vslice_dummy_var_462 := ldv_release_62();
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $M.178 := 1;
    call {:si_unique_call 3097} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(1);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3098} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i32 := $M.178;
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $p34 := $M.347;
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} vslice_dummy_var_461 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $M.178 := 2;
    call {:si_unique_call 3095} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(2);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $i27 := $M.178;
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $p29 := $M.347;
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} vslice_dummy_var_460 := isr_rx_mem_overflow_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $M.178 := 2;
    call {:si_unique_call 3093} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(2);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $i18 := $M.178;
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $p20 := $M.346;
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $p21 := $M.347;
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $M.348 := $i22;
    call {:si_unique_call 3089} {:cexpr "ldv_retval_42"} boogie_si_record_i32($i22);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i23 := $M.348;
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $M.178 := 2;
    call {:si_unique_call 3090} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(2);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3091} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_54: ref;

axiom ldv_main_exported_54 == $sub.ref(0, 967744);

procedure ldv_main_exported_54();
  free requires assertsPassed;
  modifies $M.135, $M.351, $M.179, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_54()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_463: ref;
  var vslice_dummy_var_464: ref;
  var vslice_dummy_var_465: ref;
  var vslice_dummy_var_466: i64;
  var vslice_dummy_var_467: i64;
  var vslice_dummy_var_468: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} vslice_dummy_var_463 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} vslice_dummy_var_464 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} vslice_dummy_var_465 := ldv_memset($p10, 0, 4);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3108} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3110} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} ldv_stop();
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i38 := $M.179;
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} vslice_dummy_var_468 := ldv_release_54();
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $M.179 := 1;
    call {:si_unique_call 3120} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(1);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3121} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $i32 := $M.179;
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p34 := $M.350;
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} vslice_dummy_var_467 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $M.179 := 2;
    call {:si_unique_call 3118} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(2);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i27 := $M.179;
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $p29 := $M.350;
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} vslice_dummy_var_466 := isr_commands_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $M.179 := 2;
    call {:si_unique_call 3116} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(2);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $i18 := $M.179;
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $p20 := $M.349;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $p21 := $M.350;
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $M.351 := $i22;
    call {:si_unique_call 3112} {:cexpr "ldv_retval_43"} boogie_si_record_i32($i22);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i23 := $M.351;
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $M.179 := 2;
    call {:si_unique_call 3113} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(2);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3114} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_67: ref;

axiom ldv_main_exported_67 == $sub.ref(0, 968776);

procedure ldv_main_exported_67();
  free requires assertsPassed;
  modifies $M.135, $M.354, $M.180, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_67()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_469: ref;
  var vslice_dummy_var_470: ref;
  var vslice_dummy_var_471: ref;
  var vslice_dummy_var_472: i64;
  var vslice_dummy_var_473: i64;
  var vslice_dummy_var_474: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} vslice_dummy_var_469 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} vslice_dummy_var_470 := ldv_memset($p8, 0, 4);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} vslice_dummy_var_471 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3131} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3133} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} ldv_stop();
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i38 := $M.180;
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} vslice_dummy_var_474 := ldv_release_67();
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $M.180 := 1;
    call {:si_unique_call 3143} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(1);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3144} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i32 := $M.180;
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $p34 := $M.353;
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} vslice_dummy_var_473 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $M.180 := 2;
    call {:si_unique_call 3141} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(2);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i27 := $M.180;
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $p29 := $M.353;
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} vslice_dummy_var_472 := dma_tx_requested_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $M.180 := 2;
    call {:si_unique_call 3139} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(2);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $i18 := $M.180;
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $p20 := $M.352;
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $p21 := $M.353;
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $M.354 := $i22;
    call {:si_unique_call 3135} {:cexpr "ldv_retval_44"} boogie_si_record_i32($i22);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i23 := $M.354;
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $M.180 := 2;
    call {:si_unique_call 3136} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(2);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3137} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_70: ref;

axiom ldv_main_exported_70 == $sub.ref(0, 969808);

procedure ldv_main_exported_70();
  free requires assertsPassed;
  modifies $M.135, $M.357, $M.181, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_70()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_475: ref;
  var vslice_dummy_var_476: ref;
  var vslice_dummy_var_477: ref;
  var vslice_dummy_var_478: i64;
  var vslice_dummy_var_479: i64;
  var vslice_dummy_var_480: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} vslice_dummy_var_475 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} vslice_dummy_var_476 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} vslice_dummy_var_477 := ldv_memset($p10, 0, 4);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3154} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3155} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3156} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} ldv_stop();
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i38 := $M.181;
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} vslice_dummy_var_480 := ldv_release_70();
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $M.181 := 1;
    call {:si_unique_call 3166} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(1);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3167} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $i32 := $M.181;
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $p34 := $M.356;
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} vslice_dummy_var_479 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $M.181 := 2;
    call {:si_unique_call 3164} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(2);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $i27 := $M.181;
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $p29 := $M.356;
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} vslice_dummy_var_478 := rx_reset_counter_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $M.181 := 2;
    call {:si_unique_call 3162} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(2);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $i18 := $M.181;
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $p20 := $M.355;
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $p21 := $M.356;
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $M.357 := $i22;
    call {:si_unique_call 3158} {:cexpr "ldv_retval_45"} boogie_si_record_i32($i22);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $i23 := $M.357;
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $M.181 := 2;
    call {:si_unique_call 3159} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(2);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3160} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_68: ref;

axiom ldv_main_exported_68 == $sub.ref(0, 970840);

procedure ldv_main_exported_68();
  free requires assertsPassed;
  modifies $M.135, $M.360, $M.182, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_68()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_481: ref;
  var vslice_dummy_var_482: ref;
  var vslice_dummy_var_483: ref;
  var vslice_dummy_var_484: i64;
  var vslice_dummy_var_485: i64;
  var vslice_dummy_var_486: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} vslice_dummy_var_481 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} vslice_dummy_var_482 := ldv_memset($p8, 0, 4);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} vslice_dummy_var_483 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3177} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3179} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} ldv_stop();
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $i38 := $M.182;
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} vslice_dummy_var_486 := ldv_release_68();
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $M.182 := 1;
    call {:si_unique_call 3189} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(1);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3190} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i32 := $M.182;
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $p34 := $M.359;
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} vslice_dummy_var_485 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $M.182 := 2;
    call {:si_unique_call 3187} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(2);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i27 := $M.182;
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $p29 := $M.359;
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} vslice_dummy_var_484 := dma_rx_errors_read($p29, $p3, $i30, $p5);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $M.182 := 2;
    call {:si_unique_call 3185} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(2);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $i18 := $M.182;
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $p20 := $M.358;
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $p21 := $M.359;
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $M.360 := $i22;
    call {:si_unique_call 3181} {:cexpr "ldv_retval_46"} boogie_si_record_i32($i22);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i23 := $M.360;
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $M.182 := 2;
    call {:si_unique_call 3182} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(2);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3183} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 971872);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.135, $M.363, $M.183, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_487: ref;
  var vslice_dummy_var_488: ref;
  var vslice_dummy_var_489: ref;
  var vslice_dummy_var_490: i64;
  var vslice_dummy_var_491: i64;
  var vslice_dummy_var_492: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} vslice_dummy_var_487 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} vslice_dummy_var_488 := ldv_memset($p8, 0, 4);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} vslice_dummy_var_489 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3200} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3202} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} ldv_stop();
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $i38 := $M.183;
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} vslice_dummy_var_492 := ldv_release_2();
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $M.183 := 1;
    call {:si_unique_call 3212} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3213} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $i32 := $M.183;
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $p34 := $M.362;
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} vslice_dummy_var_491 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $M.183 := 2;
    call {:si_unique_call 3210} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $i27 := $M.183;
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $p29 := $M.362;
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} vslice_dummy_var_490 := rxpipe_missed_beacon_host_int_trig_rx_data_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $M.183 := 2;
    call {:si_unique_call 3208} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i18 := $M.183;
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p20 := $M.361;
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $p21 := $M.362;
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $M.363 := $i22;
    call {:si_unique_call 3204} {:cexpr "ldv_retval_47"} boogie_si_record_i32($i22);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i23 := $M.363;
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $M.183 := 2;
    call {:si_unique_call 3205} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3206} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_17: ref;

axiom ldv_main_exported_17 == $sub.ref(0, 972904);

procedure ldv_main_exported_17();
  free requires assertsPassed;
  modifies $M.135, $M.366, $M.184, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_17()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_493: ref;
  var vslice_dummy_var_494: ref;
  var vslice_dummy_var_495: ref;
  var vslice_dummy_var_496: i64;
  var vslice_dummy_var_497: i64;
  var vslice_dummy_var_498: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} vslice_dummy_var_493 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} vslice_dummy_var_494 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} vslice_dummy_var_495 := ldv_memset($p10, 0, 4);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3223} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3225} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} ldv_stop();
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $i38 := $M.184;
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} vslice_dummy_var_498 := ldv_release_17();
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $M.184 := 1;
    call {:si_unique_call 3235} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3236} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i32 := $M.184;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $p34 := $M.365;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} vslice_dummy_var_497 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $M.184 := 2;
    call {:si_unique_call 3233} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i27 := $M.184;
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $p29 := $M.365;
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} vslice_dummy_var_496 := event_rx_mem_empty_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $M.184 := 2;
    call {:si_unique_call 3231} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i18 := $M.184;
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $p20 := $M.364;
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p21 := $M.365;
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $M.366 := $i22;
    call {:si_unique_call 3227} {:cexpr "ldv_retval_48"} boogie_si_record_i32($i22);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i23 := $M.366;
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $M.184 := 2;
    call {:si_unique_call 3228} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3229} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 973936);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.135, $M.369, $M.185, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_499: ref;
  var vslice_dummy_var_500: ref;
  var vslice_dummy_var_501: ref;
  var vslice_dummy_var_502: i64;
  var vslice_dummy_var_503: i64;
  var vslice_dummy_var_504: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} vslice_dummy_var_499 := ldv_memset($p6, 0, 8);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} vslice_dummy_var_500 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} vslice_dummy_var_501 := ldv_memset($p10, 0, 4);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3246} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3248} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} ldv_stop();
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i38 := $M.185;
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} vslice_dummy_var_504 := ldv_release_1();
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $M.185 := 1;
    call {:si_unique_call 3258} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3259} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i32 := $M.185;
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $p34 := $M.368;
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} vslice_dummy_var_503 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $M.185 := 2;
    call {:si_unique_call 3256} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i27 := $M.185;
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $p29 := $M.368;
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} vslice_dummy_var_502 := rxpipe_tx_xfr_host_int_trig_rx_data_read($p29, $p5, $i30, $p4);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $M.185 := 2;
    call {:si_unique_call 3254} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $i18 := $M.185;
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $p20 := $M.367;
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p21 := $M.368;
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $M.369 := $i22;
    call {:si_unique_call 3250} {:cexpr "ldv_retval_49"} boogie_si_record_i32($i22);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $i23 := $M.369;
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $M.185 := 2;
    call {:si_unique_call 3251} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3252} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_30: ref;

axiom ldv_main_exported_30 == $sub.ref(0, 974968);

procedure ldv_main_exported_30();
  free requires assertsPassed;
  modifies $M.135, $M.372, $M.186, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_30()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_505: ref;
  var vslice_dummy_var_506: ref;
  var vslice_dummy_var_507: ref;
  var vslice_dummy_var_508: i64;
  var vslice_dummy_var_509: i64;
  var vslice_dummy_var_510: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} vslice_dummy_var_505 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} vslice_dummy_var_506 := ldv_memset($p8, 0, 8);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} vslice_dummy_var_507 := ldv_memset($p10, 0, 8);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3269} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3271} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} ldv_stop();
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $i38 := $M.186;
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} vslice_dummy_var_510 := ldv_release_30();
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $M.186 := 1;
    call {:si_unique_call 3281} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3282} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $i32 := $M.186;
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $p34 := $M.371;
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} vslice_dummy_var_509 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $M.186 := 2;
    call {:si_unique_call 3279} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(2);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $i27 := $M.186;
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $p29 := $M.371;
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} vslice_dummy_var_508 := pwr_fix_tsf_ps_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $M.186 := 2;
    call {:si_unique_call 3277} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(2);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i18 := $M.186;
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $p20 := $M.370;
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $p21 := $M.371;
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} $i22 := simple_open($p20, $p21);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $M.372 := $i22;
    call {:si_unique_call 3273} {:cexpr "ldv_retval_50"} boogie_si_record_i32($i22);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $i23 := $M.372;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $M.186 := 2;
    call {:si_unique_call 3274} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(2);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3275} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_25: ref;

axiom ldv_main_exported_25 == $sub.ref(0, 976000);

procedure ldv_main_exported_25();
  free requires assertsPassed;
  modifies $M.135, $M.375, $M.187, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_25()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_511: ref;
  var vslice_dummy_var_512: ref;
  var vslice_dummy_var_513: ref;
  var vslice_dummy_var_514: i64;
  var vslice_dummy_var_515: i64;
  var vslice_dummy_var_516: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} vslice_dummy_var_511 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} vslice_dummy_var_512 := ldv_memset($p8, 0, 4);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} vslice_dummy_var_513 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3292} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3293} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3294} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ldv_stop();
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i38 := $M.187;
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} vslice_dummy_var_516 := ldv_release_25();
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $M.187 := 1;
    call {:si_unique_call 3304} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3305} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $i32 := $M.187;
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p34 := $M.374;
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} vslice_dummy_var_515 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $M.187 := 2;
    call {:si_unique_call 3302} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(2);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $i27 := $M.187;
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $p29 := $M.374;
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} vslice_dummy_var_514 := aes_decrypt_fail_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.187 := 2;
    call {:si_unique_call 3300} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(2);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i18 := $M.187;
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $p20 := $M.373;
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $p21 := $M.374;
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $M.375 := $i22;
    call {:si_unique_call 3296} {:cexpr "ldv_retval_51"} boogie_si_record_i32($i22);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i23 := $M.375;
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $M.187 := 2;
    call {:si_unique_call 3297} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(2);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3298} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_28: ref;

axiom ldv_main_exported_28 == $sub.ref(0, 977032);

procedure ldv_main_exported_28();
  free requires assertsPassed;
  modifies $M.135, $M.378, $M.188, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_28()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_517: ref;
  var vslice_dummy_var_518: ref;
  var vslice_dummy_var_519: ref;
  var vslice_dummy_var_520: i64;
  var vslice_dummy_var_521: i64;
  var vslice_dummy_var_522: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} vslice_dummy_var_517 := ldv_memset($p6, 0, 4);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} vslice_dummy_var_518 := ldv_memset($p8, 0, 8);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} vslice_dummy_var_519 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3315} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3317} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} ldv_stop();
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $i38 := $M.188;
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} vslice_dummy_var_522 := ldv_release_28();
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $M.188 := 1;
    call {:si_unique_call 3327} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3328} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i32 := $M.188;
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $p34 := $M.377;
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} vslice_dummy_var_521 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $M.188 := 2;
    call {:si_unique_call 3325} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(2);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i27 := $M.188;
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $p29 := $M.377;
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} vslice_dummy_var_520 := mic_rx_pkts_read($p29, $p5, $i30, $p4);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $M.188 := 2;
    call {:si_unique_call 3323} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(2);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $i18 := $M.188;
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $p20 := $M.376;
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $p21 := $M.377;
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $M.378 := $i22;
    call {:si_unique_call 3319} {:cexpr "ldv_retval_52"} boogie_si_record_i32($i22);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $i23 := $M.378;
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $M.188 := 2;
    call {:si_unique_call 3320} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(2);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3321} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_75: ref;

axiom ldv_main_exported_75 == $sub.ref(0, 978064);

procedure ldv_main_exported_75();
  free requires assertsPassed;
  modifies $M.135, $M.381, $M.189, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_75()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_523: ref;
  var vslice_dummy_var_524: ref;
  var vslice_dummy_var_525: ref;
  var vslice_dummy_var_526: i64;
  var vslice_dummy_var_527: i64;
  var vslice_dummy_var_528: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} vslice_dummy_var_523 := ldv_memset($p6, 0, 4);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} vslice_dummy_var_524 := ldv_memset($p8, 0, 8);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} vslice_dummy_var_525 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3338} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3340} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} ldv_stop();
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $i38 := $M.189;
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} vslice_dummy_var_528 := ldv_release_75();
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $M.189 := 1;
    call {:si_unique_call 3350} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(1);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3351} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i32 := $M.189;
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $p34 := $M.380;
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} vslice_dummy_var_527 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $M.189 := 2;
    call {:si_unique_call 3348} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(2);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $i27 := $M.189;
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p29 := $M.380;
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} vslice_dummy_var_526 := rx_hw_stuck_read($p29, $p5, $i30, $p4);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $M.189 := 2;
    call {:si_unique_call 3346} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(2);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $i18 := $M.189;
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $p20 := $M.379;
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $p21 := $M.380;
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $M.381 := $i22;
    call {:si_unique_call 3342} {:cexpr "ldv_retval_53"} boogie_si_record_i32($i22);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $i23 := $M.381;
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $M.189 := 2;
    call {:si_unique_call 3343} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(2);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3344} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_40: ref;

axiom ldv_main_exported_40 == $sub.ref(0, 979096);

procedure ldv_main_exported_40();
  free requires assertsPassed;
  modifies $M.135, $M.384, $M.190, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_40()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_529: ref;
  var vslice_dummy_var_530: ref;
  var vslice_dummy_var_531: ref;
  var vslice_dummy_var_532: i64;
  var vslice_dummy_var_533: i64;
  var vslice_dummy_var_534: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} vslice_dummy_var_529 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} vslice_dummy_var_530 := ldv_memset($p8, 0, 4);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} vslice_dummy_var_531 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3361} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3363} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} ldv_stop();
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $i38 := $M.190;
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} vslice_dummy_var_534 := ldv_release_40();
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $M.190 := 1;
    call {:si_unique_call 3373} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(1);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3374} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $i32 := $M.190;
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $p34 := $M.383;
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} vslice_dummy_var_533 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $M.190 := 2;
    call {:si_unique_call 3371} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(2);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i27 := $M.190;
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $p29 := $M.383;
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} vslice_dummy_var_532 := pwr_elp_enter_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $M.190 := 2;
    call {:si_unique_call 3369} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(2);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i18 := $M.190;
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $p20 := $M.382;
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $p21 := $M.383;
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $M.384 := $i22;
    call {:si_unique_call 3365} {:cexpr "ldv_retval_54"} boogie_si_record_i32($i22);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i23 := $M.384;
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $M.190 := 2;
    call {:si_unique_call 3366} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(2);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3367} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_14: ref;

axiom ldv_main_exported_14 == $sub.ref(0, 980128);

procedure ldv_main_exported_14();
  free requires assertsPassed;
  modifies $M.135, $M.387, $M.191, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_14()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_535: ref;
  var vslice_dummy_var_536: ref;
  var vslice_dummy_var_537: ref;
  var vslice_dummy_var_538: i64;
  var vslice_dummy_var_539: i64;
  var vslice_dummy_var_540: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} vslice_dummy_var_535 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} vslice_dummy_var_536 := ldv_memset($p8, 0, 4);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} vslice_dummy_var_537 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3384} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3385} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3386} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} ldv_stop();
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $i38 := $M.191;
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} vslice_dummy_var_540 := ldv_release_14();
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $M.191 := 1;
    call {:si_unique_call 3396} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3397} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i32 := $M.191;
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $p34 := $M.386;
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} vslice_dummy_var_539 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $M.191 := 2;
    call {:si_unique_call 3394} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i27 := $M.191;
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $p29 := $M.386;
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} vslice_dummy_var_538 := event_phy_transmit_error_read($p29, $p5, $i30, $p4);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $M.191 := 2;
    call {:si_unique_call 3392} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $i18 := $M.191;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $p20 := $M.385;
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $p21 := $M.386;
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $M.387 := $i22;
    call {:si_unique_call 3388} {:cexpr "ldv_retval_55"} boogie_si_record_i32($i22);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i23 := $M.387;
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $M.191 := 2;
    call {:si_unique_call 3389} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3390} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_69: ref;

axiom ldv_main_exported_69 == $sub.ref(0, 981160);

procedure ldv_main_exported_69();
  free requires assertsPassed;
  modifies $M.135, $M.390, $M.192, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_69()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_541: ref;
  var vslice_dummy_var_542: ref;
  var vslice_dummy_var_543: ref;
  var vslice_dummy_var_544: i64;
  var vslice_dummy_var_545: i64;
  var vslice_dummy_var_546: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} vslice_dummy_var_541 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} vslice_dummy_var_542 := ldv_memset($p8, 0, 8);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} vslice_dummy_var_543 := ldv_memset($p10, 0, 4);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3407} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3408} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3409} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} ldv_stop();
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i38 := $M.192;
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} vslice_dummy_var_546 := ldv_release_69();
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $M.192 := 1;
    call {:si_unique_call 3419} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(1);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3420} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i32 := $M.192;
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $p34 := $M.389;
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} vslice_dummy_var_545 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $M.192 := 2;
    call {:si_unique_call 3417} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(2);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i27 := $M.192;
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $p29 := $M.389;
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} vslice_dummy_var_544 := dma_rx_requested_read($p29, $p5, $i30, $p4);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $M.192 := 2;
    call {:si_unique_call 3415} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(2);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $i18 := $M.192;
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $p20 := $M.388;
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $p21 := $M.389;
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $M.390 := $i22;
    call {:si_unique_call 3411} {:cexpr "ldv_retval_56"} boogie_si_record_i32($i22);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $i23 := $M.390;
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $M.192 := 2;
    call {:si_unique_call 3412} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(2);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3413} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_59: ref;

axiom ldv_main_exported_59 == $sub.ref(0, 982192);

procedure ldv_main_exported_59();
  free requires assertsPassed;
  modifies $M.135, $M.393, $M.193, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_59()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_547: ref;
  var vslice_dummy_var_548: ref;
  var vslice_dummy_var_549: ref;
  var vslice_dummy_var_550: i64;
  var vslice_dummy_var_551: i64;
  var vslice_dummy_var_552: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} vslice_dummy_var_547 := ldv_memset($p6, 0, 4);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} vslice_dummy_var_548 := ldv_memset($p8, 0, 8);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} vslice_dummy_var_549 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3430} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3432} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} ldv_stop();
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $i38 := $M.193;
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} vslice_dummy_var_552 := ldv_release_59();
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $M.193 := 1;
    call {:si_unique_call 3442} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(1);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3443} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $i32 := $M.193;
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $p34 := $M.392;
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} vslice_dummy_var_551 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $M.193 := 2;
    call {:si_unique_call 3440} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(2);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $i27 := $M.193;
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $p29 := $M.392;
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} vslice_dummy_var_550 := isr_tx_procs_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $M.193 := 2;
    call {:si_unique_call 3438} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(2);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $i18 := $M.193;
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $p20 := $M.391;
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $p21 := $M.392;
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $M.393 := $i22;
    call {:si_unique_call 3434} {:cexpr "ldv_retval_57"} boogie_si_record_i32($i22);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i23 := $M.393;
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $M.193 := 2;
    call {:si_unique_call 3435} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(2);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3436} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_49: ref;

axiom ldv_main_exported_49 == $sub.ref(0, 983224);

procedure ldv_main_exported_49();
  free requires assertsPassed;
  modifies $M.135, $M.396, $M.194, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_49()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_553: ref;
  var vslice_dummy_var_554: ref;
  var vslice_dummy_var_555: ref;
  var vslice_dummy_var_556: i64;
  var vslice_dummy_var_557: i64;
  var vslice_dummy_var_558: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} vslice_dummy_var_553 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} vslice_dummy_var_554 := ldv_memset($p8, 0, 4);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} vslice_dummy_var_555 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3453} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3454} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3455} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} ldv_stop();
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $i38 := $M.194;
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} vslice_dummy_var_558 := ldv_release_49();
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $M.194 := 1;
    call {:si_unique_call 3465} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(1);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3466} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i32 := $M.194;
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $p34 := $M.395;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} vslice_dummy_var_557 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $M.194 := 2;
    call {:si_unique_call 3463} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(2);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $i27 := $M.194;
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $p29 := $M.395;
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} vslice_dummy_var_556 := isr_wakeups_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $M.194 := 2;
    call {:si_unique_call 3461} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(2);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $i18 := $M.194;
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $p20 := $M.394;
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $p21 := $M.395;
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $M.396 := $i22;
    call {:si_unique_call 3457} {:cexpr "ldv_retval_58"} boogie_si_record_i32($i22);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $i23 := $M.396;
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $M.194 := 2;
    call {:si_unique_call 3458} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(2);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3459} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_24: ref;

axiom ldv_main_exported_24 == $sub.ref(0, 984256);

procedure ldv_main_exported_24();
  free requires assertsPassed;
  modifies $M.135, $M.399, $M.195, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_24()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_559: ref;
  var vslice_dummy_var_560: ref;
  var vslice_dummy_var_561: ref;
  var vslice_dummy_var_562: i64;
  var vslice_dummy_var_563: i64;
  var vslice_dummy_var_564: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} vslice_dummy_var_559 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} vslice_dummy_var_560 := ldv_memset($p8, 0, 8);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} vslice_dummy_var_561 := ldv_memset($p10, 0, 4);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3476} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3477} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3478} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} ldv_stop();
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i38 := $M.195;
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} vslice_dummy_var_564 := ldv_release_24();
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $M.195 := 1;
    call {:si_unique_call 3488} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3489} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i32 := $M.195;
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $p34 := $M.398;
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} vslice_dummy_var_563 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $M.195 := 2;
    call {:si_unique_call 3486} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(2);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i27 := $M.195;
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $p29 := $M.398;
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} vslice_dummy_var_562 := aes_encrypt_packets_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $M.195 := 2;
    call {:si_unique_call 3484} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(2);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i18 := $M.195;
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $p20 := $M.397;
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $p21 := $M.398;
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $M.399 := $i22;
    call {:si_unique_call 3480} {:cexpr "ldv_retval_59"} boogie_si_record_i32($i22);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i23 := $M.399;
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $M.195 := 2;
    call {:si_unique_call 3481} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(2);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3482} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_53: ref;

axiom ldv_main_exported_53 == $sub.ref(0, 985288);

procedure ldv_main_exported_53();
  free requires assertsPassed;
  modifies $M.135, $M.402, $M.196, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_53()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_565: ref;
  var vslice_dummy_var_566: ref;
  var vslice_dummy_var_567: ref;
  var vslice_dummy_var_568: i64;
  var vslice_dummy_var_569: i64;
  var vslice_dummy_var_570: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} vslice_dummy_var_565 := ldv_memset($p6, 0, 4);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} vslice_dummy_var_566 := ldv_memset($p8, 0, 8);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} vslice_dummy_var_567 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3499} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3501} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} ldv_stop();
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $i38 := $M.196;
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3510} vslice_dummy_var_570 := ldv_release_53();
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $M.196 := 1;
    call {:si_unique_call 3511} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(1);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3512} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $i32 := $M.196;
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $p34 := $M.401;
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} vslice_dummy_var_569 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $M.196 := 2;
    call {:si_unique_call 3509} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(2);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i27 := $M.196;
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $p29 := $M.401;
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3506} vslice_dummy_var_568 := isr_rx_procs_read($p29, $p5, $i30, $p4);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $M.196 := 2;
    call {:si_unique_call 3507} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(2);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i18 := $M.196;
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $p20 := $M.400;
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    $p21 := $M.401;
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $M.402 := $i22;
    call {:si_unique_call 3503} {:cexpr "ldv_retval_60"} boogie_si_record_i32($i22);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    $i23 := $M.402;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $M.196 := 2;
    call {:si_unique_call 3504} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(2);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3505} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_22: ref;

axiom ldv_main_exported_22 == $sub.ref(0, 986320);

procedure ldv_main_exported_22();
  free requires assertsPassed;
  modifies $M.135, $M.405, $M.198, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_22()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_571: ref;
  var vslice_dummy_var_572: ref;
  var vslice_dummy_var_573: ref;
  var vslice_dummy_var_574: i64;
  var vslice_dummy_var_575: i64;
  var vslice_dummy_var_576: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} vslice_dummy_var_571 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} vslice_dummy_var_572 := ldv_memset($p8, 0, 4);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} vslice_dummy_var_573 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3522} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3523} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3524} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} ldv_stop();
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $i38 := $M.198;
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} vslice_dummy_var_576 := ldv_release_22();
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $M.198 := 1;
    call {:si_unique_call 3534} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3535} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $i32 := $M.198;
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $p34 := $M.404;
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} vslice_dummy_var_575 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $M.198 := 2;
    call {:si_unique_call 3532} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(2);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $i27 := $M.198;
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $p29 := $M.404;
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} vslice_dummy_var_574 := aes_encrypt_interrupt_read($p29, $p3, $i30, $p5);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $M.198 := 2;
    call {:si_unique_call 3530} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(2);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $i18 := $M.198;
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $p20 := $M.403;
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $p21 := $M.404;
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $M.405 := $i22;
    call {:si_unique_call 3526} {:cexpr "ldv_retval_63"} boogie_si_record_i32($i22);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i23 := $M.405;
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $M.198 := 2;
    call {:si_unique_call 3527} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(2);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3528} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_42: ref;

axiom ldv_main_exported_42 == $sub.ref(0, 987352);

procedure ldv_main_exported_42();
  free requires assertsPassed;
  modifies $M.135, $M.408, $M.199, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_42()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_577: ref;
  var vslice_dummy_var_578: ref;
  var vslice_dummy_var_579: ref;
  var vslice_dummy_var_580: i64;
  var vslice_dummy_var_581: i64;
  var vslice_dummy_var_582: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} vslice_dummy_var_577 := ldv_memset($p6, 0, 8);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} vslice_dummy_var_578 := ldv_memset($p8, 0, 4);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} vslice_dummy_var_579 := ldv_memset($p10, 0, 8);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3545} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3547} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} ldv_stop();
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $i38 := $M.199;
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} vslice_dummy_var_582 := ldv_release_42();
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    $M.199 := 1;
    call {:si_unique_call 3557} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(1);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3558} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $i32 := $M.199;
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $p34 := $M.407;
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} vslice_dummy_var_581 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $M.199 := 2;
    call {:si_unique_call 3555} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(2);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $i27 := $M.199;
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $p29 := $M.407;
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} vslice_dummy_var_580 := wep_interrupt_read($p29, $p5, $i30, $p4);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $M.199 := 2;
    call {:si_unique_call 3553} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(2);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i18 := $M.199;
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $p20 := $M.406;
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $p21 := $M.407;
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} $i22 := simple_open($p20, $p21);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $M.408 := $i22;
    call {:si_unique_call 3549} {:cexpr "ldv_retval_64"} boogie_si_record_i32($i22);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $i23 := $M.408;
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $M.199 := 2;
    call {:si_unique_call 3550} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(2);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3551} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const wl12xx_driver_exit: ref;

axiom wl12xx_driver_exit == $sub.ref(0, 988384);

procedure wl12xx_driver_exit();
  free requires assertsPassed;
  modifies $M.197;



implementation wl12xx_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} ldv_platform_driver_unregister_17(wl12xx_driver);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    return;
}



const wl12xx_driver_init: ref;

axiom wl12xx_driver_init == $sub.ref(0, 989416);

procedure wl12xx_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.197, $M.136, $M.0, $CurrAddr;



implementation wl12xx_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} $i0 := ldv___platform_driver_register_16(wl12xx_driver, __this_module);
    call {:si_unique_call 3562} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_file_operations_5: ref;

axiom ldv_file_operations_5 == $sub.ref(0, 990448);

procedure ldv_file_operations_5();
  free requires assertsPassed;
  modifies $M.409, $M.410, $M.0, $CurrAddr;



implementation ldv_file_operations_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $M.409 := $p0;
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $M.410 := $p2;
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_43: ref;

axiom ldv_file_operations_43 == $sub.ref(0, 991480);

procedure ldv_file_operations_43();
  free requires assertsPassed;
  modifies $M.411, $M.412, $M.0, $CurrAddr;



implementation ldv_file_operations_43()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $M.411 := $p0;
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $M.412 := $p2;
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_37: ref;

axiom ldv_file_operations_37 == $sub.ref(0, 992512);

procedure ldv_file_operations_37();
  free requires assertsPassed;
  modifies $M.413, $M.414, $M.0, $CurrAddr;



implementation ldv_file_operations_37()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $M.413 := $p0;
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $M.414 := $p2;
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_34: ref;

axiom ldv_file_operations_34 == $sub.ref(0, 993544);

procedure ldv_file_operations_34();
  free requires assertsPassed;
  modifies $M.415, $M.416, $M.0, $CurrAddr;



implementation ldv_file_operations_34()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $M.415 := $p0;
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $M.416 := $p2;
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_4: ref;

axiom ldv_file_operations_4 == $sub.ref(0, 994576);

procedure ldv_file_operations_4();
  free requires assertsPassed;
  modifies $M.417, $M.418, $M.0, $CurrAddr;



implementation ldv_file_operations_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $M.417 := $p0;
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $M.418 := $p2;
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_38: ref;

axiom ldv_file_operations_38 == $sub.ref(0, 995608);

procedure ldv_file_operations_38();
  free requires assertsPassed;
  modifies $M.419, $M.420, $M.0, $CurrAddr;



implementation ldv_file_operations_38()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $M.419 := $p0;
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $M.420 := $p2;
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_8: ref;

axiom ldv_file_operations_8 == $sub.ref(0, 996640);

procedure ldv_file_operations_8();
  free requires assertsPassed;
  modifies $M.421, $M.422, $M.0, $CurrAddr;



implementation ldv_file_operations_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $M.421 := $p0;
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $M.422 := $p2;
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_47: ref;

axiom ldv_file_operations_47 == $sub.ref(0, 997672);

procedure ldv_file_operations_47();
  free requires assertsPassed;
  modifies $M.423, $M.424, $M.0, $CurrAddr;



implementation ldv_file_operations_47()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $M.423 := $p0;
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $M.424 := $p2;
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_51: ref;

axiom ldv_file_operations_51 == $sub.ref(0, 998704);

procedure ldv_file_operations_51();
  free requires assertsPassed;
  modifies $M.425, $M.426, $M.0, $CurrAddr;



implementation ldv_file_operations_51()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $M.425 := $p0;
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $M.426 := $p2;
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_9: ref;

axiom ldv_file_operations_9 == $sub.ref(0, 999736);

procedure ldv_file_operations_9();
  free requires assertsPassed;
  modifies $M.427, $M.428, $M.0, $CurrAddr;



implementation ldv_file_operations_9()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $M.427 := $p0;
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $M.428 := $p2;
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_36: ref;

axiom ldv_file_operations_36 == $sub.ref(0, 1000768);

procedure ldv_file_operations_36();
  free requires assertsPassed;
  modifies $M.429, $M.430, $M.0, $CurrAddr;



implementation ldv_file_operations_36()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $M.429 := $p0;
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $M.430 := $p2;
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 1001800);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.431, $M.432, $M.0, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $M.431 := $p0;
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $M.432 := $p2;
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_6: ref;

axiom ldv_file_operations_6 == $sub.ref(0, 1002832);

procedure ldv_file_operations_6();
  free requires assertsPassed;
  modifies $M.433, $M.434, $M.0, $CurrAddr;



implementation ldv_file_operations_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $M.433 := $p0;
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $M.434 := $p2;
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_13: ref;

axiom ldv_file_operations_13 == $sub.ref(0, 1003864);

procedure ldv_file_operations_13();
  free requires assertsPassed;
  modifies $M.435, $M.436, $M.0, $CurrAddr;



implementation ldv_file_operations_13()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $M.435 := $p0;
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $M.436 := $p2;
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_23: ref;

axiom ldv_file_operations_23 == $sub.ref(0, 1004896);

procedure ldv_file_operations_23();
  free requires assertsPassed;
  modifies $M.437, $M.438, $M.0, $CurrAddr;



implementation ldv_file_operations_23()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    $M.437 := $p0;
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $M.438 := $p2;
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_46: ref;

axiom ldv_file_operations_46 == $sub.ref(0, 1005928);

procedure ldv_file_operations_46();
  free requires assertsPassed;
  modifies $M.439, $M.440, $M.0, $CurrAddr;



implementation ldv_file_operations_46()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $M.439 := $p0;
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $M.440 := $p2;
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_42: ref;

axiom ldv_file_operations_42 == $sub.ref(0, 1006960);

procedure ldv_file_operations_42();
  free requires assertsPassed;
  modifies $M.406, $M.407, $M.0, $CurrAddr;



implementation ldv_file_operations_42()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $M.406 := $p0;
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $M.407 := $p2;
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_22: ref;

axiom ldv_file_operations_22 == $sub.ref(0, 1007992);

procedure ldv_file_operations_22();
  free requires assertsPassed;
  modifies $M.403, $M.404, $M.0, $CurrAddr;



implementation ldv_file_operations_22()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $M.403 := $p0;
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $M.404 := $p2;
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_53: ref;

axiom ldv_file_operations_53 == $sub.ref(0, 1009024);

procedure ldv_file_operations_53();
  free requires assertsPassed;
  modifies $M.400, $M.401, $M.0, $CurrAddr;



implementation ldv_file_operations_53()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $M.400 := $p0;
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $M.401 := $p2;
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_24: ref;

axiom ldv_file_operations_24 == $sub.ref(0, 1010056);

procedure ldv_file_operations_24();
  free requires assertsPassed;
  modifies $M.397, $M.398, $M.0, $CurrAddr;



implementation ldv_file_operations_24()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $M.397 := $p0;
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $M.398 := $p2;
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_49: ref;

axiom ldv_file_operations_49 == $sub.ref(0, 1011088);

procedure ldv_file_operations_49();
  free requires assertsPassed;
  modifies $M.394, $M.395, $M.0, $CurrAddr;



implementation ldv_file_operations_49()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $M.394 := $p0;
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $M.395 := $p2;
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_59: ref;

axiom ldv_file_operations_59 == $sub.ref(0, 1012120);

procedure ldv_file_operations_59();
  free requires assertsPassed;
  modifies $M.391, $M.392, $M.0, $CurrAddr;



implementation ldv_file_operations_59()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $M.391 := $p0;
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $M.392 := $p2;
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_69: ref;

axiom ldv_file_operations_69 == $sub.ref(0, 1013152);

procedure ldv_file_operations_69();
  free requires assertsPassed;
  modifies $M.388, $M.389, $M.0, $CurrAddr;



implementation ldv_file_operations_69()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $M.388 := $p0;
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $M.389 := $p2;
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_14: ref;

axiom ldv_file_operations_14 == $sub.ref(0, 1014184);

procedure ldv_file_operations_14();
  free requires assertsPassed;
  modifies $M.385, $M.386, $M.0, $CurrAddr;



implementation ldv_file_operations_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $M.385 := $p0;
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $M.386 := $p2;
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_40: ref;

axiom ldv_file_operations_40 == $sub.ref(0, 1015216);

procedure ldv_file_operations_40();
  free requires assertsPassed;
  modifies $M.382, $M.383, $M.0, $CurrAddr;



implementation ldv_file_operations_40()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $M.382 := $p0;
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $M.383 := $p2;
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_75: ref;

axiom ldv_file_operations_75 == $sub.ref(0, 1016248);

procedure ldv_file_operations_75();
  free requires assertsPassed;
  modifies $M.379, $M.380, $M.0, $CurrAddr;



implementation ldv_file_operations_75()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $M.379 := $p0;
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $M.380 := $p2;
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_28: ref;

axiom ldv_file_operations_28 == $sub.ref(0, 1017280);

procedure ldv_file_operations_28();
  free requires assertsPassed;
  modifies $M.376, $M.377, $M.0, $CurrAddr;



implementation ldv_file_operations_28()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $M.376 := $p0;
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $M.377 := $p2;
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_25: ref;

axiom ldv_file_operations_25 == $sub.ref(0, 1018312);

procedure ldv_file_operations_25();
  free requires assertsPassed;
  modifies $M.373, $M.374, $M.0, $CurrAddr;



implementation ldv_file_operations_25()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $M.373 := $p0;
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $M.374 := $p2;
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_30: ref;

axiom ldv_file_operations_30 == $sub.ref(0, 1019344);

procedure ldv_file_operations_30();
  free requires assertsPassed;
  modifies $M.370, $M.371, $M.0, $CurrAddr;



implementation ldv_file_operations_30()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $M.370 := $p0;
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $M.371 := $p2;
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_1: ref;

axiom ldv_file_operations_1 == $sub.ref(0, 1020376);

procedure ldv_file_operations_1();
  free requires assertsPassed;
  modifies $M.367, $M.368, $M.0, $CurrAddr;



implementation ldv_file_operations_1()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $M.367 := $p0;
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $M.368 := $p2;
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_17: ref;

axiom ldv_file_operations_17 == $sub.ref(0, 1021408);

procedure ldv_file_operations_17();
  free requires assertsPassed;
  modifies $M.364, $M.365, $M.0, $CurrAddr;



implementation ldv_file_operations_17()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $M.364 := $p0;
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $M.365 := $p2;
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_2: ref;

axiom ldv_file_operations_2 == $sub.ref(0, 1022440);

procedure ldv_file_operations_2();
  free requires assertsPassed;
  modifies $M.361, $M.362, $M.0, $CurrAddr;



implementation ldv_file_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $M.361 := $p0;
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $M.362 := $p2;
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_68: ref;

axiom ldv_file_operations_68 == $sub.ref(0, 1023472);

procedure ldv_file_operations_68();
  free requires assertsPassed;
  modifies $M.358, $M.359, $M.0, $CurrAddr;



implementation ldv_file_operations_68()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $M.358 := $p0;
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $M.359 := $p2;
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_70: ref;

axiom ldv_file_operations_70 == $sub.ref(0, 1024504);

procedure ldv_file_operations_70();
  free requires assertsPassed;
  modifies $M.355, $M.356, $M.0, $CurrAddr;



implementation ldv_file_operations_70()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $M.355 := $p0;
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $M.356 := $p2;
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_67: ref;

axiom ldv_file_operations_67 == $sub.ref(0, 1025536);

procedure ldv_file_operations_67();
  free requires assertsPassed;
  modifies $M.352, $M.353, $M.0, $CurrAddr;



implementation ldv_file_operations_67()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $M.352 := $p0;
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $M.353 := $p2;
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_54: ref;

axiom ldv_file_operations_54 == $sub.ref(0, 1026568);

procedure ldv_file_operations_54();
  free requires assertsPassed;
  modifies $M.349, $M.350, $M.0, $CurrAddr;



implementation ldv_file_operations_54()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    $M.349 := $p0;
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $M.350 := $p2;
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_62: ref;

axiom ldv_file_operations_62 == $sub.ref(0, 1027600);

procedure ldv_file_operations_62();
  free requires assertsPassed;
  modifies $M.346, $M.347, $M.0, $CurrAddr;



implementation ldv_file_operations_62()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $M.346 := $p0;
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3636} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $M.347 := $p2;
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_19: ref;

axiom ldv_file_operations_19 == $sub.ref(0, 1028632);

procedure ldv_file_operations_19();
  free requires assertsPassed;
  modifies $M.343, $M.344, $M.0, $CurrAddr;



implementation ldv_file_operations_19()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $M.343 := $p0;
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $M.344 := $p2;
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_76: ref;

axiom ldv_file_operations_76 == $sub.ref(0, 1029664);

procedure ldv_file_operations_76();
  free requires assertsPassed;
  modifies $M.340, $M.341, $M.0, $CurrAddr;



implementation ldv_file_operations_76()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $M.340 := $p0;
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $M.341 := $p2;
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_45: ref;

axiom ldv_file_operations_45 == $sub.ref(0, 1030696);

procedure ldv_file_operations_45();
  free requires assertsPassed;
  modifies $M.337, $M.338, $M.0, $CurrAddr;



implementation ldv_file_operations_45()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $M.337 := $p0;
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $M.338 := $p2;
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_66: ref;

axiom ldv_file_operations_66 == $sub.ref(0, 1031728);

procedure ldv_file_operations_66();
  free requires assertsPassed;
  modifies $M.334, $M.335, $M.0, $CurrAddr;



implementation ldv_file_operations_66()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $M.334 := $p0;
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $M.335 := $p2;
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_73: ref;

axiom ldv_file_operations_73 == $sub.ref(0, 1032760);

procedure ldv_file_operations_73();
  free requires assertsPassed;
  modifies $M.331, $M.332, $M.0, $CurrAddr;



implementation ldv_file_operations_73()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $M.331 := $p0;
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    $M.332 := $p2;
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_56: ref;

axiom ldv_file_operations_56 == $sub.ref(0, 1033792);

procedure ldv_file_operations_56();
  free requires assertsPassed;
  modifies $M.328, $M.329, $M.0, $CurrAddr;



implementation ldv_file_operations_56()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $M.328 := $p0;
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $M.329 := $p2;
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_60: ref;

axiom ldv_file_operations_60 == $sub.ref(0, 1034824);

procedure ldv_file_operations_60();
  free requires assertsPassed;
  modifies $M.325, $M.326, $M.0, $CurrAddr;



implementation ldv_file_operations_60()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $M.325 := $p0;
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3650} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $M.326 := $p2;
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_52: ref;

axiom ldv_file_operations_52 == $sub.ref(0, 1035856);

procedure ldv_file_operations_52();
  free requires assertsPassed;
  modifies $M.322, $M.323, $M.0, $CurrAddr;



implementation ldv_file_operations_52()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $M.322 := $p0;
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $M.323 := $p2;
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_15: ref;

axiom ldv_file_operations_15 == $sub.ref(0, 1036888);

procedure ldv_file_operations_15();
  free requires assertsPassed;
  modifies $M.319, $M.320, $M.0, $CurrAddr;



implementation ldv_file_operations_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    $M.319 := $p0;
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3654} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $M.320 := $p2;
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_12: ref;

axiom ldv_file_operations_12 == $sub.ref(0, 1037920);

procedure ldv_file_operations_12();
  free requires assertsPassed;
  modifies $M.316, $M.317, $M.0, $CurrAddr;



implementation ldv_file_operations_12()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $M.316 := $p0;
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3656} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $M.317 := $p2;
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_41: ref;

axiom ldv_file_operations_41 == $sub.ref(0, 1038952);

procedure ldv_file_operations_41();
  free requires assertsPassed;
  modifies $M.313, $M.314, $M.0, $CurrAddr;



implementation ldv_file_operations_41()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $M.313 := $p0;
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $M.314 := $p2;
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_58: ref;

axiom ldv_file_operations_58 == $sub.ref(0, 1039984);

procedure ldv_file_operations_58();
  free requires assertsPassed;
  modifies $M.310, $M.311, $M.0, $CurrAddr;



implementation ldv_file_operations_58()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $M.310 := $p0;
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3660} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $M.311 := $p2;
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_64: ref;

axiom ldv_file_operations_64 == $sub.ref(0, 1041016);

procedure ldv_file_operations_64();
  free requires assertsPassed;
  modifies $M.307, $M.308, $M.0, $CurrAddr;



implementation ldv_file_operations_64()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $M.307 := $p0;
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3662} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $M.308 := $p2;
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_39: ref;

axiom ldv_file_operations_39 == $sub.ref(0, 1042048);

procedure ldv_file_operations_39();
  free requires assertsPassed;
  modifies $M.304, $M.305, $M.0, $CurrAddr;



implementation ldv_file_operations_39()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $M.304 := $p0;
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3664} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $M.305 := $p2;
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_50: ref;

axiom ldv_file_operations_50 == $sub.ref(0, 1043080);

procedure ldv_file_operations_50();
  free requires assertsPassed;
  modifies $M.301, $M.302, $M.0, $CurrAddr;



implementation ldv_file_operations_50()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $M.301 := $p0;
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3666} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $M.302 := $p2;
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_29: ref;

axiom ldv_file_operations_29 == $sub.ref(0, 1044112);

procedure ldv_file_operations_29();
  free requires assertsPassed;
  modifies $M.298, $M.299, $M.0, $CurrAddr;



implementation ldv_file_operations_29()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $M.298 := $p0;
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $M.299 := $p2;
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_65: ref;

axiom ldv_file_operations_65 == $sub.ref(0, 1045144);

procedure ldv_file_operations_65();
  free requires assertsPassed;
  modifies $M.295, $M.296, $M.0, $CurrAddr;



implementation ldv_file_operations_65()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $M.295 := $p0;
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3670} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $M.296 := $p2;
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_77: ref;

axiom ldv_file_operations_77 == $sub.ref(0, 1046176);

procedure ldv_file_operations_77();
  free requires assertsPassed;
  modifies $M.292, $M.293, $M.0, $CurrAddr;



implementation ldv_file_operations_77()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $M.292 := $p0;
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3672} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $M.293 := $p2;
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_48: ref;

axiom ldv_file_operations_48 == $sub.ref(0, 1047208);

procedure ldv_file_operations_48();
  free requires assertsPassed;
  modifies $M.289, $M.290, $M.0, $CurrAddr;



implementation ldv_file_operations_48()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $M.289 := $p0;
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3674} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $M.290 := $p2;
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_78: ref;

axiom ldv_file_operations_78 == $sub.ref(0, 1048240);

procedure ldv_file_operations_78();
  free requires assertsPassed;
  modifies $M.286, $M.287, $M.0, $CurrAddr;



implementation ldv_file_operations_78()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $M.286 := $p0;
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $M.287 := $p2;
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_11: ref;

axiom ldv_file_operations_11 == $sub.ref(0, 1049272);

procedure ldv_file_operations_11();
  free requires assertsPassed;
  modifies $M.283, $M.284, $M.0, $CurrAddr;



implementation ldv_file_operations_11()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $M.283 := $p0;
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3678} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $M.284 := $p2;
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_35: ref;

axiom ldv_file_operations_35 == $sub.ref(0, 1050304);

procedure ldv_file_operations_35();
  free requires assertsPassed;
  modifies $M.280, $M.281, $M.0, $CurrAddr;



implementation ldv_file_operations_35()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $M.280 := $p0;
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $M.281 := $p2;
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_31: ref;

axiom ldv_file_operations_31 == $sub.ref(0, 1051336);

procedure ldv_file_operations_31();
  free requires assertsPassed;
  modifies $M.277, $M.278, $M.0, $CurrAddr;



implementation ldv_file_operations_31()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $M.277 := $p0;
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $M.278 := $p2;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_10: ref;

axiom ldv_file_operations_10 == $sub.ref(0, 1052368);

procedure ldv_file_operations_10();
  free requires assertsPassed;
  modifies $M.274, $M.275, $M.0, $CurrAddr;



implementation ldv_file_operations_10()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $M.274 := $p0;
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $M.275 := $p2;
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_20: ref;

axiom ldv_file_operations_20 == $sub.ref(0, 1053400);

procedure ldv_file_operations_20();
  free requires assertsPassed;
  modifies $M.271, $M.272, $M.0, $CurrAddr;



implementation ldv_file_operations_20()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $M.271 := $p0;
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $M.272 := $p2;
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_61: ref;

axiom ldv_file_operations_61 == $sub.ref(0, 1054432);

procedure ldv_file_operations_61();
  free requires assertsPassed;
  modifies $M.268, $M.269, $M.0, $CurrAddr;



implementation ldv_file_operations_61()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $M.268 := $p0;
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3688} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $M.269 := $p2;
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_57: ref;

axiom ldv_file_operations_57 == $sub.ref(0, 1055464);

procedure ldv_file_operations_57();
  free requires assertsPassed;
  modifies $M.265, $M.266, $M.0, $CurrAddr;



implementation ldv_file_operations_57()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $M.265 := $p0;
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $M.266 := $p2;
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_27: ref;

axiom ldv_file_operations_27 == $sub.ref(0, 1056496);

procedure ldv_file_operations_27();
  free requires assertsPassed;
  modifies $M.262, $M.263, $M.0, $CurrAddr;



implementation ldv_file_operations_27()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $M.262 := $p0;
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $M.263 := $p2;
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_74: ref;

axiom ldv_file_operations_74 == $sub.ref(0, 1057528);

procedure ldv_file_operations_74();
  free requires assertsPassed;
  modifies $M.259, $M.260, $M.0, $CurrAddr;



implementation ldv_file_operations_74()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $M.259 := $p0;
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $M.260 := $p2;
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_55: ref;

axiom ldv_file_operations_55 == $sub.ref(0, 1058560);

procedure ldv_file_operations_55();
  free requires assertsPassed;
  modifies $M.256, $M.257, $M.0, $CurrAddr;



implementation ldv_file_operations_55()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $M.256 := $p0;
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $M.257 := $p2;
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_44: ref;

axiom ldv_file_operations_44 == $sub.ref(0, 1059592);

procedure ldv_file_operations_44();
  free requires assertsPassed;
  modifies $M.253, $M.254, $M.0, $CurrAddr;



implementation ldv_file_operations_44()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $M.253 := $p0;
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $M.254 := $p2;
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_16: ref;

axiom ldv_file_operations_16 == $sub.ref(0, 1060624);

procedure ldv_file_operations_16();
  free requires assertsPassed;
  modifies $M.250, $M.251, $M.0, $CurrAddr;



implementation ldv_file_operations_16()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $M.250 := $p0;
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $M.251 := $p2;
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_72: ref;

axiom ldv_file_operations_72 == $sub.ref(0, 1061656);

procedure ldv_file_operations_72();
  free requires assertsPassed;
  modifies $M.247, $M.248, $M.0, $CurrAddr;



implementation ldv_file_operations_72()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $M.247 := $p0;
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $M.248 := $p2;
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_18: ref;

axiom ldv_file_operations_18 == $sub.ref(0, 1062688);

procedure ldv_file_operations_18();
  free requires assertsPassed;
  modifies $M.244, $M.245, $M.0, $CurrAddr;



implementation ldv_file_operations_18()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $M.244 := $p0;
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $M.245 := $p2;
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_26: ref;

axiom ldv_file_operations_26 == $sub.ref(0, 1063720);

procedure ldv_file_operations_26();
  free requires assertsPassed;
  modifies $M.241, $M.242, $M.0, $CurrAddr;



implementation ldv_file_operations_26()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $M.241 := $p0;
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $M.242 := $p2;
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_7: ref;

axiom ldv_file_operations_7 == $sub.ref(0, 1064752);

procedure ldv_file_operations_7();
  free requires assertsPassed;
  modifies $M.238, $M.239, $M.0, $CurrAddr;



implementation ldv_file_operations_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $M.238 := $p0;
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $M.239 := $p2;
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_71: ref;

axiom ldv_file_operations_71 == $sub.ref(0, 1065784);

procedure ldv_file_operations_71();
  free requires assertsPassed;
  modifies $M.235, $M.236, $M.0, $CurrAddr;



implementation ldv_file_operations_71()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $M.235 := $p0;
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $M.236 := $p2;
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_21: ref;

axiom ldv_file_operations_21 == $sub.ref(0, 1066816);

procedure ldv_file_operations_21();
  free requires assertsPassed;
  modifies $M.232, $M.233, $M.0, $CurrAddr;



implementation ldv_file_operations_21()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $M.232 := $p0;
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $M.233 := $p2;
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_63: ref;

axiom ldv_file_operations_63 == $sub.ref(0, 1067848);

procedure ldv_file_operations_63();
  free requires assertsPassed;
  modifies $M.229, $M.230, $M.0, $CurrAddr;



implementation ldv_file_operations_63()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $M.229 := $p0;
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $M.230 := $p2;
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_32: ref;

axiom ldv_file_operations_32 == $sub.ref(0, 1068880);

procedure ldv_file_operations_32();
  free requires assertsPassed;
  modifies $M.226, $M.227, $M.0, $CurrAddr;



implementation ldv_file_operations_32()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $M.226 := $p0;
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $M.227 := $p2;
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_33: ref;

axiom ldv_file_operations_33 == $sub.ref(0, 1069912);

procedure ldv_file_operations_33();
  free requires assertsPassed;
  modifies $M.223, $M.224, $M.0, $CurrAddr;



implementation ldv_file_operations_33()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $M.223 := $p0;
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $M.224 := $p2;
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_46: ref;

axiom ldv_main_exported_46 == $sub.ref(0, 1070944);

procedure ldv_main_exported_46();
  free requires assertsPassed;
  modifies $M.135, $M.441, $M.202, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_46()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_583: ref;
  var vslice_dummy_var_584: ref;
  var vslice_dummy_var_585: ref;
  var vslice_dummy_var_586: i64;
  var vslice_dummy_var_587: i64;
  var vslice_dummy_var_588: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} vslice_dummy_var_583 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} vslice_dummy_var_584 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} vslice_dummy_var_585 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3727} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3729} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3741} ldv_stop();
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $i38 := $M.202;
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3738} vslice_dummy_var_588 := ldv_release_46();
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $M.202 := 1;
    call {:si_unique_call 3739} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(1);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3740} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $i32 := $M.202;
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    $p34 := $M.440;
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} vslice_dummy_var_587 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $M.202 := 2;
    call {:si_unique_call 3737} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(2);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $i27 := $M.202;
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $p29 := $M.440;
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3734} vslice_dummy_var_586 := wep_default_key_count_read($p29, $p5, $i30, $p4);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    $M.202 := 2;
    call {:si_unique_call 3735} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(2);
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i18 := $M.202;
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $p20 := $M.439;
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p21 := $M.440;
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $M.441 := $i22;
    call {:si_unique_call 3731} {:cexpr "ldv_retval_66"} boogie_si_record_i32($i22);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $i23 := $M.441;
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $M.202 := 2;
    call {:si_unique_call 3732} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(2);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3733} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_23: ref;

axiom ldv_main_exported_23 == $sub.ref(0, 1071976);

procedure ldv_main_exported_23();
  free requires assertsPassed;
  modifies $M.135, $M.442, $M.203, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_23()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_589: ref;
  var vslice_dummy_var_590: ref;
  var vslice_dummy_var_591: ref;
  var vslice_dummy_var_592: i64;
  var vslice_dummy_var_593: i64;
  var vslice_dummy_var_594: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3743} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3744} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} vslice_dummy_var_589 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} vslice_dummy_var_590 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3749} vslice_dummy_var_591 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3750} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3752} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} ldv_stop();
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $i38 := $M.203;
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} vslice_dummy_var_594 := ldv_release_23();
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    $M.203 := 1;
    call {:si_unique_call 3762} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3763} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $i32 := $M.203;
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $p34 := $M.438;
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3759} vslice_dummy_var_593 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $M.203 := 2;
    call {:si_unique_call 3760} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(2);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $i27 := $M.203;
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $p29 := $M.438;
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} vslice_dummy_var_592 := aes_decrypt_packets_read($p29, $p3, $i30, $p5);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $M.203 := 2;
    call {:si_unique_call 3758} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(2);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $i18 := $M.203;
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $p20 := $M.437;
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $p21 := $M.438;
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $M.442 := $i22;
    call {:si_unique_call 3754} {:cexpr "ldv_retval_67"} boogie_si_record_i32($i22);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $i23 := $M.442;
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $M.203 := 2;
    call {:si_unique_call 3755} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(2);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3756} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_13: ref;

axiom ldv_main_exported_13 == $sub.ref(0, 1073008);

procedure ldv_main_exported_13();
  free requires assertsPassed;
  modifies $M.135, $M.443, $M.204, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_13()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_595: ref;
  var vslice_dummy_var_596: ref;
  var vslice_dummy_var_597: ref;
  var vslice_dummy_var_598: i64;
  var vslice_dummy_var_599: i64;
  var vslice_dummy_var_600: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3766} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3767} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3769} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3770} vslice_dummy_var_595 := ldv_memset($p6, 0, 8);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} vslice_dummy_var_596 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} vslice_dummy_var_597 := ldv_memset($p10, 0, 4);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3773} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3775} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} ldv_stop();
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $i38 := $M.204;
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} vslice_dummy_var_600 := ldv_release_13();
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $M.204 := 1;
    call {:si_unique_call 3785} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3786} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i32 := $M.204;
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $p34 := $M.436;
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3782} vslice_dummy_var_599 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $M.204 := 2;
    call {:si_unique_call 3783} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $i27 := $M.204;
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $p29 := $M.436;
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} vslice_dummy_var_598 := event_tx_stuck_read($p29, $p3, $i30, $p5);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $M.204 := 2;
    call {:si_unique_call 3781} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $i18 := $M.204;
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $p20 := $M.435;
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $p21 := $M.436;
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $M.443 := $i22;
    call {:si_unique_call 3777} {:cexpr "ldv_retval_68"} boogie_si_record_i32($i22);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $i23 := $M.443;
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $M.204 := 2;
    call {:si_unique_call 3778} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3779} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 1074040);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.135, $M.444, $M.205, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_601: ref;
  var vslice_dummy_var_602: ref;
  var vslice_dummy_var_603: ref;
  var vslice_dummy_var_604: i64;
  var vslice_dummy_var_605: i64;
  var vslice_dummy_var_606: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3788} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3790} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3792} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3793} vslice_dummy_var_601 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} vslice_dummy_var_602 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} vslice_dummy_var_603 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3796} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3798} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3810} ldv_stop();
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $i38 := $M.205;
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3807} vslice_dummy_var_606 := ldv_release_6();
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $M.205 := 1;
    call {:si_unique_call 3808} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3809} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $i32 := $M.205;
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $p34 := $M.434;
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3805} vslice_dummy_var_605 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $M.205 := 2;
    call {:si_unique_call 3806} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $i27 := $M.205;
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $p29 := $M.434;
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} vslice_dummy_var_604 := ps_upsd_utilization_read($p29, $p3, $i30, $p5);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $M.205 := 2;
    call {:si_unique_call 3804} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $i18 := $M.205;
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $p20 := $M.433;
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $p21 := $M.434;
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $M.444 := $i22;
    call {:si_unique_call 3800} {:cexpr "ldv_retval_69"} boogie_si_record_i32($i22);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $i23 := $M.444;
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $M.205 := 2;
    call {:si_unique_call 3801} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3802} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 1075072);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.135, $M.445, $M.206, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_607: ref;
  var vslice_dummy_var_608: ref;
  var vslice_dummy_var_609: ref;
  var vslice_dummy_var_610: i64;
  var vslice_dummy_var_611: i64;
  var vslice_dummy_var_612: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3811} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3814} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3815} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} vslice_dummy_var_607 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3817} vslice_dummy_var_608 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} vslice_dummy_var_609 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3819} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3820} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3821} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} ldv_stop();
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $i38 := $M.206;
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3830} vslice_dummy_var_612 := ldv_release_3();
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $M.206 := 1;
    call {:si_unique_call 3831} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3832} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $i32 := $M.206;
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $p34 := $M.432;
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} vslice_dummy_var_611 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $M.206 := 2;
    call {:si_unique_call 3829} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $i27 := $M.206;
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $p29 := $M.432;
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} vslice_dummy_var_610 := rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read($p29, $p3, $i30, $p5);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $M.206 := 2;
    call {:si_unique_call 3827} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $i18 := $M.206;
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    $p20 := $M.431;
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $p21 := $M.432;
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3822} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $M.445 := $i22;
    call {:si_unique_call 3823} {:cexpr "ldv_retval_70"} boogie_si_record_i32($i22);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $i23 := $M.445;
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    $M.206 := 2;
    call {:si_unique_call 3824} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3825} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_36: ref;

axiom ldv_main_exported_36 == $sub.ref(0, 1076104);

procedure ldv_main_exported_36();
  free requires assertsPassed;
  modifies $M.135, $M.446, $M.207, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_36()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_613: ref;
  var vslice_dummy_var_614: ref;
  var vslice_dummy_var_615: ref;
  var vslice_dummy_var_616: i64;
  var vslice_dummy_var_617: i64;
  var vslice_dummy_var_618: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3835} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3836} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3837} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3838} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} vslice_dummy_var_613 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3840} vslice_dummy_var_614 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} vslice_dummy_var_615 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3842} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3843} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3844} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} ldv_stop();
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $i38 := $M.207;
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} vslice_dummy_var_618 := ldv_release_36();
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $M.207 := 1;
    call {:si_unique_call 3854} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3855} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $i32 := $M.207;
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    $p34 := $M.430;
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3851} vslice_dummy_var_617 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $M.207 := 2;
    call {:si_unique_call 3852} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(2);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $i27 := $M.207;
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $p29 := $M.430;
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3849} vslice_dummy_var_616 := pwr_tx_with_ps_read($p29, $p5, $i30, $p4);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    $M.207 := 2;
    call {:si_unique_call 3850} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(2);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $i18 := $M.207;
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    $p20 := $M.429;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $p21 := $M.430;
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $M.446 := $i22;
    call {:si_unique_call 3846} {:cexpr "ldv_retval_71"} boogie_si_record_i32($i22);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $i23 := $M.446;
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $M.207 := 2;
    call {:si_unique_call 3847} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(2);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3848} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 1077136);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.135, $M.447, $M.208, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_619: ref;
  var vslice_dummy_var_620: ref;
  var vslice_dummy_var_621: ref;
  var vslice_dummy_var_622: i64;
  var vslice_dummy_var_623: i64;
  var vslice_dummy_var_624: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3857} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3860} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3861} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} vslice_dummy_var_619 := ldv_memset($p6, 0, 8);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3863} vslice_dummy_var_620 := ldv_memset($p8, 0, 4);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3864} vslice_dummy_var_621 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3865} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3866} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3867} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} ldv_stop();
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $i38 := $M.208;
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3876} vslice_dummy_var_624 := ldv_release_9();
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $M.208 := 1;
    call {:si_unique_call 3877} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3878} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $i32 := $M.208;
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $p34 := $M.428;
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} vslice_dummy_var_623 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $M.208 := 2;
    call {:si_unique_call 3875} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $i27 := $M.208;
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $p29 := $M.428;
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3872} vslice_dummy_var_622 := ps_upsd_max_apturn_read($p29, $p5, $i30, $p4);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $M.208 := 2;
    call {:si_unique_call 3873} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $i18 := $M.208;
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $p20 := $M.427;
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $p21 := $M.428;
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $M.447 := $i22;
    call {:si_unique_call 3869} {:cexpr "ldv_retval_72"} boogie_si_record_i32($i22);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i23 := $M.447;
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $M.208 := 2;
    call {:si_unique_call 3870} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3871} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_51: ref;

axiom ldv_main_exported_51 == $sub.ref(0, 1078168);

procedure ldv_main_exported_51();
  free requires assertsPassed;
  modifies $M.135, $M.448, $M.209, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_51()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_625: ref;
  var vslice_dummy_var_626: ref;
  var vslice_dummy_var_627: ref;
  var vslice_dummy_var_628: i64;
  var vslice_dummy_var_629: i64;
  var vslice_dummy_var_630: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3880} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3881} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} vslice_dummy_var_625 := ldv_memset($p6, 0, 8);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} vslice_dummy_var_626 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} vslice_dummy_var_627 := ldv_memset($p10, 0, 4);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3888} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3889} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3890} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} ldv_stop();
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $i38 := $M.209;
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} vslice_dummy_var_630 := ldv_release_51();
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $M.209 := 1;
    call {:si_unique_call 3900} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(1);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3901} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i32 := $M.209;
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $p34 := $M.426;
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3897} vslice_dummy_var_629 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $M.209 := 2;
    call {:si_unique_call 3898} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(2);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $i27 := $M.209;
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $p29 := $M.426;
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3895} vslice_dummy_var_628 := isr_host_acknowledges_read($p29, $p3, $i30, $p5);
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    $M.209 := 2;
    call {:si_unique_call 3896} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(2);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $i18 := $M.209;
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $p20 := $M.425;
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $p21 := $M.426;
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $M.448 := $i22;
    call {:si_unique_call 3892} {:cexpr "ldv_retval_73"} boogie_si_record_i32($i22);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $i23 := $M.448;
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $M.209 := 2;
    call {:si_unique_call 3893} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(2);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3894} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_47: ref;

axiom ldv_main_exported_47 == $sub.ref(0, 1079200);

procedure ldv_main_exported_47();
  free requires assertsPassed;
  modifies $M.135, $M.449, $M.210, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_47()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_631: ref;
  var vslice_dummy_var_632: ref;
  var vslice_dummy_var_633: ref;
  var vslice_dummy_var_634: i64;
  var vslice_dummy_var_635: i64;
  var vslice_dummy_var_636: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3908} vslice_dummy_var_631 := ldv_memset($p6, 0, 8);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3909} vslice_dummy_var_632 := ldv_memset($p8, 0, 4);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3910} vslice_dummy_var_633 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3911} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3913} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} ldv_stop();
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $i38 := $M.210;
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} vslice_dummy_var_636 := ldv_release_47();
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $M.210 := 1;
    call {:si_unique_call 3923} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(1);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3924} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $i32 := $M.210;
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $p34 := $M.424;
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} vslice_dummy_var_635 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $M.210 := 2;
    call {:si_unique_call 3921} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(2);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $i27 := $M.210;
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $p29 := $M.424;
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} vslice_dummy_var_634 := wep_addr_key_count_read($p29, $p3, $i30, $p5);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $M.210 := 2;
    call {:si_unique_call 3919} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(2);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $i18 := $M.210;
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $p20 := $M.423;
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $p21 := $M.424;
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3914} $i22 := simple_open($p20, $p21);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    $M.449 := $i22;
    call {:si_unique_call 3915} {:cexpr "ldv_retval_74"} boogie_si_record_i32($i22);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $i23 := $M.449;
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $M.210 := 2;
    call {:si_unique_call 3916} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(2);
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3917} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 1080232);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.135, $M.450, $M.211, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_637: ref;
  var vslice_dummy_var_638: ref;
  var vslice_dummy_var_639: ref;
  var vslice_dummy_var_640: i64;
  var vslice_dummy_var_641: i64;
  var vslice_dummy_var_642: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3926} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3929} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3931} vslice_dummy_var_637 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} vslice_dummy_var_638 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3933} vslice_dummy_var_639 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3934} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3935} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3936} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} ldv_stop();
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $i38 := $M.211;
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3945} vslice_dummy_var_642 := ldv_release_8();
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $M.211 := 1;
    call {:si_unique_call 3946} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3947} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $i32 := $M.211;
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $p34 := $M.422;
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p1);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} vslice_dummy_var_641 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $M.211 := 2;
    call {:si_unique_call 3944} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $i27 := $M.211;
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $p29 := $M.422;
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p2);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} vslice_dummy_var_640 := ps_pspoll_max_apturn_read($p29, $p3, $i30, $p5);
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    $M.211 := 2;
    call {:si_unique_call 3942} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $i18 := $M.211;
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $p20 := $M.421;
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $p21 := $M.422;
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $M.450 := $i22;
    call {:si_unique_call 3938} {:cexpr "ldv_retval_75"} boogie_si_record_i32($i22);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $i23 := $M.450;
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $M.211 := 2;
    call {:si_unique_call 3939} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3940} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_38: ref;

axiom ldv_main_exported_38 == $sub.ref(0, 1081264);

procedure ldv_main_exported_38();
  free requires assertsPassed;
  modifies $M.135, $M.451, $M.212, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_38()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_643: ref;
  var vslice_dummy_var_644: ref;
  var vslice_dummy_var_645: ref;
  var vslice_dummy_var_646: i64;
  var vslice_dummy_var_647: i64;
  var vslice_dummy_var_648: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3951} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3953} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} vslice_dummy_var_643 := ldv_memset($p6, 0, 4);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} vslice_dummy_var_644 := ldv_memset($p8, 0, 8);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} vslice_dummy_var_645 := ldv_memset($p10, 0, 8);
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3957} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3959} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3971} ldv_stop();
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i38 := $M.212;
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3968} vslice_dummy_var_648 := ldv_release_38();
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $M.212 := 1;
    call {:si_unique_call 3969} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(1);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3970} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $i32 := $M.212;
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p34 := $M.420;
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3966} vslice_dummy_var_647 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    $M.212 := 2;
    call {:si_unique_call 3967} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(2);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $i27 := $M.212;
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    $p29 := $M.420;
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3964} vslice_dummy_var_646 := pwr_wake_on_host_read($p29, $p5, $i30, $p4);
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    $M.212 := 2;
    call {:si_unique_call 3965} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(2);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i18 := $M.212;
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $p20 := $M.419;
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $p21 := $M.420;
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3960} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $M.451 := $i22;
    call {:si_unique_call 3961} {:cexpr "ldv_retval_76"} boogie_si_record_i32($i22);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i23 := $M.451;
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $M.212 := 2;
    call {:si_unique_call 3962} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(2);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3963} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 1082296);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.135, $M.452, $M.213, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_649: ref;
  var vslice_dummy_var_650: ref;
  var vslice_dummy_var_651: ref;
  var vslice_dummy_var_652: i64;
  var vslice_dummy_var_653: i64;
  var vslice_dummy_var_654: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3972} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3973} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3974} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3975} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3976} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3977} vslice_dummy_var_649 := ldv_memset($p6, 0, 8);
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} vslice_dummy_var_650 := ldv_memset($p8, 0, 8);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3979} vslice_dummy_var_651 := ldv_memset($p10, 0, 4);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3980} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 3981} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 3982} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3994} ldv_stop();
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $i38 := $M.213;
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3991} vslice_dummy_var_654 := ldv_release_4();
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $M.213 := 1;
    call {:si_unique_call 3992} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 3993} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $i32 := $M.213;
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $p34 := $M.418;
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p0);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p2);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} vslice_dummy_var_653 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $M.213 := 2;
    call {:si_unique_call 3990} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $i27 := $M.213;
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $p29 := $M.418;
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3987} vslice_dummy_var_652 := rxpipe_descr_host_int_trig_rx_data_read($p29, $p5, $i30, $p4);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $M.213 := 2;
    call {:si_unique_call 3988} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $i18 := $M.213;
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    $p20 := $M.417;
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $p21 := $M.418;
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3983} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $M.452 := $i22;
    call {:si_unique_call 3984} {:cexpr "ldv_retval_77"} boogie_si_record_i32($i22);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $i23 := $M.452;
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $M.213 := 2;
    call {:si_unique_call 3985} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 3986} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_34: ref;

axiom ldv_main_exported_34 == $sub.ref(0, 1083328);

procedure ldv_main_exported_34();
  free requires assertsPassed;
  modifies $M.135, $M.453, $M.214, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_34()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_655: ref;
  var vslice_dummy_var_656: ref;
  var vslice_dummy_var_657: ref;
  var vslice_dummy_var_658: i64;
  var vslice_dummy_var_659: i64;
  var vslice_dummy_var_660: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3997} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3999} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4000} vslice_dummy_var_655 := ldv_memset($p6, 0, 4);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} vslice_dummy_var_656 := ldv_memset($p8, 0, 8);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4002} vslice_dummy_var_657 := ldv_memset($p10, 0, 8);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4003} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 4004} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 4005} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4017} ldv_stop();
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $i38 := $M.214;
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4014} vslice_dummy_var_660 := ldv_release_34();
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $M.214 := 1;
    call {:si_unique_call 4015} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 4016} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $i32 := $M.214;
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $p34 := $M.416;
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p0);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4012} vslice_dummy_var_659 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $M.214 := 2;
    call {:si_unique_call 4013} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(2);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $i27 := $M.214;
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $p29 := $M.416;
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p1);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} vslice_dummy_var_658 := pwr_rcvd_beacons_read($p29, $p5, $i30, $p4);
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $M.214 := 2;
    call {:si_unique_call 4011} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(2);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $i18 := $M.214;
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $p20 := $M.415;
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $p21 := $M.416;
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4006} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    $M.453 := $i22;
    call {:si_unique_call 4007} {:cexpr "ldv_retval_78"} boogie_si_record_i32($i22);
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $i23 := $M.453;
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    $M.214 := 2;
    call {:si_unique_call 4008} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(2);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 4009} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_37: ref;

axiom ldv_main_exported_37 == $sub.ref(0, 1084360);

procedure ldv_main_exported_37();
  free requires assertsPassed;
  modifies $M.135, $M.454, $M.215, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_37()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_661: ref;
  var vslice_dummy_var_662: ref;
  var vslice_dummy_var_663: ref;
  var vslice_dummy_var_664: i64;
  var vslice_dummy_var_665: i64;
  var vslice_dummy_var_666: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4018} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4019} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4021} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4022} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4023} vslice_dummy_var_661 := ldv_memset($p6, 0, 8);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} vslice_dummy_var_662 := ldv_memset($p8, 0, 4);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4025} vslice_dummy_var_663 := ldv_memset($p10, 0, 8);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4026} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 4027} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 4028} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} ldv_stop();
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $i38 := $M.215;
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4037} vslice_dummy_var_666 := ldv_release_37();
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    $M.215 := 1;
    call {:si_unique_call 4038} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 4039} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    $i32 := $M.215;
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    $p34 := $M.414;
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4035} vslice_dummy_var_665 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    $M.215 := 2;
    call {:si_unique_call 4036} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $i27 := $M.215;
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $p29 := $M.414;
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} vslice_dummy_var_664 := pwr_wake_on_timer_exp_read($p29, $p5, $i30, $p4);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $M.215 := 2;
    call {:si_unique_call 4034} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    $i18 := $M.215;
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $p20 := $M.413;
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    $p21 := $M.414;
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4029} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $M.454 := $i22;
    call {:si_unique_call 4030} {:cexpr "ldv_retval_79"} boogie_si_record_i32($i22);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $i23 := $M.454;
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    $M.215 := 2;
    call {:si_unique_call 4031} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(2);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 4032} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_43: ref;

axiom ldv_main_exported_43 == $sub.ref(0, 1085392);

procedure ldv_main_exported_43();
  free requires assertsPassed;
  modifies $M.135, $M.455, $M.216, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_43()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_667: ref;
  var vslice_dummy_var_668: ref;
  var vslice_dummy_var_669: ref;
  var vslice_dummy_var_670: i64;
  var vslice_dummy_var_671: i64;
  var vslice_dummy_var_672: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4041} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4042} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4043} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4045} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4046} vslice_dummy_var_667 := ldv_memset($p6, 0, 8);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4047} vslice_dummy_var_668 := ldv_memset($p8, 0, 4);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4048} vslice_dummy_var_669 := ldv_memset($p10, 0, 8);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4049} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 4050} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 4051} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} ldv_stop();
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $i38 := $M.216;
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4060} vslice_dummy_var_672 := ldv_release_43();
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $M.216 := 1;
    call {:si_unique_call 4061} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(1);
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 4062} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i32 := $M.216;
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $p34 := $M.412;
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} vslice_dummy_var_671 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $M.216 := 2;
    call {:si_unique_call 4059} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(2);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $i27 := $M.216;
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $p29 := $M.412;
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4056} vslice_dummy_var_670 := wep_packets_read($p29, $p5, $i30, $p4);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $M.216 := 2;
    call {:si_unique_call 4057} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(2);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $i18 := $M.216;
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $p20 := $M.411;
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $p21 := $M.412;
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4052} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $M.455 := $i22;
    call {:si_unique_call 4053} {:cexpr "ldv_retval_80"} boogie_si_record_i32($i22);
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $i23 := $M.455;
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    $M.216 := 2;
    call {:si_unique_call 4054} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(2);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 4055} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 1086424);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.135, $M.456, $M.217, $M.200, $M.0, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var vslice_dummy_var_673: ref;
  var vslice_dummy_var_674: ref;
  var vslice_dummy_var_675: ref;
  var vslice_dummy_var_676: i64;
  var vslice_dummy_var_677: i64;
  var vslice_dummy_var_678: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4064} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4065} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4066} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4067} $p3 := ldv_init_zalloc(8);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4068} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} vslice_dummy_var_673 := ldv_memset($p6, 0, 8);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4070} vslice_dummy_var_674 := ldv_memset($p8, 0, 4);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4071} vslice_dummy_var_675 := ldv_memset($p10, 0, 8);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4072} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 4073} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 4074} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} ldv_stop();
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $i38 := $M.217;
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4083} vslice_dummy_var_678 := ldv_release_5();
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $M.217 := 1;
    call {:si_unique_call 4084} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i41 := $M.200;
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $M.200 := $i42;
    call {:si_unique_call 4085} {:cexpr "ref_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i32 := $M.217;
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $p34 := $M.410;
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.135, $p2);
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.135, $p1);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} vslice_dummy_var_677 := generic_file_llseek($p34, $i35, $i36);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $M.217 := 2;
    call {:si_unique_call 4082} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $i27 := $M.217;
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    $p29 := $M.410;
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p0);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4079} vslice_dummy_var_676 := rxpipe_rx_prep_beacon_drop_read($p29, $p5, $i30, $p4);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $M.217 := 2;
    call {:si_unique_call 4080} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $i18 := $M.217;
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $p20 := $M.409;
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $p21 := $M.410;
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} $i22 := simple_open($p20, $p21);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $M.456 := $i22;
    call {:si_unique_call 4076} {:cexpr "ldv_retval_81"} boogie_si_record_i32($i22);
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    $i23 := $M.456;
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    $M.217 := 2;
    call {:si_unique_call 4077} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $i25 := $M.200;
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $M.200 := $i26;
    call {:si_unique_call 4078} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 1087456);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $i0 := $M.457;
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.458;
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.459;
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.41;
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4090} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4089} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4088} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4087} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_release_5: ref;

axiom ldv_release_5 == $sub.ref(0, 1088488);

procedure ldv_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4091} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4092} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_43: ref;

axiom ldv_release_43 == $sub.ref(0, 1089520);

procedure ldv_release_43() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_43() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4093} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_37: ref;

axiom ldv_release_37 == $sub.ref(0, 1090552);

procedure ldv_release_37() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_37() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4095} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4096} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_34: ref;

axiom ldv_release_34 == $sub.ref(0, 1091584);

procedure ldv_release_34() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_34() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4097} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4098} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 1092616);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4099} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_38: ref;

axiom ldv_release_38 == $sub.ref(0, 1093648);

procedure ldv_release_38() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_38() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4101} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_8: ref;

axiom ldv_release_8 == $sub.ref(0, 1094680);

procedure ldv_release_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4103} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4104} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_47: ref;

axiom ldv_release_47 == $sub.ref(0, 1095712);

procedure ldv_release_47() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_47() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4105} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4106} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_51: ref;

axiom ldv_release_51 == $sub.ref(0, 1096744);

procedure ldv_release_51() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_51() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4107} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_9: ref;

axiom ldv_release_9 == $sub.ref(0, 1097776);

procedure ldv_release_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4109} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_36: ref;

axiom ldv_release_36 == $sub.ref(0, 1098808);

procedure ldv_release_36() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_36() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4111} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 1099840);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4113} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_6: ref;

axiom ldv_release_6 == $sub.ref(0, 1100872);

procedure ldv_release_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4115} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_13: ref;

axiom ldv_release_13 == $sub.ref(0, 1101904);

procedure ldv_release_13() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_13() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4117} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_23: ref;

axiom ldv_release_23 == $sub.ref(0, 1102936);

procedure ldv_release_23() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_23() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4119} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_46: ref;

axiom ldv_release_46 == $sub.ref(0, 1103968);

procedure ldv_release_46() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_46() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4121} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv___platform_driver_register_16: ref;

axiom ldv___platform_driver_register_16 == $sub.ref(0, 1105000);

procedure ldv___platform_driver_register_16($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.197, $M.136, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_16($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 4124} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    $M.197 := 1;
    call {:si_unique_call 4125} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(1);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} ldv_platform_driver_init_79();
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 1106032);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4127} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_17: ref;

axiom ldv_platform_driver_unregister_17 == $sub.ref(0, 1107064);

procedure ldv_platform_driver_unregister_17($p0: ref);
  free requires assertsPassed;
  modifies $M.197;



implementation ldv_platform_driver_unregister_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} platform_driver_unregister($p0);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    $M.197 := 0;
    call {:si_unique_call 4130} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(0);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 1108096);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_42: ref;

axiom ldv_release_42 == $sub.ref(0, 1109128);

procedure ldv_release_42() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_42() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4131} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_22: ref;

axiom ldv_release_22 == $sub.ref(0, 1110160);

procedure ldv_release_22() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_22() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4133} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_53: ref;

axiom ldv_release_53 == $sub.ref(0, 1111192);

procedure ldv_release_53() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_53() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4135} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_24: ref;

axiom ldv_release_24 == $sub.ref(0, 1112224);

procedure ldv_release_24() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_24() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4137} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_49: ref;

axiom ldv_release_49 == $sub.ref(0, 1113256);

procedure ldv_release_49() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_49() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4139} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_59: ref;

axiom ldv_release_59 == $sub.ref(0, 1114288);

procedure ldv_release_59() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_59() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4141} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_69: ref;

axiom ldv_release_69 == $sub.ref(0, 1115320);

procedure ldv_release_69() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_69() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4143} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_14: ref;

axiom ldv_release_14 == $sub.ref(0, 1116352);

procedure ldv_release_14() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_14() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4145} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_40: ref;

axiom ldv_release_40 == $sub.ref(0, 1117384);

procedure ldv_release_40() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_40() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4147} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_75: ref;

axiom ldv_release_75 == $sub.ref(0, 1118416);

procedure ldv_release_75() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_75() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4149} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_28: ref;

axiom ldv_release_28 == $sub.ref(0, 1119448);

procedure ldv_release_28() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_28() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4151} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_25: ref;

axiom ldv_release_25 == $sub.ref(0, 1120480);

procedure ldv_release_25() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_25() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4153} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_30: ref;

axiom ldv_release_30 == $sub.ref(0, 1121512);

procedure ldv_release_30() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_30() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4155} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4156} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_1: ref;

axiom ldv_release_1 == $sub.ref(0, 1122544);

procedure ldv_release_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4157} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_17: ref;

axiom ldv_release_17 == $sub.ref(0, 1123576);

procedure ldv_release_17() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_17() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4159} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_2: ref;

axiom ldv_release_2 == $sub.ref(0, 1124608);

procedure ldv_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4161} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_68: ref;

axiom ldv_release_68 == $sub.ref(0, 1125640);

procedure ldv_release_68() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_68() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4163} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_70: ref;

axiom ldv_release_70 == $sub.ref(0, 1126672);

procedure ldv_release_70() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_70() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4165} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_67: ref;

axiom ldv_release_67 == $sub.ref(0, 1127704);

procedure ldv_release_67() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_67() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4167} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_54: ref;

axiom ldv_release_54 == $sub.ref(0, 1128736);

procedure ldv_release_54() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_54() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4169} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_62: ref;

axiom ldv_release_62 == $sub.ref(0, 1129768);

procedure ldv_release_62() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_62() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4171} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_19: ref;

axiom ldv_release_19 == $sub.ref(0, 1130800);

procedure ldv_release_19() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_19() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4173} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_76: ref;

axiom ldv_release_76 == $sub.ref(0, 1131832);

procedure ldv_release_76() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_76() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4175} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_45: ref;

axiom ldv_release_45 == $sub.ref(0, 1132864);

procedure ldv_release_45() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_45() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4177} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_66: ref;

axiom ldv_release_66 == $sub.ref(0, 1133896);

procedure ldv_release_66() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_66() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4179} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_73: ref;

axiom ldv_release_73 == $sub.ref(0, 1134928);

procedure ldv_release_73() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_73() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4181} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_56: ref;

axiom ldv_release_56 == $sub.ref(0, 1135960);

procedure ldv_release_56() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_56() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4183} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_60: ref;

axiom ldv_release_60 == $sub.ref(0, 1136992);

procedure ldv_release_60() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_60() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4185} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4186} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_52: ref;

axiom ldv_release_52 == $sub.ref(0, 1138024);

procedure ldv_release_52() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_52() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4187} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4188} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_15: ref;

axiom ldv_release_15 == $sub.ref(0, 1139056);

procedure ldv_release_15() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_15() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4189} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4190} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_12: ref;

axiom ldv_release_12 == $sub.ref(0, 1140088);

procedure ldv_release_12() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_12() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4191} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4192} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_41: ref;

axiom ldv_release_41 == $sub.ref(0, 1141120);

procedure ldv_release_41() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_41() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4193} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_58: ref;

axiom ldv_release_58 == $sub.ref(0, 1142152);

procedure ldv_release_58() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_58() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4195} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4196} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_64: ref;

axiom ldv_release_64 == $sub.ref(0, 1143184);

procedure ldv_release_64() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_64() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4197} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_39: ref;

axiom ldv_release_39 == $sub.ref(0, 1144216);

procedure ldv_release_39() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_39() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4199} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_50: ref;

axiom ldv_release_50 == $sub.ref(0, 1145248);

procedure ldv_release_50() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_50() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4201} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_29: ref;

axiom ldv_release_29 == $sub.ref(0, 1146280);

procedure ldv_release_29() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_29() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4203} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4204} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_65: ref;

axiom ldv_release_65 == $sub.ref(0, 1147312);

procedure ldv_release_65() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_65() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4205} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_77: ref;

axiom ldv_release_77 == $sub.ref(0, 1148344);

procedure ldv_release_77() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_77() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4207} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4208} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_48: ref;

axiom ldv_release_48 == $sub.ref(0, 1149376);

procedure ldv_release_48() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_48() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4209} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_78: ref;

axiom ldv_release_78 == $sub.ref(0, 1150408);

procedure ldv_release_78() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_78() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4211} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_11: ref;

axiom ldv_release_11 == $sub.ref(0, 1151440);

procedure ldv_release_11() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_11() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4213} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_35: ref;

axiom ldv_release_35 == $sub.ref(0, 1152472);

procedure ldv_release_35() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_35() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4215} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_31: ref;

axiom ldv_release_31 == $sub.ref(0, 1153504);

procedure ldv_release_31() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_31() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4217} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_10: ref;

axiom ldv_release_10 == $sub.ref(0, 1154536);

procedure ldv_release_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4219} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_20: ref;

axiom ldv_release_20 == $sub.ref(0, 1155568);

procedure ldv_release_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4221} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_61: ref;

axiom ldv_release_61 == $sub.ref(0, 1156600);

procedure ldv_release_61() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_61() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4223} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_57: ref;

axiom ldv_release_57 == $sub.ref(0, 1157632);

procedure ldv_release_57() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_57() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4225} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_27: ref;

axiom ldv_release_27 == $sub.ref(0, 1158664);

procedure ldv_release_27() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_27() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4227} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_74: ref;

axiom ldv_release_74 == $sub.ref(0, 1159696);

procedure ldv_release_74() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_74() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4229} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_55: ref;

axiom ldv_release_55 == $sub.ref(0, 1160728);

procedure ldv_release_55() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_55() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4231} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_44: ref;

axiom ldv_release_44 == $sub.ref(0, 1161760);

procedure ldv_release_44() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_44() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4233} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_16: ref;

axiom ldv_release_16 == $sub.ref(0, 1162792);

procedure ldv_release_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4235} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_72: ref;

axiom ldv_release_72 == $sub.ref(0, 1163824);

procedure ldv_release_72() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_72() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4237} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_18: ref;

axiom ldv_release_18 == $sub.ref(0, 1164856);

procedure ldv_release_18() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_18() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4239} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_26: ref;

axiom ldv_release_26 == $sub.ref(0, 1165888);

procedure ldv_release_26() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_26() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4241} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_7: ref;

axiom ldv_release_7 == $sub.ref(0, 1166920);

procedure ldv_release_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4243} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_71: ref;

axiom ldv_release_71 == $sub.ref(0, 1167952);

procedure ldv_release_71() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_71() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4245} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_21: ref;

axiom ldv_release_21 == $sub.ref(0, 1168984);

procedure ldv_release_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4247} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_63: ref;

axiom ldv_release_63 == $sub.ref(0, 1170016);

procedure ldv_release_63() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_63() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4249} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_32: ref;

axiom ldv_release_32 == $sub.ref(0, 1171048);

procedure ldv_release_32() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_32() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4251} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4252} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_33: ref;

axiom ldv_release_33 == $sub.ref(0, 1172080);

procedure ldv_release_33() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_33() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4253} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4254} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 1173112);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4255} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 1} true;
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 1174144);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 1175176);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 1176208);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 1177240);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 1178272);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 1179304);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 1180336);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 1181368);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 1182400);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 1183432);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 1184464);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 1185496);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 1186528);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4256} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 4257} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4258} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4259} __VERIFIER_assume($i4);
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 1187560);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 1188592);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 1189624);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 1190656);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4260} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 4261} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4262} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4263} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 4264} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 4265} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4266} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 4267} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 4268} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4269} __VERIFIER_assume($i7);
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4270} __VERIFIER_assume($i11);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 1191688);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 1192720);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4271} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 4272} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4273} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4274} __VERIFIER_assume($i4);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 1193752);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 1194784);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 1195816);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 1196848);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 1197880);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4275} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4276} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4277} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4278} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4279} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 4280} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4281} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4282} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 4283} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4284} __VERIFIER_assume($i7);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4285} __VERIFIER_assume($i11);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 1198912);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 1199944);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 1200976);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 1202008);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 1203040);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 1204072);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 1205104);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 1206136);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 1207168);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4286} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 4288} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4289} __VERIFIER_assume($i10);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 1208200);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4290} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 4291} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4292} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 1209232);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4293} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 4294} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4295} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 1210264);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4296} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 4297} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 1211296);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 1212328);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4298} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4299} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 1213360);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 1214392);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 1215424);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4300} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 4301} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4302} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4304} $p6 := malloc($i5);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 4305} cmdloc_dummy_var_76 := $memset.i8(cmdloc_dummy_var_75, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 1216456);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 1217488);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.220, $M.136, $M.200, $M.51, $M.52, $M.53, $M.54, $M.55, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.50, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.221, $M.222, $M.271, $M.272, $M.241, $M.242, $M.334, $M.335, $M.238, $M.239, $M.313, $M.314, $M.382, $M.383, $M.346, $M.347, $M.250, $M.251, $M.340, $M.341, $M.397, $M.398, $M.301, $M.302, $M.328, $M.329, $M.364, $M.365, $M.425, $M.426, $M.409, $M.410, $M.268, $M.269, $M.316, $M.317, $M.417, $M.418, $M.415, $M.416, $M.304, $M.305, $M.433, $M.434, $M.274, $M.275, $M.367, $M.368, $M.307, $M.308, $M.277, $M.278, $M.295, $M.296, $M.435, $M.436, $M.298, $M.299, $M.310, $M.311, $M.406, $M.407, $M.223, $M.224, $M.256, $M.257, $M.289, $M.290, $M.370, $M.371, $M.437, $M.438, $M.355, $M.356, $M.343, $M.344, $M.394, $M.395, $M.292, $M.293, $M.226, $M.227, $M.349, $M.350, $M.379, $M.380, $M.388, $M.389, $M.358, $M.359, $M.319, $M.320, $M.361, $M.362, $M.373, $M.374, $M.385, $M.386, $M.325, $M.326, $M.337, $M.338, $M.376, $M.377, $M.229, $M.230, $M.411, $M.412, $M.419, $M.420, $M.427, $M.428, $M.235, $M.236, $M.403, $M.404, $M.280, $M.281, $M.265, $M.266, $M.439, $M.440, $M.259, $M.260, $M.286, $M.287, $M.253, $M.254, $M.413, $M.414, $M.352, $M.353, $M.232, $M.233, $M.429, $M.430, $M.431, $M.432, $M.247, $M.248, $M.244, $M.245, $M.262, $M.263, $M.421, $M.422, $M.391, $M.392, $M.331, $M.332, $M.283, $M.284, $M.322, $M.323, $M.423, $M.424, $M.400, $M.401, $M.225, $M.228, $M.231, $M.234, $M.237, $M.240, $M.243, $M.246, $M.249, $M.252, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.282, $M.285, $M.288, $M.291, $M.294, $M.297, $M.300, $M.303, $M.306, $M.309, $M.312, $M.315, $M.318, $M.321, $M.324, $M.327, $M.330, $M.333, $M.336, $M.339, $M.342, $M.345, $M.348, $M.351, $M.354, $M.357, $M.360, $M.363, $M.366, $M.369, $M.372, $M.375, $M.378, $M.381, $M.384, $M.387, $M.390, $M.393, $M.396, $M.399, $M.402, $M.405, $M.408, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.461, $M.41, $M.459, $M.458, $M.457, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.0, $M.47, $M.48, $M.49, $M.2, $M.1, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 4306} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.220 := 0;
    call {:si_unique_call 4307} {:cexpr "probed_79"} boogie_si_record_i32(0);
    $M.136 := $0.ref;
    $M.200 := 0;
    call {:si_unique_call 4308} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.137 := 0;
    call {:si_unique_call 4309} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(0);
    $M.138 := 0;
    call {:si_unique_call 4310} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    $M.139 := 0;
    call {:si_unique_call 4311} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(0);
    $M.140 := 0;
    call {:si_unique_call 4312} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.141 := 0;
    call {:si_unique_call 4313} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(0);
    $M.142 := 0;
    call {:si_unique_call 4314} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 4315} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(0);
    $M.143 := 0;
    call {:si_unique_call 4316} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    $M.144 := 0;
    call {:si_unique_call 4317} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.145 := 0;
    call {:si_unique_call 4318} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(0);
    $M.146 := 0;
    call {:si_unique_call 4319} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.147 := 0;
    call {:si_unique_call 4320} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(0);
    $M.148 := 0;
    call {:si_unique_call 4321} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(0);
    $M.149 := 0;
    call {:si_unique_call 4322} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(0);
    $M.150 := 0;
    call {:si_unique_call 4323} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    $M.151 := 0;
    call {:si_unique_call 4324} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(0);
    $M.152 := 0;
    call {:si_unique_call 4325} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(0);
    $M.153 := 0;
    call {:si_unique_call 4326} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.154 := 0;
    call {:si_unique_call 4327} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.155 := 0;
    call {:si_unique_call 4328} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    $M.156 := 0;
    call {:si_unique_call 4329} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(0);
    $M.157 := 0;
    call {:si_unique_call 4330} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.158 := 0;
    call {:si_unique_call 4331} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(0);
    $M.159 := 0;
    call {:si_unique_call 4332} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(0);
    $M.160 := 0;
    call {:si_unique_call 4333} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(0);
    $M.161 := 0;
    call {:si_unique_call 4334} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(0);
    $M.162 := 0;
    call {:si_unique_call 4335} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    $M.163 := 0;
    call {:si_unique_call 4336} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(0);
    $M.164 := 0;
    call {:si_unique_call 4337} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(0);
    $M.165 := 0;
    call {:si_unique_call 4338} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(0);
    $M.166 := 0;
    call {:si_unique_call 4339} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(0);
    $M.167 := 0;
    call {:si_unique_call 4340} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(0);
    $M.168 := 0;
    call {:si_unique_call 4341} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.169 := 0;
    call {:si_unique_call 4342} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.170 := 0;
    call {:si_unique_call 4343} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(0);
    $M.171 := 0;
    call {:si_unique_call 4344} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(0);
    $M.172 := 0;
    call {:si_unique_call 4345} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(0);
    $M.173 := 0;
    call {:si_unique_call 4346} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(0);
    $M.174 := 0;
    call {:si_unique_call 4347} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(0);
    $M.175 := 0;
    call {:si_unique_call 4348} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(0);
    $M.176 := 0;
    call {:si_unique_call 4349} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(0);
    $M.177 := 0;
    call {:si_unique_call 4350} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.178 := 0;
    call {:si_unique_call 4351} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(0);
    $M.179 := 0;
    call {:si_unique_call 4352} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(0);
    $M.180 := 0;
    call {:si_unique_call 4353} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(0);
    $M.181 := 0;
    call {:si_unique_call 4354} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(0);
    $M.182 := 0;
    call {:si_unique_call 4355} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(0);
    $M.183 := 0;
    call {:si_unique_call 4356} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.184 := 0;
    call {:si_unique_call 4357} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.185 := 0;
    call {:si_unique_call 4358} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.186 := 0;
    call {:si_unique_call 4359} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    $M.187 := 0;
    call {:si_unique_call 4360} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    $M.188 := 0;
    call {:si_unique_call 4361} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    $M.189 := 0;
    call {:si_unique_call 4362} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(0);
    $M.190 := 0;
    call {:si_unique_call 4363} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(0);
    $M.191 := 0;
    call {:si_unique_call 4364} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.192 := 0;
    call {:si_unique_call 4365} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(0);
    $M.193 := 0;
    call {:si_unique_call 4366} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(0);
    $M.194 := 0;
    call {:si_unique_call 4367} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(0);
    $M.195 := 0;
    call {:si_unique_call 4368} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    $M.196 := 0;
    call {:si_unique_call 4369} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(0);
    $M.197 := 0;
    call {:si_unique_call 4370} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(0);
    $M.198 := 0;
    call {:si_unique_call 4371} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    $M.199 := 0;
    call {:si_unique_call 4372} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(0);
    $M.201 := 0;
    call {:si_unique_call 4373} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.202 := 0;
    call {:si_unique_call 4374} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(0);
    $M.203 := 0;
    call {:si_unique_call 4375} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    $M.204 := 0;
    call {:si_unique_call 4376} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.205 := 0;
    call {:si_unique_call 4377} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.206 := 0;
    call {:si_unique_call 4378} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.207 := 0;
    call {:si_unique_call 4379} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(0);
    $M.208 := 0;
    call {:si_unique_call 4380} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.209 := 0;
    call {:si_unique_call 4381} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(0);
    $M.210 := 0;
    call {:si_unique_call 4382} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(0);
    $M.211 := 0;
    call {:si_unique_call 4383} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.212 := 0;
    call {:si_unique_call 4384} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(0);
    $M.213 := 0;
    call {:si_unique_call 4385} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.214 := 0;
    call {:si_unique_call 4386} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(0);
    $M.215 := 0;
    call {:si_unique_call 4387} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(0);
    $M.216 := 0;
    call {:si_unique_call 4388} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(0);
    $M.217 := 0;
    call {:si_unique_call 4389} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.218 := 0;
    call {:si_unique_call 4390} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.219 := 0;
    call {:si_unique_call 4391} {:cexpr "ldv_retval_62"} boogie_si_record_i32(0);
    $M.221 := 0;
    call {:si_unique_call 4392} {:cexpr "ldv_retval_61"} boogie_si_record_i32(0);
    $M.222 := 0;
    call {:si_unique_call 4393} {:cexpr "ldv_retval_65"} boogie_si_record_i32(0);
    $M.271 := $0.ref;
    $M.272 := $0.ref;
    $M.241 := $0.ref;
    $M.242 := $0.ref;
    $M.334 := $0.ref;
    $M.335 := $0.ref;
    $M.238 := $0.ref;
    $M.239 := $0.ref;
    $M.313 := $0.ref;
    $M.314 := $0.ref;
    $M.382 := $0.ref;
    $M.383 := $0.ref;
    $M.346 := $0.ref;
    $M.347 := $0.ref;
    $M.250 := $0.ref;
    $M.251 := $0.ref;
    $M.340 := $0.ref;
    $M.341 := $0.ref;
    $M.397 := $0.ref;
    $M.398 := $0.ref;
    $M.301 := $0.ref;
    $M.302 := $0.ref;
    $M.328 := $0.ref;
    $M.329 := $0.ref;
    $M.364 := $0.ref;
    $M.365 := $0.ref;
    $M.425 := $0.ref;
    $M.426 := $0.ref;
    $M.409 := $0.ref;
    $M.410 := $0.ref;
    $M.268 := $0.ref;
    $M.269 := $0.ref;
    $M.316 := $0.ref;
    $M.317 := $0.ref;
    $M.417 := $0.ref;
    $M.418 := $0.ref;
    $M.415 := $0.ref;
    $M.416 := $0.ref;
    $M.304 := $0.ref;
    $M.305 := $0.ref;
    $M.433 := $0.ref;
    $M.434 := $0.ref;
    $M.274 := $0.ref;
    $M.275 := $0.ref;
    $M.367 := $0.ref;
    $M.368 := $0.ref;
    $M.307 := $0.ref;
    $M.308 := $0.ref;
    $M.277 := $0.ref;
    $M.278 := $0.ref;
    $M.295 := $0.ref;
    $M.296 := $0.ref;
    $M.435 := $0.ref;
    $M.436 := $0.ref;
    $M.298 := $0.ref;
    $M.299 := $0.ref;
    $M.310 := $0.ref;
    $M.311 := $0.ref;
    $M.406 := $0.ref;
    $M.407 := $0.ref;
    $M.223 := $0.ref;
    $M.224 := $0.ref;
    $M.256 := $0.ref;
    $M.257 := $0.ref;
    $M.289 := $0.ref;
    $M.290 := $0.ref;
    $M.370 := $0.ref;
    $M.371 := $0.ref;
    $M.437 := $0.ref;
    $M.438 := $0.ref;
    $M.355 := $0.ref;
    $M.356 := $0.ref;
    $M.343 := $0.ref;
    $M.344 := $0.ref;
    $M.394 := $0.ref;
    $M.395 := $0.ref;
    $M.292 := $0.ref;
    $M.293 := $0.ref;
    $M.226 := $0.ref;
    $M.227 := $0.ref;
    $M.349 := $0.ref;
    $M.350 := $0.ref;
    $M.379 := $0.ref;
    $M.380 := $0.ref;
    $M.388 := $0.ref;
    $M.389 := $0.ref;
    $M.358 := $0.ref;
    $M.359 := $0.ref;
    $M.319 := $0.ref;
    $M.320 := $0.ref;
    $M.361 := $0.ref;
    $M.362 := $0.ref;
    $M.373 := $0.ref;
    $M.374 := $0.ref;
    $M.385 := $0.ref;
    $M.386 := $0.ref;
    $M.325 := $0.ref;
    $M.326 := $0.ref;
    $M.337 := $0.ref;
    $M.338 := $0.ref;
    $M.376 := $0.ref;
    $M.377 := $0.ref;
    $M.229 := $0.ref;
    $M.230 := $0.ref;
    $M.411 := $0.ref;
    $M.412 := $0.ref;
    $M.419 := $0.ref;
    $M.420 := $0.ref;
    $M.427 := $0.ref;
    $M.428 := $0.ref;
    $M.235 := $0.ref;
    $M.236 := $0.ref;
    $M.403 := $0.ref;
    $M.404 := $0.ref;
    $M.280 := $0.ref;
    $M.281 := $0.ref;
    $M.265 := $0.ref;
    $M.266 := $0.ref;
    $M.439 := $0.ref;
    $M.440 := $0.ref;
    $M.259 := $0.ref;
    $M.260 := $0.ref;
    $M.286 := $0.ref;
    $M.287 := $0.ref;
    $M.253 := $0.ref;
    $M.254 := $0.ref;
    $M.413 := $0.ref;
    $M.414 := $0.ref;
    $M.352 := $0.ref;
    $M.353 := $0.ref;
    $M.232 := $0.ref;
    $M.233 := $0.ref;
    $M.429 := $0.ref;
    $M.430 := $0.ref;
    $M.431 := $0.ref;
    $M.432 := $0.ref;
    $M.247 := $0.ref;
    $M.248 := $0.ref;
    $M.244 := $0.ref;
    $M.245 := $0.ref;
    $M.262 := $0.ref;
    $M.263 := $0.ref;
    $M.421 := $0.ref;
    $M.422 := $0.ref;
    $M.391 := $0.ref;
    $M.392 := $0.ref;
    $M.331 := $0.ref;
    $M.332 := $0.ref;
    $M.283 := $0.ref;
    $M.284 := $0.ref;
    $M.322 := $0.ref;
    $M.323 := $0.ref;
    $M.423 := $0.ref;
    $M.424 := $0.ref;
    $M.400 := $0.ref;
    $M.401 := $0.ref;
    $M.225 := 0;
    call {:si_unique_call 4394} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.228 := 0;
    call {:si_unique_call 4395} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.231 := 0;
    call {:si_unique_call 4396} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.234 := 0;
    call {:si_unique_call 4397} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.237 := 0;
    call {:si_unique_call 4398} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.240 := 0;
    call {:si_unique_call 4399} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.243 := 0;
    call {:si_unique_call 4400} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.246 := 0;
    call {:si_unique_call 4401} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.249 := 0;
    call {:si_unique_call 4402} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.252 := 0;
    call {:si_unique_call 4403} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.255 := 0;
    call {:si_unique_call 4404} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.258 := 0;
    call {:si_unique_call 4405} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.261 := 0;
    call {:si_unique_call 4406} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.264 := 0;
    call {:si_unique_call 4407} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.267 := 0;
    call {:si_unique_call 4408} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.270 := 0;
    call {:si_unique_call 4409} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.273 := 0;
    call {:si_unique_call 4410} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.276 := 0;
    call {:si_unique_call 4411} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.279 := 0;
    call {:si_unique_call 4412} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.282 := 0;
    call {:si_unique_call 4413} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.285 := 0;
    call {:si_unique_call 4414} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.288 := 0;
    call {:si_unique_call 4415} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.291 := 0;
    call {:si_unique_call 4416} {:cexpr "ldv_retval_23"} boogie_si_record_i32(0);
    $M.294 := 0;
    call {:si_unique_call 4417} {:cexpr "ldv_retval_24"} boogie_si_record_i32(0);
    $M.297 := 0;
    call {:si_unique_call 4418} {:cexpr "ldv_retval_25"} boogie_si_record_i32(0);
    $M.300 := 0;
    call {:si_unique_call 4419} {:cexpr "ldv_retval_26"} boogie_si_record_i32(0);
    $M.303 := 0;
    call {:si_unique_call 4420} {:cexpr "ldv_retval_27"} boogie_si_record_i32(0);
    $M.306 := 0;
    call {:si_unique_call 4421} {:cexpr "ldv_retval_28"} boogie_si_record_i32(0);
    $M.309 := 0;
    call {:si_unique_call 4422} {:cexpr "ldv_retval_29"} boogie_si_record_i32(0);
    $M.312 := 0;
    call {:si_unique_call 4423} {:cexpr "ldv_retval_30"} boogie_si_record_i32(0);
    $M.315 := 0;
    call {:si_unique_call 4424} {:cexpr "ldv_retval_31"} boogie_si_record_i32(0);
    $M.318 := 0;
    call {:si_unique_call 4425} {:cexpr "ldv_retval_32"} boogie_si_record_i32(0);
    $M.321 := 0;
    call {:si_unique_call 4426} {:cexpr "ldv_retval_33"} boogie_si_record_i32(0);
    $M.324 := 0;
    call {:si_unique_call 4427} {:cexpr "ldv_retval_34"} boogie_si_record_i32(0);
    $M.327 := 0;
    call {:si_unique_call 4428} {:cexpr "ldv_retval_35"} boogie_si_record_i32(0);
    $M.330 := 0;
    call {:si_unique_call 4429} {:cexpr "ldv_retval_36"} boogie_si_record_i32(0);
    $M.333 := 0;
    call {:si_unique_call 4430} {:cexpr "ldv_retval_37"} boogie_si_record_i32(0);
    $M.336 := 0;
    call {:si_unique_call 4431} {:cexpr "ldv_retval_38"} boogie_si_record_i32(0);
    $M.339 := 0;
    call {:si_unique_call 4432} {:cexpr "ldv_retval_39"} boogie_si_record_i32(0);
    $M.342 := 0;
    call {:si_unique_call 4433} {:cexpr "ldv_retval_40"} boogie_si_record_i32(0);
    $M.345 := 0;
    call {:si_unique_call 4434} {:cexpr "ldv_retval_41"} boogie_si_record_i32(0);
    $M.348 := 0;
    call {:si_unique_call 4435} {:cexpr "ldv_retval_42"} boogie_si_record_i32(0);
    $M.351 := 0;
    call {:si_unique_call 4436} {:cexpr "ldv_retval_43"} boogie_si_record_i32(0);
    $M.354 := 0;
    call {:si_unique_call 4437} {:cexpr "ldv_retval_44"} boogie_si_record_i32(0);
    $M.357 := 0;
    call {:si_unique_call 4438} {:cexpr "ldv_retval_45"} boogie_si_record_i32(0);
    $M.360 := 0;
    call {:si_unique_call 4439} {:cexpr "ldv_retval_46"} boogie_si_record_i32(0);
    $M.363 := 0;
    call {:si_unique_call 4440} {:cexpr "ldv_retval_47"} boogie_si_record_i32(0);
    $M.366 := 0;
    call {:si_unique_call 4441} {:cexpr "ldv_retval_48"} boogie_si_record_i32(0);
    $M.369 := 0;
    call {:si_unique_call 4442} {:cexpr "ldv_retval_49"} boogie_si_record_i32(0);
    $M.372 := 0;
    call {:si_unique_call 4443} {:cexpr "ldv_retval_50"} boogie_si_record_i32(0);
    $M.375 := 0;
    call {:si_unique_call 4444} {:cexpr "ldv_retval_51"} boogie_si_record_i32(0);
    $M.378 := 0;
    call {:si_unique_call 4445} {:cexpr "ldv_retval_52"} boogie_si_record_i32(0);
    $M.381 := 0;
    call {:si_unique_call 4446} {:cexpr "ldv_retval_53"} boogie_si_record_i32(0);
    $M.384 := 0;
    call {:si_unique_call 4447} {:cexpr "ldv_retval_54"} boogie_si_record_i32(0);
    $M.387 := 0;
    call {:si_unique_call 4448} {:cexpr "ldv_retval_55"} boogie_si_record_i32(0);
    $M.390 := 0;
    call {:si_unique_call 4449} {:cexpr "ldv_retval_56"} boogie_si_record_i32(0);
    $M.393 := 0;
    call {:si_unique_call 4450} {:cexpr "ldv_retval_57"} boogie_si_record_i32(0);
    $M.396 := 0;
    call {:si_unique_call 4451} {:cexpr "ldv_retval_58"} boogie_si_record_i32(0);
    $M.399 := 0;
    call {:si_unique_call 4452} {:cexpr "ldv_retval_59"} boogie_si_record_i32(0);
    $M.402 := 0;
    call {:si_unique_call 4453} {:cexpr "ldv_retval_60"} boogie_si_record_i32(0);
    $M.405 := 0;
    call {:si_unique_call 4454} {:cexpr "ldv_retval_63"} boogie_si_record_i32(0);
    $M.408 := 0;
    call {:si_unique_call 4455} {:cexpr "ldv_retval_64"} boogie_si_record_i32(0);
    $M.441 := 0;
    call {:si_unique_call 4456} {:cexpr "ldv_retval_66"} boogie_si_record_i32(0);
    $M.442 := 0;
    call {:si_unique_call 4457} {:cexpr "ldv_retval_67"} boogie_si_record_i32(0);
    $M.443 := 0;
    call {:si_unique_call 4458} {:cexpr "ldv_retval_68"} boogie_si_record_i32(0);
    $M.444 := 0;
    call {:si_unique_call 4459} {:cexpr "ldv_retval_69"} boogie_si_record_i32(0);
    $M.445 := 0;
    call {:si_unique_call 4460} {:cexpr "ldv_retval_70"} boogie_si_record_i32(0);
    $M.446 := 0;
    call {:si_unique_call 4461} {:cexpr "ldv_retval_71"} boogie_si_record_i32(0);
    $M.447 := 0;
    call {:si_unique_call 4462} {:cexpr "ldv_retval_72"} boogie_si_record_i32(0);
    $M.448 := 0;
    call {:si_unique_call 4463} {:cexpr "ldv_retval_73"} boogie_si_record_i32(0);
    $M.449 := 0;
    call {:si_unique_call 4464} {:cexpr "ldv_retval_74"} boogie_si_record_i32(0);
    $M.450 := 0;
    call {:si_unique_call 4465} {:cexpr "ldv_retval_75"} boogie_si_record_i32(0);
    $M.451 := 0;
    call {:si_unique_call 4466} {:cexpr "ldv_retval_76"} boogie_si_record_i32(0);
    $M.452 := 0;
    call {:si_unique_call 4467} {:cexpr "ldv_retval_77"} boogie_si_record_i32(0);
    $M.453 := 0;
    call {:si_unique_call 4468} {:cexpr "ldv_retval_78"} boogie_si_record_i32(0);
    $M.454 := 0;
    call {:si_unique_call 4469} {:cexpr "ldv_retval_79"} boogie_si_record_i32(0);
    $M.455 := 0;
    call {:si_unique_call 4470} {:cexpr "ldv_retval_80"} boogie_si_record_i32(0);
    $M.456 := 0;
    call {:si_unique_call 4471} {:cexpr "ldv_retval_81"} boogie_si_record_i32(0);
    $M.461 := $store.i8($M.461, __mod_platform__wl12xx_id_table_device_table, 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.461 := $store.i64($M.461, $add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.461 := $store.i8($M.461, $add.ref($add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.461 := $store.i64($M.461, $add.ref($add.ref($add.ref(__mod_platform__wl12xx_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.41 := 1;
    call {:si_unique_call 4472} {:cexpr "ldv_mutex_mutex_of_wl1271"} boogie_si_record_i32(1);
    $M.459 := 1;
    call {:si_unique_call 4473} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.458 := 1;
    call {:si_unique_call 4474} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.457 := 1;
    call {:si_unique_call 4475} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.462 := $store.ref($M.462, rxpipe_tx_xfr_host_int_trig_rx_data_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rxpipe_tx_xfr_host_int_trig_rx_data_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rxpipe_tx_xfr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rxpipe_missed_beacon_host_int_trig_rx_data_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rxpipe_missed_beacon_host_int_trig_rx_data_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rxpipe_missed_beacon_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rxpipe_beacon_buffer_thres_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rxpipe_descr_host_int_trig_rx_data_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rxpipe_descr_host_int_trig_rx_data_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rxpipe_descr_host_int_trig_rx_data_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rxpipe_rx_prep_beacon_drop_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rxpipe_rx_prep_beacon_drop_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rxpipe_rx_prep_beacon_drop_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_upsd_utilization_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_upsd_utilization_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_upsd_utilization_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_pspoll_utilization_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_pspoll_utilization_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_pspoll_utilization_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_pspoll_max_apturn_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_pspoll_max_apturn_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_pspoll_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_upsd_max_apturn_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_upsd_max_apturn_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_upsd_max_apturn_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_upsd_max_sptime_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_upsd_max_sptime_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_upsd_max_sptime_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_upsd_timeouts_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_upsd_timeouts_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_upsd_timeouts_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, ps_pspoll_timeouts_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), ps_pspoll_timeouts_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(ps_pspoll_timeouts_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_tx_stuck_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_tx_stuck_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_tx_stuck_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_phy_transmit_error_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_phy_transmit_error_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_phy_transmit_error_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_oom_late_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_oom_late_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_oom_late_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_rx_pool_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_rx_pool_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_rx_pool_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_rx_mem_empty_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_rx_mem_empty_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_rx_mem_empty_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_rx_mismatch_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_rx_mismatch_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_rx_mismatch_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_calibration_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_calibration_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_calibration_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, event_heart_beat_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), event_heart_beat_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(event_heart_beat_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, aes_decrypt_interrupt_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), aes_decrypt_interrupt_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(aes_decrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, aes_encrypt_interrupt_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), aes_encrypt_interrupt_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(aes_encrypt_interrupt_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, aes_decrypt_packets_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), aes_decrypt_packets_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(aes_decrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, aes_encrypt_packets_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), aes_encrypt_packets_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(aes_encrypt_packets_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, aes_decrypt_fail_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), aes_decrypt_fail_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(aes_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, aes_encrypt_fail_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), aes_encrypt_fail_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(aes_encrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, mic_calc_failure_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), mic_calc_failure_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(mic_calc_failure_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, mic_rx_pkts_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), mic_rx_pkts_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(mic_rx_pkts_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_rcvd_awake_beacons_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_rcvd_awake_beacons_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_rcvd_awake_beacons_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_fix_tsf_ps_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_fix_tsf_ps_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_fix_tsf_ps_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_disable_ps_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_disable_ps_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_disable_ps_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_enable_ps_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_enable_ps_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_enable_ps_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_power_save_off_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_power_save_off_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_power_save_off_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_rcvd_beacons_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_rcvd_beacons_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_rcvd_beacons_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_tx_without_ps_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_tx_without_ps_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_tx_without_ps_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_tx_with_ps_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_tx_with_ps_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_tx_with_ps_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_wake_on_timer_exp_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_wake_on_timer_exp_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_wake_on_timer_exp_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_wake_on_host_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_wake_on_host_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_wake_on_host_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_missing_bcns_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_missing_bcns_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_missing_bcns_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_elp_enter_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_elp_enter_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_elp_enter_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, pwr_ps_enter_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), pwr_ps_enter_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(pwr_ps_enter_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, wep_interrupt_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), wep_interrupt_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(wep_interrupt_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, wep_packets_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), wep_packets_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(wep_packets_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, wep_decrypt_fail_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), wep_decrypt_fail_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(wep_decrypt_fail_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, wep_key_not_found_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), wep_key_not_found_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(wep_key_not_found_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, wep_default_key_count_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), wep_default_key_count_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(wep_default_key_count_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, wep_addr_key_count_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), wep_addr_key_count_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(wep_addr_key_count_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_low_rssi_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_low_rssi_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_low_rssi_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_wakeups_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_wakeups_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_wakeups_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_pci_pm_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_pci_pm_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_pci_pm_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_host_acknowledges_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_host_acknowledges_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_host_acknowledges_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_hw_pm_mode_changes_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_hw_pm_mode_changes_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_hw_pm_mode_changes_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_rx_procs_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_rx_procs_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_rx_procs_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_commands_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_commands_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_commands_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_tx_exch_complete_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_tx_exch_complete_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_tx_exch_complete_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_dma1_done_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_dma1_done_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_dma1_done_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_dma0_done_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_dma0_done_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_dma0_done_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_decrypt_done_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_decrypt_done_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_decrypt_done_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_tx_procs_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_tx_procs_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_tx_procs_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_irqs_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_irqs_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_irqs_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_rx_rdys_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_rx_rdys_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_rx_rdys_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_rx_mem_overflow_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_rx_mem_overflow_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_rx_mem_overflow_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_rx_headers_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_rx_headers_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_rx_headers_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_fiqs_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_fiqs_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_fiqs_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, isr_cmd_cmplt_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), isr_cmd_cmplt_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(isr_cmd_cmplt_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, dma_tx_errors_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), dma_tx_errors_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(dma_tx_errors_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, dma_tx_requested_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), dma_tx_requested_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(dma_tx_requested_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, dma_rx_errors_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), dma_rx_errors_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(dma_rx_errors_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, dma_rx_requested_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), dma_rx_requested_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(dma_rx_requested_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_reset_counter_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_reset_counter_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_reset_counter_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_path_reset_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_path_reset_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_path_reset_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_xfr_hint_trig_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_xfr_hint_trig_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_xfr_hint_trig_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_fcs_err_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_fcs_err_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_fcs_err_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_dropped_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_dropped_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_dropped_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_hw_stuck_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_hw_stuck_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_hw_stuck_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_hdr_overflow_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_hdr_overflow_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_hdr_overflow_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, rx_out_of_mem_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), rx_out_of_mem_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(rx_out_of_mem_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.462 := $store.ref($M.462, tx_internal_desc_overflow_ops, $0.ref);
    $M.463 := $store.ref($M.463, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), generic_file_llseek);
    $M.464 := $store.ref($M.464, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), tx_internal_desc_overflow_read);
    $M.465 := $store.ref($M.465, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.466 := $store.ref($M.466, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.467 := $store.ref($M.467, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.468 := $store.ref($M.468, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.469 := $store.ref($M.469, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.470 := $store.ref($M.470, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.471 := $store.ref($M.471, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.472 := $store.ref($M.472, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.473 := $store.ref($M.473, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.474 := $store.ref($M.474, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), simple_open);
    $M.475 := $store.ref($M.475, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.476 := $store.ref($M.476, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.477 := $store.ref($M.477, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.478 := $store.ref($M.478, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.479 := $store.ref($M.479, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.480 := $store.ref($M.480, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.481 := $store.ref($M.481, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.482 := $store.ref($M.482, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.483 := $store.ref($M.483, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.484 := $store.ref($M.484, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.485 := $store.ref($M.485, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.486 := $store.ref($M.486, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.487 := $store.ref($M.487, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.488 := $store.ref($M.488, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.489 := $store.ref($M.489, $add.ref($add.ref(tx_internal_desc_overflow_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.490 := $store.i8($M.490, wl12xx_id_table, 119);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 108);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 49);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 50);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 120);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 120);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.490 := $store.i64($M.490, $add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.490 := $store.i8($M.490, $add.ref($add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.490 := $store.i64($M.490, $add.ref($add.ref($add.ref(wl12xx_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, wl12xx_ptable, 96192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1)), 34816);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(4, 1)), 3145728);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85952);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 262144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), $mul.ref(0, 1)), 40960);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), $mul.ref(4, 1)), 3145728);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), 3147000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), $mul.ref(4, 1)), 263172);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85952);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 262144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), $mul.ref(0, 1)), 34816);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), $mul.ref(4, 1)), 3145728);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 85952);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 262144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), $mul.ref(0, 1)), 24576);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), $mul.ref(4, 1)), 3211264);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ptable, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.ref($M.0, wl12xx_ops, wl12xx_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(8, 1)), wl12xx_identify_chip);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(24, 1)), wl12xx_boot);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(32, 1)), wl12xx_plt_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(40, 1)), wl12xx_trigger_cmd);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(48, 1)), wl12xx_ack_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(56, 1)), wl12xx_wait_for_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(64, 1)), wl12xx_process_mailbox_events);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(72, 1)), wl12xx_calc_tx_blocks);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(80, 1)), wl12xx_set_tx_desc_blocks);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(88, 1)), wl12xx_set_tx_desc_data_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(96, 1)), wl12xx_get_rx_buf_align);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(112, 1)), wl12xx_get_rx_packet_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(120, 1)), wl12xx_tx_delayed_compl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(136, 1)), wl12xx_hw_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(152, 1)), wl12xx_convert_fw_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(160, 1)), wl12xx_sta_get_ap_rate_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(168, 1)), wl12xx_get_pg_ver);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(176, 1)), wl12xx_get_mac);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(184, 1)), wl12xx_set_tx_desc_csum);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(208, 1)), wl12xx_debugfs_add_files);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(224, 1)), wl12xx_scan_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(232, 1)), wl12xx_scan_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(240, 1)), wl12xx_sched_scan_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(248, 1)), wl12xx_scan_sched_scan_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(256, 1)), wl12xx_get_spare_blocks);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(264, 1)), wl12xx_set_key);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(272, 1)), wl12xx_cmd_channel_switch);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(296, 1)), wl12xx_set_peer_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(304, 1)), wl12xx_convert_hwaddr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(312, 1)), wl12xx_lnk_high_prio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(320, 1)), wl12xx_lnk_low_prio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_ops, $mul.ref(0, 392)), $mul.ref(384, 1)), $0.ref);
    $M.47 := $store.i32($M.47, wl12xx_tcxoclock_table, 16368000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(0, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(0, 8)), $mul.ref(5, 1)), 4);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(0, 1)), 16800000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(5, 1)), 6);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(0, 1)), 19200000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(5, 1)), 0);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(0, 1)), 26000000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(5, 1)), 1);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(0, 1)), 32736000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(5, 1)), 5);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(0, 1)), 33600000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(5, 1)), 7);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(0, 1)), 38400000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(5, 1)), 2);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(0, 1)), 52000000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(5, 1)), 3);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(0, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(4, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_tcxoclock_table, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(5, 1)), 0);
    $M.2 := $0.ref;
    $M.47 := $store.i32($M.47, wl12xx_refclock_table, 19200000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(0, 8)), $mul.ref(5, 1)), 0);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(1, 8)), $mul.ref(0, 1)), 26000000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(1, 8)), $mul.ref(4, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(1, 8)), $mul.ref(5, 1)), 1);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(2, 8)), $mul.ref(0, 1)), 26000000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(2, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(2, 8)), $mul.ref(5, 1)), 5);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(3, 8)), $mul.ref(0, 1)), 38400000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(3, 8)), $mul.ref(4, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(3, 8)), $mul.ref(5, 1)), 2);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(4, 8)), $mul.ref(0, 1)), 38400000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(4, 8)), $mul.ref(4, 1)), 1);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(4, 8)), $mul.ref(5, 1)), 4);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(5, 8)), $mul.ref(0, 1)), 52000000);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(5, 8)), $mul.ref(4, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(5, 8)), $mul.ref(5, 1)), 3);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(6, 8)), $mul.ref(0, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(6, 8)), $mul.ref(4, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(wl12xx_refclock_table, $mul.ref(0, 56)), $mul.ref(6, 8)), $mul.ref(5, 1)), 0);
    $M.1 := $0.ref;
    $M.0 := $store.i8($M.0, wl12xx_default_priv_conf, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(2, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(3, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(6, 1)), 22);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_default_priv_conf, $mul.ref(0, 33)), $mul.ref(25, 1)), $mul.ref(7, 1)), 27);
    $M.0 := $store.i32($M.0, wl12xx_conf, 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 4)), 180);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 4)), 180);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 4)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 4)), 80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 4)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 4)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 4)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 4)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 4)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 4)), 35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 4)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 4)), 35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 4)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 4)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 4)), 28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 4)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 4)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 4)), 75);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 4)), 15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 4)), 27);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 4)), 17);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 4)), 170);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 4)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 4)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 4)), 800);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 4)), 200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 4)), 200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 4)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 4)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 4)), 5000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 4)), 1200);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 4)), 1000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 4)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 4)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 4)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 4)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 4)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 4)), 30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 4)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 4)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 4)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 4)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 4)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(268, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(0, 1)), 512000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(8, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(10, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(12, 1)), 2353);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(16, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(20, 1)), 600);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(272, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(4, 1)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(4, 1)), $mul.ref(5, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(4, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(12, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(0, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(0, 8)), $mul.ref(1, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(0, 8)), $mul.ref(2, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(0, 8)), $mul.ref(4, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(0, 8)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(1, 8)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(1, 8)), $mul.ref(1, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(1, 8)), $mul.ref(2, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(1, 8)), $mul.ref(4, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(1, 8)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(2, 8)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(2, 8)), $mul.ref(1, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(2, 8)), $mul.ref(2, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(2, 8)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(2, 8)), $mul.ref(6, 1)), 3008);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(3, 8)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(3, 8)), $mul.ref(1, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(3, 8)), $mul.ref(2, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(3, 8)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(14, 1)), $mul.ref(3, 8)), $mul.ref(6, 1)), 1504);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(46, 1)), 100);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(48, 1)), 300);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(50, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(0, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(1, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(2, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(3, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(4, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(5, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(6, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(8, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(52, 1)), $mul.ref(7, 16)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(180, 1)), 2352);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(182, 1)), 700);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(184, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(188, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(192, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(196, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(197, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(200, 1)), 5000);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(204, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(296, 1)), $mul.ref(205, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(5, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(0, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(0, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(1, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(0, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(2, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(3, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(4, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(5, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(6, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(7, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(8, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(9, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(10, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(11, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(12, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(13, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(14, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(15, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(16, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(17, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(18, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(19, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(20, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(21, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(22, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(23, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(24, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(25, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(26, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(27, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(28, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(29, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(30, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(2, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(2, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(6, 1)), $mul.ref(31, 8)), $mul.ref(6, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(264, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(268, 1)), 400);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(272, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(276, 1)), 20000);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(280, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(281, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(282, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(282, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(282, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(282, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(286, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(287, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(288, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(289, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(290, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(292, 1)), 1500);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(294, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(296, 1)), 55000);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(300, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(301, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(504, 1)), $mul.ref(302, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(808, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(808, 1)), $mul.ref(4, 1)), 50000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(816, 1)), $mul.ref(0, 1)), 5000);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(816, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(824, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(824, 1)), $mul.ref(2, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(824, 1)), $mul.ref(3, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(824, 1)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(824, 1)), $mul.ref(5, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(0, 1)), 7500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(4, 1)), 30000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(8, 1)), 25000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(12, 1)), 50000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(16, 1)), 100000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(20, 1)), 150000);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(832, 1)), $mul.ref(28, 1)), 50000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(0, 1)), 7500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(4, 1)), 22500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(8, 1)), 2000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(12, 1)), 350);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(16, 1)), 100000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(20, 1)), 150000);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(25, 1)), $sub.i8(0, 90));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(864, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(892, 1)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(892, 1)), $mul.ref(1, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(892, 1)), $mul.ref(2, 1)), 10000);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(892, 1)), $mul.ref(4, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(2, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(3, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(5, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(6, 1)), 22);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(898, 1)), $mul.ref(7, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(2, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(3, 1)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(4, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(6, 1)), 148);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(12, 1)), $sub.i16(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(908, 1)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(924, 1)), $mul.ref(0, 1)), 150);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(924, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(924, 1)), $mul.ref(5, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(924, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(932, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(932, 1)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(932, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(932, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(932, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(932, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(0, 1)), 32000);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(2, 1)), 8192);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(4, 1)), 2048);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(6, 1)), 4096);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(8, 1)), 8100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(10, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(11, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(12, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(13, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(15, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(16, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(17, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(18, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(938, 1)), $mul.ref(19, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(5, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(7, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(8, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(9, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(10, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(11, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(12, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(972, 1)), $mul.ref(13, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(988, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_conf, $mul.ref(0, 992)), $mul.ref(988, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i16($M.0, wl12xx_ht_cap, 304);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(4, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(10, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(12, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wl12xx_ht_cap, $mul.ref(0, 22)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, wl12xx_rate_to_idx_5ghz, 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(1, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(2, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(3, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(5, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(7, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(9, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(10, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(11, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(12, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(14, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(15, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(16, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(17, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(19, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(20, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_5ghz, $mul.ref(0, 22)), $mul.ref(21, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, wl12xx_rate_to_idx_2ghz, 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(1, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(2, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(3, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(5, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(7, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(9, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(10, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(11, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(12, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(14, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(15, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(16, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(17, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(18, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(19, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(20, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(wl12xx_rate_to_idx_2ghz, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.ref($M.0, wl12xx_band_rate_to_idx, wl12xx_rate_to_idx_2ghz);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wl12xx_band_rate_to_idx, $mul.ref(0, 16)), $mul.ref(1, 8)), wl12xx_rate_to_idx_5ghz);
    $M.0 := $store.i16($M.0, wl12xx_iface_limits, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_limits, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_limits, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_limits, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1)), 776);
    $M.0 := $store.ref($M.0, wl12xx_iface_combinations, wl12xx_iface_limits);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_combinations, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(8, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_combinations, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(12, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_combinations, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(14, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_combinations, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_combinations, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wl12xx_iface_combinations, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i32($M.0, wl12xx_rtable, 3147780);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(1, 4)), 3146984);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(2, 4)), 3146992);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(3, 4)), 3167752);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(4, 4)), 3167756);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(5, 4)), 3146868);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(6, 4)), 3146972);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(7, 4)), 3167768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(8, 4)), 3167860);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(9, 4)), 264116);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(10, 4)), 3145752);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(11, 4)), 3145736);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wl12xx_rtable, $mul.ref(0, 52)), $mul.ref(12, 4)), 126912);
    $M.514 := $store.i8($M.514, .str.132, 49);
    $M.514 := $store.i8($M.514, $add.ref($add.ref(.str.132, $mul.ref(0, 5)), $mul.ref(1, 1)), 57);
    $M.514 := $store.i8($M.514, $add.ref($add.ref(.str.132, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.514 := $store.i8($M.514, $add.ref($add.ref(.str.132, $mul.ref(0, 5)), $mul.ref(3, 1)), 50);
    $M.514 := $store.i8($M.514, $add.ref($add.ref(.str.132, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.515 := $store.i8($M.515, .str.133, 50);
    $M.515 := $store.i8($M.515, $add.ref($add.ref(.str.133, $mul.ref(0, 3)), $mul.ref(1, 1)), 54);
    $M.515 := $store.i8($M.515, $add.ref($add.ref(.str.133, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.516 := $store.i8($M.516, .str.134, 50);
    $M.516 := $store.i8($M.516, $add.ref($add.ref(.str.134, $mul.ref(0, 4)), $mul.ref(1, 1)), 54);
    $M.516 := $store.i8($M.516, $add.ref($add.ref(.str.134, $mul.ref(0, 4)), $mul.ref(2, 1)), 120);
    $M.516 := $store.i8($M.516, $add.ref($add.ref(.str.134, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.517 := $store.i8($M.517, .str.135, 51);
    $M.517 := $store.i8($M.517, $add.ref($add.ref(.str.135, $mul.ref(0, 5)), $mul.ref(1, 1)), 56);
    $M.517 := $store.i8($M.517, $add.ref($add.ref(.str.135, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.517 := $store.i8($M.517, $add.ref($add.ref(.str.135, $mul.ref(0, 5)), $mul.ref(3, 1)), 52);
    $M.517 := $store.i8($M.517, $add.ref($add.ref(.str.135, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.518 := $store.i8($M.518, .str.136, 51);
    $M.518 := $store.i8($M.518, $add.ref($add.ref(.str.136, $mul.ref(0, 6)), $mul.ref(1, 1)), 56);
    $M.518 := $store.i8($M.518, $add.ref($add.ref(.str.136, $mul.ref(0, 6)), $mul.ref(2, 1)), 46);
    $M.518 := $store.i8($M.518, $add.ref($add.ref(.str.136, $mul.ref(0, 6)), $mul.ref(3, 1)), 52);
    $M.518 := $store.i8($M.518, $add.ref($add.ref(.str.136, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.518 := $store.i8($M.518, $add.ref($add.ref(.str.136, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.519 := $store.i8($M.519, .str.137, 53);
    $M.519 := $store.i8($M.519, $add.ref($add.ref(.str.137, $mul.ref(0, 3)), $mul.ref(1, 1)), 50);
    $M.519 := $store.i8($M.519, $add.ref($add.ref(.str.137, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.520 := $store.i8($M.520, .str.140, 49);
    $M.520 := $store.i8($M.520, $add.ref($add.ref(.str.140, $mul.ref(0, 7)), $mul.ref(1, 1)), 54);
    $M.520 := $store.i8($M.520, $add.ref($add.ref(.str.140, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.520 := $store.i8($M.520, $add.ref($add.ref(.str.140, $mul.ref(0, 7)), $mul.ref(3, 1)), 51);
    $M.520 := $store.i8($M.520, $add.ref($add.ref(.str.140, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.520 := $store.i8($M.520, $add.ref($add.ref(.str.140, $mul.ref(0, 7)), $mul.ref(5, 1)), 56);
    $M.520 := $store.i8($M.520, $add.ref($add.ref(.str.140, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.521 := $store.i8($M.521, .str.141, 51);
    $M.521 := $store.i8($M.521, $add.ref($add.ref(.str.141, $mul.ref(0, 7)), $mul.ref(1, 1)), 50);
    $M.521 := $store.i8($M.521, $add.ref($add.ref(.str.141, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.521 := $store.i8($M.521, $add.ref($add.ref(.str.141, $mul.ref(0, 7)), $mul.ref(3, 1)), 55);
    $M.521 := $store.i8($M.521, $add.ref($add.ref(.str.141, $mul.ref(0, 7)), $mul.ref(4, 1)), 51);
    $M.521 := $store.i8($M.521, $add.ref($add.ref(.str.141, $mul.ref(0, 7)), $mul.ref(5, 1)), 54);
    $M.521 := $store.i8($M.521, $add.ref($add.ref(.str.141, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.522 := $store.i8($M.522, .str.142, 49);
    $M.522 := $store.i8($M.522, $add.ref($add.ref(.str.142, $mul.ref(0, 5)), $mul.ref(1, 1)), 54);
    $M.522 := $store.i8($M.522, $add.ref($add.ref(.str.142, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.522 := $store.i8($M.522, $add.ref($add.ref(.str.142, $mul.ref(0, 5)), $mul.ref(3, 1)), 56);
    $M.522 := $store.i8($M.522, $add.ref($add.ref(.str.142, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.523 := $store.i8($M.523, .str.143, 51);
    $M.523 := $store.i8($M.523, $add.ref($add.ref(.str.143, $mul.ref(0, 5)), $mul.ref(1, 1)), 51);
    $M.523 := $store.i8($M.523, $add.ref($add.ref(.str.143, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.523 := $store.i8($M.523, $add.ref($add.ref(.str.143, $mul.ref(0, 5)), $mul.ref(3, 1)), 54);
    $M.523 := $store.i8($M.523, $add.ref($add.ref(.str.143, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    call {:si_unique_call 4476} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 1218520);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.42, $M.22, $M.9, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.50, $CurrAddr, $M.41, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.51, $M.52, $M.53, $M.54, $M.55, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(wl12xx_remove, $p0);
    assume {:branchcond $i24} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i24 == 1);
    $i23 := $eq.ref(wl12xx_probe, $p0);
    assume {:branchcond $i23} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i23 == 1);
    $i22 := $eq.ref(wl12xx_get_mac, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i22 == 1);
    $i21 := $eq.ref(wl12xx_hw_init, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i21 == 1);
    $i20 := $eq.ref(wl12xx_tx_delayed_compl, $p0);
    assume {:branchcond $i20} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i20 == 1);
    $i19 := $eq.ref(wl12xx_process_mailbox_events, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i19 == 1);
    $i18 := $eq.ref(wl12xx_ack_event, $p0);
    assume {:branchcond $i18} true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i18 == 1);
    $i17 := $eq.ref(wl12xx_plt_init, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i17 == 1);
    $i16 := $eq.ref(wl12xx_boot, $p0);
    assume {:branchcond $i16} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i16 == 1);
    $i15 := $eq.ref(wl12xx_identify_chip, $p0);
    assume {:branchcond $i15} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i15 == 1);
    $i14 := $eq.ref(wl12xx_setup, $p0);
    assume {:branchcond $i14} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    call {:si_unique_call 4477} $i1 := wl12xx_setup(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i15 == 1;
    call {:si_unique_call 4478} $i2 := wl12xx_identify_chip(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i16 == 1;
    call {:si_unique_call 4479} $i3 := wl12xx_boot(arg);
    $r := $i3;
    return;

  $bb5:
    assume $i17 == 1;
    call {:si_unique_call 4480} $i4 := wl12xx_plt_init(arg);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    $r := $i4;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i18 == 1;
    call {:si_unique_call 4481} $i5 := wl12xx_ack_event(arg);
    $r := $i5;
    return;

  $bb7:
    assume $i19 == 1;
    call {:si_unique_call 4482} $i6 := wl12xx_process_mailbox_events(arg);
    $r := $i6;
    return;

  $bb8:
    assume $i20 == 1;
    call {:si_unique_call 4483} $i7 := wl12xx_tx_delayed_compl(arg);
    $r := $i7;
    return;

  $bb9:
    assume $i21 == 1;
    call {:si_unique_call 4484} $i8 := wl12xx_hw_init(arg);
    $r := $i8;
    return;

  $bb10:
    assume $i22 == 1;
    call {:si_unique_call 4485} $i9 := wl12xx_get_mac(arg);
    $r := $i9;
    return;

  $bb11:
    assume $i23 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4486} $i11 := wl12xx_probe($p10);
    $r := $i11;
    return;

  $bb12:
    assume $i24 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4487} $i13 := wl12xx_remove($p12);
    $r := $i13;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 1219552);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 1220584);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 1221616);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i64, arg4: i1) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i64, arg4: i1) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.220, $M.136, $M.200, $M.51, $M.52, $M.53, $M.54, $M.55, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.50, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.221, $M.222, $M.271, $M.272, $M.241, $M.242, $M.334, $M.335, $M.238, $M.239, $M.313, $M.314, $M.382, $M.383, $M.346, $M.347, $M.250, $M.251, $M.340, $M.341, $M.397, $M.398, $M.301, $M.302, $M.328, $M.329, $M.364, $M.365, $M.425, $M.426, $M.409, $M.410, $M.268, $M.269, $M.316, $M.317, $M.417, $M.418, $M.415, $M.416, $M.304, $M.305, $M.433, $M.434, $M.274, $M.275, $M.367, $M.368, $M.307, $M.308, $M.277, $M.278, $M.295, $M.296, $M.435, $M.436, $M.298, $M.299, $M.310, $M.311, $M.406, $M.407, $M.223, $M.224, $M.256, $M.257, $M.289, $M.290, $M.370, $M.371, $M.437, $M.438, $M.355, $M.356, $M.343, $M.344, $M.394, $M.395, $M.292, $M.293, $M.226, $M.227, $M.349, $M.350, $M.379, $M.380, $M.388, $M.389, $M.358, $M.359, $M.319, $M.320, $M.361, $M.362, $M.373, $M.374, $M.385, $M.386, $M.325, $M.326, $M.337, $M.338, $M.376, $M.377, $M.229, $M.230, $M.411, $M.412, $M.419, $M.420, $M.427, $M.428, $M.235, $M.236, $M.403, $M.404, $M.280, $M.281, $M.265, $M.266, $M.439, $M.440, $M.259, $M.260, $M.286, $M.287, $M.253, $M.254, $M.413, $M.414, $M.352, $M.353, $M.232, $M.233, $M.429, $M.430, $M.431, $M.432, $M.247, $M.248, $M.244, $M.245, $M.262, $M.263, $M.421, $M.422, $M.391, $M.392, $M.331, $M.332, $M.283, $M.284, $M.322, $M.323, $M.423, $M.424, $M.400, $M.401, $M.225, $M.228, $M.231, $M.234, $M.237, $M.240, $M.243, $M.246, $M.249, $M.252, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.282, $M.285, $M.288, $M.291, $M.294, $M.297, $M.300, $M.303, $M.306, $M.309, $M.312, $M.315, $M.318, $M.321, $M.324, $M.327, $M.330, $M.333, $M.336, $M.339, $M.342, $M.345, $M.348, $M.351, $M.354, $M.357, $M.360, $M.363, $M.366, $M.369, $M.372, $M.375, $M.378, $M.381, $M.384, $M.387, $M.390, $M.393, $M.396, $M.399, $M.402, $M.405, $M.408, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.461, $M.41, $M.459, $M.458, $M.457, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.0, $M.47, $M.48, $M.49, $M.2, $M.1, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 4488} __SMACK_static_init();
    call {:si_unique_call 4489} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.135, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.50, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.0, $M.218, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.219, $M.220, $M.221, $M.222, $M.136, $M.51, $M.52, $M.53, $M.54, $M.55, $M.271, $M.272, $M.241, $M.242, $M.334, $M.335, $M.238, $M.239, $M.313, $M.314, $M.382, $M.383, $M.346, $M.347, $M.250, $M.251, $M.340, $M.341, $M.397, $M.398, $M.301, $M.302, $M.328, $M.329, $M.364, $M.365, $M.425, $M.426, $M.409, $M.410, $M.268, $M.269, $M.316, $M.317, $M.417, $M.418, $M.415, $M.416, $M.304, $M.305, $M.433, $M.434, $M.274, $M.275, $M.367, $M.368, $M.307, $M.308, $M.277, $M.278, $M.295, $M.296, $M.435, $M.436, $M.298, $M.299, $M.310, $M.311, $M.406, $M.407, $M.223, $M.224, $M.256, $M.257, $M.289, $M.290, $M.370, $M.371, $M.437, $M.438, $M.355, $M.356, $M.343, $M.344, $M.394, $M.395, $M.292, $M.293, $M.226, $M.227, $M.349, $M.350, $M.379, $M.380, $M.388, $M.389, $M.358, $M.359, $M.319, $M.320, $M.361, $M.362, $M.373, $M.374, $M.385, $M.386, $M.325, $M.326, $M.337, $M.338, $M.376, $M.377, $M.229, $M.230, $M.411, $M.412, $M.419, $M.420, $M.427, $M.428, $M.235, $M.236, $M.403, $M.404, $M.280, $M.281, $M.265, $M.266, $M.439, $M.440, $M.259, $M.260, $M.286, $M.287, $M.253, $M.254, $M.413, $M.414, $M.352, $M.353, $M.232, $M.233, $M.429, $M.430, $M.431, $M.432, $M.247, $M.248, $M.244, $M.245, $M.262, $M.263, $M.421, $M.422, $M.391, $M.392, $M.331, $M.332, $M.283, $M.284, $M.322, $M.323, $M.423, $M.424, $M.400, $M.401, $M.225, $M.228, $M.231, $M.234, $M.237, $M.240, $M.243, $M.246, $M.249, $M.252, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.282, $M.285, $M.288, $M.291, $M.294, $M.297, $M.300, $M.303, $M.306, $M.309, $M.312, $M.315, $M.318, $M.321, $M.324, $M.327, $M.330, $M.333, $M.336, $M.339, $M.342, $M.345, $M.348, $M.351, $M.354, $M.357, $M.360, $M.363, $M.366, $M.369, $M.372, $M.375, $M.378, $M.381, $M.384, $M.387, $M.390, $M.393, $M.396, $M.399, $M.402, $M.405, $M.408, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.461, $M.41, $M.459, $M.458, $M.457, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.47, $M.48, $M.49, $M.2, $M.1, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.22, $M.9, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation wl1271_get_scan_channels_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i8, in_$p12: ref, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i24, in_$i56: i24, in_$i57: i24, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i65: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i24, in_$i92: i24, in_$i93: i24, in_$p94: ref, in_$p95: ref, in_$i96: i8, in_$i97: i64, in_$i98: i64, in_$i99: i64, in_$i100: i1, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i16, in_$i107: i32, in_$i108: i64, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i64, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i24, in_$i128: i24, in_$i129: i24, in_$p130: ref, in_$p131: ref, in_$i132: i8, in_$i133: i64, in_$i134: i64, in_$i135: i64, in_$i136: i1, in_$i137: i64, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i64, in_$i154: i64, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i24, in_$i163: i24, in_$i164: i24, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i1, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i8, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i64, in_$p185: ref, in_$p186: ref, in_$i187: i32, in_$i188: i64, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$i193: i64, in_$p195: ref, in_$p196: ref, in_$i197: i32, in_$i198: i64, in_$p200: ref, in_$i201: i64, in_$p203: ref, in_$i204: i64, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$i209: i32, in_$i210: i8, in_$i211: i64, in_$p213: ref, in_$i214: i64, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i219: i16, in_$i220: i8, in_$i221: i64, in_$p223: ref, in_$i224: i64, in_$p226: ref, in_$p227: ref, in_$i228: i64, in_$p230: ref, in_$p231: ref, in_$i232: i64, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i16: i32, in_$i17: i32, in_$i243: i32, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$i18: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i24, out_$i56: i24, out_$i57: i24, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i65: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i24, out_$i92: i24, out_$i93: i24, out_$p94: ref, out_$p95: ref, out_$i96: i8, out_$i97: i64, out_$i98: i64, out_$i99: i64, out_$i100: i1, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i16, out_$i107: i32, out_$i108: i64, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i64, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i24, out_$i128: i24, out_$i129: i24, out_$p130: ref, out_$p131: ref, out_$i132: i8, out_$i133: i64, out_$i134: i64, out_$i135: i64, out_$i136: i1, out_$i137: i64, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i64, out_$i154: i64, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i24, out_$i163: i24, out_$i164: i24, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i1, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i8, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i64, out_$p185: ref, out_$p186: ref, out_$i187: i32, out_$i188: i64, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$i193: i64, out_$p195: ref, out_$p196: ref, out_$i197: i32, out_$i198: i64, out_$p200: ref, out_$i201: i64, out_$p203: ref, out_$i204: i64, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$i209: i32, out_$i210: i8, out_$i211: i64, out_$p213: ref, out_$i214: i64, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i219: i16, out_$i220: i8, out_$i221: i64, out_$p223: ref, out_$i224: i64, out_$p226: ref, out_$p227: ref, out_$i228: i64, out_$p230: ref, out_$p231: ref, out_$i232: i64, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i16: i32, out_$i17: i32, out_$i243: i32, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8)
{

  entry:
    out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$p145, out_$p146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p185, out_$p186, out_$i187, out_$i188, out_$p190, out_$p191, out_$i192, out_$i193, out_$p195, out_$p196, out_$i197, out_$i198, out_$p200, out_$i201, out_$p203, out_$i204, out_$p206, out_$p207, out_$p208, out_$i209, out_$i210, out_$i211, out_$p213, out_$i214, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p226, out_$p227, out_$i228, out_$p230, out_$p231, out_$i232, out_$p234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i16, out_$i17, out_$i243, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := in_$i18, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p139, in_$p140, in_$p141, in_$i142, in_$i143, in_$p145, in_$p146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$p174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$p185, in_$p186, in_$i187, in_$i188, in_$p190, in_$p191, in_$i192, in_$i193, in_$p195, in_$p196, in_$i197, in_$i198, in_$p200, in_$i201, in_$p203, in_$i204, in_$p206, in_$p207, in_$p208, in_$i209, in_$i210, in_$i211, in_$p213, in_$i214, in_$p216, in_$p217, in_$p218, in_$i219, in_$i220, in_$i221, in_$p223, in_$i224, in_$p226, in_$p227, in_$i228, in_$p230, in_$p231, in_$i232, in_$p234, in_$p235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i16, in_$i17, in_$i243, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  $bb46:
    assume out_$i242 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i237, out_$i238;
    goto $bb46_dummy;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i243 := out_$i237;
    assume true;
    goto $bb46;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i242 := $and.i1(out_$i240, out_$i241);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i241 := $sle.i32(out_$i237, 23);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i240 := $ult.i32(out_$i238, out_$i239);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i32($M.0, in_$p12);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i238 := $add.i32(out_$i17, 1);
    call {:si_unique_call 713} {:cexpr "i"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_3844;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i237 := out_$i16;
    goto $bb45;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i237 := out_$i236;
    goto $bb45;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i236 := $add.i32(out_$i16, 1);
    call {:si_unique_call 712} {:cexpr "j"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} set_bit(out_$i232, out_$p235);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$p235 := $bitcast.ref.ref(out_$p234);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(8, 1));
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 710} out_cmdloc_dummy_var_27 := $memset.i8(out_cmdloc_dummy_var_26, out_$p231, $sub.i8(0, 1), 2, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_27;
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$p231 := $bitcast.ref.ref(out_$p230);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i228, 20)), $mul.ref(12, 1));
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$i228 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 709} out_cmdloc_dummy_var_25 := $memset.i8(out_cmdloc_dummy_var_24, out_$p227, $sub.i8(0, 1), 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_25;
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p227 := $bitcast.ref.ref(out_$p226);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i224, 20)), $mul.ref(8, 1));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$i224 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p223, out_$i220);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i221, 20)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i221 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i220 := $trunc.i16.i8(out_$i219);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i16($M.0, out_$p218);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p217, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i214, 8));
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i214 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p213, out_$i210);
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i211, 20)), $mul.ref(15, 1));
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i211 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$i210 := $trunc.i32.i8(out_$i209);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i32($M.0, out_$p208);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(out_$p207, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i204, 8));
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$i204 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p203, 0);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i201, 20)), $mul.ref(14, 1));
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i201 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p200, out_$i197);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i198, 20)), $mul.ref(4, 1));
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$i198 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i32($M.0, out_$p196);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p195, out_$i192);
    out_$p196 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(16, 1));
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i193, 20)), $mul.ref(0, 1));
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i193 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.0, out_$p191);
    goto corral_source_split_3781;

  $bb42:
    assume out_$i180 == 1;
    out_$p191 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(16, 1));
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i180 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_3778;

  $bb37:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} __dynamic_pr_debug.ref.ref.i32(in_$p8, .str.188, out_$i179);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i1.i32(out_$i178);
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i178 := $trunc.i8.i1(out_$i177);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i8($M.0, out_$p176);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(out_$p175, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.0, out_$p174);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i172, 8));
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3769;

  $bb38:
    assume out_$i171 == 1;
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i64(out_$i170, 0);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out_$i170 := ldv__builtin_expect(out_$i169, 0);
    call {:si_unique_call 707} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i170);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i169 := $and.i64(out_$i168, 1);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i8.i64(out_$i167);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i8($M.8, out_$p166);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p165, 0);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p161, out_$i164);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$i164 := $or.i24(out_$i163, 62);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i163 := $and.i24(out_$i162, $sub.i24(0, 262144));
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i24($M.7, out_$p161);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p159, .str.188);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p158, .str.103);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p157, .str.184);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p156, .str);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3745;

  $bb36:
    assume out_$i155 == 1;
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i64(out_$i154, 0);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} out_$i154 := ldv__builtin_expect(out_$i153, 0);
    call {:si_unique_call 705} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i154);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i153 := $sext.i32.i64(out_$i152);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i1.i32(out_$i151);
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.i32(out_$i150, 0);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i150 := $and.i32(out_$i149, 256);
    goto corral_source_split_3737;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3736;

  $bb31:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} __dynamic_pr_debug.ref.ref.i32.i32(in_$p7, .str.187, out_$i142, out_$i148);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.0, out_$p147);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(out_$p146, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$p146 := $load.ref($M.0, out_$p145);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i143, 8));
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.0, out_$p141);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p140, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i137, 8));
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i137 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3724;

  $bb32:
    assume out_$i136 == 1;
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i64(out_$i135, 0);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} out_$i135 := ldv__builtin_expect(out_$i134, 0);
    call {:si_unique_call 702} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i135);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i134 := $and.i64(out_$i133, 1);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i8.i64(out_$i132);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i8($M.8, out_$p131);
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p130, 0);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p126, out_$i129);
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$i129 := $or.i24(out_$i128, 60);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i128 := $and.i24(out_$i127, $sub.i24(0, 262144));
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i24($M.7, out_$p126);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(out_$p125);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p124, .str.187);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p123, .str.103);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p122, .str.184);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p121, .str);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3700;

  $bb30:
    assume out_$i120 == 1;
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i119, 0);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} out_$i119 := ldv__builtin_expect(out_$i118, 0);
    call {:si_unique_call 700} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i119);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i117);
    goto corral_source_split_3695;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i1.i32(out_$i116);
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_3693;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i115 := $and.i32(out_$i114, 256);
    goto corral_source_split_3692;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3691;

  $bb25:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __dynamic_pr_debug.ref.ref.i32.i32(in_$p6, .str.186, out_$i107, out_$i113);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_3688;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p111, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i108, 8));
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i16.i32(out_$i106);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i16($M.0, out_$p105);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p104, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i101, 8));
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3678;

  $bb26:
    assume out_$i100 == 1;
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i64(out_$i99, 0);
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} out_$i99 := ldv__builtin_expect(out_$i98, 0);
    call {:si_unique_call 697} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$i98 := $and.i64(out_$i97, 1);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i64(out_$i96);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i8($M.8, out_$p95);
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p94, 0);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p90, out_$i93);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i93 := $or.i24(out_$i92, 56);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$i92 := $and.i24(out_$i91, $sub.i24(0, 262144));
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i24($M.7, out_$p90);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p89);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p88, .str.186);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p87, .str.103);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p86, .str.184);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p85, .str);
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3654;

  $bb24:
    assume out_$i84 == 1;
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_$i83 := ldv__builtin_expect(out_$i82, 0);
    call {:si_unique_call 695} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i1.i32(out_$i80);
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i32(out_$i78, 256);
    goto corral_source_split_3646;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3645;

  $bb19:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __dynamic_pr_debug.ref.ref.i32.i32(in_$p5, .str.185, out_$i70, out_$i77);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, out_$p75);
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i71, 8));
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i65, 8));
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3632;

  $bb20:
    assume out_$i64 == 1;
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} out_$i63 := ldv__builtin_expect(out_$i62, 0);
    call {:si_unique_call 692} {:cexpr "tmp"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i64(out_$i61, 1);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i64(out_$i60);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.8, out_$p59);
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3624;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p58, 0);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p54, out_$i57);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i57 := $or.i24(out_$i56, 53);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i24(out_$i55, $sub.i24(0, 262144));
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i24($M.7, out_$p54);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p52, .str.185);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p51, .str.103);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p50, .str.184);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p49, .str);
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  $bb18:
    assume out_$i48 == 1;
    goto corral_source_split_3607;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_$i47 := ldv__builtin_expect(out_$i46, 0);
    call {:si_unique_call 690} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i45);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i1.i32(out_$i44);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 256);
    goto corral_source_split_3596;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_3595;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb14;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_3593;

  $bb11:
    assume out_$i38 == 1;
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, in_$i3);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i32, 8));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3585;

  $bb9:
    assume out_$i31 == 1;
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i23, 1);
    goto corral_source_split_3581;

  $bb6:
    assume out_$i29 == 1;
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} out_$i28 := variable_test_bit(out_$i24, out_$p27);
    call {:si_unique_call 688} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11160)), $mul.ref(1704, 1)), $mul.ref(8, 1));
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    call {:si_unique_call 686} {:cexpr "flags"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(104, 1)), $mul.ref(out_$i18, 8));
    goto corral_source_split_3570;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i23, 2);
    goto corral_source_split_3604;

  $bb15:
    assume !(out_$i39 == 1);
    goto corral_source_split_3603;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p190, out_$i187);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i188, 20)), $mul.ref(4, 1));
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i188 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.0, out_$p186);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p185, out_$i182);
    out_$p186 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(4, 1));
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i183, 20)), $mul.ref(0, 1));
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$i183 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.0, out_$p181);
    goto corral_source_split_3792;

  $bb43:
    assume !(out_$i180 == 1);
    out_$p181 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11160)), $mul.ref(2552, 1)), $mul.ref(832, 1)), $mul.ref(0, 1));
    goto corral_source_split_3791;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb8;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$p145, out_$p146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p185, out_$p186, out_$i187, out_$i188, out_$p190, out_$p191, out_$i192, out_$i193, out_$p195, out_$p196, out_$i197, out_$i198, out_$p200, out_$i201, out_$p203, out_$i204, out_$p206, out_$p207, out_$p208, out_$i209, out_$i210, out_$i211, out_$p213, out_$i214, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p226, out_$p227, out_$i228, out_$p230, out_$p231, out_$i232, out_$p234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i16, out_$i17, out_$i243, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := wl1271_get_scan_channels_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i3, in_$p5, in_$p6, in_$p7, in_$p8, in_$i9, in_$p12, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$p145, out_$p146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p185, out_$p186, out_$i187, out_$i188, out_$p190, out_$p191, out_$i192, out_$i193, out_$p195, out_$p196, out_$i197, out_$i198, out_$p200, out_$i201, out_$p203, out_$i204, out_$p206, out_$p207, out_$p208, out_$i209, out_$i210, out_$i211, out_$p213, out_$i214, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p226, out_$p227, out_$i228, out_$p230, out_$p231, out_$i232, out_$p234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i16, out_$i17, out_$i243, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27);
    return;

  exit:
    return;
}



procedure wl1271_get_scan_channels_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i8, in_$p12: ref, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i24, in_$i56: i24, in_$i57: i24, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i65: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i24, in_$i92: i24, in_$i93: i24, in_$p94: ref, in_$p95: ref, in_$i96: i8, in_$i97: i64, in_$i98: i64, in_$i99: i64, in_$i100: i1, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i16, in_$i107: i32, in_$i108: i64, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i64, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i24, in_$i128: i24, in_$i129: i24, in_$p130: ref, in_$p131: ref, in_$i132: i8, in_$i133: i64, in_$i134: i64, in_$i135: i64, in_$i136: i1, in_$i137: i64, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i64, in_$i154: i64, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i24, in_$i163: i24, in_$i164: i24, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i1, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i8, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i64, in_$p185: ref, in_$p186: ref, in_$i187: i32, in_$i188: i64, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$i193: i64, in_$p195: ref, in_$p196: ref, in_$i197: i32, in_$i198: i64, in_$p200: ref, in_$i201: i64, in_$p203: ref, in_$i204: i64, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$i209: i32, in_$i210: i8, in_$i211: i64, in_$p213: ref, in_$i214: i64, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i219: i16, in_$i220: i8, in_$i221: i64, in_$p223: ref, in_$i224: i64, in_$p226: ref, in_$p227: ref, in_$i228: i64, in_$p230: ref, in_$p231: ref, in_$i232: i64, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i16: i32, in_$i17: i32, in_$i243: i32, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$i18: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i24, out_$i56: i24, out_$i57: i24, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i65: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i24, out_$i92: i24, out_$i93: i24, out_$p94: ref, out_$p95: ref, out_$i96: i8, out_$i97: i64, out_$i98: i64, out_$i99: i64, out_$i100: i1, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i16, out_$i107: i32, out_$i108: i64, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i64, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i24, out_$i128: i24, out_$i129: i24, out_$p130: ref, out_$p131: ref, out_$i132: i8, out_$i133: i64, out_$i134: i64, out_$i135: i64, out_$i136: i1, out_$i137: i64, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i64, out_$i154: i64, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i24, out_$i163: i24, out_$i164: i24, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i1, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i8, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i64, out_$p185: ref, out_$p186: ref, out_$i187: i32, out_$i188: i64, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$i193: i64, out_$p195: ref, out_$p196: ref, out_$i197: i32, out_$i198: i64, out_$p200: ref, out_$i201: i64, out_$p203: ref, out_$i204: i64, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$i209: i32, out_$i210: i8, out_$i211: i64, out_$p213: ref, out_$i214: i64, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i219: i16, out_$i220: i8, out_$i221: i64, out_$p223: ref, out_$i224: i64, out_$p226: ref, out_$p227: ref, out_$i228: i64, out_$p230: ref, out_$p231: ref, out_$i232: i64, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i16: i32, out_$i17: i32, out_$i243: i32, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8);
  modifies $M.0, $M.8, $M.7, $M.6, $M.5, $M.4, $M.3;



implementation wl12xx_top_reg_read_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i14: i32, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i23: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i14: i32, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i23: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i14, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i23 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i14, in_$i19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$i23;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := out_$i15;
    goto $bb14_dummy;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    assume true;
    goto $bb14;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 0);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$i16 := wlcore_read32(in_$p0, 3148220, in_$p3);
    call {:si_unique_call 784} {:cexpr "ret"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4117;

  $bb12:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4116;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i15, out_$i26 := out_$i24, out_$i24;
    assume true;
    goto $bb12;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 785} {:cexpr "timeout"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4128;

  $bb16:
    assume out_$i22 == 1;
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i14;
    assume true;
    goto $bb16;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, 0);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i64(out_$i20, 262144);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i19);
    goto corral_source_split_4123;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.22, in_$p3);
    goto corral_source_split_4122;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i14, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i23 := wl12xx_top_reg_read_loop_$bb11(in_$p0, in_$p3, out_$i15, out_$i16, out_$i17, out_$i18, out_$i14, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i23);
    return;

  exit:
    return;
}



procedure wl12xx_top_reg_read_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i14: i32, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i23: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i14: i32, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i23: i32);
  modifies $M.22;



implementation wl1271_boot_soft_reset_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i8: i64, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i24, in_$i27: i24, in_$i28: i24, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i46: i32, in_$i47: i1) returns (out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i24, out_$i27: i24, out_$i28: i24, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i46: i32, out_$i47: i1)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i46, in_$i47;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb25_dummy;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i46;
    assume true;
    goto $bb25;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, 0);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} out_$i46 := wlcore_read32(in_$p0, 3145728, in_$p1);
    call {:si_unique_call 1088} {:cexpr "ret"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5548;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __const_udelay(4295000);
    goto corral_source_split_5547;

  $bb22:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i64(out_$i42, 0);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$i42 := $sub.i64(in_$i8, out_$i41);
    goto corral_source_split_5539;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.0, jiffies);
    goto corral_source_split_5538;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i39, 0);
    goto corral_source_split_5531;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i64(out_$i38, 2);
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_5529;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.22, in_$p1);
    goto corral_source_split_5528;

  $bb12:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __dynamic_pr_debug.ref.ref.i32(in_$p2, .str.168, out_$i36);
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.22, in_$p1);
    goto corral_source_split_5525;

  $bb13:
    assume out_$i35 == 1;
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} out_$i34 := ldv__builtin_expect(out_$i33, 0);
    call {:si_unique_call 1081} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i64(out_$i32, 1);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i64(out_$i31);
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.8, out_$p30);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5517;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p29, 0);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p25, out_$i28);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i28 := $or.i24(out_$i27, 1068);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i24(out_$i26, $sub.i24(0, 262144));
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i24($M.7, out_$p25);
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p23, .str.168);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p22, .str.146);
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p21, .str.167);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p20, .str);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5501;

  $bb11:
    assume out_$i19 == 1;
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i18 := ldv__builtin_expect(out_$i17, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 4);
    goto corral_source_split_5493;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, wl12xx_debug_level);
    goto corral_source_split_5492;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47 := wl1271_boot_soft_reset_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$i8, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47);
    return;

  exit:
    return;
}



procedure wl1271_boot_soft_reset_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i8: i64, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i24, in_$i27: i24, in_$i28: i24, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i46: i32, in_$i47: i1) returns (out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i24, out_$i27: i24, out_$i28: i24, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i46: i32, out_$i47: i1);
  modifies $M.22, $M.8, $M.7, $M.6, $M.5, $M.4, $M.3;



implementation wl12xx_get_clock_idx_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i3: i8, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i7 := in_$i8, in_$p10, in_$i11, in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  $bb13:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i29;
    goto $bb13_dummy;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.47, out_$p32);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i30, 8)), $mul.ref(0, 1));
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_5823;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1160} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5822;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i7;
    assume true;
    goto $bb10;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, out_$i20);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1(out_$i16);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.48, out_$p15);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i13, 8)), $mul.ref(4, 1));
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5803;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, in_$i1);
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.47, out_$p10);
    goto corral_source_split_5799;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto corral_source_split_5797;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i7 := wl12xx_get_clock_idx_loop_$bb4(in_$p0, in_$i1, in_$i3, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i7);
    return;

  exit:
    return;
}



procedure wl12xx_get_clock_idx_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i3: i8, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i7: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$i71: i32, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i32, in_$i208: i64, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i64, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i64, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$p253: ref, in_$i255: i32, in_$i256: i1, in_$p257: ref, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$p284: ref, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i291: i32, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i8, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i8, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i8, in_$i325: i32, in_$i326: i8, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$p356: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$p360: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$p380: ref, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$p385: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$p390: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i396: i32, in_$i397: i1, in_$p398: ref, in_$i400: i32, in_$i401: i1, in_$p402: ref, in_$i404: i32, in_$i405: i1, in_$p406: ref, in_$i407: i32, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$i412: i32, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i417: i32, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i422: i8, in_$i423: i32, in_$i424: i8, in_$p425: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$i430: i8, in_$i431: i32, in_$i432: i8, in_$p433: ref, in_$i435: i32, in_$i436: i1, in_$p437: ref, in_$i438: i8, in_$i439: i32, in_$i440: i8, in_$p441: ref, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$i458: i8, in_$i459: i1, in_$i460: i32, in_$i461: i8, in_$i462: i32, in_$i463: i8, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i468: i8, in_$i469: i1, in_$i470: i32, in_$i471: i8, in_$i472: i32, in_$i473: i8, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i8, in_$i479: i1, in_$i480: i32, in_$i481: i8, in_$i482: i32, in_$i483: i8, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i493: i32, in_$i494: i1, in_$p495: ref, in_$i497: i32, in_$i498: i1, in_$p499: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i506: i32, in_$i507: i1, in_$p508: ref, in_$p509: ref, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$p514: ref, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$p519: ref, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$p524: ref, in_$p525: ref, in_$i526: i32, in_$i527: i1, in_$p528: ref, in_$p529: ref, in_$p530: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$p534: ref, in_$p535: ref, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$i544: i32, in_$i545: i1, in_$p546: ref, in_$i548: i32, in_$i549: i1, in_$p550: ref, in_$i551: i32, in_$i552: i32, in_$i554: i32, in_$i555: i1, in_$p556: ref, in_$i557: i32, in_$i558: i32, in_$i560: i32, in_$i561: i1, in_$p562: ref, in_$i563: i32, in_$i564: i32, in_$i566: i32, in_$i567: i1, in_$p568: ref, in_$p569: ref, in_$p570: ref, in_$i571: i32, in_$i572: i1, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$i576: i32, in_$i577: i1, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$p584: ref, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$p589: ref, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$p594: ref, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$p599: ref, in_$i601: i32, in_$i602: i1, in_$p603: ref, in_$p604: ref, in_$i606: i32, in_$i607: i1, in_$p608: ref, in_$p609: ref, in_$i611: i32, in_$i612: i1, in_$p613: ref, in_$i614: i32, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$i619: i32, in_$i621: i32, in_$i622: i1, in_$p623: ref, in_$i624: i32, in_$i626: i32, in_$i627: i1, in_$p628: ref, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i634: i32, in_$i635: i1, in_$p636: ref, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$i641: i32, in_$i643: i32, in_$i644: i1, in_$p645: ref, in_$i646: i32, in_$i648: i32, in_$i649: i1, in_$p650: ref, in_$i651: i32, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$i656: i8, in_$i657: i1, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_$i662: i8, in_$i663: i1, in_$i665: i32, in_$i666: i1, in_$p667: ref, in_$i668: i8, in_$i669: i1, in_$i671: i32, in_$i672: i1, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$i683: i32, in_$i684: i1, in_$i686: i32, in_$i687: i32, in_$i688: i32, in_$i689: i1, in_$i691: i32, in_$i692: i32, in_$i693: i32, in_$i694: i1, in_$i696: i32, in_$i697: i1, in_$i698: i32, in_$i699: i1, in_$i700: i32, in_$i701: i1, in_$i702: i32, in_$i703: i1, in_$i704: i32, in_$i705: i1, in_$i706: i32, in_$i707: i1, in_$i708: i32, in_$i709: i1, in_$i710: i32, in_$i711: i1, in_$i712: i32, in_$i713: i1, in_$i714: i32, in_$i715: i1, in_$i716: i32, in_$i717: i1, in_$i718: i32, in_$i719: i1, in_$i720: i32, in_$i721: i1, in_$i722: i32, in_$i723: i1, in_$i724: i32, in_$i725: i1, in_$i726: i32, in_$i727: i1, in_$i728: i32, in_$i729: i1, in_$i730: i32, in_$i731: i1, in_$i732: i32, in_$i733: i1, in_$i734: i32, in_$i735: i1, in_$i736: i32, in_$i737: i1, in_$i738: i32, in_$i739: i1, in_$i740: i32, in_$i741: i1, in_$i742: i32, in_$i743: i1, in_$i744: i32, in_$i745: i1, in_$i746: i32, in_$i747: i1, in_$i748: i32, in_$i749: i1, in_$i750: i32, in_$i751: i1, in_$i752: i32, in_$i753: i1, in_$i754: i32, in_$i755: i1, in_$i756: i32, in_$i757: i1, in_$i758: i32, in_$i759: i1, in_$i760: i32, in_$i761: i1, in_$i762: i32, in_$i763: i1, in_$i764: i32, in_$i765: i1, in_$i766: i32, in_$i767: i1, in_$i768: i32, in_$i769: i1, in_$i770: i32, in_$i771: i1, in_$i772: i32, in_$i773: i1, in_$i774: i32, in_$i775: i1, in_$i776: i32, in_$i777: i1, in_$i778: i32, in_$i779: i1, in_$i780: i32, in_$i781: i1, in_$i782: i32, in_$i783: i1, in_$i784: i32, in_$i785: i1, in_$i786: i32, in_$i787: i1, in_$i788: i32, in_$i789: i1, in_$i790: i32, in_$i791: i1, in_$i792: i32, in_$i793: i1, in_$i794: i32, in_$i795: i1, in_$i796: i32, in_$i797: i1, in_$i798: i32, in_$i799: i1, in_$i800: i32, in_$i801: i1, in_$i802: i32, in_$i803: i1, in_$i804: i32, in_$i805: i1, in_$i806: i32, in_$i807: i1, in_$i808: i1, in_$i809: i1, in_$i810: i32, in_$i811: i1, in_$p812: ref, in_$i813: i32, in_$i814: i32, in_$i815: i1, in_$i816: i32, in_$i817: i32, in_$i818: i32, in_$i819: i1, in_$i820: i32, in_$i821: i1, in_$p822: ref, in_$i823: i32, in_$i824: i32, in_$i825: i1, in_$i826: i32, in_$i827: i32, in_$i828: i32, in_$i829: i1, in_$i830: i32, in_$i831: i1, in_$p832: ref, in_$i833: i32, in_$i834: i32, in_$i835: i1, in_$i836: i32, in_$i837: i32, in_$i838: i32, in_$i839: i1, in_$i840: i32, in_$i841: i1, in_$i842: i32, in_$i843: i1, in_$i844: i32, in_$i845: i1, in_$i846: i1, in_$i847: i1, in_$i848: i32, in_$i849: i1, in_$i850: i32, in_$i851: i1, in_$i852: i32, in_$i853: i1, in_$i854: i32, in_$i855: i32, in_$i856: i1, in_$i857: i32, in_$i858: i1, in_$i859: i32, in_$i860: i1, in_$i861: i32, in_$i862: i1, in_$i863: i32, in_$i864: i1, in_$i865: i32, in_$i866: i1, in_$i867: i32, in_$i868: i1, in_$i869: i32, in_$i870: i1, in_$i871: i32, in_$i872: i1, in_$i873: i32, in_$i874: i1, in_$i875: i32, in_$i876: i1, in_$i877: i32, in_$i878: i1, in_$i879: i32, in_$i880: i1, in_$i881: i32, in_$i882: i1, in_$i883: i32, in_$i884: i1, in_$i885: i32, in_$i886: i1, in_$i887: i32, in_$i888: i1, in_$i889: i32, in_$i890: i1, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i1, in_vslice_dummy_var_146: i1, in_vslice_dummy_var_147: i1, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i1, in_vslice_dummy_var_167: i1, in_vslice_dummy_var_168: i1, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: i32, in_vslice_dummy_var_188: i32, in_vslice_dummy_var_189: i32, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: i32, in_vslice_dummy_var_192: i32, in_vslice_dummy_var_193: i32, in_vslice_dummy_var_194: i32, in_vslice_dummy_var_195: i32, in_vslice_dummy_var_196: i32, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32) returns (out_$i71: i32, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i32, out_$i208: i64, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i64, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i64, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$p253: ref, out_$i255: i32, out_$i256: i1, out_$p257: ref, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$p284: ref, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i291: i32, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i8, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i8, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i8, out_$i325: i32, out_$i326: i8, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$p356: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$p360: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$p380: ref, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$p385: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$p390: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i396: i32, out_$i397: i1, out_$p398: ref, out_$i400: i32, out_$i401: i1, out_$p402: ref, out_$i404: i32, out_$i405: i1, out_$p406: ref, out_$i407: i32, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$i412: i32, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i417: i32, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i422: i8, out_$i423: i32, out_$i424: i8, out_$p425: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$i430: i8, out_$i431: i32, out_$i432: i8, out_$p433: ref, out_$i435: i32, out_$i436: i1, out_$p437: ref, out_$i438: i8, out_$i439: i32, out_$i440: i8, out_$p441: ref, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$i458: i8, out_$i459: i1, out_$i460: i32, out_$i461: i8, out_$i462: i32, out_$i463: i8, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i468: i8, out_$i469: i1, out_$i470: i32, out_$i471: i8, out_$i472: i32, out_$i473: i8, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i8, out_$i479: i1, out_$i480: i32, out_$i481: i8, out_$i482: i32, out_$i483: i8, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i493: i32, out_$i494: i1, out_$p495: ref, out_$i497: i32, out_$i498: i1, out_$p499: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i506: i32, out_$i507: i1, out_$p508: ref, out_$p509: ref, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$p514: ref, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$p519: ref, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$p524: ref, out_$p525: ref, out_$i526: i32, out_$i527: i1, out_$p528: ref, out_$p529: ref, out_$p530: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$p534: ref, out_$p535: ref, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$i544: i32, out_$i545: i1, out_$p546: ref, out_$i548: i32, out_$i549: i1, out_$p550: ref, out_$i551: i32, out_$i552: i32, out_$i554: i32, out_$i555: i1, out_$p556: ref, out_$i557: i32, out_$i558: i32, out_$i560: i32, out_$i561: i1, out_$p562: ref, out_$i563: i32, out_$i564: i32, out_$i566: i32, out_$i567: i1, out_$p568: ref, out_$p569: ref, out_$p570: ref, out_$i571: i32, out_$i572: i1, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$i576: i32, out_$i577: i1, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$p584: ref, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$p589: ref, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$p594: ref, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$p599: ref, out_$i601: i32, out_$i602: i1, out_$p603: ref, out_$p604: ref, out_$i606: i32, out_$i607: i1, out_$p608: ref, out_$p609: ref, out_$i611: i32, out_$i612: i1, out_$p613: ref, out_$i614: i32, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$i619: i32, out_$i621: i32, out_$i622: i1, out_$p623: ref, out_$i624: i32, out_$i626: i32, out_$i627: i1, out_$p628: ref, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i634: i32, out_$i635: i1, out_$p636: ref, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$i641: i32, out_$i643: i32, out_$i644: i1, out_$p645: ref, out_$i646: i32, out_$i648: i32, out_$i649: i1, out_$p650: ref, out_$i651: i32, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$i656: i8, out_$i657: i1, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_$i662: i8, out_$i663: i1, out_$i665: i32, out_$i666: i1, out_$p667: ref, out_$i668: i8, out_$i669: i1, out_$i671: i32, out_$i672: i1, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$i683: i32, out_$i684: i1, out_$i686: i32, out_$i687: i32, out_$i688: i32, out_$i689: i1, out_$i691: i32, out_$i692: i32, out_$i693: i32, out_$i694: i1, out_$i696: i32, out_$i697: i1, out_$i698: i32, out_$i699: i1, out_$i700: i32, out_$i701: i1, out_$i702: i32, out_$i703: i1, out_$i704: i32, out_$i705: i1, out_$i706: i32, out_$i707: i1, out_$i708: i32, out_$i709: i1, out_$i710: i32, out_$i711: i1, out_$i712: i32, out_$i713: i1, out_$i714: i32, out_$i715: i1, out_$i716: i32, out_$i717: i1, out_$i718: i32, out_$i719: i1, out_$i720: i32, out_$i721: i1, out_$i722: i32, out_$i723: i1, out_$i724: i32, out_$i725: i1, out_$i726: i32, out_$i727: i1, out_$i728: i32, out_$i729: i1, out_$i730: i32, out_$i731: i1, out_$i732: i32, out_$i733: i1, out_$i734: i32, out_$i735: i1, out_$i736: i32, out_$i737: i1, out_$i738: i32, out_$i739: i1, out_$i740: i32, out_$i741: i1, out_$i742: i32, out_$i743: i1, out_$i744: i32, out_$i745: i1, out_$i746: i32, out_$i747: i1, out_$i748: i32, out_$i749: i1, out_$i750: i32, out_$i751: i1, out_$i752: i32, out_$i753: i1, out_$i754: i32, out_$i755: i1, out_$i756: i32, out_$i757: i1, out_$i758: i32, out_$i759: i1, out_$i760: i32, out_$i761: i1, out_$i762: i32, out_$i763: i1, out_$i764: i32, out_$i765: i1, out_$i766: i32, out_$i767: i1, out_$i768: i32, out_$i769: i1, out_$i770: i32, out_$i771: i1, out_$i772: i32, out_$i773: i1, out_$i774: i32, out_$i775: i1, out_$i776: i32, out_$i777: i1, out_$i778: i32, out_$i779: i1, out_$i780: i32, out_$i781: i1, out_$i782: i32, out_$i783: i1, out_$i784: i32, out_$i785: i1, out_$i786: i32, out_$i787: i1, out_$i788: i32, out_$i789: i1, out_$i790: i32, out_$i791: i1, out_$i792: i32, out_$i793: i1, out_$i794: i32, out_$i795: i1, out_$i796: i32, out_$i797: i1, out_$i798: i32, out_$i799: i1, out_$i800: i32, out_$i801: i1, out_$i802: i32, out_$i803: i1, out_$i804: i32, out_$i805: i1, out_$i806: i32, out_$i807: i1, out_$i808: i1, out_$i809: i1, out_$i810: i32, out_$i811: i1, out_$p812: ref, out_$i813: i32, out_$i814: i32, out_$i815: i1, out_$i816: i32, out_$i817: i32, out_$i818: i32, out_$i819: i1, out_$i820: i32, out_$i821: i1, out_$p822: ref, out_$i823: i32, out_$i824: i32, out_$i825: i1, out_$i826: i32, out_$i827: i32, out_$i828: i32, out_$i829: i1, out_$i830: i32, out_$i831: i1, out_$p832: ref, out_$i833: i32, out_$i834: i32, out_$i835: i1, out_$i836: i32, out_$i837: i32, out_$i838: i32, out_$i839: i1, out_$i840: i32, out_$i841: i1, out_$i842: i32, out_$i843: i1, out_$i844: i32, out_$i845: i1, out_$i846: i1, out_$i847: i1, out_$i848: i32, out_$i849: i1, out_$i850: i32, out_$i851: i1, out_$i852: i32, out_$i853: i1, out_$i854: i32, out_$i855: i32, out_$i856: i1, out_$i857: i32, out_$i858: i1, out_$i859: i32, out_$i860: i1, out_$i861: i32, out_$i862: i1, out_$i863: i32, out_$i864: i1, out_$i865: i32, out_$i866: i1, out_$i867: i32, out_$i868: i1, out_$i869: i32, out_$i870: i1, out_$i871: i32, out_$i872: i1, out_$i873: i32, out_$i874: i1, out_$i875: i32, out_$i876: i1, out_$i877: i32, out_$i878: i1, out_$i879: i32, out_$i880: i1, out_$i881: i32, out_$i882: i1, out_$i883: i32, out_$i884: i1, out_$i885: i32, out_$i886: i1, out_$i887: i32, out_$i888: i1, out_$i889: i32, out_$i890: i1, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i1, out_vslice_dummy_var_146: i1, out_vslice_dummy_var_147: i1, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i1, out_vslice_dummy_var_167: i1, out_vslice_dummy_var_168: i1, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: i32, out_vslice_dummy_var_188: i32, out_vslice_dummy_var_189: i32, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: i32, out_vslice_dummy_var_192: i32, out_vslice_dummy_var_193: i32, out_vslice_dummy_var_194: i32, out_vslice_dummy_var_195: i32, out_vslice_dummy_var_196: i32, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32)
{

  entry:
    out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$p248, out_$i250, out_$i251, out_$p252, out_$p253, out_$i255, out_$i256, out_$p257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i270, out_$i271, out_$p272, out_$i273, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$p284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$p356, out_$i357, out_$i358, out_$p359, out_$p360, out_$i361, out_$i362, out_$p363, out_$p364, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$i373, out_$i374, out_$p375, out_$i377, out_$i378, out_$p379, out_$p380, out_$i382, out_$i383, out_$p384, out_$p385, out_$i387, out_$i388, out_$p389, out_$p390, out_$i392, out_$i393, out_$p394, out_$i396, out_$i397, out_$p398, out_$i400, out_$i401, out_$p402, out_$i404, out_$i405, out_$p406, out_$i407, out_$i409, out_$i410, out_$p411, out_$i412, out_$i414, out_$i415, out_$p416, out_$i417, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$p433, out_$i435, out_$i436, out_$p437, out_$i438, out_$i439, out_$i440, out_$p441, out_$i443, out_$i444, out_$p445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i455, out_$i456, out_$p457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i485, out_$i486, out_$p487, out_$i489, out_$i490, out_$p491, out_$i493, out_$i494, out_$p495, out_$i497, out_$i498, out_$p499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$p505, out_$i506, out_$i507, out_$p508, out_$p509, out_$i511, out_$i512, out_$p513, out_$p514, out_$i516, out_$i517, out_$p518, out_$p519, out_$i521, out_$i522, out_$p523, out_$p524, out_$p525, out_$i526, out_$i527, out_$p528, out_$p529, out_$p530, out_$i531, out_$i532, out_$p533, out_$p534, out_$p535, out_$i536, out_$i537, out_$p538, out_$i540, out_$i541, out_$p542, out_$i544, out_$i545, out_$p546, out_$i548, out_$i549, out_$p550, out_$i551, out_$i552, out_$i554, out_$i555, out_$p556, out_$i557, out_$i558, out_$i560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i566, out_$i567, out_$p568, out_$p569, out_$p570, out_$i571, out_$i572, out_$p573, out_$p574, out_$p575, out_$i576, out_$i577, out_$p578, out_$p579, out_$p580, out_$i581, out_$i582, out_$p583, out_$p584, out_$i586, out_$i587, out_$p588, out_$p589, out_$i591, out_$i592, out_$p593, out_$p594, out_$i596, out_$i597, out_$p598, out_$p599, out_$i601, out_$i602, out_$p603, out_$p604, out_$i606, out_$i607, out_$p608, out_$p609, out_$i611, out_$i612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$i619, out_$i621, out_$i622, out_$p623, out_$i624, out_$i626, out_$i627, out_$p628, out_$i630, out_$i631, out_$p632, out_$i634, out_$i635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i641, out_$i643, out_$i644, out_$p645, out_$i646, out_$i648, out_$i649, out_$p650, out_$i651, out_$i653, out_$i654, out_$p655, out_$i656, out_$i657, out_$i659, out_$i660, out_$p661, out_$i662, out_$i663, out_$i665, out_$i666, out_$p667, out_$i668, out_$i669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$i679, out_$i680, out_$p681, out_$i683, out_$i684, out_$i686, out_$i687, out_$i688, out_$i689, out_$i691, out_$i692, out_$i693, out_$i694, out_$i696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i701, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$i707, out_$i708, out_$i709, out_$i710, out_$i711, out_$i712, out_$i713, out_$i714, out_$i715, out_$i716, out_$i717, out_$i718, out_$i719, out_$i720, out_$i721, out_$i722, out_$i723, out_$i724, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$i738, out_$i739, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$i783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$i799, out_$i800, out_$i801, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$i808, out_$i809, out_$i810, out_$i811, out_$p812, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$i821, out_$p822, out_$i823, out_$i824, out_$i825, out_$i826, out_$i827, out_$i828, out_$i829, out_$i830, out_$i831, out_$p832, out_$i833, out_$i834, out_$i835, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$i843, out_$i844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$i859, out_$i860, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i886, out_$i887, out_$i888, out_$i889, out_$i890, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210 := in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$p206, in_$i207, in_$i208, in_$i210, in_$i211, in_$p212, in_$i213, in_$i214, in_$i216, in_$i217, in_$p218, in_$i219, in_$i220, in_$i222, in_$i223, in_$p224, in_$i225, in_$i227, in_$i228, in_$p229, in_$i230, in_$i232, in_$i233, in_$p234, in_$i235, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$p247, in_$p248, in_$i250, in_$i251, in_$p252, in_$p253, in_$i255, in_$i256, in_$p257, in_$p258, in_$i260, in_$i261, in_$p262, in_$i263, in_$i265, in_$i266, in_$p267, in_$i268, in_$i270, in_$i271, in_$p272, in_$i273, in_$i275, in_$i276, in_$p277, in_$p278, in_$i279, in_$i280, in_$i281, in_$i282, in_$p283, in_$p284, in_$i285, in_$i286, in_$i287, in_$i288, in_$p289, in_$p290, in_$i291, in_$i292, in_$i293, in_$i294, in_$p295, in_$i297, in_$i298, in_$p299, in_$i301, in_$i302, in_$p303, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$i310, in_$p311, in_$i313, in_$i314, in_$p315, in_$i316, in_$i317, in_$i318, in_$p319, in_$i321, in_$i322, in_$p323, in_$i324, in_$i325, in_$i326, in_$p327, in_$i329, in_$i330, in_$p331, in_$i333, in_$i334, in_$p335, in_$i337, in_$i338, in_$p339, in_$i341, in_$i342, in_$p343, in_$i345, in_$i346, in_$p347, in_$i349, in_$i350, in_$p351, in_$i353, in_$i354, in_$p355, in_$p356, in_$i357, in_$i358, in_$p359, in_$p360, in_$i361, in_$i362, in_$p363, in_$p364, in_$i365, in_$i366, in_$p367, in_$i369, in_$i370, in_$p371, in_$i373, in_$i374, in_$p375, in_$i377, in_$i378, in_$p379, in_$p380, in_$i382, in_$i383, in_$p384, in_$p385, in_$i387, in_$i388, in_$p389, in_$p390, in_$i392, in_$i393, in_$p394, in_$i396, in_$i397, in_$p398, in_$i400, in_$i401, in_$p402, in_$i404, in_$i405, in_$p406, in_$i407, in_$i409, in_$i410, in_$p411, in_$i412, in_$i414, in_$i415, in_$p416, in_$i417, in_$i419, in_$i420, in_$p421, in_$i422, in_$i423, in_$i424, in_$p425, in_$i427, in_$i428, in_$p429, in_$i430, in_$i431, in_$i432, in_$p433, in_$i435, in_$i436, in_$p437, in_$i438, in_$i439, in_$i440, in_$p441, in_$i443, in_$i444, in_$p445, in_$i447, in_$i448, in_$p449, in_$i451, in_$i452, in_$p453, in_$i455, in_$i456, in_$p457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$i463, in_$i465, in_$i466, in_$p467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$i475, in_$i476, in_$p477, in_$i478, in_$i479, in_$i480, in_$i481, in_$i482, in_$i483, in_$i485, in_$i486, in_$p487, in_$i489, in_$i490, in_$p491, in_$i493, in_$i494, in_$p495, in_$i497, in_$i498, in_$p499, in_$i500, in_$i501, in_$p502, in_$i503, in_$i504, in_$p505, in_$i506, in_$i507, in_$p508, in_$p509, in_$i511, in_$i512, in_$p513, in_$p514, in_$i516, in_$i517, in_$p518, in_$p519, in_$i521, in_$i522, in_$p523, in_$p524, in_$p525, in_$i526, in_$i527, in_$p528, in_$p529, in_$p530, in_$i531, in_$i532, in_$p533, in_$p534, in_$p535, in_$i536, in_$i537, in_$p538, in_$i540, in_$i541, in_$p542, in_$i544, in_$i545, in_$p546, in_$i548, in_$i549, in_$p550, in_$i551, in_$i552, in_$i554, in_$i555, in_$p556, in_$i557, in_$i558, in_$i560, in_$i561, in_$p562, in_$i563, in_$i564, in_$i566, in_$i567, in_$p568, in_$p569, in_$p570, in_$i571, in_$i572, in_$p573, in_$p574, in_$p575, in_$i576, in_$i577, in_$p578, in_$p579, in_$p580, in_$i581, in_$i582, in_$p583, in_$p584, in_$i586, in_$i587, in_$p588, in_$p589, in_$i591, in_$i592, in_$p593, in_$p594, in_$i596, in_$i597, in_$p598, in_$p599, in_$i601, in_$i602, in_$p603, in_$p604, in_$i606, in_$i607, in_$p608, in_$p609, in_$i611, in_$i612, in_$p613, in_$i614, in_$i616, in_$i617, in_$p618, in_$i619, in_$i621, in_$i622, in_$p623, in_$i624, in_$i626, in_$i627, in_$p628, in_$i630, in_$i631, in_$p632, in_$i634, in_$i635, in_$p636, in_$i638, in_$i639, in_$p640, in_$i641, in_$i643, in_$i644, in_$p645, in_$i646, in_$i648, in_$i649, in_$p650, in_$i651, in_$i653, in_$i654, in_$p655, in_$i656, in_$i657, in_$i659, in_$i660, in_$p661, in_$i662, in_$i663, in_$i665, in_$i666, in_$p667, in_$i668, in_$i669, in_$i671, in_$i672, in_$p673, in_$i675, in_$i676, in_$p677, in_$i679, in_$i680, in_$p681, in_$i683, in_$i684, in_$i686, in_$i687, in_$i688, in_$i689, in_$i691, in_$i692, in_$i693, in_$i694, in_$i696, in_$i697, in_$i698, in_$i699, in_$i700, in_$i701, in_$i702, in_$i703, in_$i704, in_$i705, in_$i706, in_$i707, in_$i708, in_$i709, in_$i710, in_$i711, in_$i712, in_$i713, in_$i714, in_$i715, in_$i716, in_$i717, in_$i718, in_$i719, in_$i720, in_$i721, in_$i722, in_$i723, in_$i724, in_$i725, in_$i726, in_$i727, in_$i728, in_$i729, in_$i730, in_$i731, in_$i732, in_$i733, in_$i734, in_$i735, in_$i736, in_$i737, in_$i738, in_$i739, in_$i740, in_$i741, in_$i742, in_$i743, in_$i744, in_$i745, in_$i746, in_$i747, in_$i748, in_$i749, in_$i750, in_$i751, in_$i752, in_$i753, in_$i754, in_$i755, in_$i756, in_$i757, in_$i758, in_$i759, in_$i760, in_$i761, in_$i762, in_$i763, in_$i764, in_$i765, in_$i766, in_$i767, in_$i768, in_$i769, in_$i770, in_$i771, in_$i772, in_$i773, in_$i774, in_$i775, in_$i776, in_$i777, in_$i778, in_$i779, in_$i780, in_$i781, in_$i782, in_$i783, in_$i784, in_$i785, in_$i786, in_$i787, in_$i788, in_$i789, in_$i790, in_$i791, in_$i792, in_$i793, in_$i794, in_$i795, in_$i796, in_$i797, in_$i798, in_$i799, in_$i800, in_$i801, in_$i802, in_$i803, in_$i804, in_$i805, in_$i806, in_$i807, in_$i808, in_$i809, in_$i810, in_$i811, in_$p812, in_$i813, in_$i814, in_$i815, in_$i816, in_$i817, in_$i818, in_$i819, in_$i820, in_$i821, in_$p822, in_$i823, in_$i824, in_$i825, in_$i826, in_$i827, in_$i828, in_$i829, in_$i830, in_$i831, in_$p832, in_$i833, in_$i834, in_$i835, in_$i836, in_$i837, in_$i838, in_$i839, in_$i840, in_$i841, in_$i842, in_$i843, in_$i844, in_$i845, in_$i846, in_$i847, in_$i848, in_$i849, in_$i850, in_$i851, in_$i852, in_$i853, in_$i854, in_$i855, in_$i856, in_$i857, in_$i858, in_$i859, in_$i860, in_$i861, in_$i862, in_$i863, in_$i864, in_$i865, in_$i866, in_$i867, in_$i868, in_$i869, in_$i870, in_$i871, in_$i872, in_$i873, in_$i874, in_$i875, in_$i876, in_$i877, in_$i878, in_$i879, in_$i880, in_$i881, in_$i882, in_$i883, in_$i884, in_$i885, in_$i886, in_$i887, in_$i888, in_$i889, in_$i890, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_185, in_vslice_dummy_var_186, in_vslice_dummy_var_187, in_vslice_dummy_var_188, in_vslice_dummy_var_189, in_vslice_dummy_var_190, in_vslice_dummy_var_191, in_vslice_dummy_var_192, in_vslice_dummy_var_193, in_vslice_dummy_var_194, in_vslice_dummy_var_195, in_vslice_dummy_var_196, in_vslice_dummy_var_197, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200, in_vslice_dummy_var_201, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_209, in_vslice_dummy_var_210;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} out_$i71 := __VERIFIER_nondet_int();
    call {:si_unique_call 1661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i71);
    call {:si_unique_call 1662} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i71);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb171_dummy;

  $bb844:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb839:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb833:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb830:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb827:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb818:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb815:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb812:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb809:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb803:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb800:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb794:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb761:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb720:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb714:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb711:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb708:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb702:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb699:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb696:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb693:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb690:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb687:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb684:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb675:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb663:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb660:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb651:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb648:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb645:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb642:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb639:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb630:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb624:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb609:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb606:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb588:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb582:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb579:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb576:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb573:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_main_exported_33();
    goto corral_source_split_7438;

  $bb168:
    assume out_$i155 == 1;
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i32(out_$i154, 0);
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$i154 := $M.137;
    goto corral_source_split_7434;

  $bb166:
    assume out_$i153 == 1;
    goto corral_source_split_7433;

  $bb164:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i71, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb158:
    assume out_$i149 == 1;
    assume {:verifier.code 0} true;
    out_$i152 := $slt.i32(out_$i71, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb148:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i71, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb128:
    assume out_$i134 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i71, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb88:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i71, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb3:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i71, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i71, 40);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb173:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_main_exported_32();
    goto corral_source_split_7441;

  $bb172:
    assume out_$i157 == 1;
    goto corral_source_split_7440;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i32(out_$i156, 0);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i156 := $M.138;
    goto corral_source_split_7430;

  $bb165:
    assume !(out_$i152 == 1);
    goto corral_source_split_7429;

  $bb176:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_main_exported_63();
    goto corral_source_split_7444;

  $bb175:
    assume out_$i159 == 1;
    goto corral_source_split_7443;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.i32(out_$i158, 0);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i158 := $M.139;
    goto corral_source_split_7418;

  $bb160:
    assume out_$i150 == 1;
    goto corral_source_split_7417;

  $bb159:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    out_$i150 := $slt.i32(out_$i71, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb179:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_main_exported_21();
    goto corral_source_split_7447;

  $bb178:
    assume out_$i161 == 1;
    goto corral_source_split_7446;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i32(out_$i160, 0);
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i160 := $M.140;
    goto corral_source_split_7422;

  $bb162:
    assume out_$i151 == 1;
    goto corral_source_split_7421;

  $bb161:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i71, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb182:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ldv_main_exported_71();
    goto corral_source_split_7450;

  $bb181:
    assume out_$i163 == 1;
    goto corral_source_split_7449;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$i163 := $ne.i32(out_$i162, 0);
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    out_$i162 := $M.141;
    goto corral_source_split_7426;

  $bb163:
    assume !(out_$i151 == 1);
    goto corral_source_split_7425;

  $bb185:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_main_exported_7();
    goto corral_source_split_7453;

  $bb184:
    assume out_$i165 == 1;
    goto corral_source_split_7452;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i165 := $ne.i32(out_$i164, 0);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i164 := $M.142;
    goto corral_source_split_7410;

  $bb156:
    assume out_$i148 == 1;
    goto corral_source_split_7409;

  $bb150:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i148 := $slt.i32(out_$i71, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb149:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i71, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb188:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb552:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb519:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb492:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb268:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7618;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} out_vslice_dummy_var_132 := wl12xx_trigger_cmd(out_$p218, out_$i219, in_$p35, out_$i220);
    goto corral_source_split_7617;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i64($M.135, in_$p10);
    goto corral_source_split_7616;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i32($M.135, in_$p16);
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    out_$p218 := $M.51;
    goto corral_source_split_7614;

  $bb267:
    assume out_$i217 == 1;
    goto corral_source_split_7613;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 2);
    goto corral_source_split_7611;

  $bb266:
    assume {:verifier.code 0} true;
    out_$i216 := $M.50;
    goto corral_source_split_7610;

  $bb265:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7608;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} out_vslice_dummy_var_131 := wl12xx_trigger_cmd(out_$p212, out_$i213, in_$p35, out_$i214);
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i64($M.135, in_$p10);
    goto corral_source_split_7606;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.135, in_$p16);
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$p212 := $M.51;
    goto corral_source_split_7604;

  $bb264:
    assume out_$i211 == 1;
    goto corral_source_split_7603;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 3);
    goto corral_source_split_7601;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i210 := $M.50;
    goto corral_source_split_7600;

  $bb262:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7598;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_vslice_dummy_var_130 := wl12xx_trigger_cmd(out_$p206, out_$i207, in_$p35, out_$i208);
    goto corral_source_split_7597;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i64($M.135, in_$p10);
    goto corral_source_split_7596;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i32($M.135, in_$p16);
    goto corral_source_split_7595;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    out_$p206 := $M.51;
    goto corral_source_split_7594;

  $bb261:
    assume out_$i205 == 1;
    goto corral_source_split_7593;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 1);
    goto corral_source_split_7591;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    out_$i204 := $M.50;
    goto corral_source_split_7590;

  $bb259:
    assume out_$i203 == 1;
    goto corral_source_split_7589;

  $bb257:
    assume out_$i202 == 1;
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i168, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb253:
    assume out_$i200 == 1;
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i168, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb245:
    assume out_$i196 == 1;
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i168, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb227:
    assume out_$i187 == 1;
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i168, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb190:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i168, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i169 := $slt.i32(out_$i168, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_7455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} out_$i168 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i168);
    call {:si_unique_call 1671} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i168);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb187:
    assume out_$i167 == 1;
    goto corral_source_split_7455;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 0);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$i166 := $M.50;
    goto corral_source_split_7414;

  $bb157:
    assume !(out_$i148 == 1);
    goto corral_source_split_7413;

  $bb278:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7642;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_135 := wl12xx_set_key(out_$p234, out_$i235, in_$p20, in_$p37, in_$p24);
    goto corral_source_split_7641;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.135, in_$p12);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    out_$p234 := $M.51;
    goto corral_source_split_7639;

  $bb277:
    assume out_$i233 == 1;
    goto corral_source_split_7638;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 2);
    goto corral_source_split_7636;

  $bb276:
    assume {:verifier.code 0} true;
    out_$i232 := $M.50;
    goto corral_source_split_7635;

  $bb275:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} out_vslice_dummy_var_134 := wl12xx_set_key(out_$p229, out_$i230, in_$p20, in_$p37, in_$p24);
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.135, in_$p12);
    goto corral_source_split_7631;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    out_$p229 := $M.51;
    goto corral_source_split_7630;

  $bb274:
    assume out_$i228 == 1;
    goto corral_source_split_7629;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 3);
    goto corral_source_split_7627;

  $bb273:
    assume {:verifier.code 0} true;
    out_$i227 := $M.50;
    goto corral_source_split_7626;

  $bb272:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7624;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} out_vslice_dummy_var_133 := wl12xx_set_key(out_$p224, out_$i225, in_$p20, in_$p37, in_$p24);
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i32($M.135, in_$p12);
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    out_$p224 := $M.51;
    goto corral_source_split_7621;

  $bb271:
    assume out_$i223 == 1;
    goto corral_source_split_7620;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 1);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$i222 := $M.50;
    goto corral_source_split_7586;

  $bb258:
    assume !(out_$i202 == 1);
    goto corral_source_split_7585;

  $bb281:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb283:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.200 := out_$i244;
    call {:si_unique_call 1687} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    out_$i244 := $add.i32(out_$i243, 1);
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i243 := $M.200;
    goto corral_source_split_7653;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7652;

  $bb282:
    assume out_$i242 == 1;
    goto corral_source_split_7651;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 0);
    goto corral_source_split_7649;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    out_$i241 := $M.218;
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $M.218 := out_$i240;
    call {:si_unique_call 1685} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_7647;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} out_$i240 := wl12xx_setup(out_$p239);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    out_$p239 := $M.51;
    goto corral_source_split_7645;

  $bb280:
    assume out_$i238 == 1;
    goto corral_source_split_7644;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i237 := $M.50;
    goto corral_source_split_7578;

  $bb255:
    assume out_$i201 == 1;
    goto corral_source_split_7577;

  $bb254:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$i201 := $slt.i32(out_$i168, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb293:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7679;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} out_vslice_dummy_var_138 := wl12xx_scan_start(out_$p257, out_$p258, in_$p40);
    goto corral_source_split_7678;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    out_$p258 := $M.53;
    goto corral_source_split_7677;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$p257 := $M.51;
    goto corral_source_split_7676;

  $bb292:
    assume out_$i256 == 1;
    goto corral_source_split_7675;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 2);
    goto corral_source_split_7673;

  $bb291:
    assume {:verifier.code 0} true;
    out_$i255 := $M.50;
    goto corral_source_split_7672;

  $bb290:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7670;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} out_vslice_dummy_var_137 := wl12xx_scan_start(out_$p252, out_$p253, in_$p40);
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$p253 := $M.53;
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$p252 := $M.51;
    goto corral_source_split_7667;

  $bb289:
    assume out_$i251 == 1;
    goto corral_source_split_7666;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 3);
    goto corral_source_split_7664;

  $bb288:
    assume {:verifier.code 0} true;
    out_$i250 := $M.50;
    goto corral_source_split_7663;

  $bb287:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7661;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} out_vslice_dummy_var_136 := wl12xx_scan_start(out_$p247, out_$p248, in_$p40);
    goto corral_source_split_7660;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$p248 := $M.53;
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$p247 := $M.51;
    goto corral_source_split_7658;

  $bb286:
    assume out_$i246 == 1;
    goto corral_source_split_7657;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 1);
    goto corral_source_split_7583;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$i245 := $M.50;
    goto corral_source_split_7582;

  $bb256:
    assume !(out_$i201 == 1);
    goto corral_source_split_7581;

  $bb302:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7703;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_vslice_dummy_var_141 := wl12xx_wait_for_event(out_$p272, out_$i273, in_$p41);
    goto corral_source_split_7702;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i32($M.135, in_$p5);
    goto corral_source_split_7701;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    out_$p272 := $M.51;
    goto corral_source_split_7700;

  $bb301:
    assume out_$i271 == 1;
    goto corral_source_split_7699;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 2);
    goto corral_source_split_7697;

  $bb300:
    assume {:verifier.code 0} true;
    out_$i270 := $M.50;
    goto corral_source_split_7696;

  $bb299:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} out_vslice_dummy_var_140 := wl12xx_wait_for_event(out_$p267, out_$i268, in_$p41);
    goto corral_source_split_7693;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    out_$i268 := $load.i32($M.135, in_$p5);
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    out_$p267 := $M.51;
    goto corral_source_split_7691;

  $bb298:
    assume out_$i266 == 1;
    goto corral_source_split_7690;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 3);
    goto corral_source_split_7688;

  $bb297:
    assume {:verifier.code 0} true;
    out_$i265 := $M.50;
    goto corral_source_split_7687;

  $bb296:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7685;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} out_vslice_dummy_var_139 := wl12xx_wait_for_event(out_$p262, out_$i263, in_$p41);
    goto corral_source_split_7684;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.135, in_$p5);
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$p262 := $M.51;
    goto corral_source_split_7682;

  $bb295:
    assume out_$i261 == 1;
    goto corral_source_split_7681;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 1);
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    out_$i260 := $M.50;
    goto corral_source_split_7570;

  $bb251:
    assume out_$i199 == 1;
    goto corral_source_split_7569;

  $bb247:
    assume out_$i197 == 1;
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i168, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb246:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    out_$i197 := $slt.i32(out_$i168, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb311:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7733;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} wl12xx_set_tx_desc_blocks(out_$p289, out_$p290, out_$i291, out_$i292);
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i32($M.135, in_$p3);
    goto corral_source_split_7731;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i32($M.135, in_$p0);
    goto corral_source_split_7730;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    out_$p290 := $M.55;
    goto corral_source_split_7729;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$p289 := $M.51;
    goto corral_source_split_7728;

  $bb310:
    assume out_$i288 == 1;
    goto corral_source_split_7727;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 2);
    goto corral_source_split_7725;

  $bb309:
    assume {:verifier.code 0} true;
    out_$i287 := $M.50;
    goto corral_source_split_7724;

  $bb308:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} wl12xx_set_tx_desc_blocks(out_$p283, out_$p284, out_$i285, out_$i286);
    goto corral_source_split_7721;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i32($M.135, in_$p3);
    goto corral_source_split_7720;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.135, in_$p0);
    goto corral_source_split_7719;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    out_$p284 := $M.55;
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    out_$p283 := $M.51;
    goto corral_source_split_7717;

  $bb307:
    assume out_$i282 == 1;
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 3);
    goto corral_source_split_7714;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i281 := $M.50;
    goto corral_source_split_7713;

  $bb305:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7711;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} wl12xx_set_tx_desc_blocks(out_$p277, out_$p278, out_$i279, out_$i280);
    goto corral_source_split_7710;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.135, in_$p3);
    goto corral_source_split_7709;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.135, in_$p0);
    goto corral_source_split_7708;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$p278 := $M.55;
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    out_$p277 := $M.51;
    goto corral_source_split_7706;

  $bb304:
    assume out_$i276 == 1;
    goto corral_source_split_7705;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 1);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$i275 := $M.50;
    goto corral_source_split_7574;

  $bb252:
    assume !(out_$i199 == 1);
    goto corral_source_split_7573;

  $bb320:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7754;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} out_vslice_dummy_var_144 := wl12xx_get_mac(out_$p303);
    goto corral_source_split_7753;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    out_$p303 := $M.51;
    goto corral_source_split_7752;

  $bb319:
    assume out_$i302 == 1;
    goto corral_source_split_7751;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 2);
    goto corral_source_split_7749;

  $bb318:
    assume {:verifier.code 0} true;
    out_$i301 := $M.50;
    goto corral_source_split_7748;

  $bb317:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7746;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_vslice_dummy_var_143 := wl12xx_get_mac(out_$p299);
    goto corral_source_split_7745;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    out_$p299 := $M.51;
    goto corral_source_split_7744;

  $bb316:
    assume out_$i298 == 1;
    goto corral_source_split_7743;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 3);
    goto corral_source_split_7741;

  $bb315:
    assume {:verifier.code 0} true;
    out_$i297 := $M.50;
    goto corral_source_split_7740;

  $bb314:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7738;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_142 := wl12xx_get_mac(out_$p295);
    goto corral_source_split_7737;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$p295 := $M.51;
    goto corral_source_split_7736;

  $bb313:
    assume out_$i294 == 1;
    goto corral_source_split_7735;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_7563;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    out_$i293 := $M.50;
    goto corral_source_split_7562;

  $bb249:
    assume out_$i198 == 1;
    goto corral_source_split_7561;

  $bb248:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i168, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb329:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7787;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} out_vslice_dummy_var_147 := wl12xx_lnk_low_prio(out_$p323, out_$i326, out_$p327);
    goto corral_source_split_7786;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$p327 := $M.52;
    goto corral_source_split_7785;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    out_$i326 := $trunc.i32.i8(out_$i325);
    goto corral_source_split_7784;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    out_$i325 := $zext.i8.i32(out_$i324);
    goto corral_source_split_7783;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    out_$i324 := $load.i8($M.135, in_$p11);
    goto corral_source_split_7782;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    out_$p323 := $M.51;
    goto corral_source_split_7781;

  $bb328:
    assume out_$i322 == 1;
    goto corral_source_split_7780;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 2);
    goto corral_source_split_7778;

  $bb327:
    assume {:verifier.code 0} true;
    out_$i321 := $M.50;
    goto corral_source_split_7777;

  $bb326:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7775;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} out_vslice_dummy_var_146 := wl12xx_lnk_low_prio(out_$p315, out_$i318, out_$p319);
    goto corral_source_split_7774;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    out_$p319 := $M.52;
    goto corral_source_split_7773;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i318 := $trunc.i32.i8(out_$i317);
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$i317 := $zext.i8.i32(out_$i316);
    goto corral_source_split_7771;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i8($M.135, in_$p11);
    goto corral_source_split_7770;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    out_$p315 := $M.51;
    goto corral_source_split_7769;

  $bb325:
    assume out_$i314 == 1;
    goto corral_source_split_7768;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 3);
    goto corral_source_split_7766;

  $bb324:
    assume {:verifier.code 0} true;
    out_$i313 := $M.50;
    goto corral_source_split_7765;

  $bb323:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} out_vslice_dummy_var_145 := wl12xx_lnk_low_prio(out_$p307, out_$i310, out_$p311);
    goto corral_source_split_7762;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$p311 := $M.52;
    goto corral_source_split_7761;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    out_$i310 := $trunc.i32.i8(out_$i309);
    goto corral_source_split_7760;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_7759;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i8($M.135, in_$p11);
    goto corral_source_split_7758;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    out_$p307 := $M.51;
    goto corral_source_split_7757;

  $bb322:
    assume out_$i306 == 1;
    goto corral_source_split_7756;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 1);
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$i305 := $M.50;
    goto corral_source_split_7566;

  $bb250:
    assume !(out_$i198 == 1);
    goto corral_source_split_7565;

  $bb338:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7808;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} out_vslice_dummy_var_150 := wl12xx_identify_chip(out_$p339);
    goto corral_source_split_7807;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    out_$p339 := $M.51;
    goto corral_source_split_7806;

  $bb337:
    assume out_$i338 == 1;
    goto corral_source_split_7805;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 2);
    goto corral_source_split_7803;

  $bb336:
    assume {:verifier.code 0} true;
    out_$i337 := $M.50;
    goto corral_source_split_7802;

  $bb335:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7800;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} out_vslice_dummy_var_149 := wl12xx_identify_chip(out_$p335);
    goto corral_source_split_7799;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    out_$p335 := $M.51;
    goto corral_source_split_7798;

  $bb334:
    assume out_$i334 == 1;
    goto corral_source_split_7797;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 3);
    goto corral_source_split_7795;

  $bb333:
    assume {:verifier.code 0} true;
    out_$i333 := $M.50;
    goto corral_source_split_7794;

  $bb332:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7792;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} out_vslice_dummy_var_148 := wl12xx_identify_chip(out_$p331);
    goto corral_source_split_7791;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    out_$p331 := $M.51;
    goto corral_source_split_7790;

  $bb331:
    assume out_$i330 == 1;
    goto corral_source_split_7789;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 1);
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    out_$i329 := $M.50;
    goto corral_source_split_7554;

  $bb243:
    assume out_$i195 == 1;
    goto corral_source_split_7553;

  $bb239:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i168, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb229:
    assume out_$i188 == 1;
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i168, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb228:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $slt.i32(out_$i168, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb347:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7829;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} out_vslice_dummy_var_153 := wl12xx_hw_init(out_$p351);
    goto corral_source_split_7828;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    out_$p351 := $M.51;
    goto corral_source_split_7827;

  $bb346:
    assume out_$i350 == 1;
    goto corral_source_split_7826;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 2);
    goto corral_source_split_7824;

  $bb345:
    assume {:verifier.code 0} true;
    out_$i349 := $M.50;
    goto corral_source_split_7823;

  $bb344:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7821;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} out_vslice_dummy_var_152 := wl12xx_hw_init(out_$p347);
    goto corral_source_split_7820;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    out_$p347 := $M.51;
    goto corral_source_split_7819;

  $bb343:
    assume out_$i346 == 1;
    goto corral_source_split_7818;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 3);
    goto corral_source_split_7816;

  $bb342:
    assume {:verifier.code 0} true;
    out_$i345 := $M.50;
    goto corral_source_split_7815;

  $bb341:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7813;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} out_vslice_dummy_var_151 := wl12xx_hw_init(out_$p343);
    goto corral_source_split_7812;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    out_$p343 := $M.51;
    goto corral_source_split_7811;

  $bb340:
    assume out_$i342 == 1;
    goto corral_source_split_7810;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i341, 1);
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    out_$i341 := $M.50;
    goto corral_source_split_7558;

  $bb244:
    assume !(out_$i195 == 1);
    goto corral_source_split_7557;

  $bb356:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7853;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} wl12xx_scan_sched_scan_stop(out_$p363, out_$p364);
    goto corral_source_split_7852;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    out_$p364 := $M.53;
    goto corral_source_split_7851;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    out_$p363 := $M.51;
    goto corral_source_split_7850;

  $bb355:
    assume out_$i362 == 1;
    goto corral_source_split_7849;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 2);
    goto corral_source_split_7847;

  $bb354:
    assume {:verifier.code 0} true;
    out_$i361 := $M.50;
    goto corral_source_split_7846;

  $bb353:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7844;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} wl12xx_scan_sched_scan_stop(out_$p359, out_$p360);
    goto corral_source_split_7843;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    out_$p360 := $M.53;
    goto corral_source_split_7842;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    out_$p359 := $M.51;
    goto corral_source_split_7841;

  $bb352:
    assume out_$i358 == 1;
    goto corral_source_split_7840;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 3);
    goto corral_source_split_7838;

  $bb351:
    assume {:verifier.code 0} true;
    out_$i357 := $M.50;
    goto corral_source_split_7837;

  $bb350:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7835;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} wl12xx_scan_sched_scan_stop(out_$p355, out_$p356);
    goto corral_source_split_7834;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    out_$p356 := $M.53;
    goto corral_source_split_7833;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    out_$p355 := $M.51;
    goto corral_source_split_7832;

  $bb349:
    assume out_$i354 == 1;
    goto corral_source_split_7831;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 1);
    goto corral_source_split_7547;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$i353 := $M.50;
    goto corral_source_split_7546;

  $bb241:
    assume out_$i194 == 1;
    goto corral_source_split_7545;

  $bb240:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i168, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb365:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7874;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} out_vslice_dummy_var_156 := wl12xx_debugfs_add_files(out_$p375, in_$p30);
    goto corral_source_split_7873;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    out_$p375 := $M.51;
    goto corral_source_split_7872;

  $bb364:
    assume out_$i374 == 1;
    goto corral_source_split_7871;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 2);
    goto corral_source_split_7869;

  $bb363:
    assume {:verifier.code 0} true;
    out_$i373 := $M.50;
    goto corral_source_split_7868;

  $bb362:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7866;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} out_vslice_dummy_var_155 := wl12xx_debugfs_add_files(out_$p371, in_$p30);
    goto corral_source_split_7865;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    out_$p371 := $M.51;
    goto corral_source_split_7864;

  $bb361:
    assume out_$i370 == 1;
    goto corral_source_split_7863;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 3);
    goto corral_source_split_7861;

  $bb360:
    assume {:verifier.code 0} true;
    out_$i369 := $M.50;
    goto corral_source_split_7860;

  $bb359:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7858;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} out_vslice_dummy_var_154 := wl12xx_debugfs_add_files(out_$p367, in_$p30);
    goto corral_source_split_7857;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    out_$p367 := $M.51;
    goto corral_source_split_7856;

  $bb358:
    assume out_$i366 == 1;
    goto corral_source_split_7855;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 1);
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    out_$i365 := $M.50;
    goto corral_source_split_7550;

  $bb242:
    assume !(out_$i194 == 1);
    goto corral_source_split_7549;

  $bb374:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} out_vslice_dummy_var_159 := wl12xx_sched_scan_start(out_$p389, out_$p390, in_$p33, in_$p22);
    goto corral_source_split_7897;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    out_$p390 := $M.53;
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    out_$p389 := $M.51;
    goto corral_source_split_7895;

  $bb373:
    assume out_$i388 == 1;
    goto corral_source_split_7894;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 2);
    goto corral_source_split_7892;

  $bb372:
    assume {:verifier.code 0} true;
    out_$i387 := $M.50;
    goto corral_source_split_7891;

  $bb371:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7889;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} out_vslice_dummy_var_158 := wl12xx_sched_scan_start(out_$p384, out_$p385, in_$p33, in_$p22);
    goto corral_source_split_7888;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    out_$p385 := $M.53;
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    out_$p384 := $M.51;
    goto corral_source_split_7886;

  $bb370:
    assume out_$i383 == 1;
    goto corral_source_split_7885;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 3);
    goto corral_source_split_7883;

  $bb369:
    assume {:verifier.code 0} true;
    out_$i382 := $M.50;
    goto corral_source_split_7882;

  $bb368:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7880;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_vslice_dummy_var_157 := wl12xx_sched_scan_start(out_$p379, out_$p380, in_$p33, in_$p22);
    goto corral_source_split_7879;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    out_$p380 := $M.53;
    goto corral_source_split_7878;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    out_$p379 := $M.51;
    goto corral_source_split_7877;

  $bb367:
    assume out_$i378 == 1;
    goto corral_source_split_7876;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 1);
    goto corral_source_split_7539;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    out_$i377 := $M.50;
    goto corral_source_split_7538;

  $bb237:
    assume out_$i192 == 1;
    goto corral_source_split_7537;

  $bb231:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i168, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb230:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i168, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb383:
    assume !(out_$i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7919;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} out_vslice_dummy_var_162 := wl12xx_process_mailbox_events(out_$p402);
    goto corral_source_split_7918;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    out_$p402 := $M.51;
    goto corral_source_split_7917;

  $bb382:
    assume out_$i401 == 1;
    goto corral_source_split_7916;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i400, 2);
    goto corral_source_split_7914;

  $bb381:
    assume {:verifier.code 0} true;
    out_$i400 := $M.50;
    goto corral_source_split_7913;

  $bb380:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7911;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} out_vslice_dummy_var_161 := wl12xx_process_mailbox_events(out_$p398);
    goto corral_source_split_7910;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    out_$p398 := $M.51;
    goto corral_source_split_7909;

  $bb379:
    assume out_$i397 == 1;
    goto corral_source_split_7908;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i32(out_$i396, 3);
    goto corral_source_split_7906;

  $bb378:
    assume {:verifier.code 0} true;
    out_$i396 := $M.50;
    goto corral_source_split_7905;

  $bb377:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7903;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} out_vslice_dummy_var_160 := wl12xx_process_mailbox_events(out_$p394);
    goto corral_source_split_7902;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    out_$p394 := $M.51;
    goto corral_source_split_7901;

  $bb376:
    assume out_$i393 == 1;
    goto corral_source_split_7900;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 1);
    goto corral_source_split_7543;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$i392 := $M.50;
    goto corral_source_split_7542;

  $bb238:
    assume !(out_$i192 == 1);
    goto corral_source_split_7541;

  $bb392:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7943;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} out_vslice_dummy_var_165 := wl12xx_convert_hwaddr(out_$p416, out_$i417);
    goto corral_source_split_7942;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i32($M.135, in_$p15);
    goto corral_source_split_7941;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    out_$p416 := $M.51;
    goto corral_source_split_7940;

  $bb391:
    assume out_$i415 == 1;
    goto corral_source_split_7939;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    out_$i415 := $eq.i32(out_$i414, 2);
    goto corral_source_split_7937;

  $bb390:
    assume {:verifier.code 0} true;
    out_$i414 := $M.50;
    goto corral_source_split_7936;

  $bb389:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7934;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_vslice_dummy_var_164 := wl12xx_convert_hwaddr(out_$p411, out_$i412);
    goto corral_source_split_7933;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    out_$i412 := $load.i32($M.135, in_$p15);
    goto corral_source_split_7932;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    out_$p411 := $M.51;
    goto corral_source_split_7931;

  $bb388:
    assume out_$i410 == 1;
    goto corral_source_split_7930;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 3);
    goto corral_source_split_7928;

  $bb387:
    assume {:verifier.code 0} true;
    out_$i409 := $M.50;
    goto corral_source_split_7927;

  $bb386:
    assume !(out_$i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7925;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_vslice_dummy_var_163 := wl12xx_convert_hwaddr(out_$p406, out_$i407);
    goto corral_source_split_7924;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    out_$i407 := $load.i32($M.135, in_$p15);
    goto corral_source_split_7923;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    out_$p406 := $M.51;
    goto corral_source_split_7922;

  $bb385:
    assume out_$i405 == 1;
    goto corral_source_split_7921;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$i405 := $eq.i32(out_$i404, 1);
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    out_$i404 := $M.50;
    goto corral_source_split_7526;

  $bb233:
    assume out_$i190 == 1;
    goto corral_source_split_7525;

  $bb232:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i168, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb401:
    assume !(out_$i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7976;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} out_vslice_dummy_var_168 := wl12xx_lnk_high_prio(out_$p437, out_$i440, out_$p441);
    goto corral_source_split_7975;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    out_$p441 := $M.52;
    goto corral_source_split_7974;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    out_$i440 := $trunc.i32.i8(out_$i439);
    goto corral_source_split_7973;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    out_$i439 := $zext.i8.i32(out_$i438);
    goto corral_source_split_7972;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    out_$i438 := $load.i8($M.135, in_$p6);
    goto corral_source_split_7971;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    out_$p437 := $M.51;
    goto corral_source_split_7970;

  $bb400:
    assume out_$i436 == 1;
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    out_$i436 := $eq.i32(out_$i435, 2);
    goto corral_source_split_7967;

  $bb399:
    assume {:verifier.code 0} true;
    out_$i435 := $M.50;
    goto corral_source_split_7966;

  $bb398:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7964;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_vslice_dummy_var_167 := wl12xx_lnk_high_prio(out_$p429, out_$i432, out_$p433);
    goto corral_source_split_7963;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    out_$p433 := $M.52;
    goto corral_source_split_7962;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    out_$i432 := $trunc.i32.i8(out_$i431);
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    out_$i431 := $zext.i8.i32(out_$i430);
    goto corral_source_split_7960;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    out_$i430 := $load.i8($M.135, in_$p6);
    goto corral_source_split_7959;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    out_$p429 := $M.51;
    goto corral_source_split_7958;

  $bb397:
    assume out_$i428 == 1;
    goto corral_source_split_7957;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i427, 3);
    goto corral_source_split_7955;

  $bb396:
    assume {:verifier.code 0} true;
    out_$i427 := $M.50;
    goto corral_source_split_7954;

  $bb395:
    assume !(out_$i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    goto $bb396;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7952;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} out_vslice_dummy_var_166 := wl12xx_lnk_high_prio(out_$p421, out_$i424, out_$p425);
    goto corral_source_split_7951;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    out_$p425 := $M.52;
    goto corral_source_split_7950;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    out_$i424 := $trunc.i32.i8(out_$i423);
    goto corral_source_split_7949;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    out_$i423 := $zext.i8.i32(out_$i422);
    goto corral_source_split_7948;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    out_$i422 := $load.i8($M.135, in_$p6);
    goto corral_source_split_7947;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    out_$p421 := $M.51;
    goto corral_source_split_7946;

  $bb394:
    assume out_$i420 == 1;
    goto corral_source_split_7945;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$i420 := $eq.i32(out_$i419, 1);
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i419 := $M.50;
    goto corral_source_split_7530;

  $bb235:
    assume out_$i191 == 1;
    goto corral_source_split_7529;

  $bb234:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i168, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb410:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_7997;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_vslice_dummy_var_171 := wl12xx_tx_delayed_compl(out_$p453);
    goto corral_source_split_7996;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    out_$p453 := $M.51;
    goto corral_source_split_7995;

  $bb409:
    assume out_$i452 == 1;
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, 2);
    goto corral_source_split_7992;

  $bb408:
    assume {:verifier.code 0} true;
    out_$i451 := $M.50;
    goto corral_source_split_7991;

  $bb407:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb408;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_7989;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} out_vslice_dummy_var_170 := wl12xx_tx_delayed_compl(out_$p449);
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    out_$p449 := $M.51;
    goto corral_source_split_7987;

  $bb406:
    assume out_$i448 == 1;
    goto corral_source_split_7986;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, 3);
    goto corral_source_split_7984;

  $bb405:
    assume {:verifier.code 0} true;
    out_$i447 := $M.50;
    goto corral_source_split_7983;

  $bb404:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_7981;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_vslice_dummy_var_169 := wl12xx_tx_delayed_compl(out_$p445);
    goto corral_source_split_7980;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    out_$p445 := $M.51;
    goto corral_source_split_7979;

  $bb403:
    assume out_$i444 == 1;
    goto corral_source_split_7978;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$i444 := $eq.i32(out_$i443, 1);
    goto corral_source_split_7535;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    out_$i443 := $M.50;
    goto corral_source_split_7534;

  $bb236:
    assume !(out_$i191 == 1);
    goto corral_source_split_7533;

  $bb419:
    assume !(out_$i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_vslice_dummy_var_174 := wl12xx_set_peer_cap(out_$p477, in_$p18, out_$i479, out_$i480, out_$i483);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i483 := $trunc.i32.i8(out_$i482);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$i482 := $zext.i8.i32(out_$i481);
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$i481 := $load.i8($M.135, in_$p2);
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$i480 := $load.i32($M.135, in_$p14);
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    out_$i479 := $trunc.i8.i1(out_$i478);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$i478 := $load.i8($M.135, in_$p9);
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    out_$p477 := $M.51;
    goto corral_source_split_8028;

  $bb418:
    assume out_$i476 == 1;
    goto corral_source_split_8027;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i475, 2);
    goto corral_source_split_8025;

  $bb417:
    assume {:verifier.code 0} true;
    out_$i475 := $M.50;
    goto corral_source_split_8024;

  $bb416:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} out_vslice_dummy_var_173 := wl12xx_set_peer_cap(out_$p467, in_$p18, out_$i469, out_$i470, out_$i473);
    goto corral_source_split_8021;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    out_$i473 := $trunc.i32.i8(out_$i472);
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    out_$i472 := $zext.i8.i32(out_$i471);
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i471 := $load.i8($M.135, in_$p2);
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$i470 := $load.i32($M.135, in_$p14);
    goto corral_source_split_8017;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    out_$i469 := $trunc.i8.i1(out_$i468);
    goto corral_source_split_8016;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    out_$i468 := $load.i8($M.135, in_$p9);
    goto corral_source_split_8015;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    out_$p467 := $M.51;
    goto corral_source_split_8014;

  $bb415:
    assume out_$i466 == 1;
    goto corral_source_split_8013;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, 3);
    goto corral_source_split_8011;

  $bb414:
    assume {:verifier.code 0} true;
    out_$i465 := $M.50;
    goto corral_source_split_8010;

  $bb413:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8008;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_vslice_dummy_var_172 := wl12xx_set_peer_cap(out_$p457, in_$p18, out_$i459, out_$i460, out_$i463);
    goto corral_source_split_8007;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    out_$i463 := $trunc.i32.i8(out_$i462);
    goto corral_source_split_8006;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    out_$i462 := $zext.i8.i32(out_$i461);
    goto corral_source_split_8005;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    out_$i461 := $load.i8($M.135, in_$p2);
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$i460 := $load.i32($M.135, in_$p14);
    goto corral_source_split_8003;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    out_$i459 := $trunc.i8.i1(out_$i458);
    goto corral_source_split_8002;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    out_$i458 := $load.i8($M.135, in_$p9);
    goto corral_source_split_8001;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$p457 := $M.51;
    goto corral_source_split_8000;

  $bb412:
    assume out_$i456 == 1;
    goto corral_source_split_7999;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i32(out_$i455, 1);
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    out_$i455 := $M.50;
    goto corral_source_split_7518;

  $bb225:
    assume out_$i186 == 1;
    goto corral_source_split_7517;

  $bb221:
    assume out_$i184 == 1;
    assume {:verifier.code 0} true;
    out_$i186 := $slt.i32(out_$i168, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb213:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i168, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb192:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i168, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb191:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$i170 := $slt.i32(out_$i168, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb428:
    assume !(out_$i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8057;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} out_vslice_dummy_var_177 := wl12xx_boot(out_$p495);
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    out_$p495 := $M.51;
    goto corral_source_split_8055;

  $bb427:
    assume out_$i494 == 1;
    goto corral_source_split_8054;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    out_$i494 := $eq.i32(out_$i493, 2);
    goto corral_source_split_8052;

  $bb426:
    assume {:verifier.code 0} true;
    out_$i493 := $M.50;
    goto corral_source_split_8051;

  $bb425:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    goto $bb426;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8049;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} out_vslice_dummy_var_176 := wl12xx_boot(out_$p491);
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    out_$p491 := $M.51;
    goto corral_source_split_8047;

  $bb424:
    assume out_$i490 == 1;
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i489, 3);
    goto corral_source_split_8044;

  $bb423:
    assume {:verifier.code 0} true;
    out_$i489 := $M.50;
    goto corral_source_split_8043;

  $bb422:
    assume !(out_$i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_vslice_dummy_var_175 := wl12xx_boot(out_$p487);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$p487 := $M.51;
    goto corral_source_split_8039;

  $bb421:
    assume out_$i486 == 1;
    goto corral_source_split_8038;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i486 := $eq.i32(out_$i485, 1);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i485 := $M.50;
    goto corral_source_split_7522;

  $bb226:
    assume !(out_$i186 == 1);
    goto corral_source_split_7521;

  $bb437:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8078;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} wl12xx_convert_fw_status(out_$p505, in_$p34, in_$p28);
    goto corral_source_split_8077;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    out_$p505 := $M.51;
    goto corral_source_split_8076;

  $bb436:
    assume out_$i504 == 1;
    goto corral_source_split_8075;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 2);
    goto corral_source_split_8073;

  $bb435:
    assume {:verifier.code 0} true;
    out_$i503 := $M.50;
    goto corral_source_split_8072;

  $bb434:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} wl12xx_convert_fw_status(out_$p502, in_$p34, in_$p28);
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$p502 := $M.51;
    goto corral_source_split_8068;

  $bb433:
    assume out_$i501 == 1;
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i500, 3);
    goto corral_source_split_8065;

  $bb432:
    assume {:verifier.code 0} true;
    out_$i500 := $M.50;
    goto corral_source_split_8064;

  $bb431:
    assume !(out_$i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb432;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} wl12xx_convert_fw_status(out_$p499, in_$p34, in_$p28);
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$p499 := $M.51;
    goto corral_source_split_8060;

  $bb430:
    assume out_$i498 == 1;
    goto corral_source_split_8059;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i498 := $eq.i32(out_$i497, 1);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i497 := $M.50;
    goto corral_source_split_7510;

  $bb223:
    assume out_$i185 == 1;
    goto corral_source_split_7509;

  $bb222:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i168, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb446:
    assume !(out_$i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} out_vslice_dummy_var_180 := wl12xx_scan_stop(out_$p518, out_$p519);
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$p519 := $M.53;
    goto corral_source_split_8100;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    out_$p518 := $M.51;
    goto corral_source_split_8099;

  $bb445:
    assume out_$i517 == 1;
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$i517 := $eq.i32(out_$i516, 2);
    goto corral_source_split_8096;

  $bb444:
    assume {:verifier.code 0} true;
    out_$i516 := $M.50;
    goto corral_source_split_8095;

  $bb443:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb444;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8093;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_179 := wl12xx_scan_stop(out_$p513, out_$p514);
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    out_$p514 := $M.53;
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$p513 := $M.51;
    goto corral_source_split_8090;

  $bb442:
    assume out_$i512 == 1;
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i511, 3);
    goto corral_source_split_8087;

  $bb441:
    assume {:verifier.code 0} true;
    out_$i511 := $M.50;
    goto corral_source_split_8086;

  $bb440:
    assume !(out_$i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_178 := wl12xx_scan_stop(out_$p508, out_$p509);
    goto corral_source_split_8083;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$p509 := $M.53;
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    out_$p508 := $M.51;
    goto corral_source_split_8081;

  $bb439:
    assume out_$i507 == 1;
    goto corral_source_split_8080;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$i507 := $eq.i32(out_$i506, 1);
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$i506 := $M.50;
    goto corral_source_split_7514;

  $bb224:
    assume !(out_$i185 == 1);
    goto corral_source_split_7513;

  $bb455:
    assume !(out_$i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb456;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    goto $bb456;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8129;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} wl12xx_set_tx_desc_csum(out_$p533, out_$p534, out_$p535);
    goto corral_source_split_8128;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$p535 := $M.54;
    goto corral_source_split_8127;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    out_$p534 := $M.55;
    goto corral_source_split_8126;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    out_$p533 := $M.51;
    goto corral_source_split_8125;

  $bb454:
    assume out_$i532 == 1;
    goto corral_source_split_8124;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb454, $bb455;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    out_$i532 := $eq.i32(out_$i531, 2);
    goto corral_source_split_8122;

  $bb453:
    assume {:verifier.code 0} true;
    out_$i531 := $M.50;
    goto corral_source_split_8121;

  $bb452:
    assume !(out_$i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} wl12xx_set_tx_desc_csum(out_$p528, out_$p529, out_$p530);
    goto corral_source_split_8118;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$p530 := $M.54;
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$p529 := $M.55;
    goto corral_source_split_8116;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$p528 := $M.51;
    goto corral_source_split_8115;

  $bb451:
    assume out_$i527 == 1;
    goto corral_source_split_8114;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$i527 := $eq.i32(out_$i526, 3);
    goto corral_source_split_8112;

  $bb450:
    assume {:verifier.code 0} true;
    out_$i526 := $M.50;
    goto corral_source_split_8111;

  $bb449:
    assume !(out_$i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    goto $bb450;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8109;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} wl12xx_set_tx_desc_csum(out_$p523, out_$p524, out_$p525);
    goto corral_source_split_8108;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    out_$p525 := $M.54;
    goto corral_source_split_8107;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    out_$p524 := $M.55;
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    out_$p523 := $M.51;
    goto corral_source_split_8105;

  $bb448:
    assume out_$i522 == 1;
    goto corral_source_split_8104;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$i522 := $eq.i32(out_$i521, 1);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i521 := $M.50;
    goto corral_source_split_7502;

  $bb219:
    assume out_$i183 == 1;
    goto corral_source_split_7501;

  $bb215:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i183 := $slt.i32(out_$i168, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb214:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i168, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb464:
    assume !(out_$i545 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    goto $bb465;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1807} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8150;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} out_vslice_dummy_var_183 := wl12xx_ack_event(out_$p546);
    goto corral_source_split_8149;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    out_$p546 := $M.51;
    goto corral_source_split_8148;

  $bb463:
    assume out_$i545 == 1;
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i545 := $eq.i32(out_$i544, 2);
    goto corral_source_split_8145;

  $bb462:
    assume {:verifier.code 0} true;
    out_$i544 := $M.50;
    goto corral_source_split_8144;

  $bb461:
    assume !(out_$i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    goto $bb462;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8142;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} out_vslice_dummy_var_182 := wl12xx_ack_event(out_$p542);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$p542 := $M.51;
    goto corral_source_split_8140;

  $bb460:
    assume out_$i541 == 1;
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb460, $bb461;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$i541 := $eq.i32(out_$i540, 3);
    goto corral_source_split_8137;

  $bb459:
    assume {:verifier.code 0} true;
    out_$i540 := $M.50;
    goto corral_source_split_8136;

  $bb458:
    assume !(out_$i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb459;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} out_vslice_dummy_var_181 := wl12xx_ack_event(out_$p538);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    out_$p538 := $M.51;
    goto corral_source_split_8132;

  $bb457:
    assume out_$i537 == 1;
    goto corral_source_split_8131;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$i537 := $eq.i32(out_$i536, 1);
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i536 := $M.50;
    goto corral_source_split_7506;

  $bb220:
    assume !(out_$i183 == 1);
    goto corral_source_split_7505;

  $bb473:
    assume !(out_$i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb474;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1813} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} out_vslice_dummy_var_186 := wl12xx_calc_tx_blocks(out_$p562, out_$i563, out_$i564);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i564 := $load.i32($M.135, in_$p13);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$i563 := $load.i32($M.135, in_$p4);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    out_$p562 := $M.51;
    goto corral_source_split_8173;

  $bb472:
    assume out_$i561 == 1;
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472, $bb473;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    out_$i561 := $eq.i32(out_$i560, 2);
    goto corral_source_split_8170;

  $bb471:
    assume {:verifier.code 0} true;
    out_$i560 := $M.50;
    goto corral_source_split_8169;

  $bb470:
    assume !(out_$i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    goto $bb471;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} out_vslice_dummy_var_185 := wl12xx_calc_tx_blocks(out_$p556, out_$i557, out_$i558);
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$i558 := $load.i32($M.135, in_$p13);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i557 := $load.i32($M.135, in_$p4);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$p556 := $M.51;
    goto corral_source_split_8163;

  $bb469:
    assume out_$i555 == 1;
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb469, $bb470;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    out_$i555 := $eq.i32(out_$i554, 3);
    goto corral_source_split_8160;

  $bb468:
    assume {:verifier.code 0} true;
    out_$i554 := $M.50;
    goto corral_source_split_8159;

  $bb467:
    assume !(out_$i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb468;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    goto $bb468;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1809} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8157;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} out_vslice_dummy_var_184 := wl12xx_calc_tx_blocks(out_$p550, out_$i551, out_$i552);
    goto corral_source_split_8156;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    out_$i552 := $load.i32($M.135, in_$p13);
    goto corral_source_split_8155;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    out_$i551 := $load.i32($M.135, in_$p4);
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    out_$p550 := $M.51;
    goto corral_source_split_8153;

  $bb466:
    assume out_$i549 == 1;
    goto corral_source_split_8152;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i549 := $eq.i32(out_$i548, 1);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$i548 := $M.50;
    goto corral_source_split_7494;

  $bb217:
    assume out_$i182 == 1;
    goto corral_source_split_7493;

  $bb216:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i168, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb482:
    assume !(out_$i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb483;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    goto $bb483;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} wl12xx_set_tx_desc_data_len(out_$p578, out_$p579, out_$p580);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$p580 := $M.54;
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$p579 := $M.55;
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p578 := $M.51;
    goto corral_source_split_8200;

  $bb481:
    assume out_$i577 == 1;
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb481, $bb482;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$i577 := $eq.i32(out_$i576, 2);
    goto corral_source_split_8197;

  $bb480:
    assume {:verifier.code 0} true;
    out_$i576 := $M.50;
    goto corral_source_split_8196;

  $bb479:
    assume !(out_$i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb480;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    goto $bb480;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} wl12xx_set_tx_desc_data_len(out_$p573, out_$p574, out_$p575);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$p575 := $M.54;
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$p574 := $M.55;
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$p573 := $M.51;
    goto corral_source_split_8190;

  $bb478:
    assume out_$i572 == 1;
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$i572 := $eq.i32(out_$i571, 3);
    goto corral_source_split_8187;

  $bb477:
    assume {:verifier.code 0} true;
    out_$i571 := $M.50;
    goto corral_source_split_8186;

  $bb476:
    assume !(out_$i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb477;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1815} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} wl12xx_set_tx_desc_data_len(out_$p568, out_$p569, out_$p570);
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    out_$p570 := $M.54;
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$p569 := $M.55;
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$p568 := $M.51;
    goto corral_source_split_8180;

  $bb475:
    assume out_$i567 == 1;
    goto corral_source_split_8179;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb475, $bb476;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i567 := $eq.i32(out_$i566, 1);
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    out_$i566 := $M.50;
    goto corral_source_split_7498;

  $bb218:
    assume !(out_$i182 == 1);
    goto corral_source_split_7497;

  $bb491:
    assume !(out_$i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb492;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb492;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1825} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8228;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} out_vslice_dummy_var_189 := wl12xx_cmd_channel_switch(out_$p593, out_$p594, in_$p26);
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$p594 := $M.53;
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$p593 := $M.51;
    goto corral_source_split_8225;

  $bb490:
    assume out_$i592 == 1;
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb490, $bb491;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$i592 := $eq.i32(out_$i591, 2);
    goto corral_source_split_8222;

  $bb489:
    assume {:verifier.code 0} true;
    out_$i591 := $M.50;
    goto corral_source_split_8221;

  $bb488:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    goto $bb489;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} out_vslice_dummy_var_188 := wl12xx_cmd_channel_switch(out_$p588, out_$p589, in_$p26);
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$p589 := $M.53;
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$p588 := $M.51;
    goto corral_source_split_8216;

  $bb487:
    assume out_$i587 == 1;
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb487, $bb488;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 3);
    goto corral_source_split_8213;

  $bb486:
    assume {:verifier.code 0} true;
    out_$i586 := $M.50;
    goto corral_source_split_8212;

  $bb485:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb486;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb486;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1821} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} out_vslice_dummy_var_187 := wl12xx_cmd_channel_switch(out_$p583, out_$p584, in_$p26);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p584 := $M.53;
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$p583 := $M.51;
    goto corral_source_split_8207;

  $bb484:
    assume out_$i582 == 1;
    goto corral_source_split_8206;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb484, $bb485;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 1);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i581 := $M.50;
    goto corral_source_split_7486;

  $bb211:
    assume out_$i179 == 1;
    goto corral_source_split_7485;

  $bb207:
    assume out_$i177 == 1;
    assume {:verifier.code 0} true;
    out_$i179 := $slt.i32(out_$i168, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb194:
    assume out_$i171 == 1;
    assume {:verifier.code 0} true;
    out_$i177 := $slt.i32(out_$i168, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb193:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i168, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb500:
    assume !(out_$i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    goto $bb501;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1831} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} out_vslice_dummy_var_192 := wl12xx_sta_get_ap_rate_mask(out_$p608, out_$p609);
    goto corral_source_split_8251;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_$p609 := $M.53;
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    out_$p608 := $M.51;
    goto corral_source_split_8249;

  $bb499:
    assume out_$i607 == 1;
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb499, $bb500;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    out_$i607 := $eq.i32(out_$i606, 2);
    goto corral_source_split_8246;

  $bb498:
    assume {:verifier.code 0} true;
    out_$i606 := $M.50;
    goto corral_source_split_8245;

  $bb497:
    assume !(out_$i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb498;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1829} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8243;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} out_vslice_dummy_var_191 := wl12xx_sta_get_ap_rate_mask(out_$p603, out_$p604);
    goto corral_source_split_8242;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$p604 := $M.53;
    goto corral_source_split_8241;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    out_$p603 := $M.51;
    goto corral_source_split_8240;

  $bb496:
    assume out_$i602 == 1;
    goto corral_source_split_8239;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i602 := $eq.i32(out_$i601, 3);
    goto corral_source_split_8237;

  $bb495:
    assume {:verifier.code 0} true;
    out_$i601 := $M.50;
    goto corral_source_split_8236;

  $bb494:
    assume !(out_$i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb495;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    goto $bb495;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1827} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} out_vslice_dummy_var_190 := wl12xx_sta_get_ap_rate_mask(out_$p598, out_$p599);
    goto corral_source_split_8233;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$p599 := $M.53;
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    out_$p598 := $M.51;
    goto corral_source_split_8231;

  $bb493:
    assume out_$i597 == 1;
    goto corral_source_split_8230;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$i597 := $eq.i32(out_$i596, 1);
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$i596 := $M.50;
    goto corral_source_split_7490;

  $bb212:
    assume !(out_$i179 == 1);
    goto corral_source_split_7489;

  $bb509:
    assume !(out_$i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb510;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8276;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} out_vslice_dummy_var_195 := wl12xx_get_rx_packet_len(out_$p623, in_$p31, out_$i624);
    goto corral_source_split_8275;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$i624 := $load.i32($M.135, in_$p7);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    out_$p623 := $M.51;
    goto corral_source_split_8273;

  $bb508:
    assume out_$i622 == 1;
    goto corral_source_split_8272;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$i622 := $eq.i32(out_$i621, 2);
    goto corral_source_split_8270;

  $bb507:
    assume {:verifier.code 0} true;
    out_$i621 := $M.50;
    goto corral_source_split_8269;

  $bb506:
    assume !(out_$i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb507;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8267;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} out_vslice_dummy_var_194 := wl12xx_get_rx_packet_len(out_$p618, in_$p31, out_$i619);
    goto corral_source_split_8266;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    out_$i619 := $load.i32($M.135, in_$p7);
    goto corral_source_split_8265;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    out_$p618 := $M.51;
    goto corral_source_split_8264;

  $bb505:
    assume out_$i617 == 1;
    goto corral_source_split_8263;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb505, $bb506;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i617 := $eq.i32(out_$i616, 3);
    goto corral_source_split_8261;

  $bb504:
    assume {:verifier.code 0} true;
    out_$i616 := $M.50;
    goto corral_source_split_8260;

  $bb503:
    assume !(out_$i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8258;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} out_vslice_dummy_var_193 := wl12xx_get_rx_packet_len(out_$p613, in_$p31, out_$i614);
    goto corral_source_split_8257;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    out_$i614 := $load.i32($M.135, in_$p7);
    goto corral_source_split_8256;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$p613 := $M.51;
    goto corral_source_split_8255;

  $bb502:
    assume out_$i612 == 1;
    goto corral_source_split_8254;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    out_$i612 := $eq.i32(out_$i611, 1);
    goto corral_source_split_7479;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$i611 := $M.50;
    goto corral_source_split_7478;

  $bb209:
    assume out_$i178 == 1;
    goto corral_source_split_7477;

  $bb208:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    out_$i178 := $slt.i32(out_$i168, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb518:
    assume !(out_$i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb519;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    goto $bb519;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8297;

  SeqInstr_36:
    goto corral_source_split_8296;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} out_vslice_dummy_var_198 := wl12xx_plt_init(out_$p636);
    goto SeqInstr_35;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$p636 := $M.51;
    goto corral_source_split_8295;

  $bb517:
    assume out_$i635 == 1;
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb517, $bb518;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i635 := $eq.i32(out_$i634, 2);
    goto corral_source_split_8292;

  $bb516:
    assume {:verifier.code 0} true;
    out_$i634 := $M.50;
    goto corral_source_split_8291;

  $bb515:
    assume !(out_$i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb516;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb516;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8289;

  SeqInstr_33:
    goto corral_source_split_8288;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} out_vslice_dummy_var_197 := wl12xx_plt_init(out_$p632);
    goto SeqInstr_32;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$p632 := $M.51;
    goto corral_source_split_8287;

  $bb514:
    assume out_$i631 == 1;
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb514, $bb515;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i631 := $eq.i32(out_$i630, 3);
    goto corral_source_split_8284;

  $bb513:
    assume {:verifier.code 0} true;
    out_$i630 := $M.50;
    goto corral_source_split_8283;

  $bb512:
    assume !(out_$i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    goto $bb513;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8281;

  SeqInstr_30:
    goto corral_source_split_8280;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} out_vslice_dummy_var_196 := wl12xx_plt_init(out_$p628);
    goto SeqInstr_29;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$p628 := $M.51;
    goto corral_source_split_8279;

  $bb511:
    assume out_$i627 == 1;
    goto corral_source_split_8278;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb511, $bb512;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i627 := $eq.i32(out_$i626, 1);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$i626 := $M.50;
    goto corral_source_split_7482;

  $bb210:
    assume !(out_$i178 == 1);
    goto corral_source_split_7481;

  $bb527:
    assume !(out_$i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb528;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb528;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8321;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} out_vslice_dummy_var_201 := wl12xx_get_rx_buf_align(out_$p650, out_$i651);
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$i651 := $load.i32($M.135, in_$p1);
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$p650 := $M.51;
    goto corral_source_split_8318;

  $bb526:
    assume out_$i649 == 1;
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$i649 := $eq.i32(out_$i648, 2);
    goto corral_source_split_8315;

  $bb525:
    assume {:verifier.code 0} true;
    out_$i648 := $M.50;
    goto corral_source_split_8314;

  $bb524:
    assume !(out_$i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb525;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8312;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} out_vslice_dummy_var_200 := wl12xx_get_rx_buf_align(out_$p645, out_$i646);
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$i646 := $load.i32($M.135, in_$p1);
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$p645 := $M.51;
    goto corral_source_split_8309;

  $bb523:
    assume out_$i644 == 1;
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb523, $bb524;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    out_$i644 := $eq.i32(out_$i643, 3);
    goto corral_source_split_8306;

  $bb522:
    assume {:verifier.code 0} true;
    out_$i643 := $M.50;
    goto corral_source_split_8305;

  $bb521:
    assume !(out_$i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb522;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    goto $bb522;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8303;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} out_vslice_dummy_var_199 := wl12xx_get_rx_buf_align(out_$p640, out_$i641);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$i641 := $load.i32($M.135, in_$p1);
    goto corral_source_split_8301;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$p640 := $M.51;
    goto corral_source_split_8300;

  $bb520:
    assume out_$i639 == 1;
    goto corral_source_split_8299;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520, $bb521;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$i639 := $eq.i32(out_$i638, 1);
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i638 := $M.50;
    goto corral_source_split_7470;

  $bb205:
    assume out_$i176 == 1;
    goto corral_source_split_7469;

  $bb196:
    assume out_$i172 == 1;
    assume {:verifier.code 0} true;
    out_$i176 := $slt.i32(out_$i168, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb195:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$i172 := $slt.i32(out_$i168, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb536:
    assume !(out_$i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    goto $bb537;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_vslice_dummy_var_204 := wl12xx_get_spare_blocks(out_$p667, out_$i669);
    goto corral_source_split_8347;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    out_$i669 := $trunc.i8.i1(out_$i668);
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i668 := $load.i8($M.135, in_$p8);
    goto corral_source_split_8345;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    out_$p667 := $M.51;
    goto corral_source_split_8344;

  $bb535:
    assume out_$i666 == 1;
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$i666 := $eq.i32(out_$i665, 2);
    goto corral_source_split_8341;

  $bb534:
    assume {:verifier.code 0} true;
    out_$i665 := $M.50;
    goto corral_source_split_8340;

  $bb533:
    assume !(out_$i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb534;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8338;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} out_vslice_dummy_var_203 := wl12xx_get_spare_blocks(out_$p661, out_$i663);
    goto corral_source_split_8337;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$i663 := $trunc.i8.i1(out_$i662);
    goto corral_source_split_8336;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$i662 := $load.i8($M.135, in_$p8);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$p661 := $M.51;
    goto corral_source_split_8334;

  $bb532:
    assume out_$i660 == 1;
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb532, $bb533;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    out_$i660 := $eq.i32(out_$i659, 3);
    goto corral_source_split_8331;

  $bb531:
    assume {:verifier.code 0} true;
    out_$i659 := $M.50;
    goto corral_source_split_8330;

  $bb530:
    assume !(out_$i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb531;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb531;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_vslice_dummy_var_202 := wl12xx_get_spare_blocks(out_$p655, out_$i657);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i657 := $trunc.i8.i1(out_$i656);
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$i656 := $load.i8($M.135, in_$p8);
    goto corral_source_split_8325;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    out_$p655 := $M.51;
    goto corral_source_split_8324;

  $bb529:
    assume out_$i654 == 1;
    goto corral_source_split_8323;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i654 := $eq.i32(out_$i653, 1);
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i653 := $M.50;
    goto corral_source_split_7474;

  $bb206:
    assume !(out_$i176 == 1);
    goto corral_source_split_7473;

  $bb545:
    assume !(out_$i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto $bb546;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(2);
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} out_vslice_dummy_var_207 := wl12xx_get_pg_ver(out_$p681, in_$p38);
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    out_$p681 := $M.51;
    goto corral_source_split_8367;

  $bb544:
    assume out_$i680 == 1;
    goto corral_source_split_8366;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i680 := $eq.i32(out_$i679, 2);
    goto corral_source_split_8364;

  $bb543:
    assume {:verifier.code 0} true;
    out_$i679 := $M.50;
    goto corral_source_split_8363;

  $bb542:
    assume !(out_$i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb543;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto $bb543;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8361;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_vslice_dummy_var_206 := wl12xx_get_pg_ver(out_$p677, in_$p38);
    goto corral_source_split_8360;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    out_$p677 := $M.51;
    goto corral_source_split_8359;

  $bb541:
    assume out_$i676 == 1;
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb541, $bb542;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$i676 := $eq.i32(out_$i675, 3);
    goto corral_source_split_8356;

  $bb540:
    assume {:verifier.code 0} true;
    out_$i675 := $M.50;
    goto corral_source_split_8355;

  $bb539:
    assume !(out_$i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8353;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_vslice_dummy_var_205 := wl12xx_get_pg_ver(out_$p673, in_$p38);
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    out_$p673 := $M.51;
    goto corral_source_split_8351;

  $bb538:
    assume out_$i672 == 1;
    goto corral_source_split_8350;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    out_$i672 := $eq.i32(out_$i671, 1);
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i671 := $M.50;
    goto corral_source_split_7458;

  $bb198:
    assume out_$i173 == 1;
    goto corral_source_split_7457;

  $bb197:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i168, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb551:
    assume !(out_$i689 == 1);
    assume {:verifier.code 0} true;
    goto $bb552;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb552;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $M.200 := out_$i692;
    call {:si_unique_call 1867} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i692);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$i692 := $sub.i32(out_$i691, 1);
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$i691 := $M.200;
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8383;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} out_vslice_dummy_var_209 := ldv_release_80();
    goto corral_source_split_8382;

  $bb550:
    assume out_$i689 == 1;
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb550, $bb551;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    out_$i689 := $eq.i32(out_$i688, 2);
    goto corral_source_split_8379;

  $bb549:
    assume {:verifier.code 0} true;
    out_$i688 := $M.50;
    goto corral_source_split_8378;

  $bb548:
    assume !(out_$i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    goto $bb549;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $M.200 := out_$i687;
    call {:si_unique_call 1864} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i687);
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    out_$i687 := $sub.i32(out_$i686, 1);
    goto corral_source_split_8375;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$i686 := $M.200;
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(1);
    goto corral_source_split_8373;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} out_vslice_dummy_var_208 := ldv_release_80();
    goto corral_source_split_8372;

  $bb547:
    assume out_$i684 == 1;
    goto corral_source_split_8371;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547, $bb548;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$i684 := $eq.i32(out_$i683, 3);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$i683 := $M.50;
    goto corral_source_split_7462;

  $bb200:
    assume out_$i174 == 1;
    goto corral_source_split_7461;

  $bb199:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    out_$i174 := $slt.i32(out_$i168, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb554:
    assume !(out_$i694 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    goto $bb555;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1869} {:cexpr "ldv_state_variable_80"} boogie_si_record_i32(3);
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} out_vslice_dummy_var_210 := ldv_init_80();
    goto corral_source_split_8389;

  $bb553:
    assume out_$i694 == 1;
    goto corral_source_split_8388;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    out_$i694 := $eq.i32(out_$i693, 2);
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$i693 := $M.50;
    goto corral_source_split_7466;

  $bb202:
    assume out_$i175 == 1;
    goto corral_source_split_7465;

  $bb201:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i168, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_8392;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb203:
    assume {:verifier.code 0} true;
    assume !(out_$i175 == 1);
    goto $bb204;

  $bb260:
    assume {:verifier.code 0} true;
    assume !(out_$i203 == 1);
    goto $bb204;

  $bb560:
    assume !(out_$i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    goto $bb561;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_main_exported_26();
    goto corral_source_split_8395;

  $bb559:
    assume out_$i697 == 1;
    goto corral_source_split_8394;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb559, $bb560;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    out_$i697 := $ne.i32(out_$i696, 0);
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    out_$i696 := $M.143;
    goto corral_source_split_7398;

  $bb152:
    assume out_$i146 == 1;
    goto corral_source_split_7397;

  $bb151:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i71, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb563:
    assume !(out_$i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb564;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb564;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_main_exported_18();
    goto corral_source_split_8398;

  $bb562:
    assume out_$i699 == 1;
    goto corral_source_split_8397;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$i699 := $ne.i32(out_$i698, 0);
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    out_$i698 := $M.144;
    goto corral_source_split_7402;

  $bb154:
    assume out_$i147 == 1;
    goto corral_source_split_7401;

  $bb153:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i71, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb566:
    assume !(out_$i701 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    goto $bb567;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_main_exported_72();
    goto corral_source_split_8401;

  $bb565:
    assume out_$i701 == 1;
    goto corral_source_split_8400;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$i701 := $ne.i32(out_$i700, 0);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i700 := $M.145;
    goto corral_source_split_7406;

  $bb155:
    assume !(out_$i147 == 1);
    goto corral_source_split_7405;

  $bb569:
    assume !(out_$i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb570;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} ldv_main_exported_16();
    goto corral_source_split_8404;

  $bb568:
    assume out_$i703 == 1;
    goto corral_source_split_8403;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb568, $bb569;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    out_$i703 := $ne.i32(out_$i702, 0);
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$i702 := $M.146;
    goto corral_source_split_7390;

  $bb146:
    assume out_$i143 == 1;
    goto corral_source_split_7389;

  $bb140:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i71, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb130:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i71, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb129:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i71, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb572:
    assume !(out_$i705 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb573;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ldv_main_exported_44();
    goto corral_source_split_8407;

  $bb571:
    assume out_$i705 == 1;
    goto corral_source_split_8406;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$i705 := $ne.i32(out_$i704, 0);
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$i704 := $M.147;
    goto corral_source_split_7394;

  $bb147:
    assume !(out_$i143 == 1);
    goto corral_source_split_7393;

  $bb575:
    assume !(out_$i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb576;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb576;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_main_exported_55();
    goto corral_source_split_8410;

  $bb574:
    assume out_$i707 == 1;
    goto corral_source_split_8409;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb574, $bb575;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    out_$i707 := $ne.i32(out_$i706, 0);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    out_$i706 := $M.148;
    goto corral_source_split_7378;

  $bb142:
    assume out_$i141 == 1;
    goto corral_source_split_7377;

  $bb141:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i71, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb578:
    assume !(out_$i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb579;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    goto $bb579;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} ldv_main_exported_74();
    goto corral_source_split_8413;

  $bb577:
    assume out_$i709 == 1;
    goto corral_source_split_8412;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb577, $bb578;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$i709 := $ne.i32(out_$i708, 0);
    goto corral_source_split_7383;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i708 := $M.149;
    goto corral_source_split_7382;

  $bb144:
    assume out_$i142 == 1;
    goto corral_source_split_7381;

  $bb143:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i71, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb581:
    assume !(out_$i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb582;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} ldv_main_exported_27();
    goto corral_source_split_8416;

  $bb580:
    assume out_$i711 == 1;
    goto corral_source_split_8415;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb580, $bb581;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    out_$i711 := $ne.i32(out_$i710, 0);
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    out_$i710 := $M.150;
    goto corral_source_split_7386;

  $bb145:
    assume !(out_$i142 == 1);
    goto corral_source_split_7385;

  $bb584:
    assume !(out_$i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} ldv_main_exported_57();
    goto corral_source_split_8419;

  $bb583:
    assume out_$i713 == 1;
    goto corral_source_split_8418;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    out_$i713 := $ne.i32(out_$i712, 0);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$i712 := $M.151;
    goto corral_source_split_7370;

  $bb138:
    assume out_$i139 == 1;
    goto corral_source_split_7369;

  $bb132:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i71, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb131:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i71, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb587:
    assume !(out_$i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb588;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    goto $bb588;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} ldv_main_exported_61();
    goto corral_source_split_8422;

  $bb586:
    assume out_$i715 == 1;
    goto corral_source_split_8421;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb586, $bb587;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$i715 := $ne.i32(out_$i714, 0);
    goto corral_source_split_7375;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$i714 := $M.152;
    goto corral_source_split_7374;

  $bb139:
    assume !(out_$i139 == 1);
    goto corral_source_split_7373;

  $bb590:
    assume !(out_$i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    goto $bb591;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} ldv_main_exported_20();
    goto corral_source_split_8425;

  $bb589:
    assume out_$i717 == 1;
    goto corral_source_split_8424;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb589, $bb590;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$i717 := $ne.i32(out_$i716, 0);
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i716 := $M.153;
    goto corral_source_split_7358;

  $bb134:
    assume out_$i137 == 1;
    goto corral_source_split_7357;

  $bb133:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i71, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb593:
    assume !(out_$i719 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto $bb594;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} ldv_main_exported_10();
    goto corral_source_split_8428;

  $bb592:
    assume out_$i719 == 1;
    goto corral_source_split_8427;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$i719 := $ne.i32(out_$i718, 0);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$i718 := $M.154;
    goto corral_source_split_7362;

  $bb136:
    assume out_$i138 == 1;
    goto corral_source_split_7361;

  $bb135:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i71, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb596:
    assume !(out_$i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb597;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} ldv_main_exported_31();
    goto corral_source_split_8431;

  $bb595:
    assume out_$i721 == 1;
    goto corral_source_split_8430;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb595, $bb596;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i721 := $ne.i32(out_$i720, 0);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i720 := $M.155;
    goto corral_source_split_7366;

  $bb137:
    assume !(out_$i138 == 1);
    goto corral_source_split_7365;

  $bb599:
    assume !(out_$i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb600;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb600;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_main_exported_35();
    goto corral_source_split_8434;

  $bb598:
    assume out_$i723 == 1;
    goto corral_source_split_8433;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb598, $bb599;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    out_$i723 := $ne.i32(out_$i722, 0);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$i722 := $M.156;
    goto corral_source_split_7350;

  $bb126:
    assume out_$i133 == 1;
    goto corral_source_split_7349;

  $bb120:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i71, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb110:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i71, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb90:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i71, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb89:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i71, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb602:
    assume !(out_$i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb603;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    goto $bb603;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} ldv_main_exported_11();
    goto corral_source_split_8437;

  $bb601:
    assume out_$i725 == 1;
    goto corral_source_split_8436;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    out_$i725 := $ne.i32(out_$i724, 0);
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    out_$i724 := $M.157;
    goto corral_source_split_7354;

  $bb127:
    assume !(out_$i133 == 1);
    goto corral_source_split_7353;

  $bb605:
    assume !(out_$i727 == 1);
    assume {:verifier.code 0} true;
    goto $bb606;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    goto $bb606;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} ldv_main_exported_78();
    goto corral_source_split_8440;

  $bb604:
    assume out_$i727 == 1;
    goto corral_source_split_8439;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb604, $bb605;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i727 := $ne.i32(out_$i726, 0);
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$i726 := $M.158;
    goto corral_source_split_7338;

  $bb122:
    assume out_$i131 == 1;
    goto corral_source_split_7337;

  $bb121:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i71, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb608:
    assume !(out_$i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb609;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    goto $bb609;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} ldv_main_exported_48();
    goto corral_source_split_8443;

  $bb607:
    assume out_$i729 == 1;
    goto corral_source_split_8442;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb607, $bb608;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    out_$i729 := $ne.i32(out_$i728, 0);
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$i728 := $M.159;
    goto corral_source_split_7342;

  $bb124:
    assume out_$i132 == 1;
    goto corral_source_split_7341;

  $bb123:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i71, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb611:
    assume !(out_$i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb612;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    goto $bb612;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} ldv_main_exported_77();
    goto corral_source_split_8446;

  $bb610:
    assume out_$i731 == 1;
    goto corral_source_split_8445;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$i731 := $ne.i32(out_$i730, 0);
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$i730 := $M.160;
    goto corral_source_split_7346;

  $bb125:
    assume !(out_$i132 == 1);
    goto corral_source_split_7345;

  $bb614:
    assume !(out_$i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    goto $bb615;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_main_exported_65();
    goto corral_source_split_8449;

  $bb613:
    assume out_$i733 == 1;
    goto corral_source_split_8448;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i733 := $ne.i32(out_$i732, 0);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i732 := $M.161;
    goto corral_source_split_7330;

  $bb118:
    assume out_$i129 == 1;
    goto corral_source_split_7329;

  $bb112:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i71, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb111:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i71, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb617:
    assume !(out_$i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb618;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    goto $bb618;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_main_exported_29();
    goto corral_source_split_8452;

  $bb616:
    assume out_$i735 == 1;
    goto corral_source_split_8451;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb616, $bb617;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i735 := $ne.i32(out_$i734, 0);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i734 := $M.162;
    goto corral_source_split_7334;

  $bb119:
    assume !(out_$i129 == 1);
    goto corral_source_split_7333;

  $bb620:
    assume !(out_$i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb621;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} ldv_main_exported_50();
    goto corral_source_split_8455;

  $bb619:
    assume out_$i737 == 1;
    goto corral_source_split_8454;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$i737 := $ne.i32(out_$i736, 0);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i736 := $M.163;
    goto corral_source_split_7318;

  $bb114:
    assume out_$i127 == 1;
    goto corral_source_split_7317;

  $bb113:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i71, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb623:
    assume !(out_$i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb624;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    goto $bb624;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_main_exported_39();
    goto corral_source_split_8458;

  $bb622:
    assume out_$i739 == 1;
    goto corral_source_split_8457;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb622, $bb623;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$i739 := $ne.i32(out_$i738, 0);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i738 := $M.164;
    goto corral_source_split_7322;

  $bb116:
    assume out_$i128 == 1;
    goto corral_source_split_7321;

  $bb115:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i71, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb626:
    assume !(out_$i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    goto $bb627;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} ldv_main_exported_64();
    goto corral_source_split_8461;

  $bb625:
    assume out_$i741 == 1;
    goto corral_source_split_8460;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i741 := $ne.i32(out_$i740, 0);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i740 := $M.165;
    goto corral_source_split_7326;

  $bb117:
    assume !(out_$i128 == 1);
    goto corral_source_split_7325;

  $bb629:
    assume !(out_$i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb630;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_main_exported_58();
    goto corral_source_split_8464;

  $bb628:
    assume out_$i743 == 1;
    goto corral_source_split_8463;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb628, $bb629;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$i743 := $ne.i32(out_$i742, 0);
    goto corral_source_split_7311;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    out_$i742 := $M.166;
    goto corral_source_split_7310;

  $bb108:
    assume out_$i124 == 1;
    goto corral_source_split_7309;

  $bb102:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i71, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb92:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i71, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb91:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i71, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb632:
    assume !(out_$i745 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    goto $bb633;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_main_exported_41();
    goto corral_source_split_8467;

  $bb631:
    assume out_$i745 == 1;
    goto corral_source_split_8466;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb631, $bb632;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$i745 := $ne.i32(out_$i744, 0);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i744 := $M.167;
    goto corral_source_split_7314;

  $bb109:
    assume !(out_$i124 == 1);
    goto corral_source_split_7313;

  $bb635:
    assume !(out_$i747 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    goto $bb636;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} ldv_main_exported_12();
    goto corral_source_split_8470;

  $bb634:
    assume out_$i747 == 1;
    goto corral_source_split_8469;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb634, $bb635;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$i747 := $ne.i32(out_$i746, 0);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i746 := $M.168;
    goto corral_source_split_7298;

  $bb104:
    assume out_$i122 == 1;
    goto corral_source_split_7297;

  $bb103:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i71, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb638:
    assume !(out_$i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_main_exported_15();
    goto corral_source_split_8473;

  $bb637:
    assume out_$i749 == 1;
    goto corral_source_split_8472;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb637, $bb638;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$i749 := $ne.i32(out_$i748, 0);
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    out_$i748 := $M.169;
    goto corral_source_split_7302;

  $bb106:
    assume out_$i123 == 1;
    goto corral_source_split_7301;

  $bb105:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i71, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb641:
    assume !(out_$i751 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    goto $bb642;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} ldv_main_exported_52();
    goto corral_source_split_8476;

  $bb640:
    assume out_$i751 == 1;
    goto corral_source_split_8475;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    out_$i751 := $ne.i32(out_$i750, 0);
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i750 := $M.170;
    goto corral_source_split_7306;

  $bb107:
    assume !(out_$i123 == 1);
    goto corral_source_split_7305;

  $bb644:
    assume !(out_$i753 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    goto $bb645;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} ldv_main_exported_60();
    goto corral_source_split_8479;

  $bb643:
    assume out_$i753 == 1;
    goto corral_source_split_8478;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i753 := $ne.i32(out_$i752, 0);
    goto corral_source_split_7291;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$i752 := $M.171;
    goto corral_source_split_7290;

  $bb100:
    assume out_$i120 == 1;
    goto corral_source_split_7289;

  $bb94:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i71, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb93:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i71, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb647:
    assume !(out_$i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb648;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    goto $bb648;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_main_exported_56();
    goto corral_source_split_8482;

  $bb646:
    assume out_$i755 == 1;
    goto corral_source_split_8481;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb646, $bb647;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$i755 := $ne.i32(out_$i754, 0);
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$i754 := $M.172;
    goto corral_source_split_7294;

  $bb101:
    assume !(out_$i120 == 1);
    goto corral_source_split_7293;

  $bb650:
    assume !(out_$i757 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    goto $bb651;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} ldv_main_exported_73();
    goto corral_source_split_8485;

  $bb649:
    assume out_$i757 == 1;
    goto corral_source_split_8484;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb649, $bb650;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i757 := $ne.i32(out_$i756, 0);
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$i756 := $M.173;
    goto corral_source_split_7278;

  $bb96:
    assume out_$i118 == 1;
    goto corral_source_split_7277;

  $bb95:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i71, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb653:
    assume !(out_$i759 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb654;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} ldv_main_exported_66();
    goto corral_source_split_8488;

  $bb652:
    assume out_$i759 == 1;
    goto corral_source_split_8487;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb652, $bb653;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    out_$i759 := $ne.i32(out_$i758, 0);
    goto corral_source_split_7283;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$i758 := $M.174;
    goto corral_source_split_7282;

  $bb98:
    assume out_$i119 == 1;
    goto corral_source_split_7281;

  $bb97:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i71, 39);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb656:
    assume !(out_$i761 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    goto $bb657;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} ldv_main_exported_45();
    goto corral_source_split_8491;

  $bb655:
    assume out_$i761 == 1;
    goto corral_source_split_8490;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb655, $bb656;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i761 := $ne.i32(out_$i760, 0);
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i760 := $M.175;
    goto corral_source_split_7286;

  $bb99:
    assume !(out_$i119 == 1);
    goto corral_source_split_7285;

  $bb659:
    assume !(out_$i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb660;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    goto $bb660;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} ldv_main_exported_76();
    goto corral_source_split_8494;

  $bb658:
    assume out_$i763 == 1;
    goto corral_source_split_8493;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb658, $bb659;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i763 := $ne.i32(out_$i762, 0);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i762 := $M.176;
    goto corral_source_split_7270;

  $bb86:
    assume out_$i113 == 1;
    goto corral_source_split_7269;

  $bb80:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i71, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb70:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i71, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb50:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i71, 45);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb5:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i71, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb4:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i71, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb662:
    assume !(out_$i765 == 1);
    assume {:verifier.code 0} true;
    goto $bb663;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    goto $bb663;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_main_exported_19();
    goto corral_source_split_8497;

  $bb661:
    assume out_$i765 == 1;
    goto corral_source_split_8496;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb661, $bb662;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$i765 := $ne.i32(out_$i764, 0);
    goto corral_source_split_7275;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$i764 := $M.177;
    goto corral_source_split_7274;

  $bb87:
    assume !(out_$i113 == 1);
    goto corral_source_split_7273;

  $bb665:
    assume !(out_$i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb666;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    goto $bb666;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} ldv_main_exported_62();
    goto corral_source_split_8500;

  $bb664:
    assume out_$i767 == 1;
    goto corral_source_split_8499;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb664, $bb665;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i767 := $ne.i32(out_$i766, 0);
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$i766 := $M.178;
    goto corral_source_split_7258;

  $bb82:
    assume out_$i111 == 1;
    goto corral_source_split_7257;

  $bb81:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i71, 43);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb668:
    assume !(out_$i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb669;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    goto $bb669;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_main_exported_54();
    goto corral_source_split_8503;

  $bb667:
    assume out_$i769 == 1;
    goto corral_source_split_8502;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb667, $bb668;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    out_$i769 := $ne.i32(out_$i768, 0);
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i768 := $M.179;
    goto corral_source_split_7262;

  $bb84:
    assume out_$i112 == 1;
    goto corral_source_split_7261;

  $bb83:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i71, 44);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb671:
    assume !(out_$i771 == 1);
    assume {:verifier.code 0} true;
    goto $bb672;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb672;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_main_exported_67();
    goto corral_source_split_8506;

  $bb670:
    assume out_$i771 == 1;
    goto corral_source_split_8505;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb670, $bb671;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i771 := $ne.i32(out_$i770, 0);
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i770 := $M.180;
    goto corral_source_split_7266;

  $bb85:
    assume !(out_$i112 == 1);
    goto corral_source_split_7265;

  $bb674:
    assume !(out_$i773 == 1);
    assume {:verifier.code 0} true;
    goto $bb675;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    goto $bb675;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_main_exported_70();
    goto corral_source_split_8509;

  $bb673:
    assume out_$i773 == 1;
    goto corral_source_split_8508;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb673, $bb674;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    out_$i773 := $ne.i32(out_$i772, 0);
    goto corral_source_split_7251;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    out_$i772 := $M.181;
    goto corral_source_split_7250;

  $bb78:
    assume out_$i109 == 1;
    goto corral_source_split_7249;

  $bb72:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i71, 46);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb71:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i71, 47);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb677:
    assume !(out_$i775 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb678;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_main_exported_68();
    goto corral_source_split_8512;

  $bb676:
    assume out_$i775 == 1;
    goto corral_source_split_8511;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb676, $bb677;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    out_$i775 := $ne.i32(out_$i774, 0);
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$i774 := $M.182;
    goto corral_source_split_7254;

  $bb79:
    assume !(out_$i109 == 1);
    goto corral_source_split_7253;

  $bb680:
    assume !(out_$i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb681;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} ldv_main_exported_2();
    goto corral_source_split_8515;

  $bb679:
    assume out_$i777 == 1;
    goto corral_source_split_8514;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb679, $bb680;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i777 := $ne.i32(out_$i776, 0);
    goto corral_source_split_7239;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$i776 := $M.183;
    goto corral_source_split_7238;

  $bb74:
    assume out_$i107 == 1;
    goto corral_source_split_7237;

  $bb73:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i71, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb683:
    assume !(out_$i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb684;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto $bb684;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} ldv_main_exported_17();
    goto corral_source_split_8518;

  $bb682:
    assume out_$i779 == 1;
    goto corral_source_split_8517;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb682, $bb683;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$i779 := $ne.i32(out_$i778, 0);
    goto corral_source_split_7243;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    out_$i778 := $M.184;
    goto corral_source_split_7242;

  $bb76:
    assume out_$i108 == 1;
    goto corral_source_split_7241;

  $bb75:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i71, 49);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb686:
    assume !(out_$i781 == 1);
    assume {:verifier.code 0} true;
    goto $bb687;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    goto $bb687;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_main_exported_1();
    goto corral_source_split_8521;

  $bb685:
    assume out_$i781 == 1;
    goto corral_source_split_8520;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb685, $bb686;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    out_$i781 := $ne.i32(out_$i780, 0);
    goto corral_source_split_7247;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    out_$i780 := $M.185;
    goto corral_source_split_7246;

  $bb77:
    assume !(out_$i108 == 1);
    goto corral_source_split_7245;

  $bb689:
    assume !(out_$i783 == 1);
    assume {:verifier.code 0} true;
    goto $bb690;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb690;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_main_exported_30();
    goto corral_source_split_8524;

  $bb688:
    assume out_$i783 == 1;
    goto corral_source_split_8523;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb688, $bb689;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    out_$i783 := $ne.i32(out_$i782, 0);
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$i782 := $M.186;
    goto corral_source_split_7230;

  $bb68:
    assume out_$i104 == 1;
    goto corral_source_split_7229;

  $bb62:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i71, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb52:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i71, 52);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb51:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i71, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb692:
    assume !(out_$i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb693;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb693;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} ldv_main_exported_25();
    goto corral_source_split_8527;

  $bb691:
    assume out_$i785 == 1;
    goto corral_source_split_8526;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb691, $bb692;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    out_$i785 := $ne.i32(out_$i784, 0);
    goto corral_source_split_7235;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    out_$i784 := $M.187;
    goto corral_source_split_7234;

  $bb69:
    assume !(out_$i104 == 1);
    goto corral_source_split_7233;

  $bb695:
    assume !(out_$i787 == 1);
    assume {:verifier.code 0} true;
    goto $bb696;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    goto $bb696;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} ldv_main_exported_28();
    goto corral_source_split_8530;

  $bb694:
    assume out_$i787 == 1;
    goto corral_source_split_8529;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb694, $bb695;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    out_$i787 := $ne.i32(out_$i786, 0);
    goto corral_source_split_7219;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    out_$i786 := $M.188;
    goto corral_source_split_7218;

  $bb64:
    assume out_$i102 == 1;
    goto corral_source_split_7217;

  $bb63:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i71, 53);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb698:
    assume !(out_$i789 == 1);
    assume {:verifier.code 0} true;
    goto $bb699;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    goto $bb699;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} ldv_main_exported_75();
    goto corral_source_split_8533;

  $bb697:
    assume out_$i789 == 1;
    goto corral_source_split_8532;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb697, $bb698;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    out_$i789 := $ne.i32(out_$i788, 0);
    goto corral_source_split_7223;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    out_$i788 := $M.189;
    goto corral_source_split_7222;

  $bb66:
    assume out_$i103 == 1;
    goto corral_source_split_7221;

  $bb65:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i71, 54);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb701:
    assume !(out_$i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    goto $bb702;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} ldv_main_exported_40();
    goto corral_source_split_8536;

  $bb700:
    assume out_$i791 == 1;
    goto corral_source_split_8535;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb700, $bb701;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    out_$i791 := $ne.i32(out_$i790, 0);
    goto corral_source_split_7227;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    out_$i790 := $M.190;
    goto corral_source_split_7226;

  $bb67:
    assume !(out_$i103 == 1);
    goto corral_source_split_7225;

  $bb704:
    assume !(out_$i793 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb705;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} ldv_main_exported_14();
    goto corral_source_split_8539;

  $bb703:
    assume out_$i793 == 1;
    goto corral_source_split_8538;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb703, $bb704;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    out_$i793 := $ne.i32(out_$i792, 0);
    goto corral_source_split_7211;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    out_$i792 := $M.191;
    goto corral_source_split_7210;

  $bb60:
    assume out_$i100 == 1;
    goto corral_source_split_7209;

  $bb54:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i71, 56);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb53:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i71, 57);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb707:
    assume !(out_$i795 == 1);
    assume {:verifier.code 0} true;
    goto $bb708;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    goto $bb708;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} ldv_main_exported_69();
    goto corral_source_split_8542;

  $bb706:
    assume out_$i795 == 1;
    goto corral_source_split_8541;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb706, $bb707;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$i795 := $ne.i32(out_$i794, 0);
    goto corral_source_split_7215;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$i794 := $M.192;
    goto corral_source_split_7214;

  $bb61:
    assume !(out_$i100 == 1);
    goto corral_source_split_7213;

  $bb710:
    assume !(out_$i797 == 1);
    assume {:verifier.code 0} true;
    goto $bb711;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb711;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} ldv_main_exported_59();
    goto corral_source_split_8545;

  $bb709:
    assume out_$i797 == 1;
    goto corral_source_split_8544;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb709, $bb710;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    out_$i797 := $ne.i32(out_$i796, 0);
    goto corral_source_split_7199;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    out_$i796 := $M.193;
    goto corral_source_split_7198;

  $bb56:
    assume out_$i98 == 1;
    goto corral_source_split_7197;

  $bb55:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i71, 58);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb713:
    assume !(out_$i799 == 1);
    assume {:verifier.code 0} true;
    goto $bb714;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    goto $bb714;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} ldv_main_exported_49();
    goto corral_source_split_8548;

  $bb712:
    assume out_$i799 == 1;
    goto corral_source_split_8547;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb712, $bb713;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    out_$i799 := $ne.i32(out_$i798, 0);
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$i798 := $M.194;
    goto corral_source_split_7202;

  $bb58:
    assume out_$i99 == 1;
    goto corral_source_split_7201;

  $bb57:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i71, 59);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb716:
    assume !(out_$i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb717;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    goto $bb717;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} ldv_main_exported_24();
    goto corral_source_split_8551;

  $bb715:
    assume out_$i801 == 1;
    goto corral_source_split_8550;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb715, $bb716;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    out_$i801 := $ne.i32(out_$i800, 0);
    goto corral_source_split_7207;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$i800 := $M.195;
    goto corral_source_split_7206;

  $bb59:
    assume !(out_$i99 == 1);
    goto corral_source_split_7205;

  $bb719:
    assume !(out_$i803 == 1);
    assume {:verifier.code 0} true;
    goto $bb720;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb720;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_main_exported_53();
    goto corral_source_split_8554;

  $bb718:
    assume out_$i803 == 1;
    goto corral_source_split_8553;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb718, $bb719;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    out_$i803 := $ne.i32(out_$i802, 0);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$i802 := $M.196;
    goto corral_source_split_7190;

  $bb48:
    assume out_$i94 == 1;
    goto corral_source_split_7189;

  $bb42:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i71, 61);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb32:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i71, 62);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb7:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i71, 65);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb6:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i71, 70);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb722:
    assume !(out_$i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb755:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb736:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb732:
    assume !(out_$i811 == 1);
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb735:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb734:
    assume !(out_$i815 == 1);
    assume {:verifier.code 0} true;
    goto $bb735;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb735;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $M.220 := 1;
    call {:si_unique_call 1932} {:cexpr "probed_79"} boogie_si_record_i32(1);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.200 := out_$i817;
    call {:si_unique_call 1931} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i817);
    goto corral_source_split_8577;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    out_$i817 := $add.i32(out_$i816, 1);
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    out_$i816 := $M.200;
    goto corral_source_split_8575;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $M.197 := 2;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(2);
    goto corral_source_split_8574;

  $bb733:
    assume out_$i815 == 1;
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb733, $bb734;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$i815 := $eq.i32(out_$i814, 0);
    goto corral_source_split_8571;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$i814 := $M.219;
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $M.219 := out_$i813;
    call {:si_unique_call 1929} {:cexpr "ldv_retval_62"} boogie_si_record_i32(out_$i813);
    goto corral_source_split_8569;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_$i813 := wl12xx_probe(out_$p812);
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$p812 := $M.136;
    goto corral_source_split_8567;

  $bb731:
    assume out_$i811 == 1;
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb731, $bb732;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    out_$i811 := $eq.i32(out_$i810, 1);
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    out_$i810 := $M.197;
    goto corral_source_split_8563;

  $bb729:
    assume out_$i809 == 1;
    goto corral_source_split_8562;

  $bb724:
    assume out_$i807 == 1;
    assume {:verifier.code 0} true;
    out_$i809 := $eq.i32(out_$i806, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb729, $bb730;

  $bb723:
    assume {:verifier.code 0} true;
    out_$i807 := $slt.i32(out_$i806, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb724, $bb725;

  corral_source_split_8556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} out_$i806 := __VERIFIER_nondet_int();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i806);
    call {:si_unique_call 1927} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i806);
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb721:
    assume out_$i805 == 1;
    goto corral_source_split_8556;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb721, $bb722;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    out_$i805 := $ne.i32(out_$i804, 0);
    goto corral_source_split_7195;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i804 := $M.197;
    goto corral_source_split_7194;

  $bb49:
    assume !(out_$i94 == 1);
    goto corral_source_split_7193;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb754:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb753:
    assume !(out_$i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb754;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.220 := 0;
    call {:si_unique_call 1942} {:cexpr "probed_79"} boogie_si_record_i32(0);
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $M.200 := out_$i837;
    call {:si_unique_call 1941} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i837);
    goto corral_source_split_8616;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    out_$i837 := $sub.i32(out_$i836, 1);
    goto corral_source_split_8615;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    out_$i836 := $M.200;
    goto corral_source_split_8614;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.197 := 1;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(1);
    goto corral_source_split_8613;

  $bb752:
    assume out_$i835 == 1;
    goto corral_source_split_8612;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb752, $bb753;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    out_$i835 := $eq.i32(out_$i834, 0);
    goto corral_source_split_8610;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    out_$i834 := $M.221;
    goto corral_source_split_8609;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $M.221 := out_$i833;
    call {:si_unique_call 1939} {:cexpr "ldv_retval_61"} boogie_si_record_i32(out_$i833);
    goto corral_source_split_8608;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} out_$i833 := wl12xx_remove(out_$p832);
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$p832 := $M.136;
    goto corral_source_split_8606;

  $bb750:
    assume out_$i831 == 1;
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb750, $bb751;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$i831 := $eq.i32(out_$i830, 1);
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$i830 := $M.220;
    goto corral_source_split_8602;

  $bb747:
    assume out_$i829 == 1;
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb747, $bb748;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    out_$i829 := $eq.i32(out_$i828, 2);
    goto corral_source_split_8599;

  $bb746:
    assume {:verifier.code 0} true;
    out_$i828 := $M.197;
    goto corral_source_split_8598;

  $bb740:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb744:
    assume !(out_$i825 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    goto $bb745;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $M.220 := 0;
    call {:si_unique_call 1937} {:cexpr "probed_79"} boogie_si_record_i32(0);
    goto corral_source_split_8596;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $M.200 := out_$i827;
    call {:si_unique_call 1936} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i827);
    goto corral_source_split_8595;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    out_$i827 := $sub.i32(out_$i826, 1);
    goto corral_source_split_8594;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i826 := $M.200;
    goto corral_source_split_8593;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.197 := 1;
    call {:si_unique_call 1935} {:cexpr "ldv_state_variable_79"} boogie_si_record_i32(1);
    goto corral_source_split_8592;

  $bb743:
    assume out_$i825 == 1;
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb743, $bb744;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i825 := $eq.i32(out_$i824, 0);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$i824 := $M.221;
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $M.221 := out_$i823;
    call {:si_unique_call 1934} {:cexpr "ldv_retval_61"} boogie_si_record_i32(out_$i823);
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} out_$i823 := wl12xx_remove(out_$p822);
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$p822 := $M.136;
    goto corral_source_split_8585;

  $bb741:
    assume out_$i821 == 1;
    goto corral_source_split_8584;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb741, $bb742;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    out_$i821 := $eq.i32(out_$i820, 1);
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i820 := $M.220;
    goto corral_source_split_8581;

  $bb738:
    assume out_$i819 == 1;
    goto corral_source_split_8580;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738, $bb739;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    out_$i819 := $eq.i32(out_$i818, 1);
    goto corral_source_split_8560;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$i818 := $M.197;
    goto corral_source_split_8559;

  $bb726:
    assume out_$i808 == 1;
    goto corral_source_split_8558;

  $bb725:
    assume !(out_$i807 == 1);
    assume {:verifier.code 0} true;
    out_$i808 := $eq.i32(out_$i806, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb726, $bb727;

  $bb739:
    assume {:verifier.code 0} true;
    assume !(out_$i819 == 1);
    goto $bb740;

  $bb742:
    assume {:verifier.code 0} true;
    assume !(out_$i821 == 1);
    goto $bb740;

  $bb748:
    assume {:verifier.code 0} true;
    assume !(out_$i829 == 1);
    goto $bb749;

  $bb751:
    assume {:verifier.code 0} true;
    assume !(out_$i831 == 1);
    goto $bb749;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_stop();
    goto corral_source_split_8619;

  $bb728:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb727:
    assume {:verifier.code 0} true;
    assume !(out_$i808 == 1);
    goto $bb728;

  $bb730:
    assume {:verifier.code 0} true;
    assume !(out_$i809 == 1);
    goto $bb728;

  $bb760:
    assume !(out_$i839 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    goto $bb761;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} ldv_main_exported_22();
    goto corral_source_split_8622;

  $bb759:
    assume out_$i839 == 1;
    goto corral_source_split_8621;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb759, $bb760;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$i839 := $ne.i32(out_$i838, 0);
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i838 := $M.198;
    goto corral_source_split_7178;

  $bb44:
    assume out_$i92 == 1;
    goto corral_source_split_7177;

  $bb43:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i71, 63);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb763:
    assume !(out_$i841 == 1);
    assume {:verifier.code 0} true;
    goto $bb764;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    goto $bb764;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} ldv_main_exported_42();
    goto corral_source_split_8625;

  $bb762:
    assume out_$i841 == 1;
    goto corral_source_split_8624;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb762, $bb763;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$i841 := $ne.i32(out_$i840, 0);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$i840 := $M.199;
    goto corral_source_split_7182;

  $bb46:
    assume out_$i93 == 1;
    goto corral_source_split_7181;

  $bb45:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i71, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb766:
    assume !(out_$i843 == 1);
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb782:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb791:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb776:
    assume {:verifier.code 0} true;
    assume !(out_$i849 == 1);
    goto $bb777;

  $bb779:
    assume {:verifier.code 0} true;
    assume !(out_$i851 == 1);
    goto $bb777;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb779;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    out_$i851 := $eq.i32(out_$i850, 0);
    goto corral_source_split_8639;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    out_$i850 := $M.200;
    goto corral_source_split_8638;

  $bb775:
    assume out_$i849 == 1;
    goto corral_source_split_8637;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb775, $bb776;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$i849 := $eq.i32(out_$i848, 2);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$i848 := $M.201;
    goto corral_source_split_8634;

  $bb773:
    assume out_$i847 == 1;
    goto corral_source_split_8633;

  $bb768:
    assume out_$i845 == 1;
    assume {:verifier.code 0} true;
    out_$i847 := $eq.i32(out_$i844, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb773, $bb774;

  $bb767:
    assume {:verifier.code 0} true;
    out_$i845 := $slt.i32(out_$i844, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb768, $bb769;

  corral_source_split_8627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1946} out_$i844 := __VERIFIER_nondet_int();
    call {:si_unique_call 1947} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i844);
    call {:si_unique_call 1948} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i844);
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb765:
    assume out_$i843 == 1;
    goto corral_source_split_8627;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb765, $bb766;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    out_$i843 := $ne.i32(out_$i842, 0);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$i842 := $M.201;
    goto corral_source_split_7186;

  $bb47:
    assume !(out_$i93 == 1);
    goto corral_source_split_7185;

  $bb784:
    assume !(out_$i853 == 1);
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb790:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb789:
    assume !(out_$i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto $bb790;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} ldv_file_operations_33();
    goto corral_source_split_8816;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.137 := 1;
    call {:si_unique_call 2110} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_8815;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} ldv_file_operations_32();
    goto corral_source_split_8814;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.138 := 1;
    call {:si_unique_call 2108} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_8813;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} ldv_file_operations_63();
    goto corral_source_split_8812;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.139 := 1;
    call {:si_unique_call 2106} {:cexpr "ldv_state_variable_63"} boogie_si_record_i32(1);
    goto corral_source_split_8811;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} ldv_file_operations_21();
    goto corral_source_split_8810;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.140 := 1;
    call {:si_unique_call 2104} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_8809;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} ldv_file_operations_71();
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.141 := 1;
    call {:si_unique_call 2102} {:cexpr "ldv_state_variable_71"} boogie_si_record_i32(1);
    goto corral_source_split_8807;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} ldv_file_operations_7();
    goto corral_source_split_8806;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.142 := 1;
    call {:si_unique_call 2100} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8805;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} ldv_file_operations_26();
    goto corral_source_split_8804;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.143 := 1;
    call {:si_unique_call 2098} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_8803;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} ldv_file_operations_18();
    goto corral_source_split_8802;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.144 := 1;
    call {:si_unique_call 2096} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_8801;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} ldv_file_operations_72();
    goto corral_source_split_8800;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.145 := 1;
    call {:si_unique_call 2094} {:cexpr "ldv_state_variable_72"} boogie_si_record_i32(1);
    goto corral_source_split_8799;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} ldv_file_operations_16();
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $M.146 := 1;
    call {:si_unique_call 2092} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} ldv_file_operations_44();
    goto corral_source_split_8796;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.147 := 1;
    call {:si_unique_call 2090} {:cexpr "ldv_state_variable_44"} boogie_si_record_i32(1);
    goto corral_source_split_8795;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} ldv_file_operations_55();
    goto corral_source_split_8794;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.148 := 1;
    call {:si_unique_call 2088} {:cexpr "ldv_state_variable_55"} boogie_si_record_i32(1);
    goto corral_source_split_8793;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} ldv_file_operations_74();
    goto corral_source_split_8792;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $M.149 := 1;
    call {:si_unique_call 2086} {:cexpr "ldv_state_variable_74"} boogie_si_record_i32(1);
    goto corral_source_split_8791;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} ldv_file_operations_27();
    goto corral_source_split_8790;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $M.150 := 1;
    call {:si_unique_call 2084} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_8789;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} ldv_file_operations_57();
    goto corral_source_split_8788;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.151 := 1;
    call {:si_unique_call 2082} {:cexpr "ldv_state_variable_57"} boogie_si_record_i32(1);
    goto corral_source_split_8787;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} ldv_file_operations_61();
    goto corral_source_split_8786;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.152 := 1;
    call {:si_unique_call 2080} {:cexpr "ldv_state_variable_61"} boogie_si_record_i32(1);
    goto corral_source_split_8785;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} ldv_file_operations_20();
    goto corral_source_split_8784;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.153 := 1;
    call {:si_unique_call 2078} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_8783;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} ldv_file_operations_10();
    goto corral_source_split_8782;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $M.154 := 1;
    call {:si_unique_call 2076} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8781;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} ldv_file_operations_31();
    goto corral_source_split_8780;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.155 := 1;
    call {:si_unique_call 2074} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_8779;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} ldv_file_operations_35();
    goto corral_source_split_8778;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.156 := 1;
    call {:si_unique_call 2072} {:cexpr "ldv_state_variable_35"} boogie_si_record_i32(1);
    goto corral_source_split_8777;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} ldv_file_operations_11();
    goto corral_source_split_8776;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.157 := 1;
    call {:si_unique_call 2070} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8775;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} ldv_file_operations_78();
    goto corral_source_split_8774;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.158 := 1;
    call {:si_unique_call 2068} {:cexpr "ldv_state_variable_78"} boogie_si_record_i32(1);
    goto corral_source_split_8773;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} ldv_file_operations_48();
    goto corral_source_split_8772;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.159 := 1;
    call {:si_unique_call 2066} {:cexpr "ldv_state_variable_48"} boogie_si_record_i32(1);
    goto corral_source_split_8771;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} ldv_file_operations_77();
    goto corral_source_split_8770;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.160 := 1;
    call {:si_unique_call 2064} {:cexpr "ldv_state_variable_77"} boogie_si_record_i32(1);
    goto corral_source_split_8769;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} ldv_file_operations_65();
    goto corral_source_split_8768;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $M.161 := 1;
    call {:si_unique_call 2062} {:cexpr "ldv_state_variable_65"} boogie_si_record_i32(1);
    goto corral_source_split_8767;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} ldv_file_operations_29();
    goto corral_source_split_8766;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $M.162 := 1;
    call {:si_unique_call 2060} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_8765;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} ldv_file_operations_50();
    goto corral_source_split_8764;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.163 := 1;
    call {:si_unique_call 2058} {:cexpr "ldv_state_variable_50"} boogie_si_record_i32(1);
    goto corral_source_split_8763;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} ldv_file_operations_39();
    goto corral_source_split_8762;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $M.164 := 1;
    call {:si_unique_call 2056} {:cexpr "ldv_state_variable_39"} boogie_si_record_i32(1);
    goto corral_source_split_8761;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} ldv_file_operations_64();
    goto corral_source_split_8760;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.165 := 1;
    call {:si_unique_call 2054} {:cexpr "ldv_state_variable_64"} boogie_si_record_i32(1);
    goto corral_source_split_8759;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} ldv_file_operations_58();
    goto corral_source_split_8758;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.166 := 1;
    call {:si_unique_call 2052} {:cexpr "ldv_state_variable_58"} boogie_si_record_i32(1);
    goto corral_source_split_8757;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_file_operations_41();
    goto corral_source_split_8756;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.167 := 1;
    call {:si_unique_call 2050} {:cexpr "ldv_state_variable_41"} boogie_si_record_i32(1);
    goto corral_source_split_8755;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} ldv_file_operations_12();
    goto corral_source_split_8754;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.168 := 1;
    call {:si_unique_call 2048} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_8753;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} ldv_file_operations_15();
    goto corral_source_split_8752;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $M.169 := 1;
    call {:si_unique_call 2046} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_8751;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} ldv_file_operations_52();
    goto corral_source_split_8750;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $M.170 := 1;
    call {:si_unique_call 2044} {:cexpr "ldv_state_variable_52"} boogie_si_record_i32(1);
    goto corral_source_split_8749;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} ldv_file_operations_60();
    goto corral_source_split_8748;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $M.171 := 1;
    call {:si_unique_call 2042} {:cexpr "ldv_state_variable_60"} boogie_si_record_i32(1);
    goto corral_source_split_8747;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} ldv_file_operations_56();
    goto corral_source_split_8746;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $M.172 := 1;
    call {:si_unique_call 2040} {:cexpr "ldv_state_variable_56"} boogie_si_record_i32(1);
    goto corral_source_split_8745;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} ldv_file_operations_73();
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.173 := 1;
    call {:si_unique_call 2038} {:cexpr "ldv_state_variable_73"} boogie_si_record_i32(1);
    goto corral_source_split_8743;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} ldv_file_operations_66();
    goto corral_source_split_8742;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $M.174 := 1;
    call {:si_unique_call 2036} {:cexpr "ldv_state_variable_66"} boogie_si_record_i32(1);
    goto corral_source_split_8741;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} ldv_file_operations_45();
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.175 := 1;
    call {:si_unique_call 2034} {:cexpr "ldv_state_variable_45"} boogie_si_record_i32(1);
    goto corral_source_split_8739;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} ldv_file_operations_76();
    goto corral_source_split_8738;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.176 := 1;
    call {:si_unique_call 2032} {:cexpr "ldv_state_variable_76"} boogie_si_record_i32(1);
    goto corral_source_split_8737;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} ldv_file_operations_19();
    goto corral_source_split_8736;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.177 := 1;
    call {:si_unique_call 2030} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_8735;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} ldv_file_operations_62();
    goto corral_source_split_8734;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $M.178 := 1;
    call {:si_unique_call 2028} {:cexpr "ldv_state_variable_62"} boogie_si_record_i32(1);
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} ldv_file_operations_54();
    goto corral_source_split_8732;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.179 := 1;
    call {:si_unique_call 2026} {:cexpr "ldv_state_variable_54"} boogie_si_record_i32(1);
    goto corral_source_split_8731;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} ldv_file_operations_67();
    goto corral_source_split_8730;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.180 := 1;
    call {:si_unique_call 2024} {:cexpr "ldv_state_variable_67"} boogie_si_record_i32(1);
    goto corral_source_split_8729;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} ldv_file_operations_70();
    goto corral_source_split_8728;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.181 := 1;
    call {:si_unique_call 2022} {:cexpr "ldv_state_variable_70"} boogie_si_record_i32(1);
    goto corral_source_split_8727;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} ldv_file_operations_68();
    goto corral_source_split_8726;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.182 := 1;
    call {:si_unique_call 2020} {:cexpr "ldv_state_variable_68"} boogie_si_record_i32(1);
    goto corral_source_split_8725;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} ldv_file_operations_2();
    goto corral_source_split_8724;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $M.183 := 1;
    call {:si_unique_call 2018} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8723;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} ldv_file_operations_17();
    goto corral_source_split_8722;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.184 := 1;
    call {:si_unique_call 2016} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_8721;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} ldv_file_operations_1();
    goto corral_source_split_8720;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.185 := 1;
    call {:si_unique_call 2014} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8719;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} ldv_file_operations_30();
    goto corral_source_split_8718;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.186 := 1;
    call {:si_unique_call 2012} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_8717;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} ldv_file_operations_25();
    goto corral_source_split_8716;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.187 := 1;
    call {:si_unique_call 2010} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_8715;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} ldv_file_operations_28();
    goto corral_source_split_8714;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.188 := 1;
    call {:si_unique_call 2008} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_8713;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} ldv_file_operations_75();
    goto corral_source_split_8712;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.189 := 1;
    call {:si_unique_call 2006} {:cexpr "ldv_state_variable_75"} boogie_si_record_i32(1);
    goto corral_source_split_8711;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} ldv_file_operations_40();
    goto corral_source_split_8710;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.190 := 1;
    call {:si_unique_call 2004} {:cexpr "ldv_state_variable_40"} boogie_si_record_i32(1);
    goto corral_source_split_8709;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} ldv_file_operations_14();
    goto corral_source_split_8708;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.191 := 1;
    call {:si_unique_call 2002} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8707;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} ldv_file_operations_69();
    goto corral_source_split_8706;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.192 := 1;
    call {:si_unique_call 2000} {:cexpr "ldv_state_variable_69"} boogie_si_record_i32(1);
    goto corral_source_split_8705;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} ldv_file_operations_59();
    goto corral_source_split_8704;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.193 := 1;
    call {:si_unique_call 1998} {:cexpr "ldv_state_variable_59"} boogie_si_record_i32(1);
    goto corral_source_split_8703;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} ldv_file_operations_49();
    goto corral_source_split_8702;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.194 := 1;
    call {:si_unique_call 1996} {:cexpr "ldv_state_variable_49"} boogie_si_record_i32(1);
    goto corral_source_split_8701;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} ldv_file_operations_24();
    goto corral_source_split_8700;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $M.195 := 1;
    call {:si_unique_call 1994} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_8699;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} ldv_file_operations_53();
    goto corral_source_split_8698;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.196 := 1;
    call {:si_unique_call 1992} {:cexpr "ldv_state_variable_53"} boogie_si_record_i32(1);
    goto corral_source_split_8697;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} ldv_file_operations_22();
    goto corral_source_split_8696;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.198 := 1;
    call {:si_unique_call 1990} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} ldv_file_operations_42();
    goto corral_source_split_8694;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.199 := 1;
    call {:si_unique_call 1988} {:cexpr "ldv_state_variable_42"} boogie_si_record_i32(1);
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} ldv_file_operations_46();
    goto corral_source_split_8692;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $M.202 := 1;
    call {:si_unique_call 1986} {:cexpr "ldv_state_variable_46"} boogie_si_record_i32(1);
    goto corral_source_split_8691;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} ldv_file_operations_23();
    goto corral_source_split_8690;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.203 := 1;
    call {:si_unique_call 1984} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_8689;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} ldv_file_operations_13();
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.204 := 1;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8687;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_file_operations_6();
    goto corral_source_split_8686;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $M.205 := 1;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8685;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} ldv_file_operations_3();
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.206 := 1;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8683;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} ldv_file_operations_36();
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.207 := 1;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_36"} boogie_si_record_i32(1);
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} ldv_file_operations_9();
    goto corral_source_split_8680;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.208 := 1;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} ldv_file_operations_51();
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.209 := 1;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_51"} boogie_si_record_i32(1);
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} ldv_file_operations_47();
    goto corral_source_split_8676;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.210 := 1;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_47"} boogie_si_record_i32(1);
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_file_operations_8();
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.211 := 1;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ldv_file_operations_38();
    goto corral_source_split_8672;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.212 := 1;
    call {:si_unique_call 1966} {:cexpr "ldv_state_variable_38"} boogie_si_record_i32(1);
    goto corral_source_split_8671;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} ldv_file_operations_4();
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.213 := 1;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8669;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} ldv_file_operations_34();
    goto corral_source_split_8668;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.214 := 1;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_34"} boogie_si_record_i32(1);
    goto corral_source_split_8667;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} ldv_file_operations_37();
    goto corral_source_split_8666;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.215 := 1;
    call {:si_unique_call 1960} {:cexpr "ldv_state_variable_37"} boogie_si_record_i32(1);
    goto corral_source_split_8665;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} ldv_file_operations_43();
    goto corral_source_split_8664;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.216 := 1;
    call {:si_unique_call 1958} {:cexpr "ldv_state_variable_43"} boogie_si_record_i32(1);
    goto corral_source_split_8663;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_file_operations_5();
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $M.217 := 1;
    call {:si_unique_call 1956} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8661;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.201 := 2;
    call {:si_unique_call 1955} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8660;

  $bb788:
    assume out_$i858 == 1;
    goto corral_source_split_8659;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb788, $bb789;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$i858 := $eq.i32(out_$i857, 0);
    goto corral_source_split_8657;

  $bb787:
    assume {:verifier.code 0} true;
    out_$i857 := $M.222;
    goto corral_source_split_8656;

  $bb786:
    assume !(out_$i856 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb786;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$i856 := $ne.i32(out_$i855, 0);
    goto corral_source_split_8651;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    out_$i855 := $M.222;
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.222 := out_$i854;
    call {:si_unique_call 1953} {:cexpr "ldv_retval_65"} boogie_si_record_i32(out_$i854);
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} out_$i854 := wl12xx_driver_init();
    goto corral_source_split_8648;

  $bb783:
    assume out_$i853 == 1;
    goto corral_source_split_8647;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb783, $bb784;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    out_$i853 := $eq.i32(out_$i852, 1);
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    out_$i852 := $M.201;
    goto corral_source_split_8630;

  $bb770:
    assume out_$i846 == 1;
    goto corral_source_split_8629;

  $bb769:
    assume !(out_$i845 == 1);
    assume {:verifier.code 0} true;
    out_$i846 := $eq.i32(out_$i844, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb770, $bb771;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} ldv_stop();
    goto corral_source_split_8818;

  $bb772:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb771:
    assume {:verifier.code 0} true;
    assume !(out_$i846 == 1);
    goto $bb772;

  $bb774:
    assume {:verifier.code 0} true;
    assume !(out_$i847 == 1);
    goto $bb772;

  $bb796:
    assume !(out_$i860 == 1);
    assume {:verifier.code 0} true;
    goto $bb797;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb797;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} ldv_main_exported_46();
    goto corral_source_split_8821;

  $bb795:
    assume out_$i860 == 1;
    goto corral_source_split_8820;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb795, $bb796;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    out_$i860 := $ne.i32(out_$i859, 0);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$i859 := $M.202;
    goto corral_source_split_7170;

  $bb40:
    assume out_$i90 == 1;
    goto corral_source_split_7169;

  $bb34:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i71, 66);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb33:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i71, 67);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb799:
    assume !(out_$i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb800;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    goto $bb800;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} ldv_main_exported_23();
    goto corral_source_split_8824;

  $bb798:
    assume out_$i862 == 1;
    goto corral_source_split_8823;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb798, $bb799;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    out_$i862 := $ne.i32(out_$i861, 0);
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$i861 := $M.203;
    goto corral_source_split_7174;

  $bb41:
    assume !(out_$i90 == 1);
    goto corral_source_split_7173;

  $bb802:
    assume !(out_$i864 == 1);
    assume {:verifier.code 0} true;
    goto $bb803;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    goto $bb803;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} ldv_main_exported_13();
    goto corral_source_split_8827;

  $bb801:
    assume out_$i864 == 1;
    goto corral_source_split_8826;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb801, $bb802;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    out_$i864 := $ne.i32(out_$i863, 0);
    goto corral_source_split_7159;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    out_$i863 := $M.204;
    goto corral_source_split_7158;

  $bb36:
    assume out_$i88 == 1;
    goto corral_source_split_7157;

  $bb35:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i71, 68);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb805:
    assume !(out_$i866 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    goto $bb806;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} ldv_main_exported_6();
    goto corral_source_split_8830;

  $bb804:
    assume out_$i866 == 1;
    goto corral_source_split_8829;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb804, $bb805;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    out_$i866 := $ne.i32(out_$i865, 0);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    out_$i865 := $M.205;
    goto corral_source_split_7162;

  $bb38:
    assume out_$i89 == 1;
    goto corral_source_split_7161;

  $bb37:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i71, 69);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb808:
    assume !(out_$i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    goto $bb809;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} ldv_main_exported_3();
    goto corral_source_split_8833;

  $bb807:
    assume out_$i868 == 1;
    goto corral_source_split_8832;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb807, $bb808;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$i868 := $ne.i32(out_$i867, 0);
    goto corral_source_split_7167;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    out_$i867 := $M.206;
    goto corral_source_split_7166;

  $bb39:
    assume !(out_$i89 == 1);
    goto corral_source_split_7165;

  $bb811:
    assume !(out_$i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb812;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    goto $bb812;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} ldv_main_exported_36();
    goto corral_source_split_8836;

  $bb810:
    assume out_$i870 == 1;
    goto corral_source_split_8835;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb810, $bb811;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$i870 := $ne.i32(out_$i869, 0);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_$i869 := $M.207;
    goto corral_source_split_7150;

  $bb30:
    assume out_$i85 == 1;
    goto corral_source_split_7149;

  $bb24:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i71, 71);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb9:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i71, 72);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb8:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i71, 75);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb814:
    assume !(out_$i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb815;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    goto $bb815;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} ldv_main_exported_9();
    goto corral_source_split_8839;

  $bb813:
    assume out_$i872 == 1;
    goto corral_source_split_8838;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb813, $bb814;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    out_$i872 := $ne.i32(out_$i871, 0);
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$i871 := $M.208;
    goto corral_source_split_7154;

  $bb31:
    assume !(out_$i85 == 1);
    goto corral_source_split_7153;

  $bb817:
    assume !(out_$i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb818;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb818;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} ldv_main_exported_51();
    goto corral_source_split_8842;

  $bb816:
    assume out_$i874 == 1;
    goto corral_source_split_8841;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb816, $bb817;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$i874 := $ne.i32(out_$i873, 0);
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$i873 := $M.209;
    goto corral_source_split_7138;

  $bb26:
    assume out_$i83 == 1;
    goto corral_source_split_7137;

  $bb25:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i71, 73);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb820:
    assume !(out_$i876 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    goto $bb821;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} ldv_main_exported_47();
    goto corral_source_split_8845;

  $bb819:
    assume out_$i876 == 1;
    goto corral_source_split_8844;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb819, $bb820;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    out_$i876 := $ne.i32(out_$i875, 0);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    out_$i875 := $M.210;
    goto corral_source_split_7142;

  $bb28:
    assume out_$i84 == 1;
    goto corral_source_split_7141;

  $bb27:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i71, 74);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb823:
    assume !(out_$i878 == 1);
    assume {:verifier.code 0} true;
    goto $bb824;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb824;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} ldv_main_exported_8();
    goto corral_source_split_8848;

  $bb822:
    assume out_$i878 == 1;
    goto corral_source_split_8847;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb822, $bb823;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$i878 := $ne.i32(out_$i877, 0);
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i877 := $M.211;
    goto corral_source_split_7146;

  $bb29:
    assume !(out_$i84 == 1);
    goto corral_source_split_7145;

  $bb826:
    assume !(out_$i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb827;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    goto $bb827;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_main_exported_38();
    goto corral_source_split_8851;

  $bb825:
    assume out_$i880 == 1;
    goto corral_source_split_8850;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb825, $bb826;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    out_$i880 := $ne.i32(out_$i879, 0);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$i879 := $M.212;
    goto corral_source_split_7126;

  $bb20:
    assume out_$i80 == 1;
    goto corral_source_split_7125;

  $bb11:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i71, 76);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb10:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i71, 78);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb829:
    assume !(out_$i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb830;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    goto $bb830;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} ldv_main_exported_4();
    goto corral_source_split_8854;

  $bb828:
    assume out_$i882 == 1;
    goto corral_source_split_8853;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb828, $bb829;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    out_$i882 := $ne.i32(out_$i881, 0);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$i881 := $M.213;
    goto corral_source_split_7130;

  $bb22:
    assume out_$i81 == 1;
    goto corral_source_split_7129;

  $bb21:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i71, 77);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb832:
    assume !(out_$i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb833;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb833;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} ldv_main_exported_34();
    goto corral_source_split_8857;

  $bb831:
    assume out_$i884 == 1;
    goto corral_source_split_8856;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb831, $bb832;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    out_$i884 := $ne.i32(out_$i883, 0);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$i883 := $M.214;
    goto corral_source_split_7134;

  $bb23:
    assume !(out_$i81 == 1);
    goto corral_source_split_7133;

  $bb835:
    assume !(out_$i886 == 1);
    assume {:verifier.code 0} true;
    goto $bb836;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    goto $bb836;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} ldv_main_exported_37();
    goto corral_source_split_8860;

  $bb834:
    assume out_$i886 == 1;
    goto corral_source_split_8859;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb834, $bb835;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$i886 := $ne.i32(out_$i885, 0);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i885 := $M.215;
    goto corral_source_split_7114;

  $bb13:
    assume out_$i77 == 1;
    goto corral_source_split_7113;

  $bb12:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i71, 79);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb838:
    assume !(out_$i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb839;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    goto $bb839;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} ldv_main_exported_43();
    goto corral_source_split_8863;

  $bb837:
    assume out_$i888 == 1;
    goto corral_source_split_8862;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb837, $bb838;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$i888 := $ne.i32(out_$i887, 0);
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$i887 := $M.216;
    goto corral_source_split_7118;

  $bb15:
    assume out_$i78 == 1;
    goto corral_source_split_7117;

  $bb14:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i71, 80);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb841:
    assume !(out_$i890 == 1);
    assume {:verifier.code 0} true;
    goto $bb842;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    goto $bb842;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} ldv_main_exported_5();
    goto corral_source_split_8866;

  $bb840:
    assume out_$i890 == 1;
    goto corral_source_split_8865;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb840, $bb841;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    out_$i890 := $ne.i32(out_$i889, 0);
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$i889 := $M.217;
    goto corral_source_split_7122;

  $bb17:
    assume out_$i79 == 1;
    goto corral_source_split_7121;

  $bb16:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i71, 80);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} ldv_stop();
    goto corral_source_split_8868;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb19;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb19;

  $bb171_dummy:
    call {:si_unique_call 1} out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$p248, out_$i250, out_$i251, out_$p252, out_$p253, out_$i255, out_$i256, out_$p257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i270, out_$i271, out_$p272, out_$i273, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$p284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$p356, out_$i357, out_$i358, out_$p359, out_$p360, out_$i361, out_$i362, out_$p363, out_$p364, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$i373, out_$i374, out_$p375, out_$i377, out_$i378, out_$p379, out_$p380, out_$i382, out_$i383, out_$p384, out_$p385, out_$i387, out_$i388, out_$p389, out_$p390, out_$i392, out_$i393, out_$p394, out_$i396, out_$i397, out_$p398, out_$i400, out_$i401, out_$p402, out_$i404, out_$i405, out_$p406, out_$i407, out_$i409, out_$i410, out_$p411, out_$i412, out_$i414, out_$i415, out_$p416, out_$i417, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$p433, out_$i435, out_$i436, out_$p437, out_$i438, out_$i439, out_$i440, out_$p441, out_$i443, out_$i444, out_$p445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i455, out_$i456, out_$p457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i485, out_$i486, out_$p487, out_$i489, out_$i490, out_$p491, out_$i493, out_$i494, out_$p495, out_$i497, out_$i498, out_$p499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$p505, out_$i506, out_$i507, out_$p508, out_$p509, out_$i511, out_$i512, out_$p513, out_$p514, out_$i516, out_$i517, out_$p518, out_$p519, out_$i521, out_$i522, out_$p523, out_$p524, out_$p525, out_$i526, out_$i527, out_$p528, out_$p529, out_$p530, out_$i531, out_$i532, out_$p533, out_$p534, out_$p535, out_$i536, out_$i537, out_$p538, out_$i540, out_$i541, out_$p542, out_$i544, out_$i545, out_$p546, out_$i548, out_$i549, out_$p550, out_$i551, out_$i552, out_$i554, out_$i555, out_$p556, out_$i557, out_$i558, out_$i560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i566, out_$i567, out_$p568, out_$p569, out_$p570, out_$i571, out_$i572, out_$p573, out_$p574, out_$p575, out_$i576, out_$i577, out_$p578, out_$p579, out_$p580, out_$i581, out_$i582, out_$p583, out_$p584, out_$i586, out_$i587, out_$p588, out_$p589, out_$i591, out_$i592, out_$p593, out_$p594, out_$i596, out_$i597, out_$p598, out_$p599, out_$i601, out_$i602, out_$p603, out_$p604, out_$i606, out_$i607, out_$p608, out_$p609, out_$i611, out_$i612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$i619, out_$i621, out_$i622, out_$p623, out_$i624, out_$i626, out_$i627, out_$p628, out_$i630, out_$i631, out_$p632, out_$i634, out_$i635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i641, out_$i643, out_$i644, out_$p645, out_$i646, out_$i648, out_$i649, out_$p650, out_$i651, out_$i653, out_$i654, out_$p655, out_$i656, out_$i657, out_$i659, out_$i660, out_$p661, out_$i662, out_$i663, out_$i665, out_$i666, out_$p667, out_$i668, out_$i669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$i679, out_$i680, out_$p681, out_$i683, out_$i684, out_$i686, out_$i687, out_$i688, out_$i689, out_$i691, out_$i692, out_$i693, out_$i694, out_$i696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i701, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$i707, out_$i708, out_$i709, out_$i710, out_$i711, out_$i712, out_$i713, out_$i714, out_$i715, out_$i716, out_$i717, out_$i718, out_$i719, out_$i720, out_$i721, out_$i722, out_$i723, out_$i724, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$i738, out_$i739, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$i783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$i799, out_$i800, out_$i801, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$i808, out_$i809, out_$i810, out_$i811, out_$p812, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$i821, out_$p822, out_$i823, out_$i824, out_$i825, out_$i826, out_$i827, out_$i828, out_$i829, out_$i830, out_$i831, out_$p832, out_$i833, out_$i834, out_$i835, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$i843, out_$i844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$i859, out_$i860, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i886, out_$i887, out_$i888, out_$i889, out_$i890, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$p37, in_$p38, in_$p40, in_$p41, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$p248, out_$i250, out_$i251, out_$p252, out_$p253, out_$i255, out_$i256, out_$p257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i270, out_$i271, out_$p272, out_$i273, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$p284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$p356, out_$i357, out_$i358, out_$p359, out_$p360, out_$i361, out_$i362, out_$p363, out_$p364, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$i373, out_$i374, out_$p375, out_$i377, out_$i378, out_$p379, out_$p380, out_$i382, out_$i383, out_$p384, out_$p385, out_$i387, out_$i388, out_$p389, out_$p390, out_$i392, out_$i393, out_$p394, out_$i396, out_$i397, out_$p398, out_$i400, out_$i401, out_$p402, out_$i404, out_$i405, out_$p406, out_$i407, out_$i409, out_$i410, out_$p411, out_$i412, out_$i414, out_$i415, out_$p416, out_$i417, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$p433, out_$i435, out_$i436, out_$p437, out_$i438, out_$i439, out_$i440, out_$p441, out_$i443, out_$i444, out_$p445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i455, out_$i456, out_$p457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i485, out_$i486, out_$p487, out_$i489, out_$i490, out_$p491, out_$i493, out_$i494, out_$p495, out_$i497, out_$i498, out_$p499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$p505, out_$i506, out_$i507, out_$p508, out_$p509, out_$i511, out_$i512, out_$p513, out_$p514, out_$i516, out_$i517, out_$p518, out_$p519, out_$i521, out_$i522, out_$p523, out_$p524, out_$p525, out_$i526, out_$i527, out_$p528, out_$p529, out_$p530, out_$i531, out_$i532, out_$p533, out_$p534, out_$p535, out_$i536, out_$i537, out_$p538, out_$i540, out_$i541, out_$p542, out_$i544, out_$i545, out_$p546, out_$i548, out_$i549, out_$p550, out_$i551, out_$i552, out_$i554, out_$i555, out_$p556, out_$i557, out_$i558, out_$i560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i566, out_$i567, out_$p568, out_$p569, out_$p570, out_$i571, out_$i572, out_$p573, out_$p574, out_$p575, out_$i576, out_$i577, out_$p578, out_$p579, out_$p580, out_$i581, out_$i582, out_$p583, out_$p584, out_$i586, out_$i587, out_$p588, out_$p589, out_$i591, out_$i592, out_$p593, out_$p594, out_$i596, out_$i597, out_$p598, out_$p599, out_$i601, out_$i602, out_$p603, out_$p604, out_$i606, out_$i607, out_$p608, out_$p609, out_$i611, out_$i612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$i619, out_$i621, out_$i622, out_$p623, out_$i624, out_$i626, out_$i627, out_$p628, out_$i630, out_$i631, out_$p632, out_$i634, out_$i635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i641, out_$i643, out_$i644, out_$p645, out_$i646, out_$i648, out_$i649, out_$p650, out_$i651, out_$i653, out_$i654, out_$p655, out_$i656, out_$i657, out_$i659, out_$i660, out_$p661, out_$i662, out_$i663, out_$i665, out_$i666, out_$p667, out_$i668, out_$i669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$i679, out_$i680, out_$p681, out_$i683, out_$i684, out_$i686, out_$i687, out_$i688, out_$i689, out_$i691, out_$i692, out_$i693, out_$i694, out_$i696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i701, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$i707, out_$i708, out_$i709, out_$i710, out_$i711, out_$i712, out_$i713, out_$i714, out_$i715, out_$i716, out_$i717, out_$i718, out_$i719, out_$i720, out_$i721, out_$i722, out_$i723, out_$i724, out_$i725, out_$i726, out_$i727, out_$i728, out_$i729, out_$i730, out_$i731, out_$i732, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$i738, out_$i739, out_$i740, out_$i741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$i783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$i799, out_$i800, out_$i801, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$i808, out_$i809, out_$i810, out_$i811, out_$p812, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$i821, out_$p822, out_$i823, out_$i824, out_$i825, out_$i826, out_$i827, out_$i828, out_$i829, out_$i830, out_$i831, out_$p832, out_$i833, out_$i834, out_$i835, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$i843, out_$i844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$i859, out_$i860, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i886, out_$i887, out_$i888, out_$i889, out_$i890, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$i71: i32, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i32, in_$i208: i64, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i64, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i64, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$p253: ref, in_$i255: i32, in_$i256: i1, in_$p257: ref, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$p284: ref, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i291: i32, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i8, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i8, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i8, in_$i325: i32, in_$i326: i8, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$p356: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$p360: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$p380: ref, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$p385: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$p390: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i396: i32, in_$i397: i1, in_$p398: ref, in_$i400: i32, in_$i401: i1, in_$p402: ref, in_$i404: i32, in_$i405: i1, in_$p406: ref, in_$i407: i32, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$i412: i32, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i417: i32, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i422: i8, in_$i423: i32, in_$i424: i8, in_$p425: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$i430: i8, in_$i431: i32, in_$i432: i8, in_$p433: ref, in_$i435: i32, in_$i436: i1, in_$p437: ref, in_$i438: i8, in_$i439: i32, in_$i440: i8, in_$p441: ref, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$i458: i8, in_$i459: i1, in_$i460: i32, in_$i461: i8, in_$i462: i32, in_$i463: i8, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i468: i8, in_$i469: i1, in_$i470: i32, in_$i471: i8, in_$i472: i32, in_$i473: i8, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i8, in_$i479: i1, in_$i480: i32, in_$i481: i8, in_$i482: i32, in_$i483: i8, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i493: i32, in_$i494: i1, in_$p495: ref, in_$i497: i32, in_$i498: i1, in_$p499: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i506: i32, in_$i507: i1, in_$p508: ref, in_$p509: ref, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$p514: ref, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$p519: ref, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$p524: ref, in_$p525: ref, in_$i526: i32, in_$i527: i1, in_$p528: ref, in_$p529: ref, in_$p530: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$p534: ref, in_$p535: ref, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$i544: i32, in_$i545: i1, in_$p546: ref, in_$i548: i32, in_$i549: i1, in_$p550: ref, in_$i551: i32, in_$i552: i32, in_$i554: i32, in_$i555: i1, in_$p556: ref, in_$i557: i32, in_$i558: i32, in_$i560: i32, in_$i561: i1, in_$p562: ref, in_$i563: i32, in_$i564: i32, in_$i566: i32, in_$i567: i1, in_$p568: ref, in_$p569: ref, in_$p570: ref, in_$i571: i32, in_$i572: i1, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$i576: i32, in_$i577: i1, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$p584: ref, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$p589: ref, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$p594: ref, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$p599: ref, in_$i601: i32, in_$i602: i1, in_$p603: ref, in_$p604: ref, in_$i606: i32, in_$i607: i1, in_$p608: ref, in_$p609: ref, in_$i611: i32, in_$i612: i1, in_$p613: ref, in_$i614: i32, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$i619: i32, in_$i621: i32, in_$i622: i1, in_$p623: ref, in_$i624: i32, in_$i626: i32, in_$i627: i1, in_$p628: ref, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i634: i32, in_$i635: i1, in_$p636: ref, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$i641: i32, in_$i643: i32, in_$i644: i1, in_$p645: ref, in_$i646: i32, in_$i648: i32, in_$i649: i1, in_$p650: ref, in_$i651: i32, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$i656: i8, in_$i657: i1, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_$i662: i8, in_$i663: i1, in_$i665: i32, in_$i666: i1, in_$p667: ref, in_$i668: i8, in_$i669: i1, in_$i671: i32, in_$i672: i1, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$i683: i32, in_$i684: i1, in_$i686: i32, in_$i687: i32, in_$i688: i32, in_$i689: i1, in_$i691: i32, in_$i692: i32, in_$i693: i32, in_$i694: i1, in_$i696: i32, in_$i697: i1, in_$i698: i32, in_$i699: i1, in_$i700: i32, in_$i701: i1, in_$i702: i32, in_$i703: i1, in_$i704: i32, in_$i705: i1, in_$i706: i32, in_$i707: i1, in_$i708: i32, in_$i709: i1, in_$i710: i32, in_$i711: i1, in_$i712: i32, in_$i713: i1, in_$i714: i32, in_$i715: i1, in_$i716: i32, in_$i717: i1, in_$i718: i32, in_$i719: i1, in_$i720: i32, in_$i721: i1, in_$i722: i32, in_$i723: i1, in_$i724: i32, in_$i725: i1, in_$i726: i32, in_$i727: i1, in_$i728: i32, in_$i729: i1, in_$i730: i32, in_$i731: i1, in_$i732: i32, in_$i733: i1, in_$i734: i32, in_$i735: i1, in_$i736: i32, in_$i737: i1, in_$i738: i32, in_$i739: i1, in_$i740: i32, in_$i741: i1, in_$i742: i32, in_$i743: i1, in_$i744: i32, in_$i745: i1, in_$i746: i32, in_$i747: i1, in_$i748: i32, in_$i749: i1, in_$i750: i32, in_$i751: i1, in_$i752: i32, in_$i753: i1, in_$i754: i32, in_$i755: i1, in_$i756: i32, in_$i757: i1, in_$i758: i32, in_$i759: i1, in_$i760: i32, in_$i761: i1, in_$i762: i32, in_$i763: i1, in_$i764: i32, in_$i765: i1, in_$i766: i32, in_$i767: i1, in_$i768: i32, in_$i769: i1, in_$i770: i32, in_$i771: i1, in_$i772: i32, in_$i773: i1, in_$i774: i32, in_$i775: i1, in_$i776: i32, in_$i777: i1, in_$i778: i32, in_$i779: i1, in_$i780: i32, in_$i781: i1, in_$i782: i32, in_$i783: i1, in_$i784: i32, in_$i785: i1, in_$i786: i32, in_$i787: i1, in_$i788: i32, in_$i789: i1, in_$i790: i32, in_$i791: i1, in_$i792: i32, in_$i793: i1, in_$i794: i32, in_$i795: i1, in_$i796: i32, in_$i797: i1, in_$i798: i32, in_$i799: i1, in_$i800: i32, in_$i801: i1, in_$i802: i32, in_$i803: i1, in_$i804: i32, in_$i805: i1, in_$i806: i32, in_$i807: i1, in_$i808: i1, in_$i809: i1, in_$i810: i32, in_$i811: i1, in_$p812: ref, in_$i813: i32, in_$i814: i32, in_$i815: i1, in_$i816: i32, in_$i817: i32, in_$i818: i32, in_$i819: i1, in_$i820: i32, in_$i821: i1, in_$p822: ref, in_$i823: i32, in_$i824: i32, in_$i825: i1, in_$i826: i32, in_$i827: i32, in_$i828: i32, in_$i829: i1, in_$i830: i32, in_$i831: i1, in_$p832: ref, in_$i833: i32, in_$i834: i32, in_$i835: i1, in_$i836: i32, in_$i837: i32, in_$i838: i32, in_$i839: i1, in_$i840: i32, in_$i841: i1, in_$i842: i32, in_$i843: i1, in_$i844: i32, in_$i845: i1, in_$i846: i1, in_$i847: i1, in_$i848: i32, in_$i849: i1, in_$i850: i32, in_$i851: i1, in_$i852: i32, in_$i853: i1, in_$i854: i32, in_$i855: i32, in_$i856: i1, in_$i857: i32, in_$i858: i1, in_$i859: i32, in_$i860: i1, in_$i861: i32, in_$i862: i1, in_$i863: i32, in_$i864: i1, in_$i865: i32, in_$i866: i1, in_$i867: i32, in_$i868: i1, in_$i869: i32, in_$i870: i1, in_$i871: i32, in_$i872: i1, in_$i873: i32, in_$i874: i1, in_$i875: i32, in_$i876: i1, in_$i877: i32, in_$i878: i1, in_$i879: i32, in_$i880: i1, in_$i881: i32, in_$i882: i1, in_$i883: i32, in_$i884: i1, in_$i885: i32, in_$i886: i1, in_$i887: i32, in_$i888: i1, in_$i889: i32, in_$i890: i1, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i1, in_vslice_dummy_var_146: i1, in_vslice_dummy_var_147: i1, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i1, in_vslice_dummy_var_167: i1, in_vslice_dummy_var_168: i1, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: i32, in_vslice_dummy_var_188: i32, in_vslice_dummy_var_189: i32, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: i32, in_vslice_dummy_var_192: i32, in_vslice_dummy_var_193: i32, in_vslice_dummy_var_194: i32, in_vslice_dummy_var_195: i32, in_vslice_dummy_var_196: i32, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32) returns (out_$i71: i32, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i32, out_$i208: i64, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i64, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i64, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$p253: ref, out_$i255: i32, out_$i256: i1, out_$p257: ref, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$p284: ref, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i291: i32, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i8, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i8, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i8, out_$i325: i32, out_$i326: i8, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$p356: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$p360: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$p380: ref, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$p385: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$p390: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i396: i32, out_$i397: i1, out_$p398: ref, out_$i400: i32, out_$i401: i1, out_$p402: ref, out_$i404: i32, out_$i405: i1, out_$p406: ref, out_$i407: i32, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$i412: i32, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i417: i32, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i422: i8, out_$i423: i32, out_$i424: i8, out_$p425: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$i430: i8, out_$i431: i32, out_$i432: i8, out_$p433: ref, out_$i435: i32, out_$i436: i1, out_$p437: ref, out_$i438: i8, out_$i439: i32, out_$i440: i8, out_$p441: ref, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$i458: i8, out_$i459: i1, out_$i460: i32, out_$i461: i8, out_$i462: i32, out_$i463: i8, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i468: i8, out_$i469: i1, out_$i470: i32, out_$i471: i8, out_$i472: i32, out_$i473: i8, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i8, out_$i479: i1, out_$i480: i32, out_$i481: i8, out_$i482: i32, out_$i483: i8, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i493: i32, out_$i494: i1, out_$p495: ref, out_$i497: i32, out_$i498: i1, out_$p499: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i506: i32, out_$i507: i1, out_$p508: ref, out_$p509: ref, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$p514: ref, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$p519: ref, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$p524: ref, out_$p525: ref, out_$i526: i32, out_$i527: i1, out_$p528: ref, out_$p529: ref, out_$p530: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$p534: ref, out_$p535: ref, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$i544: i32, out_$i545: i1, out_$p546: ref, out_$i548: i32, out_$i549: i1, out_$p550: ref, out_$i551: i32, out_$i552: i32, out_$i554: i32, out_$i555: i1, out_$p556: ref, out_$i557: i32, out_$i558: i32, out_$i560: i32, out_$i561: i1, out_$p562: ref, out_$i563: i32, out_$i564: i32, out_$i566: i32, out_$i567: i1, out_$p568: ref, out_$p569: ref, out_$p570: ref, out_$i571: i32, out_$i572: i1, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$i576: i32, out_$i577: i1, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$p584: ref, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$p589: ref, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$p594: ref, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$p599: ref, out_$i601: i32, out_$i602: i1, out_$p603: ref, out_$p604: ref, out_$i606: i32, out_$i607: i1, out_$p608: ref, out_$p609: ref, out_$i611: i32, out_$i612: i1, out_$p613: ref, out_$i614: i32, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$i619: i32, out_$i621: i32, out_$i622: i1, out_$p623: ref, out_$i624: i32, out_$i626: i32, out_$i627: i1, out_$p628: ref, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i634: i32, out_$i635: i1, out_$p636: ref, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$i641: i32, out_$i643: i32, out_$i644: i1, out_$p645: ref, out_$i646: i32, out_$i648: i32, out_$i649: i1, out_$p650: ref, out_$i651: i32, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$i656: i8, out_$i657: i1, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_$i662: i8, out_$i663: i1, out_$i665: i32, out_$i666: i1, out_$p667: ref, out_$i668: i8, out_$i669: i1, out_$i671: i32, out_$i672: i1, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$i683: i32, out_$i684: i1, out_$i686: i32, out_$i687: i32, out_$i688: i32, out_$i689: i1, out_$i691: i32, out_$i692: i32, out_$i693: i32, out_$i694: i1, out_$i696: i32, out_$i697: i1, out_$i698: i32, out_$i699: i1, out_$i700: i32, out_$i701: i1, out_$i702: i32, out_$i703: i1, out_$i704: i32, out_$i705: i1, out_$i706: i32, out_$i707: i1, out_$i708: i32, out_$i709: i1, out_$i710: i32, out_$i711: i1, out_$i712: i32, out_$i713: i1, out_$i714: i32, out_$i715: i1, out_$i716: i32, out_$i717: i1, out_$i718: i32, out_$i719: i1, out_$i720: i32, out_$i721: i1, out_$i722: i32, out_$i723: i1, out_$i724: i32, out_$i725: i1, out_$i726: i32, out_$i727: i1, out_$i728: i32, out_$i729: i1, out_$i730: i32, out_$i731: i1, out_$i732: i32, out_$i733: i1, out_$i734: i32, out_$i735: i1, out_$i736: i32, out_$i737: i1, out_$i738: i32, out_$i739: i1, out_$i740: i32, out_$i741: i1, out_$i742: i32, out_$i743: i1, out_$i744: i32, out_$i745: i1, out_$i746: i32, out_$i747: i1, out_$i748: i32, out_$i749: i1, out_$i750: i32, out_$i751: i1, out_$i752: i32, out_$i753: i1, out_$i754: i32, out_$i755: i1, out_$i756: i32, out_$i757: i1, out_$i758: i32, out_$i759: i1, out_$i760: i32, out_$i761: i1, out_$i762: i32, out_$i763: i1, out_$i764: i32, out_$i765: i1, out_$i766: i32, out_$i767: i1, out_$i768: i32, out_$i769: i1, out_$i770: i32, out_$i771: i1, out_$i772: i32, out_$i773: i1, out_$i774: i32, out_$i775: i1, out_$i776: i32, out_$i777: i1, out_$i778: i32, out_$i779: i1, out_$i780: i32, out_$i781: i1, out_$i782: i32, out_$i783: i1, out_$i784: i32, out_$i785: i1, out_$i786: i32, out_$i787: i1, out_$i788: i32, out_$i789: i1, out_$i790: i32, out_$i791: i1, out_$i792: i32, out_$i793: i1, out_$i794: i32, out_$i795: i1, out_$i796: i32, out_$i797: i1, out_$i798: i32, out_$i799: i1, out_$i800: i32, out_$i801: i1, out_$i802: i32, out_$i803: i1, out_$i804: i32, out_$i805: i1, out_$i806: i32, out_$i807: i1, out_$i808: i1, out_$i809: i1, out_$i810: i32, out_$i811: i1, out_$p812: ref, out_$i813: i32, out_$i814: i32, out_$i815: i1, out_$i816: i32, out_$i817: i32, out_$i818: i32, out_$i819: i1, out_$i820: i32, out_$i821: i1, out_$p822: ref, out_$i823: i32, out_$i824: i32, out_$i825: i1, out_$i826: i32, out_$i827: i32, out_$i828: i32, out_$i829: i1, out_$i830: i32, out_$i831: i1, out_$p832: ref, out_$i833: i32, out_$i834: i32, out_$i835: i1, out_$i836: i32, out_$i837: i32, out_$i838: i32, out_$i839: i1, out_$i840: i32, out_$i841: i1, out_$i842: i32, out_$i843: i1, out_$i844: i32, out_$i845: i1, out_$i846: i1, out_$i847: i1, out_$i848: i32, out_$i849: i1, out_$i850: i32, out_$i851: i1, out_$i852: i32, out_$i853: i1, out_$i854: i32, out_$i855: i32, out_$i856: i1, out_$i857: i32, out_$i858: i1, out_$i859: i32, out_$i860: i1, out_$i861: i32, out_$i862: i1, out_$i863: i32, out_$i864: i1, out_$i865: i32, out_$i866: i1, out_$i867: i32, out_$i868: i1, out_$i869: i32, out_$i870: i1, out_$i871: i32, out_$i872: i1, out_$i873: i32, out_$i874: i1, out_$i875: i32, out_$i876: i1, out_$i877: i32, out_$i878: i1, out_$i879: i32, out_$i880: i1, out_$i881: i32, out_$i882: i1, out_$i883: i32, out_$i884: i1, out_$i885: i32, out_$i886: i1, out_$i887: i32, out_$i888: i1, out_$i889: i32, out_$i890: i1, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i1, out_vslice_dummy_var_146: i1, out_vslice_dummy_var_147: i1, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i1, out_vslice_dummy_var_167: i1, out_vslice_dummy_var_168: i1, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: i32, out_vslice_dummy_var_188: i32, out_vslice_dummy_var_189: i32, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: i32, out_vslice_dummy_var_192: i32, out_vslice_dummy_var_193: i32, out_vslice_dummy_var_194: i32, out_vslice_dummy_var_195: i32, out_vslice_dummy_var_196: i32, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32);
  modifies $M.135, $M.225, $M.137, $M.200, $M.0, $CurrAddr, $M.228, $M.138, $M.231, $M.139, $M.234, $M.140, $M.237, $M.141, $M.240, $M.142, $M.50, $M.218, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.9, $M.41, $M.51, $M.52, $M.53, $M.54, $M.55, assertsPassed, $M.243, $M.143, $M.246, $M.144, $M.249, $M.145, $M.252, $M.146, $M.255, $M.147, $M.258, $M.148, $M.261, $M.149, $M.264, $M.150, $M.267, $M.151, $M.270, $M.152, $M.273, $M.153, $M.276, $M.154, $M.279, $M.155, $M.282, $M.156, $M.285, $M.157, $M.288, $M.158, $M.291, $M.159, $M.294, $M.160, $M.297, $M.161, $M.300, $M.162, $M.303, $M.163, $M.306, $M.164, $M.309, $M.165, $M.312, $M.166, $M.315, $M.167, $M.318, $M.168, $M.321, $M.169, $M.324, $M.170, $M.327, $M.171, $M.330, $M.172, $M.333, $M.173, $M.336, $M.174, $M.339, $M.175, $M.342, $M.176, $M.345, $M.177, $M.348, $M.178, $M.351, $M.179, $M.354, $M.180, $M.357, $M.181, $M.360, $M.182, $M.363, $M.183, $M.366, $M.184, $M.369, $M.185, $M.372, $M.186, $M.375, $M.187, $M.378, $M.188, $M.381, $M.189, $M.384, $M.190, $M.387, $M.191, $M.390, $M.192, $M.393, $M.193, $M.396, $M.194, $M.399, $M.195, $M.402, $M.196, $M.220, $M.197, $M.219, $M.221, $M.405, $M.198, $M.408, $M.199, $M.223, $M.224, $M.226, $M.227, $M.229, $M.230, $M.232, $M.233, $M.235, $M.236, $M.238, $M.239, $M.241, $M.242, $M.244, $M.245, $M.247, $M.248, $M.250, $M.251, $M.253, $M.254, $M.256, $M.257, $M.259, $M.260, $M.262, $M.263, $M.265, $M.266, $M.268, $M.269, $M.271, $M.272, $M.274, $M.275, $M.277, $M.278, $M.280, $M.281, $M.283, $M.284, $M.286, $M.287, $M.289, $M.290, $M.292, $M.293, $M.295, $M.296, $M.298, $M.299, $M.301, $M.302, $M.304, $M.305, $M.307, $M.308, $M.310, $M.311, $M.313, $M.314, $M.316, $M.317, $M.319, $M.320, $M.322, $M.323, $M.325, $M.326, $M.328, $M.329, $M.331, $M.332, $M.334, $M.335, $M.337, $M.338, $M.340, $M.341, $M.343, $M.344, $M.346, $M.347, $M.349, $M.350, $M.352, $M.353, $M.355, $M.356, $M.358, $M.359, $M.361, $M.362, $M.364, $M.365, $M.367, $M.368, $M.370, $M.371, $M.373, $M.374, $M.376, $M.377, $M.379, $M.380, $M.382, $M.383, $M.385, $M.386, $M.388, $M.389, $M.391, $M.392, $M.394, $M.395, $M.397, $M.398, $M.400, $M.401, $M.403, $M.404, $M.406, $M.407, $M.439, $M.440, $M.202, $M.437, $M.438, $M.203, $M.435, $M.436, $M.204, $M.433, $M.434, $M.205, $M.431, $M.432, $M.206, $M.429, $M.430, $M.207, $M.427, $M.428, $M.208, $M.425, $M.426, $M.209, $M.423, $M.424, $M.210, $M.421, $M.422, $M.211, $M.419, $M.420, $M.212, $M.417, $M.418, $M.213, $M.415, $M.416, $M.214, $M.413, $M.414, $M.215, $M.411, $M.412, $M.216, $M.409, $M.410, $M.217, $M.201, $M.222, $M.136, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


