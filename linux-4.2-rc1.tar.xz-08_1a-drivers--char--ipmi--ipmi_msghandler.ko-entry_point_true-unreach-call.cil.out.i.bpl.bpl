var $M.0: [ref]ref;

var $M.1: [ref]i8;

var $M.2: [ref]i8;

var $M.3: i32;

var $M.6: ref;

var $M.7: [ref]i8;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: ref;

var $M.15: i32;

var $M.16: i32;

var $M.17: [ref]i32;

var $M.18: [ref]i64;

var $M.19: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i64;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]i8;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]i32;

var $M.47: [ref]i16;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: [ref]ref;

var $M.52: [ref]i16;

var $M.53: [ref]i8;

var $M.56: i32;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]i32;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]i8;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.103: [ref]i8;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $M.109: [ref]i8;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]i8;

var $M.149: [ref]i8;

var $M.150: [ref]i8;

var $M.151: [ref]i8;

var $M.152: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $M.158: [ref]i8;

var $M.159: [ref]i8;

var $M.160: [ref]i8;

var $M.161: [ref]i8;

var $M.216: [ref]i8;

var $M.217: [ref]i8;

var $M.218: [ref]i8;

var $M.219: [ref]i8;

var $M.220: [ref]i8;

var $M.221: [ref]i8;

var $M.222: [ref]i8;

var $M.223: [ref]i8;

var $M.224: [ref]i8;

var $M.225: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 588387);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_ipmi_addr_src_to_str: ref;

axiom __ksymtab_ipmi_addr_src_to_str == $sub.ref(0, 2068);

const {:count 21} __kstrtab_ipmi_addr_src_to_str: ref;

axiom __kstrtab_ipmi_addr_src_to_str == $sub.ref(0, 3113);

const panic_done_count: ref;

axiom panic_done_count == $sub.ref(0, 4141);

const has_panicked: ref;

axiom has_panicked == $sub.ref(0, 5169);

const stop_operation: ref;

axiom stop_operation == $sub.ref(0, 6197);

const panic_block: ref;

axiom panic_block == $sub.ref(0, 7245);

const {:count 19} __kstrtab_ipmi_free_recv_msg: ref;

axiom __kstrtab_ipmi_free_recv_msg == $sub.ref(0, 8288);

const {:count 19} __kstrtab_ipmi_alloc_smi_msg: ref;

axiom __kstrtab_ipmi_alloc_smi_msg == $sub.ref(0, 9331);

const smi_msg_inuse_count: ref;

axiom smi_msg_inuse_count == $sub.ref(0, 10359);

const ipmi_timer: ref;

axiom ipmi_timer == $sub.ref(0, 11511);

const {:count 29} __kstrtab_ipmi_smi_watchdog_pretimeout: ref;

axiom __kstrtab_ipmi_smi_watchdog_pretimeout == $sub.ref(0, 12564);

const {:count 22} __kstrtab_ipmi_smi_msg_received: ref;

axiom __kstrtab_ipmi_smi_msg_received == $sub.ref(0, 13610);

const {:count 20} __kstrtab_ipmi_unregister_smi: ref;

axiom __kstrtab_ipmi_unregister_smi == $sub.ref(0, 14654);

const {:count 18} __kstrtab_ipmi_register_smi: ref;

axiom __kstrtab_ipmi_register_smi == $sub.ref(0, 15696);

const dev_attr_guid: ref;

axiom dev_attr_guid == $sub.ref(0, 16768);

const dev_attr_aux_firmware_revision: ref;

axiom dev_attr_aux_firmware_revision == $sub.ref(0, 17840);

const dev_attr_product_id: ref;

axiom dev_attr_product_id == $sub.ref(0, 18912);

const dev_attr_manufacturer_id: ref;

axiom dev_attr_manufacturer_id == $sub.ref(0, 19984);

const dev_attr_additional_device_support: ref;

axiom dev_attr_additional_device_support == $sub.ref(0, 21056);

const dev_attr_ipmi_version: ref;

axiom dev_attr_ipmi_version == $sub.ref(0, 22128);

const dev_attr_firmware_revision: ref;

axiom dev_attr_firmware_revision == $sub.ref(0, 23200);

const dev_attr_revision: ref;

axiom dev_attr_revision == $sub.ref(0, 24272);

const dev_attr_provides_device_sdrs: ref;

axiom dev_attr_provides_device_sdrs == $sub.ref(0, 25344);

const dev_attr_device_id: ref;

axiom dev_attr_device_id == $sub.ref(0, 26416);

const {:count 11} bmc_dev_attrs: ref;

axiom bmc_dev_attrs == $sub.ref(0, 27528);

const bmc_dev_attr_group: ref;

axiom bmc_dev_attr_group == $sub.ref(0, 28584);

const {:count 2} bmc_dev_attr_groups: ref;

axiom bmc_dev_attr_groups == $sub.ref(0, 29624);

const bmc_device_type: ref;

axiom bmc_device_type == $sub.ref(0, 30696);

const ipmidriver: ref;

axiom ipmidriver == $sub.ref(0, 31896);

const ipmidriver_mutex: ref;

axiom ipmidriver_mutex == $sub.ref(0, 33080);

const smi_version_proc_ops: ref;

axiom smi_version_proc_ops == $sub.ref(0, 34328);

const smi_ipmb_proc_ops: ref;

axiom smi_ipmb_proc_ops == $sub.ref(0, 35576);

const smi_stats_proc_ops: ref;

axiom smi_stats_proc_ops == $sub.ref(0, 36824);

const proc_ipmi_root: ref;

axiom proc_ipmi_root == $sub.ref(0, 37856);

const {:count 20} __kstrtab_ipmi_poll_interface: ref;

axiom __kstrtab_ipmi_poll_interface == $sub.ref(0, 38900);

const {:count 24} __kstrtab_ipmi_smi_add_proc_entry: ref;

axiom __kstrtab_ipmi_smi_add_proc_entry == $sub.ref(0, 39948);

const {:count 25} __kstrtab_ipmi_request_supply_msgs: ref;

axiom __kstrtab_ipmi_request_supply_msgs == $sub.ref(0, 40997);

const {:count 21} __kstrtab_ipmi_request_settime: ref;

axiom __kstrtab_ipmi_request_settime == $sub.ref(0, 42042);

const recv_msg_inuse_count: ref;

axiom recv_msg_inuse_count == $sub.ref(0, 43070);

const {:count 24} __kstrtab_ipmi_unregister_for_cmd: ref;

axiom __kstrtab_ipmi_unregister_for_cmd == $sub.ref(0, 44118);

const {:count 22} __kstrtab_ipmi_register_for_cmd: ref;

axiom __kstrtab_ipmi_register_for_cmd == $sub.ref(0, 45164);

const {:count 21} __kstrtab_ipmi_set_gets_events: ref;

axiom __kstrtab_ipmi_set_gets_events == $sub.ref(0, 46209);

const {:count 26} __kstrtab_ipmi_set_maintenance_mode: ref;

axiom __kstrtab_ipmi_set_maintenance_mode == $sub.ref(0, 47259);

const {:count 26} __kstrtab_ipmi_get_maintenance_mode: ref;

axiom __kstrtab_ipmi_get_maintenance_mode == $sub.ref(0, 48309);

const {:count 16} __kstrtab_ipmi_get_my_LUN: ref;

axiom __kstrtab_ipmi_get_my_LUN == $sub.ref(0, 49349);

const {:count 16} __kstrtab_ipmi_set_my_LUN: ref;

axiom __kstrtab_ipmi_set_my_LUN == $sub.ref(0, 50389);

const {:count 20} __kstrtab_ipmi_get_my_address: ref;

axiom __kstrtab_ipmi_get_my_address == $sub.ref(0, 51433);

const {:count 20} __kstrtab_ipmi_set_my_address: ref;

axiom __kstrtab_ipmi_set_my_address == $sub.ref(0, 52477);

const {:count 17} __kstrtab_ipmi_get_version: ref;

axiom __kstrtab_ipmi_get_version == $sub.ref(0, 53518);

const {:count 18} __kstrtab_ipmi_destroy_user: ref;

axiom __kstrtab_ipmi_destroy_user == $sub.ref(0, 54560);

const {:count 18} __kstrtab_ipmi_get_smi_info: ref;

axiom __kstrtab_ipmi_get_smi_info == $sub.ref(0, 55602);

const {:count 17} __kstrtab_ipmi_create_user: ref;

axiom __kstrtab_ipmi_create_user == $sub.ref(0, 56643);

const {:count 17} __kstrtab_ipmi_addr_length: ref;

axiom __kstrtab_ipmi_addr_length == $sub.ref(0, 57684);

const {:count 19} __kstrtab_ipmi_validate_addr: ref;

axiom __kstrtab_ipmi_validate_addr == $sub.ref(0, 58727);

const {:count 28} __kstrtab_ipmi_smi_watcher_unregister: ref;

axiom __kstrtab_ipmi_smi_watcher_unregister == $sub.ref(0, 59779);

const {:count 26} __kstrtab_ipmi_smi_watcher_register: ref;

axiom __kstrtab_ipmi_smi_watcher_register == $sub.ref(0, 60829);

const smi_watchers: ref;

axiom smi_watchers == $sub.ref(0, 61869);

const ipmi_interfaces: ref;

axiom ipmi_interfaces == $sub.ref(0, 62909);

const ipmi_interfaces_mutex: ref;

axiom ipmi_interfaces_mutex == $sub.ref(0, 64093);

const smi_watchers_mutex: ref;

axiom smi_watchers_mutex == $sub.ref(0, 65277);

const {:count 9} addr_src_to_str: ref;

axiom addr_src_to_str == $sub.ref(0, 66373);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 67401);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 68429);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 69457);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 70485);

const initialized: ref;

axiom initialized == $sub.ref(0, 71513);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 72541);

const smi_stats_proc_ops_group1: ref;

axiom smi_stats_proc_ops_group1 == $sub.ref(0, 73573);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 74601);

const smi_version_proc_ops_group2: ref;

axiom smi_version_proc_ops_group2 == $sub.ref(0, 75633);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 76661);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 77689);

const smi_ipmb_proc_ops_group2: ref;

axiom smi_ipmb_proc_ops_group2 == $sub.ref(0, 78721);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 79749);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 80777);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 81805);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 82833);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 83861);

const smi_version_proc_ops_group1: ref;

axiom smi_version_proc_ops_group1 == $sub.ref(0, 84893);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 85921);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 86953);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 87981);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 89009);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 90037);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 91065);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 92093);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 93121);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 94149);

const smi_ipmb_proc_ops_group1: ref;

axiom smi_ipmb_proc_ops_group1 == $sub.ref(0, 95181);

const smi_stats_proc_ops_group2: ref;

axiom smi_stats_proc_ops_group2 == $sub.ref(0, 96213);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 97245);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 98273);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 99305);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 100333);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 101361);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 102393);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 103421);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 104449);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 105477);

const __ksymtab_ipmi_free_recv_msg: ref;

axiom __ksymtab_ipmi_free_recv_msg == $sub.ref(0, 106517);

const __ksymtab_ipmi_alloc_smi_msg: ref;

axiom __ksymtab_ipmi_alloc_smi_msg == $sub.ref(0, 107557);

const __ksymtab_ipmi_smi_watchdog_pretimeout: ref;

axiom __ksymtab_ipmi_smi_watchdog_pretimeout == $sub.ref(0, 108597);

const __ksymtab_ipmi_smi_msg_received: ref;

axiom __ksymtab_ipmi_smi_msg_received == $sub.ref(0, 109637);

const __ksymtab_ipmi_unregister_smi: ref;

axiom __ksymtab_ipmi_unregister_smi == $sub.ref(0, 110677);

const __ksymtab_ipmi_register_smi: ref;

axiom __ksymtab_ipmi_register_smi == $sub.ref(0, 111717);

const __ksymtab_ipmi_poll_interface: ref;

axiom __ksymtab_ipmi_poll_interface == $sub.ref(0, 112757);

const __ksymtab_ipmi_smi_add_proc_entry: ref;

axiom __ksymtab_ipmi_smi_add_proc_entry == $sub.ref(0, 113797);

const __ksymtab_ipmi_request_supply_msgs: ref;

axiom __ksymtab_ipmi_request_supply_msgs == $sub.ref(0, 114837);

const __ksymtab_ipmi_request_settime: ref;

axiom __ksymtab_ipmi_request_settime == $sub.ref(0, 115877);

const __ksymtab_ipmi_unregister_for_cmd: ref;

axiom __ksymtab_ipmi_unregister_for_cmd == $sub.ref(0, 116917);

const __ksymtab_ipmi_register_for_cmd: ref;

axiom __ksymtab_ipmi_register_for_cmd == $sub.ref(0, 117957);

const __ksymtab_ipmi_set_gets_events: ref;

axiom __ksymtab_ipmi_set_gets_events == $sub.ref(0, 118997);

const __ksymtab_ipmi_set_maintenance_mode: ref;

axiom __ksymtab_ipmi_set_maintenance_mode == $sub.ref(0, 120037);

const __ksymtab_ipmi_get_maintenance_mode: ref;

axiom __ksymtab_ipmi_get_maintenance_mode == $sub.ref(0, 121077);

const __ksymtab_ipmi_get_my_LUN: ref;

axiom __ksymtab_ipmi_get_my_LUN == $sub.ref(0, 122117);

const __ksymtab_ipmi_set_my_LUN: ref;

axiom __ksymtab_ipmi_set_my_LUN == $sub.ref(0, 123157);

const __ksymtab_ipmi_get_my_address: ref;

axiom __ksymtab_ipmi_get_my_address == $sub.ref(0, 124197);

const __ksymtab_ipmi_set_my_address: ref;

axiom __ksymtab_ipmi_set_my_address == $sub.ref(0, 125237);

const __ksymtab_ipmi_get_version: ref;

axiom __ksymtab_ipmi_get_version == $sub.ref(0, 126277);

const __ksymtab_ipmi_destroy_user: ref;

axiom __ksymtab_ipmi_destroy_user == $sub.ref(0, 127317);

const __ksymtab_ipmi_get_smi_info: ref;

axiom __ksymtab_ipmi_get_smi_info == $sub.ref(0, 128357);

const __ksymtab_ipmi_create_user: ref;

axiom __ksymtab_ipmi_create_user == $sub.ref(0, 129397);

const __ksymtab_ipmi_addr_length: ref;

axiom __ksymtab_ipmi_addr_length == $sub.ref(0, 130437);

const __ksymtab_ipmi_validate_addr: ref;

axiom __ksymtab_ipmi_validate_addr == $sub.ref(0, 131477);

const __ksymtab_ipmi_smi_watcher_unregister: ref;

axiom __ksymtab_ipmi_smi_watcher_unregister == $sub.ref(0, 132517);

const __ksymtab_ipmi_smi_watcher_register: ref;

axiom __ksymtab_ipmi_smi_watcher_register == $sub.ref(0, 133557);

const {:count 21} .str.24: ref;

axiom .str.24 == $sub.ref(0, 134602);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 55} .str.62: ref;

axiom .str.62 == $sub.ref(0, 135681);

const {:count 36} .str.63: ref;

axiom .str.63 == $sub.ref(0, 136741);

const {:count 5} .str.48: ref;

axiom .str.48 == $sub.ref(0, 137770);

const {:count 54} .str.64: ref;

axiom .str.64 == $sub.ref(0, 138848);

const panic_notifier_list: ref;

axiom panic_notifier_list == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 25} .str.59: ref;

axiom .str.59 == $sub.ref(0, 139897);

const {:count 44} .str.61: ref;

axiom .str.61 == $sub.ref(0, 140965);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 42} .str.60: ref;

axiom .str.60 == $sub.ref(0, 142031);

const .str: ref;

axiom .str == $sub.ref(0, 143106);

const {:count 90} .str.25: ref;

axiom .str.25 == $sub.ref(0, 144220);

const {:count 103} .str.26: ref;

axiom .str.26 == $sub.ref(0, 145347);

const {:count 162} .str.28: ref;

axiom .str.28 == $sub.ref(0, 146533);

const {:count 69} .str.27: ref;

axiom .str.27 == $sub.ref(0, 147626);

const {:count 26} .str.1: ref;

axiom .str.1 == $sub.ref(0, 148676);

const {:count 23} .str.2: ref;

axiom .str.2 == $sub.ref(0, 149723);

const {:count 39} .str.3: ref;

axiom .str.3 == $sub.ref(0, 150786);

const {:count 32} .str.4: ref;

axiom .str.4 == $sub.ref(0, 151842);

const {:count 29} .str.5: ref;

axiom .str.5 == $sub.ref(0, 152895);

const {:count 23} .str.6: ref;

axiom .str.6 == $sub.ref(0, 153942);

const {:count 39} .str.7: ref;

axiom .str.7 == $sub.ref(0, 155005);

const {:count 13} .str.8: ref;

axiom .str.8 == $sub.ref(0, 156042);

const {:count 76} .str.9: ref;

axiom .str.9 == $sub.ref(0, 157142);

const {:count 214} .str.10: ref;

axiom .str.10 == $sub.ref(0, 158380);

const {:count 86} .str.35: ref;

axiom .str.35 == $sub.ref(0, 159490);

const {:count 15} .str.36: ref;

axiom .str.36 == $sub.ref(0, 160529);

const {:count 224} .str.37: ref;

axiom .str.37 == $sub.ref(0, 161777);

const {:count 43} .str.38: ref;

axiom .str.38 == $sub.ref(0, 162844);

const {:count 53} .str.39: ref;

axiom .str.39 == $sub.ref(0, 163921);

const {:count 68} .str.40: ref;

axiom .str.40 == $sub.ref(0, 165013);

const {:count 4} .str.41: ref;

axiom .str.41 == $sub.ref(0, 166041);

const {:count 52} .str.42: ref;

axiom .str.42 == $sub.ref(0, 167117);

const {:count 7} .str.43: ref;

axiom .str.43 == $sub.ref(0, 168148);

const {:count 46} .str.44: ref;

axiom .str.44 == $sub.ref(0, 169218);

const {:count 55} .str.45: ref;

axiom .str.45 == $sub.ref(0, 170297);

const {:count 3} .str.31: ref;

axiom .str.31 == $sub.ref(0, 171324);

const {:count 6} .str.32: ref;

axiom .str.32 == $sub.ref(0, 172354);

const {:count 5} .str.33: ref;

axiom .str.33 == $sub.ref(0, 173383);

const {:count 8} .str.34: ref;

axiom .str.34 == $sub.ref(0, 174415);

const {:count 77} .str.30: ref;

axiom .str.30 == $sub.ref(0, 175516);

const {:count 152} .str.29: ref;

axiom .str.29 == $sub.ref(0, 176692);

const {:count 8} .str.11: ref;

axiom .str.11 == $sub.ref(0, 177724);

const {:count 7} .str.12: ref;

axiom .str.12 == $sub.ref(0, 178755);

const {:count 10} .str.13: ref;

axiom .str.13 == $sub.ref(0, 179789);

const {:count 5} .str.14: ref;

axiom .str.14 == $sub.ref(0, 180818);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 181847);

const {:count 7} .str.16: ref;

axiom .str.16 == $sub.ref(0, 182878);

const {:count 4} .str.17: ref;

axiom .str.17 == $sub.ref(0, 183906);

const {:count 12} .str.18: ref;

axiom .str.18 == $sub.ref(0, 184942);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 185974);

const {:count 29} .str.20: ref;

axiom .str.20 == $sub.ref(0, 187027);

const {:count 19} .str.21: ref;

axiom .str.21 == $sub.ref(0, 188070);

const {:count 32} .str.22: ref;

axiom .str.22 == $sub.ref(0, 189126);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 190172);

const {:count 33} .str.73: ref;

axiom .str.73 == $sub.ref(0, 191229);

const {:count 33} .str.74: ref;

axiom .str.74 == $sub.ref(0, 192286);

const {:count 33} .str.75: ref;

axiom .str.75 == $sub.ref(0, 193343);

const {:count 33} .str.76: ref;

axiom .str.76 == $sub.ref(0, 194400);

const {:count 33} .str.77: ref;

axiom .str.77 == $sub.ref(0, 195457);

const {:count 33} .str.78: ref;

axiom .str.78 == $sub.ref(0, 196514);

const {:count 33} .str.79: ref;

axiom .str.79 == $sub.ref(0, 197571);

const {:count 33} .str.80: ref;

axiom .str.80 == $sub.ref(0, 198628);

const {:count 33} .str.81: ref;

axiom .str.81 == $sub.ref(0, 199685);

const {:count 33} .str.82: ref;

axiom .str.82 == $sub.ref(0, 200742);

const {:count 33} .str.83: ref;

axiom .str.83 == $sub.ref(0, 201799);

const {:count 33} .str.84: ref;

axiom .str.84 == $sub.ref(0, 202856);

const {:count 33} .str.85: ref;

axiom .str.85 == $sub.ref(0, 203913);

const {:count 33} .str.86: ref;

axiom .str.86 == $sub.ref(0, 204970);

const {:count 33} .str.87: ref;

axiom .str.87 == $sub.ref(0, 206027);

const {:count 33} .str.88: ref;

axiom .str.88 == $sub.ref(0, 207084);

const {:count 33} .str.89: ref;

axiom .str.89 == $sub.ref(0, 208141);

const {:count 33} .str.90: ref;

axiom .str.90 == $sub.ref(0, 209198);

const {:count 33} .str.91: ref;

axiom .str.91 == $sub.ref(0, 210255);

const {:count 33} .str.92: ref;

axiom .str.92 == $sub.ref(0, 211312);

const {:count 33} .str.93: ref;

axiom .str.93 == $sub.ref(0, 212369);

const {:count 33} .str.94: ref;

axiom .str.94 == $sub.ref(0, 213426);

const {:count 33} .str.95: ref;

axiom .str.95 == $sub.ref(0, 214483);

const {:count 33} .str.96: ref;

axiom .str.96 == $sub.ref(0, 215540);

const {:count 33} .str.97: ref;

axiom .str.97 == $sub.ref(0, 216597);

const {:count 33} .str.98: ref;

axiom .str.98 == $sub.ref(0, 217654);

const {:count 33} .str.99: ref;

axiom .str.99 == $sub.ref(0, 218711);

const {:count 33} .str.100: ref;

axiom .str.100 == $sub.ref(0, 219768);

const {:count 3} .str.69: ref;

axiom .str.69 == $sub.ref(0, 220795);

const {:count 4} .str.70: ref;

axiom .str.70 == $sub.ref(0, 221823);

const {:count 7} .str.72: ref;

axiom .str.72 == $sub.ref(0, 222854);

const {:count 27} .str.46: ref;

axiom .str.46 == $sub.ref(0, 223905);

const {:count 17} .str.47: ref;

axiom .str.47 == $sub.ref(0, 224946);

const platform_bus_type: ref;

axiom platform_bus_type == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 10} .str.49: ref;

axiom .str.49 == $sub.ref(0, 225980);

const {:count 4} .str.65: ref;

axiom .str.65 == $sub.ref(0, 227008);

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0, 228053);

const {:count 9} .str.51: ref;

axiom .str.51 == $sub.ref(0, 229086);

const {:count 18} .str.52: ref;

axiom .str.52 == $sub.ref(0, 230128);

const {:count 7} .str.103: ref;

axiom .str.103 == $sub.ref(0, 231159);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 232196);

const {:count 26} .str.54: ref;

axiom .str.54 == $sub.ref(0, 233246);

const {:count 8} .str.101: ref;

axiom .str.101 == $sub.ref(0, 234278);

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 235318);

const {:count 9} .str.66: ref;

axiom .str.66 == $sub.ref(0, 236351);

const {:count 11} .str.56: ref;

axiom .str.56 == $sub.ref(0, 237386);

const {:count 9} .str.71: ref;

axiom .str.71 == $sub.ref(0, 238419);

const {:count 22} .str.57: ref;

axiom .str.57 == $sub.ref(0, 239465);

const {:count 29} .str.104: ref;

axiom .str.104 == $sub.ref(0, 240518);

const {:count 5} .str.58: ref;

axiom .str.58 == $sub.ref(0, 241547);

const {:count 8} .str.102: ref;

axiom .str.102 == $sub.ref(0, 242579);

const {:count 53} .str.67: ref;

axiom .str.67 == $sub.ref(0, 243656);

const {:count 54} .str.68: ref;

axiom .str.68 == $sub.ref(0, 244734);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 245766);

const {:count 3} .str.1.222: ref;

axiom .str.1.222 == $sub.ref(0, 246793);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 247831);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 248859);

const ipmi_addr_src_to_str: ref;

axiom ipmi_addr_src_to_str == $sub.ref(0, 249891);

procedure ipmi_addr_src_to_str($i0: i32) returns ($r: ref);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 250923);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ipmi_smi_watcher_register: ref;

axiom ipmi_smi_watcher_register == $sub.ref(0, 251955);

procedure ipmi_smi_watcher_register($p0: ref) returns ($r: i32);



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 252987);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 254019);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 2} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 255051);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.56, $M.59, $CurrAddr, $M.69, $M.70, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_61: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 5} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 6} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 8} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_61 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 9} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 14} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} warn_slowpath_null(.str.24, 47);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 256083);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} __list_add($p0, $p3, $p1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 257115);

procedure list_add($p0: ref, $p1: ref);



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 258147);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 259179);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    return;
}



const intf_free: ref;

axiom intf_free == $sub.ref(0, 260211);

procedure intf_free($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation intf_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 4), 4344));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} clean_up_interface_data($p2);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} kfree($p3);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 261243);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i2 := kref_sub($p0, 1, $p1);
    call {:si_unique_call 20} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 262275);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} free_($p0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 263307);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 22} $free($p0);
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 264339);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_62: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 24} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 26} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_62 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 30} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 31} devirtbounce.1($p2, $p0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} warn_slowpath_null(.str.24, 71);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 265371);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 33} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 266403);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 267435);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 36} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 37} devirtbounce.2(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p2);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const clean_up_interface_data: ref;

axiom clean_up_interface_data == $sub.ref(0, 268467);

procedure clean_up_interface_data($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation clean_up_interface_data($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p19: ref;
  var $p20: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i8;
  var $i153: i32;
  var $i154: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i8;
  var $i170: i32;
  var $i171: i1;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i8;
  var $i187: i32;
  var $i188: i1;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $i211: i1;
  var $p214: ref;
  var $p215: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i8;
  var $i220: i8;
  var $i221: i32;
  var $i222: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $p231: ref;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i8;
  var $i238: i32;
  var $i239: i1;
  var $p242: ref;
  var $p243: ref;
  var $i244: i64;
  var $i245: i1;
  var $p248: ref;
  var $p249: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i8;
  var $i254: i8;
  var $i255: i32;
  var $i256: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p265: ref;
  var $p266: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i8;
  var $i271: i8;
  var $i272: i32;
  var $i273: i1;
  var $p276: ref;
  var $p277: ref;
  var $i278: i64;
  var $i279: i1;
  var $p282: ref;
  var $p283: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i8;
  var $i288: i8;
  var $i289: i32;
  var $i290: i1;
  var $p293: ref;
  var $p294: ref;
  var $i295: i64;
  var $i296: i1;
  var $p299: ref;
  var $p300: ref;
  var $p302: ref;
  var $p303: ref;
  var $i304: i8;
  var $i305: i8;
  var $i306: i32;
  var $i307: i1;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p316: ref;
  var $p317: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i8;
  var $i322: i8;
  var $i323: i32;
  var $i324: i1;
  var $p327: ref;
  var $p328: ref;
  var $i329: i64;
  var $i330: i1;
  var $p333: ref;
  var $p334: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i8;
  var $i339: i8;
  var $i340: i32;
  var $i341: i1;
  var $p344: ref;
  var $p345: ref;
  var $i346: i64;
  var $i347: i1;
  var $p350: ref;
  var $p351: ref;
  var $p353: ref;
  var $p354: ref;
  var $i355: i8;
  var $i356: i8;
  var $i357: i32;
  var $i358: i1;
  var $p361: ref;
  var $p362: ref;
  var $i363: i64;
  var $i364: i1;
  var $p367: ref;
  var $p368: ref;
  var $p370: ref;
  var $p371: ref;
  var $i372: i8;
  var $i373: i8;
  var $i374: i32;
  var $i375: i1;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $p384: ref;
  var $p385: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i8;
  var $i390: i8;
  var $i391: i32;
  var $i392: i1;
  var $p395: ref;
  var $p396: ref;
  var $i397: i64;
  var $i398: i1;
  var $p401: ref;
  var $p402: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i8;
  var $i407: i8;
  var $i408: i32;
  var $i409: i1;
  var $p412: ref;
  var $p413: ref;
  var $i414: i64;
  var $i415: i1;
  var $p418: ref;
  var $p419: ref;
  var $p421: ref;
  var $p422: ref;
  var $i423: i8;
  var $i424: i8;
  var $i425: i32;
  var $i426: i1;
  var $p429: ref;
  var $p430: ref;
  var $i431: i64;
  var $i432: i1;
  var $p435: ref;
  var $p436: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i8;
  var $i441: i8;
  var $i442: i32;
  var $i443: i1;
  var $p446: ref;
  var $p447: ref;
  var $i448: i64;
  var $i449: i1;
  var $p452: ref;
  var $p453: ref;
  var $p455: ref;
  var $p456: ref;
  var $i457: i8;
  var $i458: i8;
  var $i459: i32;
  var $i460: i1;
  var $p463: ref;
  var $p464: ref;
  var $i465: i64;
  var $i466: i1;
  var $p469: ref;
  var $p470: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i8;
  var $i475: i8;
  var $i476: i32;
  var $i477: i1;
  var $p480: ref;
  var $p481: ref;
  var $i482: i64;
  var $i483: i1;
  var $p486: ref;
  var $p487: ref;
  var $p489: ref;
  var $p490: ref;
  var $i491: i8;
  var $i492: i8;
  var $i493: i32;
  var $i494: i1;
  var $p497: ref;
  var $p498: ref;
  var $i499: i64;
  var $i500: i1;
  var $p503: ref;
  var $p504: ref;
  var $p506: ref;
  var $p507: ref;
  var $i508: i8;
  var $i509: i8;
  var $i510: i32;
  var $i511: i1;
  var $p514: ref;
  var $p515: ref;
  var $i516: i64;
  var $i517: i1;
  var $p520: ref;
  var $p521: ref;
  var $p523: ref;
  var $p524: ref;
  var $i525: i8;
  var $i526: i8;
  var $i527: i32;
  var $i528: i1;
  var $p531: ref;
  var $p532: ref;
  var $i533: i64;
  var $i534: i1;
  var $p537: ref;
  var $p538: ref;
  var $p540: ref;
  var $p541: ref;
  var $i542: i8;
  var $i543: i8;
  var $i544: i32;
  var $i545: i1;
  var $p548: ref;
  var $p549: ref;
  var $i550: i64;
  var $i551: i1;
  var $p554: ref;
  var $p555: ref;
  var $p557: ref;
  var $p558: ref;
  var $i559: i8;
  var $i560: i8;
  var $i561: i32;
  var $i562: i1;
  var $p565: ref;
  var $p566: ref;
  var $i567: i64;
  var $i568: i1;
  var $p571: ref;
  var $p572: ref;
  var $p574: ref;
  var $p575: ref;
  var $i576: i8;
  var $i577: i8;
  var $i578: i32;
  var $i579: i1;
  var $p582: ref;
  var $p583: ref;
  var $i584: i64;
  var $i585: i1;
  var $p588: ref;
  var $p589: ref;
  var $p591: ref;
  var $p592: ref;
  var $i593: i8;
  var $i594: i8;
  var $i595: i32;
  var $i596: i1;
  var $p599: ref;
  var $p600: ref;
  var $i601: i64;
  var $i602: i1;
  var $p605: ref;
  var $p606: ref;
  var $p608: ref;
  var $p609: ref;
  var $i610: i8;
  var $i611: i8;
  var $i612: i32;
  var $i613: i1;
  var $p616: ref;
  var $p617: ref;
  var $i618: i64;
  var $i619: i1;
  var $p622: ref;
  var $p623: ref;
  var $p625: ref;
  var $p626: ref;
  var $i627: i8;
  var $i628: i8;
  var $i629: i32;
  var $i630: i1;
  var $p633: ref;
  var $p634: ref;
  var $i635: i64;
  var $i636: i1;
  var $p639: ref;
  var $p640: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i8;
  var $i645: i8;
  var $i646: i32;
  var $i647: i1;
  var $p650: ref;
  var $p651: ref;
  var $i652: i64;
  var $i653: i1;
  var $p656: ref;
  var $p657: ref;
  var $p659: ref;
  var $p660: ref;
  var $i661: i8;
  var $i662: i8;
  var $i663: i32;
  var $i664: i1;
  var $p667: ref;
  var $p668: ref;
  var $i669: i64;
  var $i670: i1;
  var $p673: ref;
  var $p674: ref;
  var $p676: ref;
  var $p677: ref;
  var $i678: i8;
  var $i679: i8;
  var $i680: i32;
  var $i681: i1;
  var $p684: ref;
  var $p685: ref;
  var $i686: i64;
  var $i687: i1;
  var $p690: ref;
  var $p691: ref;
  var $p693: ref;
  var $p694: ref;
  var $i695: i8;
  var $i696: i8;
  var $i697: i32;
  var $i698: i1;
  var $p701: ref;
  var $p702: ref;
  var $i703: i64;
  var $i704: i1;
  var $p707: ref;
  var $p708: ref;
  var $p710: ref;
  var $p711: ref;
  var $i712: i8;
  var $i713: i8;
  var $i714: i32;
  var $i715: i1;
  var $p718: ref;
  var $p719: ref;
  var $i720: i64;
  var $i721: i1;
  var $p724: ref;
  var $p725: ref;
  var $p727: ref;
  var $p728: ref;
  var $i729: i8;
  var $i730: i8;
  var $i731: i32;
  var $i732: i1;
  var $p735: ref;
  var $p736: ref;
  var $i737: i64;
  var $i738: i1;
  var $p741: ref;
  var $p742: ref;
  var $p744: ref;
  var $p745: ref;
  var $i746: i8;
  var $i747: i8;
  var $i748: i32;
  var $i749: i1;
  var $p752: ref;
  var $p753: ref;
  var $i754: i64;
  var $i755: i1;
  var $p758: ref;
  var $p759: ref;
  var $p761: ref;
  var $p762: ref;
  var $i763: i8;
  var $i764: i8;
  var $i765: i32;
  var $i766: i1;
  var $p769: ref;
  var $p770: ref;
  var $i771: i64;
  var $i772: i1;
  var $p775: ref;
  var $p776: ref;
  var $p778: ref;
  var $p779: ref;
  var $i780: i8;
  var $i781: i8;
  var $i782: i32;
  var $i783: i1;
  var $p786: ref;
  var $p787: ref;
  var $i788: i64;
  var $i789: i1;
  var $p792: ref;
  var $p793: ref;
  var $p795: ref;
  var $p796: ref;
  var $i797: i8;
  var $i798: i8;
  var $i799: i32;
  var $i800: i1;
  var $p803: ref;
  var $p804: ref;
  var $i805: i64;
  var $i806: i1;
  var $p809: ref;
  var $p810: ref;
  var $p812: ref;
  var $p813: ref;
  var $i814: i8;
  var $i815: i8;
  var $i816: i32;
  var $i817: i1;
  var $p820: ref;
  var $p821: ref;
  var $i822: i64;
  var $i823: i1;
  var $p826: ref;
  var $p827: ref;
  var $p829: ref;
  var $p830: ref;
  var $i831: i8;
  var $i832: i8;
  var $i833: i32;
  var $i834: i1;
  var $p837: ref;
  var $p838: ref;
  var $i839: i64;
  var $i840: i1;
  var $p843: ref;
  var $p844: ref;
  var $p846: ref;
  var $p847: ref;
  var $i848: i8;
  var $i849: i8;
  var $i850: i32;
  var $i851: i1;
  var $p854: ref;
  var $p855: ref;
  var $i856: i64;
  var $i857: i1;
  var $p860: ref;
  var $p861: ref;
  var $p863: ref;
  var $p864: ref;
  var $i865: i8;
  var $i866: i8;
  var $i867: i32;
  var $i868: i1;
  var $p871: ref;
  var $p872: ref;
  var $i873: i64;
  var $i874: i1;
  var $p877: ref;
  var $p878: ref;
  var $p880: ref;
  var $p881: ref;
  var $i882: i8;
  var $i883: i8;
  var $i884: i32;
  var $i885: i1;
  var $p888: ref;
  var $p889: ref;
  var $i890: i64;
  var $i891: i1;
  var $p894: ref;
  var $p895: ref;
  var $p897: ref;
  var $p898: ref;
  var $i899: i8;
  var $i900: i8;
  var $i901: i32;
  var $i902: i1;
  var $p905: ref;
  var $p906: ref;
  var $i907: i64;
  var $i908: i1;
  var $p911: ref;
  var $p912: ref;
  var $p914: ref;
  var $p915: ref;
  var $i916: i8;
  var $i917: i8;
  var $i918: i32;
  var $i919: i1;
  var $p922: ref;
  var $p923: ref;
  var $i924: i64;
  var $i925: i1;
  var $p928: ref;
  var $p929: ref;
  var $p931: ref;
  var $p932: ref;
  var $i933: i8;
  var $i934: i8;
  var $i935: i32;
  var $i936: i1;
  var $p939: ref;
  var $p940: ref;
  var $i941: i64;
  var $i942: i1;
  var $p945: ref;
  var $p946: ref;
  var $p948: ref;
  var $p949: ref;
  var $i950: i8;
  var $i951: i8;
  var $i952: i32;
  var $i953: i1;
  var $p956: ref;
  var $p957: ref;
  var $i958: i64;
  var $i959: i1;
  var $p962: ref;
  var $p963: ref;
  var $p965: ref;
  var $p966: ref;
  var $i967: i8;
  var $i968: i8;
  var $i969: i32;
  var $i970: i1;
  var $p973: ref;
  var $p974: ref;
  var $i975: i64;
  var $i976: i1;
  var $p979: ref;
  var $p980: ref;
  var $p982: ref;
  var $p983: ref;
  var $i984: i8;
  var $i985: i8;
  var $i986: i32;
  var $i987: i1;
  var $p990: ref;
  var $p991: ref;
  var $i992: i64;
  var $i993: i1;
  var $p996: ref;
  var $p997: ref;
  var $p999: ref;
  var $p1000: ref;
  var $i1001: i8;
  var $i1002: i8;
  var $i1003: i32;
  var $i1004: i1;
  var $p1007: ref;
  var $p1008: ref;
  var $i1009: i64;
  var $i1010: i1;
  var $p1013: ref;
  var $p1014: ref;
  var $p1016: ref;
  var $p1017: ref;
  var $i1018: i8;
  var $i1019: i8;
  var $i1020: i32;
  var $i1021: i1;
  var $p1024: ref;
  var $p1025: ref;
  var $i1026: i64;
  var $i1027: i1;
  var $p1030: ref;
  var $p1031: ref;
  var $p1033: ref;
  var $p1034: ref;
  var $i1035: i8;
  var $i1036: i8;
  var $i1037: i32;
  var $i1038: i1;
  var $p1041: ref;
  var $p1042: ref;
  var $i1043: i64;
  var $i1044: i1;
  var $p1047: ref;
  var $p1048: ref;
  var $p1050: ref;
  var $p1051: ref;
  var $i1052: i8;
  var $i1053: i8;
  var $i1054: i32;
  var $i1055: i1;
  var $p1058: ref;
  var $p1059: ref;
  var $i1060: i64;
  var $i1061: i1;
  var $p1064: ref;
  var $p1065: ref;
  var $p1067: ref;
  var $p1068: ref;
  var $i1069: i8;
  var $i1070: i8;
  var $i1071: i32;
  var $i1072: i1;
  var $p1075: ref;
  var $p1076: ref;
  var $i1077: i64;
  var $i1078: i1;
  var $p1081: ref;
  var $p1082: ref;
  var $p1084: ref;
  var $p1085: ref;
  var $i1086: i8;
  var $i1087: i8;
  var $i1088: i32;
  var $i1089: i1;
  var $p1092: ref;
  var $p1093: ref;
  var $i1094: i64;
  var $i1095: i1;
  var $p1098: ref;
  var $p1099: ref;
  var $p1101: ref;
  var $p1102: ref;
  var $i1103: i8;
  var $i1104: i8;
  var $i1105: i32;
  var $i1106: i1;
  var $p1109: ref;
  var $p1110: ref;
  var $i1111: i64;
  var $i1112: i1;
  var $p1115: ref;
  var $p1116: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3600, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} tasklet_kill($p2);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3576, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} free_smi_msg_list($p3);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4000, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} free_recv_msg_list($p4);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3752, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} mutex_lock_nested($p5, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} INIT_LIST_HEAD($p1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3912, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} list_splice_init_rcu($p6, $p1, synchronize_rcu);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3752, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} mutex_unlock($p7);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(0, 48));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i33 := $and.i8($i32, 1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(1, 48));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i49, 1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(2, 48));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i67 := $and.i8($i66, 1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(3, 48));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.1, $p82);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i84 := $and.i8($i83, 1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(4, 48));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.1, $p99);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i100, 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(5, 48));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.1, $p116);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i118 := $and.i8($i117, 1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(6, 48));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.1, $p133);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i135 := $and.i8($i134, 1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(7, 48));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.1, $p150);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i152 := $and.i8($i151, 1);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(8, 48));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.1, $p167);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i169 := $and.i8($i168, 1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(9, 48));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.1, $p184);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i186 := $and.i8($i185, 1);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i186);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(10, 48));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.1, $p201);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i203 := $and.i8($i202, 1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(11, 48));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.1, $p218);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i220 := $and.i8($i219, 1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(12, 48));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.1, $p235);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i237 := $and.i8($i236, 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(13, 48));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.1, $p252);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i254 := $and.i8($i253, 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(14, 48));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.1, $p269);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i271 := $and.i8($i270, 1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(15, 48));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.1, $p286);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i288 := $and.i8($i287, 1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(16, 48));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i304 := $load.i8($M.1, $p303);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i305 := $and.i8($i304, 1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(17, 48));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p319);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.1, $p320);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i322 := $and.i8($i321, 1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i323 := $zext.i8.i32($i322);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(18, 48));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p336);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i338 := $load.i8($M.1, $p337);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i339 := $and.i8($i338, 1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(19, 48));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p354 := $bitcast.ref.ref($p353);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i355 := $load.i8($M.1, $p354);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i356 := $and.i8($i355, 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i358 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(20, 48));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p371 := $bitcast.ref.ref($p370);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i372 := $load.i8($M.1, $p371);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i373 := $and.i8($i372, 1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(21, 48));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p388 := $bitcast.ref.ref($p387);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.1, $p388);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i390 := $and.i8($i389, 1);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i391 := $zext.i8.i32($i390);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i392 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(22, 48));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i406 := $load.i8($M.1, $p405);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i407 := $and.i8($i406, 1);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i32($i407);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(23, 48));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p422 := $bitcast.ref.ref($p421);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.1, $p422);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i424 := $and.i8($i423, 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i425 := $zext.i8.i32($i424);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i426 := $ne.i32($i425, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(24, 48));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p439 := $bitcast.ref.ref($p438);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i440 := $load.i8($M.1, $p439);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i441 := $and.i8($i440, 1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i442 := $zext.i8.i32($i441);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i443 := $ne.i32($i442, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i443 == 1);
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(25, 48));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p456 := $bitcast.ref.ref($p455);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i457 := $load.i8($M.1, $p456);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i458 := $and.i8($i457, 1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i459 := $zext.i8.i32($i458);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i460 := $ne.i32($i459, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i460 == 1);
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(26, 48));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p473 := $bitcast.ref.ref($p472);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i474 := $load.i8($M.1, $p473);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i475 := $and.i8($i474, 1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i476 := $zext.i8.i32($i475);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i477 := $ne.i32($i476, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i477 == 1);
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(27, 48));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p490 := $bitcast.ref.ref($p489);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i491 := $load.i8($M.1, $p490);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i492 := $and.i8($i491, 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i493 := $zext.i8.i32($i492);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i494 := $ne.i32($i493, 0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i494 == 1);
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(28, 48));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p507 := $bitcast.ref.ref($p506);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i508 := $load.i8($M.1, $p507);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i509 := $and.i8($i508, 1);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i511 := $ne.i32($i510, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb208, $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume !($i511 == 1);
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(29, 48));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p524 := $bitcast.ref.ref($p523);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.1, $p524);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i526 := $and.i8($i525, 1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i527 := $zext.i8.i32($i526);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i528 := $ne.i32($i527, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i528 == 1);
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(30, 48));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p541 := $bitcast.ref.ref($p540);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i542 := $load.i8($M.1, $p541);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i543 := $and.i8($i542, 1);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i544 := $zext.i8.i32($i543);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i545 := $ne.i32($i544, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i545 == 1);
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(31, 48));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p558 := $bitcast.ref.ref($p557);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i559 := $load.i8($M.1, $p558);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i560 := $and.i8($i559, 1);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i561 := $zext.i8.i32($i560);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i562 := $ne.i32($i561, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i562} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i562 == 1);
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(32, 48));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p575 := $bitcast.ref.ref($p574);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i576 := $load.i8($M.1, $p575);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i577 := $and.i8($i576, 1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i578 := $zext.i8.i32($i577);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i579 := $ne.i32($i578, 0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i579} true;
    goto $bb236, $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    assume !($i579 == 1);
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(33, 48));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p592 := $bitcast.ref.ref($p591);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.1, $p592);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i594 := $and.i8($i593, 1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i595 := $zext.i8.i32($i594);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i596 := $ne.i32($i595, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i596 == 1);
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(34, 48));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p609 := $bitcast.ref.ref($p608);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i610 := $load.i8($M.1, $p609);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i611 := $and.i8($i610, 1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i612 := $zext.i8.i32($i611);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i613 := $ne.i32($i612, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i613} true;
    goto $bb250, $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    assume !($i613 == 1);
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(35, 48));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p626 := $bitcast.ref.ref($p625);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i627 := $load.i8($M.1, $p626);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i628 := $and.i8($i627, 1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i629 := $zext.i8.i32($i628);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i630 := $ne.i32($i629, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i630 == 1);
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(36, 48));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p643 := $bitcast.ref.ref($p642);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i644 := $load.i8($M.1, $p643);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i645 := $and.i8($i644, 1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i646 := $zext.i8.i32($i645);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i647 := $ne.i32($i646, 0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb264, $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    assume !($i647 == 1);
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(37, 48));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p660 := $bitcast.ref.ref($p659);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.1, $p660);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i662 := $and.i8($i661, 1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i663 := $zext.i8.i32($i662);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i664 := $ne.i32($i663, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i664} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i664 == 1);
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(38, 48));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p677 := $bitcast.ref.ref($p676);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i678 := $load.i8($M.1, $p677);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i679 := $and.i8($i678, 1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i680 := $zext.i8.i32($i679);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i681 := $ne.i32($i680, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !($i681 == 1);
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(39, 48));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p694 := $bitcast.ref.ref($p693);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i695 := $load.i8($M.1, $p694);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i696 := $and.i8($i695, 1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i697 := $zext.i8.i32($i696);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i698 := $ne.i32($i697, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i698 == 1);
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(40, 48));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p711 := $bitcast.ref.ref($p710);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i712 := $load.i8($M.1, $p711);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i713 := $and.i8($i712, 1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i714 := $zext.i8.i32($i713);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i715 := $ne.i32($i714, 0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i715} true;
    goto $bb292, $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume !($i715 == 1);
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(41, 48));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p728 := $bitcast.ref.ref($p727);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i729 := $load.i8($M.1, $p728);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i730 := $and.i8($i729, 1);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i731 := $zext.i8.i32($i730);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i732 := $ne.i32($i731, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i732} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i732 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(42, 48));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p745 := $bitcast.ref.ref($p744);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i746 := $load.i8($M.1, $p745);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i747 := $and.i8($i746, 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i748 := $zext.i8.i32($i747);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i749 := $ne.i32($i748, 0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i749 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(43, 48));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p762 := $bitcast.ref.ref($p761);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i763 := $load.i8($M.1, $p762);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i764 := $and.i8($i763, 1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i765 := $zext.i8.i32($i764);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i766 := $ne.i32($i765, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i766} true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i766 == 1);
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(44, 48));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p779 := $bitcast.ref.ref($p778);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i780 := $load.i8($M.1, $p779);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i781 := $and.i8($i780, 1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i782 := $zext.i8.i32($i781);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i783 := $ne.i32($i782, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i783} true;
    goto $bb320, $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    assume !($i783 == 1);
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(45, 48));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p796 := $bitcast.ref.ref($p795);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i797 := $load.i8($M.1, $p796);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i798 := $and.i8($i797, 1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i799 := $zext.i8.i32($i798);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i800 := $ne.i32($i799, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb327, $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume !($i800 == 1);
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(46, 48));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p813 := $bitcast.ref.ref($p812);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i814 := $load.i8($M.1, $p813);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i815 := $and.i8($i814, 1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i816 := $zext.i8.i32($i815);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i817 := $ne.i32($i816, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i817} true;
    goto $bb334, $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume !($i817 == 1);
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(47, 48));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p830 := $bitcast.ref.ref($p829);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i831 := $load.i8($M.1, $p830);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i832 := $and.i8($i831, 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i833 := $zext.i8.i32($i832);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i834 := $ne.i32($i833, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i834} true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i834 == 1);
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(48, 48));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p847 := $bitcast.ref.ref($p846);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i848 := $load.i8($M.1, $p847);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i849 := $and.i8($i848, 1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i850 := $zext.i8.i32($i849);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i851 := $ne.i32($i850, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i851} true;
    goto $bb348, $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    assume !($i851 == 1);
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(49, 48));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p864 := $bitcast.ref.ref($p863);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i865 := $load.i8($M.1, $p864);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i866 := $and.i8($i865, 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i867 := $zext.i8.i32($i866);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i868 := $ne.i32($i867, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i868} true;
    goto $bb355, $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    assume !($i868 == 1);
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(50, 48));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p881 := $bitcast.ref.ref($p880);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i882 := $load.i8($M.1, $p881);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i883 := $and.i8($i882, 1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i884 := $zext.i8.i32($i883);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i885 := $ne.i32($i884, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb362, $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    assume !($i885 == 1);
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(51, 48));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p898 := $bitcast.ref.ref($p897);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i899 := $load.i8($M.1, $p898);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i900 := $and.i8($i899, 1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i901 := $zext.i8.i32($i900);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i902 := $ne.i32($i901, 0);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i902} true;
    goto $bb369, $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume !($i902 == 1);
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(52, 48));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p915 := $bitcast.ref.ref($p914);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i916 := $load.i8($M.1, $p915);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i917 := $and.i8($i916, 1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i918 := $zext.i8.i32($i917);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i919 := $ne.i32($i918, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i919} true;
    goto $bb376, $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    assume !($i919 == 1);
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(53, 48));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p932 := $bitcast.ref.ref($p931);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i933 := $load.i8($M.1, $p932);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i934 := $and.i8($i933, 1);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i935 := $zext.i8.i32($i934);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i936 := $ne.i32($i935, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i936} true;
    goto $bb383, $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    assume !($i936 == 1);
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(54, 48));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p949 := $bitcast.ref.ref($p948);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i950 := $load.i8($M.1, $p949);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i951 := $and.i8($i950, 1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i952 := $zext.i8.i32($i951);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i953 := $ne.i32($i952, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i953} true;
    goto $bb390, $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    assume !($i953 == 1);
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(55, 48));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p966 := $bitcast.ref.ref($p965);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i967 := $load.i8($M.1, $p966);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i968 := $and.i8($i967, 1);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i969 := $zext.i8.i32($i968);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i970 := $ne.i32($i969, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i970} true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !($i970 == 1);
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p982 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(56, 48));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p983 := $bitcast.ref.ref($p982);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i984 := $load.i8($M.1, $p983);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i985 := $and.i8($i984, 1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i986 := $zext.i8.i32($i985);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i987 := $ne.i32($i986, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i987} true;
    goto $bb404, $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    assume !($i987 == 1);
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(57, 48));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p1000 := $bitcast.ref.ref($p999);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i1001 := $load.i8($M.1, $p1000);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i1002 := $and.i8($i1001, 1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i1003 := $zext.i8.i32($i1002);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i1004 := $ne.i32($i1003, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1004} true;
    goto $bb411, $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    assume !($i1004 == 1);
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $p1016 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(58, 48));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p1017 := $bitcast.ref.ref($p1016);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i1018 := $load.i8($M.1, $p1017);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i1019 := $and.i8($i1018, 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i1020 := $zext.i8.i32($i1019);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i1021 := $ne.i32($i1020, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1021} true;
    goto $bb418, $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    assume !($i1021 == 1);
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(59, 48));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p1034 := $bitcast.ref.ref($p1033);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i1035 := $load.i8($M.1, $p1034);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i1036 := $and.i8($i1035, 1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i1037 := $zext.i8.i32($i1036);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i1038 := $ne.i32($i1037, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1038} true;
    goto $bb425, $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    assume !($i1038 == 1);
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p1050 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(60, 48));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p1051 := $bitcast.ref.ref($p1050);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i1052 := $load.i8($M.1, $p1051);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i1053 := $and.i8($i1052, 1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i1054 := $zext.i8.i32($i1053);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i1055 := $ne.i32($i1054, 0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1055} true;
    goto $bb432, $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    assume !($i1055 == 1);
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p1067 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(61, 48));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p1068 := $bitcast.ref.ref($p1067);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i1069 := $load.i8($M.1, $p1068);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i1070 := $and.i8($i1069, 1);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i1071 := $zext.i8.i32($i1070);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i1072 := $ne.i32($i1071, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1072} true;
    goto $bb439, $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume !($i1072 == 1);
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(62, 48));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p1085 := $bitcast.ref.ref($p1084);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i1086 := $load.i8($M.1, $p1085);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i1087 := $and.i8($i1086, 1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i1088 := $zext.i8.i32($i1087);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i1089 := $ne.i32($i1088, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1089} true;
    goto $bb446, $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    assume !($i1089 == 1);
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(63, 48));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p1102 := $bitcast.ref.ref($p1101);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i1103 := $load.i8($M.1, $p1102);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i1104 := $and.i8($i1103, 1);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i1105 := $zext.i8.i32($i1104);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i1106 := $ne.i32($i1105, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1106} true;
    goto $bb453, $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    assume !($i1106 == 1);
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb453:
    assume $i1106 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(63, 48)), $mul.ref(40, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p1110 := $load.ref($M.1, $p1109);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i1111 := $p2i.ref.i64($p1110);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i1112 := $ne.i64($i1111, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1112} true;
    goto $bb456, $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    assume !($i1112 == 1);
    goto $bb455;

  $bb456:
    assume $i1112 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(63, 48)), $mul.ref(40, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p1116 := $load.ref($M.1, $p1115);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} ipmi_free_recv_msg($p1116);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb446:
    assume $i1089 == 1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p1092 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(62, 48)), $mul.ref(40, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p1093 := $load.ref($M.1, $p1092);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i1094 := $p2i.ref.i64($p1093);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i1095 := $ne.i64($i1094, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1095} true;
    goto $bb449, $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    assume !($i1095 == 1);
    goto $bb448;

  $bb449:
    assume $i1095 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p1098 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(62, 48)), $mul.ref(40, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p1099 := $load.ref($M.1, $p1098);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ipmi_free_recv_msg($p1099);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb439:
    assume $i1072 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p1075 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(61, 48)), $mul.ref(40, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p1076 := $load.ref($M.1, $p1075);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i1077 := $p2i.ref.i64($p1076);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i1078 := $ne.i64($i1077, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1078} true;
    goto $bb442, $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    assume !($i1078 == 1);
    goto $bb441;

  $bb442:
    assume $i1078 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(61, 48)), $mul.ref(40, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p1082 := $load.ref($M.1, $p1081);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} ipmi_free_recv_msg($p1082);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb432:
    assume $i1055 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(60, 48)), $mul.ref(40, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p1059 := $load.ref($M.1, $p1058);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i1060 := $p2i.ref.i64($p1059);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i1061 := $ne.i64($i1060, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1061} true;
    goto $bb435, $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    assume !($i1061 == 1);
    goto $bb434;

  $bb435:
    assume $i1061 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(60, 48)), $mul.ref(40, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p1065 := $load.ref($M.1, $p1064);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} ipmi_free_recv_msg($p1065);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb425:
    assume $i1038 == 1;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(59, 48)), $mul.ref(40, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p1042 := $load.ref($M.1, $p1041);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i1043 := $p2i.ref.i64($p1042);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i1044 := $ne.i64($i1043, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1044} true;
    goto $bb428, $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    assume !($i1044 == 1);
    goto $bb427;

  $bb428:
    assume $i1044 == 1;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p1047 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(59, 48)), $mul.ref(40, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p1048 := $load.ref($M.1, $p1047);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} ipmi_free_recv_msg($p1048);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb418:
    assume $i1021 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p1024 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(58, 48)), $mul.ref(40, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p1025 := $load.ref($M.1, $p1024);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i1026 := $p2i.ref.i64($p1025);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i1027 := $ne.i64($i1026, 0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1027} true;
    goto $bb421, $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    assume !($i1027 == 1);
    goto $bb420;

  $bb421:
    assume $i1027 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p1030 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(58, 48)), $mul.ref(40, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p1031 := $load.ref($M.1, $p1030);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ipmi_free_recv_msg($p1031);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb411:
    assume $i1004 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p1007 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(57, 48)), $mul.ref(40, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p1008 := $load.ref($M.1, $p1007);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i1009 := $p2i.ref.i64($p1008);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i1010 := $ne.i64($i1009, 0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1010} true;
    goto $bb414, $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    assume !($i1010 == 1);
    goto $bb413;

  $bb414:
    assume $i1010 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(57, 48)), $mul.ref(40, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p1014 := $load.ref($M.1, $p1013);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ipmi_free_recv_msg($p1014);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb404:
    assume $i987 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(56, 48)), $mul.ref(40, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p991 := $load.ref($M.1, $p990);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i992 := $p2i.ref.i64($p991);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i993 := $ne.i64($i992, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i993} true;
    goto $bb407, $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    assume !($i993 == 1);
    goto $bb406;

  $bb407:
    assume $i993 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(56, 48)), $mul.ref(40, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p997 := $load.ref($M.1, $p996);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ipmi_free_recv_msg($p997);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb397:
    assume $i970 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(55, 48)), $mul.ref(40, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p974 := $load.ref($M.1, $p973);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i975 := $p2i.ref.i64($p974);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i976 := $ne.i64($i975, 0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i976} true;
    goto $bb400, $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume !($i976 == 1);
    goto $bb399;

  $bb400:
    assume $i976 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p979 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(55, 48)), $mul.ref(40, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p980 := $load.ref($M.1, $p979);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ipmi_free_recv_msg($p980);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb390:
    assume $i953 == 1;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(54, 48)), $mul.ref(40, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p957 := $load.ref($M.1, $p956);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i958 := $p2i.ref.i64($p957);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i959 := $ne.i64($i958, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i959} true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !($i959 == 1);
    goto $bb392;

  $bb393:
    assume $i959 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(54, 48)), $mul.ref(40, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p963 := $load.ref($M.1, $p962);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ipmi_free_recv_msg($p963);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb383:
    assume $i936 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(53, 48)), $mul.ref(40, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p940 := $load.ref($M.1, $p939);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i941 := $p2i.ref.i64($p940);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i942 := $ne.i64($i941, 0);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i942} true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !($i942 == 1);
    goto $bb385;

  $bb386:
    assume $i942 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(53, 48)), $mul.ref(40, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p946 := $load.ref($M.1, $p945);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ipmi_free_recv_msg($p946);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb376:
    assume $i919 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(52, 48)), $mul.ref(40, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p923 := $load.ref($M.1, $p922);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i924 := $p2i.ref.i64($p923);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i925 := $ne.i64($i924, 0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i925} true;
    goto $bb379, $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume !($i925 == 1);
    goto $bb378;

  $bb379:
    assume $i925 == 1;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(52, 48)), $mul.ref(40, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p929 := $load.ref($M.1, $p928);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ipmi_free_recv_msg($p929);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb369:
    assume $i902 == 1;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(51, 48)), $mul.ref(40, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p906 := $load.ref($M.1, $p905);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i907 := $p2i.ref.i64($p906);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i908 := $ne.i64($i907, 0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i908} true;
    goto $bb372, $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    assume !($i908 == 1);
    goto $bb371;

  $bb372:
    assume $i908 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(51, 48)), $mul.ref(40, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.1, $p911);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ipmi_free_recv_msg($p912);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb362:
    assume $i885 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(50, 48)), $mul.ref(40, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p889 := $load.ref($M.1, $p888);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i890 := $p2i.ref.i64($p889);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i891 := $ne.i64($i890, 0);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i891} true;
    goto $bb365, $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    assume !($i891 == 1);
    goto $bb364;

  $bb365:
    assume $i891 == 1;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(50, 48)), $mul.ref(40, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p895 := $load.ref($M.1, $p894);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} ipmi_free_recv_msg($p895);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb355:
    assume $i868 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(49, 48)), $mul.ref(40, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.1, $p871);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i873 := $p2i.ref.i64($p872);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i874 := $ne.i64($i873, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i874} true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i874 == 1);
    goto $bb357;

  $bb358:
    assume $i874 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(49, 48)), $mul.ref(40, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.1, $p877);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ipmi_free_recv_msg($p878);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb348:
    assume $i851 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(48, 48)), $mul.ref(40, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p855 := $load.ref($M.1, $p854);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i856 := $p2i.ref.i64($p855);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i857 := $ne.i64($i856, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb351, $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume !($i857 == 1);
    goto $bb350;

  $bb351:
    assume $i857 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(48, 48)), $mul.ref(40, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p861 := $load.ref($M.1, $p860);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} ipmi_free_recv_msg($p861);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb341:
    assume $i834 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(47, 48)), $mul.ref(40, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.1, $p837);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i839 := $p2i.ref.i64($p838);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i840 := $ne.i64($i839, 0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i840 == 1);
    goto $bb343;

  $bb344:
    assume $i840 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(47, 48)), $mul.ref(40, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p844 := $load.ref($M.1, $p843);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} ipmi_free_recv_msg($p844);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb334:
    assume $i817 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(46, 48)), $mul.ref(40, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p821 := $load.ref($M.1, $p820);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i822 := $p2i.ref.i64($p821);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i823 := $ne.i64($i822, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i823} true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i823 == 1);
    goto $bb336;

  $bb337:
    assume $i823 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(46, 48)), $mul.ref(40, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.1, $p826);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ipmi_free_recv_msg($p827);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb327:
    assume $i800 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(45, 48)), $mul.ref(40, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p804 := $load.ref($M.1, $p803);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i805 := $p2i.ref.i64($p804);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i806 := $ne.i64($i805, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb330, $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    assume !($i806 == 1);
    goto $bb329;

  $bb330:
    assume $i806 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(45, 48)), $mul.ref(40, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p810 := $load.ref($M.1, $p809);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} ipmi_free_recv_msg($p810);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb320:
    assume $i783 == 1;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(44, 48)), $mul.ref(40, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.1, $p786);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i788 := $p2i.ref.i64($p787);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i789 := $ne.i64($i788, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i789} true;
    goto $bb323, $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    assume !($i789 == 1);
    goto $bb322;

  $bb323:
    assume $i789 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(44, 48)), $mul.ref(40, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p793 := $load.ref($M.1, $p792);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} ipmi_free_recv_msg($p793);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb313:
    assume $i766 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(43, 48)), $mul.ref(40, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p770 := $load.ref($M.1, $p769);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i771 := $p2i.ref.i64($p770);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i772 := $ne.i64($i771, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i772} true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i772 == 1);
    goto $bb315;

  $bb316:
    assume $i772 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(43, 48)), $mul.ref(40, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p776 := $load.ref($M.1, $p775);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} ipmi_free_recv_msg($p776);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb306:
    assume $i749 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(42, 48)), $mul.ref(40, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p753 := $load.ref($M.1, $p752);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i754 := $p2i.ref.i64($p753);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i755 := $ne.i64($i754, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i755 == 1);
    goto $bb308;

  $bb309:
    assume $i755 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(42, 48)), $mul.ref(40, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p759 := $load.ref($M.1, $p758);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ipmi_free_recv_msg($p759);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb299:
    assume $i732 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(41, 48)), $mul.ref(40, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p736 := $load.ref($M.1, $p735);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i737 := $p2i.ref.i64($p736);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i738 := $ne.i64($i737, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i738} true;
    goto $bb302, $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    assume !($i738 == 1);
    goto $bb301;

  $bb302:
    assume $i738 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(41, 48)), $mul.ref(40, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.1, $p741);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} ipmi_free_recv_msg($p742);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb292:
    assume $i715 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(40, 48)), $mul.ref(40, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p719 := $load.ref($M.1, $p718);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i720 := $p2i.ref.i64($p719);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i721 := $ne.i64($i720, 0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !($i721 == 1);
    goto $bb294;

  $bb295:
    assume $i721 == 1;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(40, 48)), $mul.ref(40, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p725 := $load.ref($M.1, $p724);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} ipmi_free_recv_msg($p725);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb285:
    assume $i698 == 1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(39, 48)), $mul.ref(40, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.1, $p701);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i703 := $p2i.ref.i64($p702);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i704 := $ne.i64($i703, 0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !($i704 == 1);
    goto $bb287;

  $bb288:
    assume $i704 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(39, 48)), $mul.ref(40, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.1, $p707);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ipmi_free_recv_msg($p708);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb278:
    assume $i681 == 1;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(38, 48)), $mul.ref(40, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p685 := $load.ref($M.1, $p684);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i686 := $p2i.ref.i64($p685);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i687 := $ne.i64($i686, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !($i687 == 1);
    goto $bb280;

  $bb281:
    assume $i687 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(38, 48)), $mul.ref(40, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p691 := $load.ref($M.1, $p690);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} ipmi_free_recv_msg($p691);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb271:
    assume $i664 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(37, 48)), $mul.ref(40, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.1, $p667);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i669 := $p2i.ref.i64($p668);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i670 := $ne.i64($i669, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i670} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i670 == 1);
    goto $bb273;

  $bb274:
    assume $i670 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(37, 48)), $mul.ref(40, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.1, $p673);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ipmi_free_recv_msg($p674);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb264:
    assume $i647 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(36, 48)), $mul.ref(40, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p651 := $load.ref($M.1, $p650);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i652 := $p2i.ref.i64($p651);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i653 := $ne.i64($i652, 0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i653 == 1);
    goto $bb266;

  $bb267:
    assume $i653 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(36, 48)), $mul.ref(40, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.1, $p656);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} ipmi_free_recv_msg($p657);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb257:
    assume $i630 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(35, 48)), $mul.ref(40, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p634 := $load.ref($M.1, $p633);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i635 := $p2i.ref.i64($p634);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i636 := $ne.i64($i635, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i636} true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i636 == 1);
    goto $bb259;

  $bb260:
    assume $i636 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(35, 48)), $mul.ref(40, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.1, $p639);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ipmi_free_recv_msg($p640);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb250:
    assume $i613 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(34, 48)), $mul.ref(40, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.1, $p616);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p617);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i619 := $ne.i64($i618, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i619} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i619 == 1);
    goto $bb252;

  $bb253:
    assume $i619 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(34, 48)), $mul.ref(40, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.1, $p622);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} ipmi_free_recv_msg($p623);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb243:
    assume $i596 == 1;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(33, 48)), $mul.ref(40, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p600 := $load.ref($M.1, $p599);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i601 := $p2i.ref.i64($p600);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i602 := $ne.i64($i601, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i602 == 1);
    goto $bb245;

  $bb246:
    assume $i602 == 1;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(33, 48)), $mul.ref(40, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p606 := $load.ref($M.1, $p605);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ipmi_free_recv_msg($p606);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb236:
    assume $i579 == 1;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(32, 48)), $mul.ref(40, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p583 := $load.ref($M.1, $p582);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i584 := $p2i.ref.i64($p583);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i585 := $ne.i64($i584, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i585 == 1);
    goto $bb238;

  $bb239:
    assume $i585 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(32, 48)), $mul.ref(40, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.1, $p588);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} ipmi_free_recv_msg($p589);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb229:
    assume $i562 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(31, 48)), $mul.ref(40, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p566 := $load.ref($M.1, $p565);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i567 := $p2i.ref.i64($p566);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i568 := $ne.i64($i567, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i568 == 1);
    goto $bb231;

  $bb232:
    assume $i568 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(31, 48)), $mul.ref(40, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p572 := $load.ref($M.1, $p571);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} ipmi_free_recv_msg($p572);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb222:
    assume $i545 == 1;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(30, 48)), $mul.ref(40, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p549 := $load.ref($M.1, $p548);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i550 := $p2i.ref.i64($p549);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i551 := $ne.i64($i550, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i551 == 1);
    goto $bb224;

  $bb225:
    assume $i551 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(30, 48)), $mul.ref(40, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p555 := $load.ref($M.1, $p554);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} ipmi_free_recv_msg($p555);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb215:
    assume $i528 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(29, 48)), $mul.ref(40, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p532 := $load.ref($M.1, $p531);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i533 := $p2i.ref.i64($p532);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i534 := $ne.i64($i533, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i534 == 1);
    goto $bb217;

  $bb218:
    assume $i534 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(29, 48)), $mul.ref(40, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.1, $p537);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} ipmi_free_recv_msg($p538);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb208:
    assume $i511 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(28, 48)), $mul.ref(40, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p515 := $load.ref($M.1, $p514);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i516 := $p2i.ref.i64($p515);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i517 := $ne.i64($i516, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i517} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i517 == 1);
    goto $bb210;

  $bb211:
    assume $i517 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(28, 48)), $mul.ref(40, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.1, $p520);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} ipmi_free_recv_msg($p521);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb201:
    assume $i494 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(27, 48)), $mul.ref(40, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.1, $p497);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i500 := $ne.i64($i499, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb203;

  $bb204:
    assume $i500 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(27, 48)), $mul.ref(40, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.1, $p503);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} ipmi_free_recv_msg($p504);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb194:
    assume $i477 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(26, 48)), $mul.ref(40, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.1, $p480);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i482 := $p2i.ref.i64($p481);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i483 := $ne.i64($i482, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i483 == 1);
    goto $bb196;

  $bb197:
    assume $i483 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(26, 48)), $mul.ref(40, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.1, $p486);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} ipmi_free_recv_msg($p487);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb187:
    assume $i460 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(25, 48)), $mul.ref(40, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p464 := $load.ref($M.1, $p463);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i465 := $p2i.ref.i64($p464);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i466 := $ne.i64($i465, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb190, $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume !($i466 == 1);
    goto $bb189;

  $bb190:
    assume $i466 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(25, 48)), $mul.ref(40, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.1, $p469);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} ipmi_free_recv_msg($p470);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb180:
    assume $i443 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(24, 48)), $mul.ref(40, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.1, $p446);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i448 := $p2i.ref.i64($p447);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i449 := $ne.i64($i448, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i449 == 1);
    goto $bb182;

  $bb183:
    assume $i449 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(24, 48)), $mul.ref(40, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p453 := $load.ref($M.1, $p452);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ipmi_free_recv_msg($p453);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb173:
    assume $i426 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(23, 48)), $mul.ref(40, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.1, $p429);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i431 := $p2i.ref.i64($p430);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i432 := $ne.i64($i431, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i432 == 1);
    goto $bb175;

  $bb176:
    assume $i432 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(23, 48)), $mul.ref(40, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.1, $p435);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} ipmi_free_recv_msg($p436);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb166:
    assume $i409 == 1;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(22, 48)), $mul.ref(40, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p413 := $load.ref($M.1, $p412);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i415 := $ne.i64($i414, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i415 == 1);
    goto $bb168;

  $bb169:
    assume $i415 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(22, 48)), $mul.ref(40, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.1, $p418);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} ipmi_free_recv_msg($p419);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb159:
    assume $i392 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(21, 48)), $mul.ref(40, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.1, $p395);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p396);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i398 := $ne.i64($i397, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i398 == 1);
    goto $bb161;

  $bb162:
    assume $i398 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(21, 48)), $mul.ref(40, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.1, $p401);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} ipmi_free_recv_msg($p402);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb152:
    assume $i375 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(20, 48)), $mul.ref(40, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.1, $p378);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb154;

  $bb155:
    assume $i381 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(20, 48)), $mul.ref(40, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.1, $p384);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} ipmi_free_recv_msg($p385);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb145:
    assume $i358 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(19, 48)), $mul.ref(40, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.1, $p361);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i364 := $ne.i64($i363, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i364 == 1);
    goto $bb147;

  $bb148:
    assume $i364 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(19, 48)), $mul.ref(40, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.1, $p367);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} ipmi_free_recv_msg($p368);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb138:
    assume $i341 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(18, 48)), $mul.ref(40, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.1, $p344);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i346 := $p2i.ref.i64($p345);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i347 := $ne.i64($i346, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb140;

  $bb141:
    assume $i347 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(18, 48)), $mul.ref(40, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.1, $p350);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} ipmi_free_recv_msg($p351);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb131:
    assume $i324 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(17, 48)), $mul.ref(40, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.1, $p327);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i330 := $ne.i64($i329, 0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb133;

  $bb134:
    assume $i330 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(17, 48)), $mul.ref(40, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.1, $p333);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} ipmi_free_recv_msg($p334);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb124:
    assume $i307 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(16, 48)), $mul.ref(40, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.1, $p310);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i313 := $ne.i64($i312, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb126;

  $bb127:
    assume $i313 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(16, 48)), $mul.ref(40, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.1, $p316);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} ipmi_free_recv_msg($p317);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb117:
    assume $i290 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(15, 48)), $mul.ref(40, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.1, $p293);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i296 := $ne.i64($i295, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb119;

  $bb120:
    assume $i296 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(15, 48)), $mul.ref(40, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.1, $p299);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} ipmi_free_recv_msg($p300);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb110:
    assume $i273 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(14, 48)), $mul.ref(40, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.1, $p276);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p277);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb112;

  $bb113:
    assume $i279 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(14, 48)), $mul.ref(40, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.1, $p282);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} ipmi_free_recv_msg($p283);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb103:
    assume $i256 == 1;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(13, 48)), $mul.ref(40, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.1, $p259);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb105;

  $bb106:
    assume $i262 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(13, 48)), $mul.ref(40, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.1, $p265);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} ipmi_free_recv_msg($p266);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb96:
    assume $i239 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(12, 48)), $mul.ref(40, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.1, $p242);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p243);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb98;

  $bb99:
    assume $i245 == 1;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(12, 48)), $mul.ref(40, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.1, $p248);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} ipmi_free_recv_msg($p249);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb89:
    assume $i222 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(11, 48)), $mul.ref(40, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.1, $p225);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i228 := $ne.i64($i227, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb91;

  $bb92:
    assume $i228 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(11, 48)), $mul.ref(40, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.1, $p231);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} ipmi_free_recv_msg($p232);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb82:
    assume $i205 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(10, 48)), $mul.ref(40, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.1, $p208);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p209);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i210, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb84;

  $bb85:
    assume $i211 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(10, 48)), $mul.ref(40, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.1, $p214);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} ipmi_free_recv_msg($p215);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb75:
    assume $i188 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(9, 48)), $mul.ref(40, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.1, $p191);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb77;

  $bb78:
    assume $i194 == 1;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(9, 48)), $mul.ref(40, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.1, $p197);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} ipmi_free_recv_msg($p198);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb68:
    assume $i171 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(8, 48)), $mul.ref(40, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.1, $p174);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb70;

  $bb71:
    assume $i177 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(8, 48)), $mul.ref(40, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.1, $p180);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} ipmi_free_recv_msg($p181);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb61:
    assume $i154 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(7, 48)), $mul.ref(40, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.1, $p157);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb63;

  $bb64:
    assume $i160 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(7, 48)), $mul.ref(40, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.1, $p163);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ipmi_free_recv_msg($p164);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb54:
    assume $i137 == 1;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(6, 48)), $mul.ref(40, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.1, $p140);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb56;

  $bb57:
    assume $i143 == 1;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(6, 48)), $mul.ref(40, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.1, $p146);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} ipmi_free_recv_msg($p147);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb47:
    assume $i120 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(5, 48)), $mul.ref(40, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb49;

  $bb50:
    assume $i126 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(5, 48)), $mul.ref(40, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} ipmi_free_recv_msg($p130);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb40:
    assume $i103 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(4, 48)), $mul.ref(40, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb42;

  $bb43:
    assume $i109 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(4, 48)), $mul.ref(40, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} ipmi_free_recv_msg($p113);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb33:
    assume $i86 == 1;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(3, 48)), $mul.ref(40, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb35;

  $bb36:
    assume $i92 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(3, 48)), $mul.ref(40, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} ipmi_free_recv_msg($p96);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb26:
    assume $i69 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(2, 48)), $mul.ref(40, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb28;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(2, 48)), $mul.ref(40, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} ipmi_free_recv_msg($p79);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(1, 48)), $mul.ref(40, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb21;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(1, 48)), $mul.ref(40, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} ipmi_free_recv_msg($p62);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ipmi_free_recv_msg($p45);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p13, $p9;
    goto $bb4;

  $bb4:
    call $p21, $p23, $p24, $p26, $i27, $i28, $p19, $p20 := clean_up_interface_data_loop_$bb4($i17, $p21, $p23, $p24, $p26, $i27, $i28, $p19, $p20);
    goto $bb4_last;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree($p21);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i17);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20 := $p24, $p19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_128;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 269499);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    return;
}



const free_smi_msg_list: ref;

axiom free_smi_msg_list == $sub.ref(0, 270531);

procedure free_smi_msg_list($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation free_smi_msg_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i9, $i10);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p12, $p13 := $p6, $p2;
    goto $bb4;

  $bb4:
    call $p14, $p16, $p17, $p19, $i20, $i21, $p12, $p13 := free_smi_msg_list_loop_$bb4($i10, $p14, $p16, $p17, $p19, $i20, $i21, $p12, $p13);
    goto $bb4_last;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} list_del($p14);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ipmi_free_smi_msg($p13);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 592)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $i10);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p12, $p13 := $p17, $p12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;
}



const free_recv_msg_list: ref;

axiom free_recv_msg_list == $sub.ref(0, 271563);

procedure free_recv_msg_list($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation free_recv_msg_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i9, $i10);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p12, $p13 := $p6, $p2;
    goto $bb4;

  $bb4:
    call $p14, $p16, $p17, $p19, $i20, $i21, $p12, $p13 := free_recv_msg_list_loop_$bb4($i10, $p14, $p16, $p17, $p19, $i20, $i21, $p12, $p13);
    goto $bb4_last;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} list_del($p14);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} ipmi_free_recv_msg($p13);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $i10);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p12, $p13 := $p17, $p12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 272595);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_rcu: ref;

axiom synchronize_rcu == $sub.ref(0, 273627);

procedure synchronize_rcu();
  free requires assertsPassed;



implementation synchronize_rcu()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} synchronize_sched();
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    return;
}



const list_splice_init_rcu: ref;

axiom list_splice_init_rcu == $sub.ref(0, 274659);

procedure list_splice_init_rcu($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation list_splice_init_rcu($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i9 := list_empty($p0);
    call {:si_unique_call 117} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} INIT_LIST_HEAD_RCU($p0);
    call {:si_unique_call 119} devirtbounce.3($p2);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p8);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1(0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 121} devirtbounce.3(0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p4);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p6);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} __compiletime_assert_235();
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ipmi_free_recv_msg: ref;

axiom ipmi_free_recv_msg == $sub.ref(0, 275691);

procedure ipmi_free_recv_msg($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_free_recv_msg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    call {:si_unique_call 123} devirtbounce.4($p10, $p0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_63 := kref_put($p7, free_user);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_user: ref;

axiom free_user == $sub.ref(0, 276723);

procedure free_user($p0: ref);
  free requires assertsPassed;



implementation free_user($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 20), 56));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} kfree($p3);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 277755);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const INIT_LIST_HEAD_RCU: ref;

axiom INIT_LIST_HEAD_RCU == $sub.ref(0, 278787);

procedure INIT_LIST_HEAD_RCU($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation INIT_LIST_HEAD_RCU($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} __write_once_size($p5, $p7, 8);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} __write_once_size($p10, $p12, 8);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_235: ref;

axiom __compiletime_assert_235 == $sub.ref(0, 279819);

procedure __compiletime_assert_235();
  free requires assertsPassed;



implementation __compiletime_assert_235()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    return;
}



const __write_once_size: ref;

axiom __write_once_size == $sub.ref(0, 280851);

procedure __write_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation __write_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    call {:si_unique_call 129} {:cexpr "__write_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 130} devirtbounce.3(0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 131} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p0, $p1, $i20, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    call {:si_unique_call 132} devirtbounce.3(0);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i18);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $i15);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i12);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p0, $i10);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 281883);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const synchronize_sched: ref;

axiom synchronize_sched == $sub.ref(0, 282915);

procedure synchronize_sched();
  free requires assertsPassed;



implementation synchronize_sched()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_free_smi_msg: ref;

axiom ipmi_free_smi_msg == $sub.ref(0, 283947);

procedure ipmi_free_smi_msg($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_free_smi_msg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(584, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    call {:si_unique_call 133} devirtbounce.5($p2, $p0);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 284979);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 286011);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.56, $M.59, $CurrAddr, $M.69, $M.70, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 135} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 136} $i3 := devirtbounce.6(0, $p2, $i0, $p2);
    call {:si_unique_call 137} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 287043);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 139} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p2 := ldv_malloc($i0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 288075);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 142} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 143} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 144} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p4 := malloc($i0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} __VERIFIER_assume($i7);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 289107);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 147} $r := $malloc($i0);
    return;
}



const ipmi_smi_watcher_unregister: ref;

axiom ipmi_smi_watcher_unregister == $sub.ref(0, 290139);

procedure ipmi_smi_watcher_unregister($p0: ref) returns ($r: i32);



const ipmi_validate_addr: ref;

axiom ipmi_validate_addr == $sub.ref(0, 291171);

procedure ipmi_validate_addr($p0: ref, $i1: i32) returns ($r: i32);



const is_ipmb_addr: ref;

axiom is_ipmb_addr == $sub.ref(0, 292203);

procedure is_ipmb_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_ipmb_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_ipmb_bcast_addr: ref;

axiom is_ipmb_bcast_addr == $sub.ref(0, 293235);

procedure is_ipmb_bcast_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_ipmb_bcast_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 65);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_lan_addr: ref;

axiom is_lan_addr == $sub.ref(0, 294267);

procedure is_lan_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_lan_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 4);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ipmi_addr_length: ref;

axiom ipmi_addr_length == $sub.ref(0, 295299);

procedure ipmi_addr_length($i0: i32) returns ($r: i32);



const ipmi_create_user: ref;

axiom ipmi_create_user == $sub.ref(0, 296331);

procedure ipmi_create_user($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const ipmi_init_msghandler: ref;

axiom ipmi_init_msghandler == $sub.ref(0, 297363);

procedure ipmi_init_msghandler() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.3, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation ipmi_init_msghandler() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i13: i64;
  var $i14: i64;
  var $i2: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i3 := driver_register($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)));
    call {:si_unique_call 149} {:cexpr "rv"} boogie_si_record_i32($i3);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_65 := printk.ref(.str.63);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p7 := proc_mkdir(.str.48, $0.ref);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.6 := $p7;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p8 := $M.6;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_67 := reg_timer_1(ipmi_timer, ipmi_timeout, 0);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, jiffies);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 250);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vslice_dummy_var_68 := ldv_mod_timer_13(ipmi_timer, $i14);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_69 := atomic_notifier_chain_register(panic_notifier_list, panic_block);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 158} {:cexpr "initialized"} boogie_si_record_i32(1);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_66 := printk.ref(.str.64);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} driver_unregister($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_64 := printk.ref(.str.62);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 298395);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    call {:si_unique_call 159} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 160} devirtbounce.3(0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 161} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    call {:si_unique_call 162} devirtbounce.3(0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i18);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $i15);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i12);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $i10);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 299427);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 300459);

procedure kref_init($p0: ref);



const ldv_try_module_get_7: ref;

axiom ldv_try_module_get_7 == $sub.ref(0, 301491);

procedure ldv_try_module_get_7($p0: ref) returns ($r: i1);



const ldv_module_put_8: ref;

axiom ldv_module_put_8 == $sub.ref(0, 302523);

procedure ldv_module_put_8($p0: ref);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 303555);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 304587);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_rcu: ref;

axiom list_add_rcu == $sub.ref(0, 305619);

procedure list_add_rcu($p0: ref, $p1: ref);



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 306651);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    return;
}



const need_waiter: ref;

axiom need_waiter == $sub.ref(0, 307683);

procedure need_waiter($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation need_waiter($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $i4: i64;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i1 := timer_pending(ipmi_timer);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, jiffies);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 250);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_70 := ldv_mod_timer_12(ipmi_timer, $i4);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const timer_pending: ref;

axiom timer_pending == $sub.ref(0, 308715);

procedure timer_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation timer_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mod_timer_12: ref;

axiom ldv_mod_timer_12 == $sub.ref(0, 309747);

procedure ldv_mod_timer_12($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation ldv_mod_timer_12($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "ldv_mod_timer_12:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 174} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 310779);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 311811);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 180} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p3 := $M.8;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.10;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.12;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.14;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} activate_suitable_timer_1($p0, $i1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i34 := $M.15;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p37 := $M.14;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p38, $i1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 184} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i25 := $M.13;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p28 := $M.12;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p29, $i1);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 183} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i16 := $M.11;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p19 := $M.10;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p20, $i1);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 182} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i7 := $M.9;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p10 := $M.8;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p11, $i1);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 181} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 312843);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i2 := $M.9;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i4 := $M.9;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.13;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i16 := $M.13;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.15;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i22 := $M.15;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p24 := $M.14;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p25, $i1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 190} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p18 := $M.12;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p19, $i1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 189} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p12 := $M.10;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p13, $i1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 188} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p6 := $M.8;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p7, $i1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 187} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 313875);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    return;
}



const __list_add_rcu: ref;

axiom __list_add_rcu == $sub.ref(0, 314907);

procedure __list_add_rcu($p0: ref, $p1: ref, $p2: ref);



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 315939);

procedure ldv_module_put($p0: ref);



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 316971);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 192} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 318003);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 319035);

procedure ldv_undef_int() returns ($r: i32);



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 320067);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 321099);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 195} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 322131);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 196} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 197} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 200} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const proc_mkdir: ref;

axiom proc_mkdir == $sub.ref(0, 323163);

procedure proc_mkdir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p2 := external_alloc();
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 324195);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_timeout: ref;

axiom ipmi_timeout == $sub.ref(0, 325227);

procedure ipmi_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.18, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.69, $M.70;



implementation ipmi_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p20: ref;
  var $i21: i32;
  var $i71: i32;
  var $i19: i32;
  var $i72: i1;
  var $i73: i64;
  var $i74: i64;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 211} {:cexpr "ipmi_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i5 := atomic_read(stop_operation);
    call {:si_unique_call 213} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} rcu_read_lock();
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, ipmi_interfaces);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p7);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __read_once_size($p8, $p10, 8);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 217} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i19 := 0;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} rcu_read_unlock();
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i19, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i72 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.1, jiffies);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 250);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_71 := ldv_mod_timer_11(ipmi_timer, $i74);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p15, 0;
    goto $bb8;

  $bb8:
    call $p22, $i23, $i24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $p55, $i56, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $i69, $i70, $p20, $i21, $i71 := ipmi_timeout_loop_$bb8($p3, $p4, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $p55, $i56, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $i69, $i70, $p20, $i21, $i71);
    goto $bb8_last;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4024, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i23 := atomic_read($p22);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i35 := ipmi_timeout_handler($p20, 1000);
    call {:si_unique_call 223} {:cexpr "tmp___2"} boogie_si_record_i32($i35);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i34);
    call {:si_unique_call 224} {:cexpr "lnt"} boogie_si_record_i32($i36);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 225} {:cexpr "lnt"} boogie_si_record_i32($i38);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4032, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, $i38);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4032, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i38);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i21, $i38);
    call {:si_unique_call 227} {:cexpr "nt"} boogie_si_record_i32($i56);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p59);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p4);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} __read_once_size($p60, $p62, 8);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p4);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i65 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 230} {:cexpr "tmp___3"} boogie_si_record_i32($i65);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p64);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i71 := $i56;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i19 := $i71;
    goto $bb7;

  $bb22:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p20, $i21 := $p67, $i56;
    goto $bb22_dummy;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb18;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i38, 0);
    call {:si_unique_call 226} devirtbounce.8($p51, $p53, $i54);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i27);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $add.i32(0, 1);
    call {:si_unique_call 221} {:cexpr "lnt"} boogie_si_record_i32($i33);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} ipmi_request_event($p20);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, 1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 326259);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(ipmi_timeout));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mod_timer_13: ref;

axiom ldv_mod_timer_13 == $sub.ref(0, 327291);

procedure ldv_mod_timer_13($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation ldv_mod_timer_13($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "ldv_mod_timer_13:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 237} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_notifier_chain_register: ref;

axiom atomic_notifier_chain_register == $sub.ref(0, 328323);

procedure atomic_notifier_chain_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_notifier_chain_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 329355);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 330387);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __rcu_read_lock();
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 244} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i3 := rcu_is_watching();
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 246} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} lockdep_rcu_suspicious(.str.59, 849, .str.60);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const ipmi_request_event: ref;

axiom ipmi_request_event == $sub.ref(0, 331419);

procedure ipmi_request_event($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_request_event($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4044, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 248} devirtbounce.9($p10, $p12);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ipmi_timeout_handler: ref;

axiom ipmi_timeout_handler == $sub.ref(0, 332451);

procedure ipmi_timeout_handler($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.1, $M.18, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_timeout_handler($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i8: i32;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p28: ref;
  var $p29: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 252} {:cexpr "ipmi_timeout_handler:arg:timeout_period"} boogie_si_record_i64($i1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} INIT_LIST_HEAD($p2);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p6 := spinlock_check($p5);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i7 := _raw_spin_lock_irqsave($p6);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p3, $i7);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb1;

  $bb1:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i8 := ipmi_timeout_handler_loop_$bb1($p0, $i1, $p2, $p3, $p4, $p9, $p10, $i11, $p12, $i13, $i14, $i8);
    goto $bb1_last;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 48));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} check_msg_timeout($p0, $p12, $p2, $i1, $i8, $p3, $p4);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, 1);
    call {:si_unique_call 257} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 63);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.18, $p3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} spin_unlock_irqrestore($p15, $i16);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p2);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4048, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3600, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} tasklet_schedule($p60);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.17, $p4);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4056, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p41 := spinlock_check($p40);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i42 := _raw_spin_lock_irqsave($p41);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p3, $i42);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4048, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4056, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.18, $p3);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} spin_unlock_irqrestore($p58, $i59);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4048, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i47, $i48);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4048, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, $i49);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4040, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4048, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i56 := $sle.i32($i55, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb20;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4044, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} maintenance_mode_update($p0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p28, $p29 := $p22, $p18;
    goto $bb9;

  $bb9:
    call $p31, $p32, $p34, $i35, $i36, $p28, $p29 := ipmi_timeout_handler_loop_$bb9($i26, $p31, $p32, $p34, $i35, $i36, $p28, $p29);
    goto $bb9_last;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} deliver_err_response($p29, 195);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p28, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $i26);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $p28, $p29 := $p32, $p28;
    goto $bb11_dummy;

  $bb3:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1937;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 333483);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} __rcu_read_unlock();
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i3 := rcu_is_watching();
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 268} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} lockdep_rcu_suspicious(.str.59, 900, .str.61);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const ldv_mod_timer_11: ref;

axiom ldv_mod_timer_11 == $sub.ref(0, 334515);

procedure ldv_mod_timer_11($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation ldv_mod_timer_11($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "ldv_mod_timer_11:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 274} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 335547);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 277} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 336579);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 337611);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} devirtbounce.3(0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} __preempt_count_sub(1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 338643);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} lock_release($p0, 1, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 339675);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 283} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 340707);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 287} devirtbounce.11(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 286} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 285} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_msg_timeout: ref;

axiom check_msg_timeout == $sub.ref(0, 341739);

procedure check_msg_timeout($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.18, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation check_msg_timeout($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i8;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} {:cexpr "check_msg_timeout:arg:timeout_period"} boogie_si_record_i64($i3);
    call {:si_unique_call 289} {:cexpr "check_msg_timeout:arg:slot"} boogie_si_record_i32($i4);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(0, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i16, $i3);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p18, $i17);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.17, $p6);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p6, $i53);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p54, 60000);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i56, 1);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, $i57);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i4);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.1, $p64);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p66 := smi_from_recv_msg($p0, $p60, $i63, $i65);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.18, $p5);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} spin_unlock_irqrestore($p80, $i81);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i85 == 1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ipmi_free_smi_msg($p66);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p100 := spinlock_check($p99);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i101 := _raw_spin_lock_irqsave($p100);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p5, $i101);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i85 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i89 := is_lan_addr($p88);
    call {:si_unique_call 303} {:cexpr "tmp___1"} boogie_si_record_i32($i89);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i90 == 1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(6, 4));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} atomic_inc($p96);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} smi_send($p0, $p98, $p66, 0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i90 == 1;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(15, 4));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} atomic_inc($p93);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i68 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i72 := is_lan_addr($p71);
    call {:si_unique_call 298} {:cexpr "tmp___0"} boogie_si_record_i32($i72);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(26, 4));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} atomic_inc($p79);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(27, 4));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} atomic_inc($p76);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i28, $sub.i8(0, 2));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i29);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} list_add_tail($p32, $p2);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(0, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i44 := is_lan_addr($p43);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i32($i44);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(7, 4));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} atomic_inc($p51);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(16, 4));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} atomic_inc($p48);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(8, 4));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} atomic_inc($p40);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.17, $p6);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p6, $i23);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const deliver_err_response: ref;

axiom deliver_err_response == $sub.ref(0, 342771);

procedure deliver_err_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation deliver_err_response($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "deliver_err_response:arg:err"} boogie_si_record_i32($i1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, $i3);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i11);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p15, 1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $p16);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} deliver_response($p0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    return;
}



const maintenance_mode_update: ref;

axiom maintenance_mode_update == $sub.ref(0, 343803);

procedure maintenance_mode_update($p0: ref);
  free requires assertsPassed;



implementation maintenance_mode_update($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4044, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    call {:si_unique_call 312} devirtbounce.8($p10, $p12, $i15);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 344835);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __tasklet_schedule($p0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 345867);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 317} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 318} devirtbounce.12(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.19, $p2);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 346899);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    return;
}



const deliver_response: ref;

axiom deliver_response == $sub.ref(0, 347931);

procedure deliver_response($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation deliver_response($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    call {:si_unique_call 319} devirtbounce.14($p25, $p0, $p27);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(3, 4));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} atomic_inc($p19);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} ipmi_free_recv_msg($p0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    call {:si_unique_call 320} devirtbounce.13($p13, $p7, $p0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(2, 4));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} atomic_inc($p16);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 348963);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 324} devirtbounce.10(0, $p1, $p1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    return;
}



const smi_from_recv_msg: ref;

axiom smi_from_recv_msg == $sub.ref(0, 349995);

procedure smi_from_recv_msg($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation smi_from_recv_msg($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i64;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "smi_from_recv_msg:arg:seq"} boogie_si_record_i8($i2);
    call {:si_unique_call 326} {:cexpr "smi_from_recv_msg:arg:seqid"} boogie_si_record_i64($i3);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p4 := ipmi_alloc_smi_msg();
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i64($i15);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} llvm.memmove.p0i8.p0i8.i64($p9, $p12, $i16, 1, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, $i20);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i2);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 26);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i3, 67108863);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i26 := $or.i64($i24, $i25);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p27, $i26);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const smi_send: ref;

axiom smi_send == $sub.ref(0, 351027);

procedure smi_send($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation smi_send($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p8: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "smi_send:arg:priority"} boogie_si_record_i32($i3);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 330} {:cexpr "run_to_completion"} boogie_si_record_i32($i5);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3640, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p10 := spinlock_check($p9);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 334} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p12 := smi_add_send_msg($p0, $p2, $i3);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3640, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} spin_unlock_irqrestore($p13, $i11);
    assume {:verifier.code 0} true;
    $p8 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p8);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    call {:si_unique_call 337} devirtbounce.15($p17, $p19, $p8);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p7 := smi_add_send_msg($p0, $p2, $i3);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb3;
}



const smi_add_send_msg: ref;

axiom smi_add_send_msg == $sub.ref(0, 352059);

procedure smi_add_send_msg($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation smi_add_send_msg($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "smi_add_send_msg:arg:priority"} boogie_si_record_i32($i2);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3728, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3728, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p1);
    assume {:verifier.code 0} true;
    $p12 := $p1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i2, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3712, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} list_add_tail($p10, $p11);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3736, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} list_add_tail($p8, $p9);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ipmi_alloc_smi_msg: ref;

axiom ipmi_alloc_smi_msg == $sub.ref(0, 353091);

procedure ipmi_alloc_smi_msg() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_alloc_smi_msg() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p0 := kmalloc(592, 32);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(584, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, free_smi_msg);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $0.ref);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} atomic_inc(smi_msg_inuse_count);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 354123);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const free_smi_msg: ref;

axiom free_smi_msg == $sub.ref(0, 355155);

procedure free_smi_msg($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation free_smi_msg($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} atomic_dec(smi_msg_inuse_count);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} kfree($p1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 356187);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 345} devirtbounce.10(0, $p1, $p1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 357219);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} __preempt_count_add(1);
    call {:si_unique_call 347} devirtbounce.3(0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 358251);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 359283);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 350} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 351} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 352} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 353} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 360315);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 357} devirtbounce.11(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 356} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 355} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 361347);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ipmi_get_smi_info: ref;

axiom ipmi_get_smi_info == $sub.ref(0, 362379);

procedure ipmi_get_smi_info($i0: i32, $p1: ref) returns ($r: i32);



const ipmi_destroy_user: ref;

axiom ipmi_destroy_user == $sub.ref(0, 363411);

procedure ipmi_destroy_user($p0: ref) returns ($r: i32);



const list_del_rcu: ref;

axiom list_del_rcu == $sub.ref(0, 364443);

procedure list_del_rcu($p0: ref);



const ldv_module_put_9: ref;

axiom ldv_module_put_9 == $sub.ref(0, 365475);

procedure ldv_module_put_9($p0: ref);



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 366507);

procedure __list_del_entry($p0: ref);



const ipmi_get_version: ref;

axiom ipmi_get_version == $sub.ref(0, 367539);

procedure ipmi_get_version($p0: ref, $p1: ref, $p2: ref);



const ipmi_set_my_address: ref;

axiom ipmi_set_my_address == $sub.ref(0, 368571);

procedure ipmi_set_my_address($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);



const ipmi_get_my_address: ref;

axiom ipmi_get_my_address == $sub.ref(0, 369603);

procedure ipmi_get_my_address($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ipmi_get_my_address($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "ipmi_get_my_address:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, 15);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i5, 4)), $mul.ref(2, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, $i11);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const ipmi_set_my_LUN: ref;

axiom ipmi_set_my_LUN == $sub.ref(0, 370635);

procedure ipmi_set_my_LUN($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);



const ipmi_get_my_LUN: ref;

axiom ipmi_get_my_LUN == $sub.ref(0, 371667);

procedure ipmi_get_my_LUN($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ipmi_get_my_LUN($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "ipmi_get_my_LUN:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, 15);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i5, 4)), $mul.ref(3, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, $i11);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const ipmi_get_maintenance_mode: ref;

axiom ipmi_get_maintenance_mode == $sub.ref(0, 372699);

procedure ipmi_get_maintenance_mode($p0: ref) returns ($r: i32);



const ipmi_set_maintenance_mode: ref;

axiom ipmi_set_maintenance_mode == $sub.ref(0, 373731);

procedure ipmi_set_maintenance_mode($p0: ref, $i1: i32) returns ($r: i32);



const ipmi_set_gets_events: ref;

axiom ipmi_set_gets_events == $sub.ref(0, 374763);

procedure ipmi_set_gets_events($p0: ref, $i1: i1) returns ($r: i32);



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 375795);

procedure list_move_tail($p0: ref, $p1: ref);



const ipmi_register_for_cmd: ref;

axiom ipmi_register_for_cmd == $sub.ref(0, 376827);

procedure ipmi_register_for_cmd($p0: ref, $i1: i8, $i2: i8, $i3: i32) returns ($r: i32);



const is_cmd_rcvr_exclusive: ref;

axiom is_cmd_rcvr_exclusive == $sub.ref(0, 377859);

procedure is_cmd_rcvr_exclusive($p0: ref, $i1: i8, $i2: i8, $i3: i32) returns ($r: i32);



const ipmi_unregister_for_cmd: ref;

axiom ipmi_unregister_for_cmd == $sub.ref(0, 378891);

procedure ipmi_unregister_for_cmd($p0: ref, $i1: i8, $i2: i8, $i3: i32) returns ($r: i32);



const find_cmd_rcvr: ref;

axiom find_cmd_rcvr == $sub.ref(0, 379923);

procedure find_cmd_rcvr($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation find_cmd_rcvr($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p23: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 366} {:cexpr "find_cmd_rcvr:arg:netfn"} boogie_si_record_i8($i1);
    call {:si_unique_call 367} {:cexpr "find_cmd_rcvr:arg:cmd"} boogie_si_record_i8($i2);
    call {:si_unique_call 368} {:cexpr "find_cmd_rcvr:arg:chan"} boogie_si_record_i8($i3);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3912, 1)), $mul.ref(0, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p10);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p5);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __read_once_size($p11, $p13, 8);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i16 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 371} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p15);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3912, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i19, $i21);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p41 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $r := $p41;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p23 := $p15;
    goto $bb4;

  $bb4:
    call $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $p40, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $p23 := find_cmd_rcvr_loop_$bb4($i1, $i2, $i3, $p6, $p7, $i21, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $p40, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $p23);
    goto $bb4_last;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, $i27);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p44);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p6);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p7);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __read_once_size($p45, $p47, 8);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p7);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i50 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 374} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p49);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i21);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p49;
    goto $bb15_dummy;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, $i32);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb8;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i3);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32(1, $i36);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i35, $i37);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p40 := $p23;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb8;

  $bb11:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p41 := $p40;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;
}



const ipmi_request_settime: ref;

axiom ipmi_request_settime == $sub.ref(0, 380955);

procedure ipmi_request_settime($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $i5: i32, $i6: i32, $i7: i32) returns ($r: i32);



const check_addr: ref;

axiom check_addr == $sub.ref(0, 381987);

procedure check_addr($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const i_ipmi_request: ref;

axiom i_ipmi_request == $sub.ref(0, 383019);

procedure i_ipmi_request($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref, $p6: ref, $p7: ref, $i8: i32, $i9: i8, $i10: i8, $i11: i32, $i12: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.34, $M.35, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.69, $M.70;



implementation i_ipmi_request($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref, $p6: ref, $p7: ref, $i8: i32, $i9: i8, $i10: i8, $i11: i32, $i12: i32) returns ($r: i32)
{
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p19: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p28: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i8;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $i120: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i8;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i16;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i16;
  var $i147: i64;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i161: i16;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $i169: i64;
  var $p172: ref;
  var $i173: i8;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $p191: ref;
  var $i192: i16;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i8;
  var $i221: i32;
  var $i222: i8;
  var $i223: i32;
  var $i224: i8;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i64;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i8;
  var $i238: i32;
  var $i239: i32;
  var $i240: i64;
  var $i241: i64;
  var $i242: i64;
  var $i243: i64;
  var $i244: i8;
  var $i245: i32;
  var $i246: i8;
  var $i247: i32;
  var $i248: i8;
  var $i249: i32;
  var $i250: i8;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i32;
  var $i257: i64;
  var $p258: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i32;
  var $i264: i16;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i16;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i16;
  var $i278: i32;
  var $i279: i64;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i16;
  var $i288: i32;
  var $i289: i64;
  var $p292: ref;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i298: i1;
  var $i299: i32;
  var $p300: ref;
  var $i301: i16;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i8;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $i326: i8;
  var $i327: i32;
  var $i328: i8;
  var $i329: i32;
  var $i330: i8;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i64;
  var $i336: i64;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i8;
  var $i344: i32;
  var $i345: i32;
  var $i346: i64;
  var $i347: i64;
  var $i348: i64;
  var $i349: i64;
  var $i350: i8;
  var $i351: i32;
  var $i352: i8;
  var $i353: i32;
  var $i354: i8;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i32;
  var $i361: i64;
  var $p362: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i32;
  var $i368: i16;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $i35: i32;
  var $i23: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p13 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p15 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 379} {:cexpr "i_ipmi_request:arg:msgid"} boogie_si_record_i64($i3);
    call {:si_unique_call 380} {:cexpr "i_ipmi_request:arg:priority"} boogie_si_record_i32($i8);
    call {:si_unique_call 381} {:cexpr "i_ipmi_request:arg:source_address"} boogie_si_record_i8($i9);
    call {:si_unique_call 382} {:cexpr "i_ipmi_request:arg:source_lun"} boogie_si_record_i8($i10);
    call {:si_unique_call 383} {:cexpr "i_ipmi_request:arg:retries"} boogie_si_record_i32($i11);
    call {:si_unique_call 384} {:cexpr "i_ipmi_request:arg:retry_time_ms"} boogie_si_record_i32($i12);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p7);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p20 := ipmi_alloc_recv_msg();
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $p20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, $p5);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p6);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p29 := ipmi_alloc_smi_msg();
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} rcu_read_lock();
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $p0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(72, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p40, $i3);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 393} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p42, $p43, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 12);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i156 := is_ipmb_addr($p2);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32($i156);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i157 == 1);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i158 := is_ipmb_bcast_addr($p2);
    call {:si_unique_call 410} {:cexpr "tmp___4"} boogie_si_record_i32($i158);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i159 == 1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i268 := is_lan_addr($p2);
    call {:si_unique_call 412} {:cexpr "tmp___2"} boogie_si_record_i32($i268);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i269 == 1);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p372);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} atomic_inc($p373);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} rcu_read_unlock();
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ipmi_free_smi_msg($p28);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} ipmi_free_recv_msg($p19);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i23 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb100:
    assume $i269 == 1;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i271 := $load.i16($M.1, $p270);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i272 := $sext.i16.i32($i271);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i273 := $sgt.i32($i272, 15);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i277 := $load.i16($M.1, $p276);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i278 := $sext.i16.i32($i277);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i279 := $sext.i32.i64($i278);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i279, 4)), $mul.ref(0, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.1, $p282);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i284, 4);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i12, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    $i299 := $i12;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i301 := $load.i16($M.1, $p300);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i301);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i303 := $add.i32($i302, 12);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i304 := $sgt.i32($i303, 272);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p2);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p307, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.1, $p308);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i311 := $ugt.i32($i310, 3);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p315 := $bitcast.ref.ref($p314);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p307);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.1;
    cmdloc_dummy_var_22 := $M.1;
    call {:si_unique_call 435} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p315, $p316, 12, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_23;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.1, $p318);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i321 := $and.i32($i320, 1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i322 == 1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p334 := spinlock_check($p333);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i335 := _raw_spin_lock_irqsave($p334);
    call {:si_unique_call 440} {:cexpr "flags"} boogie_si_record_i64($i335);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i336 := $zext.i32.i64($i299);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i337 := intf_next_seq($p1, $p19, $i336, 4, 0, $p15, $p16);
    call {:si_unique_call 442} {:cexpr "rv"} boogie_si_record_i32($i337);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i338 := $ne.i32($i337, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($p341, $mul.ref(13, 4));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} atomic_inc($p342);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i343 := $load.i8($M.34, $p15);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i344 := $zext.i8.i32($i343);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i345 := $shl.i32($i344, 26);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i346 := $sext.i32.i64($i345);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i347 := $load.i64($M.35, $p16);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i348 := $and.i64($i347, 67108863);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i349 := $or.i64($i346, $i348);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i350 := $load.i8($M.34, $p15);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i351 := $zext.i8.i32($i350);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i32.i8($i351);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i353 := $zext.i8.i32($i10);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i354 := $trunc.i32.i8($i353);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} format_lan_msg($p28, $p4, $p307, $i349, $i352, $i354);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p356 := $bitcast.ref.ref($p355);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.1, $p359);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i361 := $sext.i32.i64($i360);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.1;
    cmdloc_dummy_var_25 := $M.1;
    call {:si_unique_call 446} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p356, $p358, $i361, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_26;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p365, $p362);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.1, $p366);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i368 := $trunc.i32.i16($i367);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p370, $i368);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} spin_unlock_irqrestore($p371, $i335);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.1, $p374);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} smi_send($p1, $p375, $p28, $i8);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} rcu_read_unlock();
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb123:
    assume $i338 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} spin_unlock_irqrestore($p339, $i335);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i35 := $i337;
    goto $bb16;

  $bb120:
    assume $i322 == 1;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p324 := $bitcast.ref.ref($p323);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($p324, $mul.ref(17, 4));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} atomic_inc($p325);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i64.i8($i3);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i327);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i10);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i330 := $trunc.i32.i8($i329);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} format_lan_msg($p28, $p4, $p307, $i3, $i328, $i330);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p332, $p19);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume $i311 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} atomic_inc($p313);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb114:
    assume $i304 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} atomic_inc($p306);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 90);
    goto $bb16;

  $bb111:
    assume $i298 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i299 := 1000;
    goto $bb113;

  $bb105:
    assume $i285 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i287 := $load.i16($M.1, $p286);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i288 := $sext.i16.i32($i287);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i289 := $sext.i32.i64($i288);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i289, 4)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.1, $p292);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 5);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb107;

  $bb108:
    assume $i295 == 1;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p296);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} atomic_inc($p297);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb102:
    assume $i273 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p275 := $bitcast.ref.ref($p274);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} atomic_inc($p275);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb67:
    assume $i159 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i161 := $load.i16($M.1, $p160);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i162 := $sext.i16.i32($i161);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i163 := $sgt.i32($i162, 15);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.1, $p166);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i168 := $sext.i16.i32($i167);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i168);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i169, 4)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.1, $p172);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 1);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i11, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    $i183 := $i11;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.1, $p184);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 65);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i188 := 0;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i12, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i190 := $i12;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i192 := $load.i16($M.1, $p191);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i192);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i193, 10);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i194, $i188);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i196 := $sgt.i32($i195, 272);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p2);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.1, $p200);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i203 := $ugt.i32($i202, 3);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p199);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 417} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p207, $p208, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.1, $p210);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i211);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i213 := $and.i32($i212, 1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i214 == 1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p228 := spinlock_check($p227);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i229 := _raw_spin_lock_irqsave($p228);
    call {:si_unique_call 422} {:cexpr "flags"} boogie_si_record_i64($i229);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i230 := $zext.i32.i64($i190);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i231 := intf_next_seq($p1, $p19, $i230, $i183, $i188, $p13, $p14);
    call {:si_unique_call 424} {:cexpr "rv"} boogie_si_record_i32($i231);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p235, $mul.ref(4, 4));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} atomic_inc($p236);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.34, $p13);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i239 := $shl.i32($i238, 26);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i239);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i241 := $load.i64($M.35, $p14);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i242 := $and.i64($i241, 67108863);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i243 := $or.i64($i240, $i242);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.34, $p13);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i8($i245);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i9);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i8($i247);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i10);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i32.i8($i249);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} format_ipmb_msg($p28, $p4, $p199, $i243, $i246, $i188, $i248, $i250);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.1, $p255);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i257 := $sext.i32.i64($i256);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.1;
    cmdloc_dummy_var_19 := $M.1;
    call {:si_unique_call 428} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p252, $p254, $i257, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_20;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p261, $p258);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.1, $p262);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i32.i16($i263);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p266, $i264);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} spin_unlock_irqrestore($p267, $i229);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i232 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} spin_unlock_irqrestore($p233, $i229);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i35 := $i231;
    goto $bb16;

  $bb93:
    assume $i214 == 1;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p216, $mul.ref(9, 4));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} atomic_inc($p217);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i64.i8($i3);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i8($i219);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i9);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i222 := $trunc.i32.i8($i221);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i10);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} format_ipmb_msg($p28, $p4, $p199, $i3, $i220, $i188, $i222, $i224);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p226, $p19);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i203 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} atomic_inc($p205);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb87:
    assume $i196 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} atomic_inc($p198);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 90);
    goto $bb16;

  $bb84:
    assume $i189 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i190 := 1000;
    goto $bb86;

  $bb81:
    assume $i186 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p187, 1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i188 := 1;
    goto $bb83;

  $bb75:
    assume $i178 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.1, $p179);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 65);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := 4;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i183 := $i182;
    goto $bb80;

  $bb77:
    assume $i181 == 1;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i182 := 0;
    goto $bb79;

  $bb72:
    assume $i175 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} atomic_inc($p177);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb69:
    assume $i163 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} atomic_inc($p165);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb64:
    assume $i157 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i55, 3);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p19, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p52);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 397} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p60, $p61, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p62);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 6);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 6);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.1, $p92);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 8);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.1, $p108);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, 2);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i112 := $sgt.i32($i111, 272);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.1, $p115);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i118 := $shl.i32($i117, 2);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i120 := $sext.i8.i32($i119);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i123 := $sext.i8.i32($i122);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 3);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i120, $i124);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i125);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p128, $i126);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.1, $p129);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p132, $i130);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p133, $i3);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p135, $p19);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i137 := $load.i16($M.1, $p136);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.1, $p148);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i151 := $add.i32($i150, 2);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p152, $i151);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref(1, 4));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} atomic_inc($p155);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i139 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p28, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p141, $mul.ref(2, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p143);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.1, $p145);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i64($i146);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 405} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p142, $p144, $i147, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i112 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} atomic_inc($p114);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 90);
    goto $bb16;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4056, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p97 := spinlock_check($p96);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i98 := _raw_spin_lock_irqsave($p97);
    call {:si_unique_call 401} {:cexpr "flags"} boogie_si_record_i64($i98);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4048, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p99, 30000);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4040, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.1, $p100);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4056, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} spin_unlock_irqrestore($p107, $i98);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4044, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.1, $p103);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i105 == 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4044, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, 1);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} maintenance_mode_update($p1);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb52;

  $bb40:
    assume $i83 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i87 == 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 3);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb42;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb44;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 52);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i69 == 1);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 51);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 53);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb31;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} atomic_inc($p79);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb33;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} atomic_inc($p58);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb16;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} kref_get($p39);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 19);
    goto $bb16;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} ipmi_free_recv_msg($p19);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb6;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p28 := $p6;
    goto $bb10;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p19 := $p7;
    goto $bb3;
}



const ipmi_alloc_recv_msg: ref;

axiom ipmi_alloc_recv_msg == $sub.ref(0, 384051);

procedure ipmi_alloc_recv_msg() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_alloc_recv_msg() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p0 := kmalloc(384, 32);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $0.ref);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, free_recv_msg);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} atomic_inc(recv_msg_inuse_count);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const format_ipmb_msg: ref;

axiom format_ipmb_msg == $sub.ref(0, 385083);

procedure format_ipmb_msg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i8, $i5: i32, $i6: i8, $i7: i8);
  free requires assertsPassed;
  modifies $M.1;



implementation format_ipmb_msg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i8, $i5: i32, $i6: i8, $i7: i8)
{
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i8;
  var $p16: ref;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i64;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "format_ipmb_msg:arg:msgid"} boogie_si_record_i64($i3);
    call {:si_unique_call 451} {:cexpr "format_ipmb_msg:arg:ipmb_seq"} boogie_si_record_i8($i4);
    call {:si_unique_call 452} {:cexpr "format_ipmb_msg:arg:broadcast"} boogie_si_record_i32($i5);
    call {:si_unique_call 453} {:cexpr "format_ipmb_msg:arg:source_address"} boogie_si_record_i8($i6);
    call {:si_unique_call 454} {:cexpr "format_ipmb_msg:arg:source_lun"} boogie_si_record_i8($i7);
    call {:si_unique_call 455} {:cexpr "format_ipmb_msg:arg:i"} boogie_si_record_i32($i5);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 24);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 52);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i16.i8($i13);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $i14);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i5, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i5, 3);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i23, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, $i21);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32($i28, 2);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 3);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i31, $i35);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i5, 4);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i39, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, $i37);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i5);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 3);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p43, $mul.ref($i45, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i47 := ipmb_checksum($p46, 2);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i5, 5);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i49, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i47);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i5, 6);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i53, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, $i6);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i4);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32($i56, 2);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i59 := $sext.i8.i32($i58);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i60 := $sext.i8.i32($i7);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i59, $i60);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i5, 7);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i64, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p66, $i62);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i5, 8);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i70, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p72, $i68);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.1, $p73);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.1, $p87);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 9);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p91, $i90);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i5);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 6);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p93, $mul.ref($i95, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $sub.i32(0, 6));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i100 := ipmb_checksum($p96, $i99);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i102, $i5);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i104, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, $i100);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.1, $p107);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i5, 1);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i108, $i109);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p111, $i110);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p112, $i3);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i76 == 1;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i5);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 9);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p78, $mul.ref($i80, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.1, $p84);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i64($i85);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.1;
    cmdloc_dummy_var_28 := $M.1;
    call {:si_unique_call 457} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p81, $p83, $i86, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_29;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(3, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const intf_next_seq: ref;

axiom intf_next_seq == $sub.ref(0, 386115);

procedure intf_next_seq($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.34, $M.35, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation intf_next_seq($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i15: i32;
  var $i32: i32;
  var $i14: i32;
  var $i25: i32;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $p44: ref;
  var $i45: i64;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $i53: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $i66: i8;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $i73: i8;
  var $i74: i64;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "intf_next_seq:arg:timeout"} boogie_si_record_i64($i2);
    call {:si_unique_call 460} {:cexpr "intf_next_seq:arg:retries"} boogie_si_record_i32($i3);
    call {:si_unique_call 461} {:cexpr "intf_next_seq:arg:broadcast"} boogie_si_record_i32($i4);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3496, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    call {:si_unique_call 462} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 63);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3496, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, $i12);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i14 := $i8;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i25);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i33, 48));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i37, 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 11);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $r := $i94;
    return;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i25);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i41, 48)), $mul.ref(40, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, $p1);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i25);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i45, 48)), $mul.ref(8, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p48, 60000);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i25);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i49, 48)), $mul.ref(16, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p52, $i2);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i25);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i53, 48)), $mul.ref(24, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, $i3);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i4);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i25);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i58, 48));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i57, 1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i64 := $shl.i8($i63, 1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i65 := $and.i8($i62, $sub.i8(0, 3));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i66 := $or.i8($i65, $i64);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, $i66);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i25);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i67, 48));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i72 := $and.i8($i71, $sub.i8(0, 2));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i73 := $or.i8($i72, 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p70, $i73);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i25);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i74, 48)), $mul.ref(32, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.1, $p77);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 1);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 4194303);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i25);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i81, 48)), $mul.ref(32, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p84, $i80);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i25);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p5, $i85);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i25);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i86, 48)), $mul.ref(32, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.1, $p89);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p6, $i90);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i25, 1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 63);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3496, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p93, $i92);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} need_waiter($p0);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i94 := 0;
    goto $bb15;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i15 := $i8;
    goto $bb4;

  $bb4:
    call $i16, $p18, $p19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i15, $i32 := intf_next_seq_loop_$bb4($p0, $p11, $i16, $p18, $p19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i15, $i32);
    goto $bb4_last;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i16, 48));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, 1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i24 := $i15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i15, 1);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 63);
    call {:si_unique_call 463} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 63);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p11);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i29, $i30);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i32 := $i27;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i14 := $i32;
    goto $bb3;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i27;
    goto $bb10_dummy;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;
}



const format_lan_msg: ref;

axiom format_lan_msg == $sub.ref(0, 387147);

procedure format_lan_msg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i8, $i5: i8);
  free requires assertsPassed;
  modifies $M.1;



implementation format_lan_msg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i8, $i5: i8)
{
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i64;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} {:cexpr "format_lan_msg:arg:msgid"} boogie_si_record_i64($i3);
    call {:si_unique_call 466} {:cexpr "format_lan_msg:arg:ipmb_seq"} boogie_si_record_i8($i4);
    call {:si_unique_call 467} {:cexpr "format_lan_msg:arg:source_lun"} boogie_si_record_i8($i5);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 24);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 52);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.1, $p10);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i16.i8($i11);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i12);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(3, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i16);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(4, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, $i20);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 2);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 3);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i28, $i32);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(5, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, $i34);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i40 := ipmb_checksum($p39, 2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(6, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, $i40);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(7, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, $i44);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i4);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 2);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i50 := $sext.i8.i32($i49);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i5);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i50, $i51);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(8, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, $i53);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(9, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, $i57);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.1, $p72);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 10);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p76, $i75);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(7, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, $sub.i32(0, 7));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i83 := ipmb_checksum($p79, $i82);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.1, $p84);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref($i86, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, $i83);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 1);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p92, $i91);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p93, $i3);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i63 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(10, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.1, $p69);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i64($i70);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.1;
    cmdloc_dummy_var_31 := $M.1;
    call {:si_unique_call 469} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p66, $p68, $i71, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_32;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ipmb_checksum: ref;

axiom ipmb_checksum == $sub.ref(0, 388179);

procedure ipmb_checksum($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation ipmb_checksum($p0: ref, $i1: i32) returns ($r: i8)
{
  var $i2: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i8;
  var $i15: i8;
  var $i3: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "ipmb_checksum:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i3);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, $i16);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p4, $i5, $i6 := $p0, $i1, 0;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $p4, $i5, $i6, $i15 := ipmb_checksum_loop_$bb4($i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $p4, $i5, $i6, $i15);
    goto $bb4_last;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p4);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i6);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 472} {:cexpr "csum"} boogie_si_record_i8($i11);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i5, 1);
    call {:si_unique_call 473} {:cexpr "size"} boogie_si_record_i32($i12);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p4, $mul.ref(1, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i12, 0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i3 := $i15;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p4, $i5, $i6 := $p13, $i12, $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3383;
}



const free_recv_msg: ref;

axiom free_recv_msg == $sub.ref(0, 389211);

procedure free_recv_msg($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation free_recv_msg($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} atomic_dec(recv_msg_inuse_count);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} kfree($p1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_request_supply_msgs: ref;

axiom ipmi_request_supply_msgs == $sub.ref(0, 390243);

procedure ipmi_request_supply_msgs($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $p5: ref, $p6: ref, $i7: i32) returns ($r: i32);



const ipmi_smi_add_proc_entry: ref;

axiom ipmi_smi_add_proc_entry == $sub.ref(0, 391275);

procedure ipmi_smi_add_proc_entry($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 392307);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 393339);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);



const ipmi_poll_interface: ref;

axiom ipmi_poll_interface == $sub.ref(0, 394371);

procedure ipmi_poll_interface($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.42, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_poll_interface($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} ipmi_poll($p2);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_poll: ref;

axiom ipmi_poll == $sub.ref(0, 395403);

procedure ipmi_poll($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.42, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_poll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} handle_new_recv_msgs($p0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 477} devirtbounce.9($p10, $p12);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const handle_new_recv_msgs: ref;

axiom handle_new_recv_msgs == $sub.ref(0, 396435);

procedure handle_new_recv_msgs($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.42, $M.34, $M.35, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_new_recv_msgs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p32: ref;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i16: i64;
  var $i36: i64;
  var $i15: i64;
  var $i31: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p57: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    call {:si_unique_call 483} {:cexpr "run_to_completion"} boogie_si_record_i32($i6);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3576, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i13 := list_empty($p12);
    call {:si_unique_call 488} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i31 := $i15;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i6, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3592, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i40 := atomic_add_unless($p39, $sub.i32(0, 1), 0);
    call {:si_unique_call 501} {:cexpr "tmp___4"} boogie_si_record_i32($i40);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i41 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} rcu_read_lock();
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p44);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p1);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} __read_once_size($p45, $p47, 8);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.36, $p48);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i50 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 505} {:cexpr "tmp___2"} boogie_si_record_i32($i50);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p49);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(32, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i53, $i55);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} rcu_read_unlock();
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb30:
    assume $i56 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p57 := $p49;
    goto $bb33;

  $bb33:
    call $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $p68, $p69, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $p79, $p80, $i81, $i82, $p57 := handle_new_recv_msgs_loop_$bb33($p3, $p4, $i55, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $p68, $p69, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $p79, $p80, $i81, $i82, $p57);
    goto $bb33_last;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.37, $p58);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.38, $p60);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.40, $p71);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p72);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p3);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p4);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __read_once_size($p73, $p75, 8);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p4);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.41, $p76);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i78 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 509} {:cexpr "tmp___3"} boogie_si_record_i32($i78);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p77);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, $i55);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i82 == 1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb38:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p57 := $p77;
    goto $bb38_dummy;

  $bb35:
    assume $i63 == 1;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p57, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.37, $p64);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.38, $p66);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p57, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.39, $p68);
    call {:si_unique_call 506} devirtbounce.9($p67, $p69);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} spin_unlock_irqrestore($p38, $i31);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i16 := $i11;
    goto $bb7;

  $bb7:
    call $p18, $p19, $p20, $i21, $p22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $p32, $i33, $i34, $i35, $i16, $i36 := handle_new_recv_msgs_loop_$bb7($p0, $i6, $p12, $p18, $p19, $p20, $i21, $p22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $p32, $i33, $i34, $i35, $i16, $i36);
    goto $bb7_last;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3576, 1)), $mul.ref(0, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i6, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i23 := handle_one_recv_msg($p0, $p20);
    call {:si_unique_call 491} {:cexpr "rv"} boogie_si_record_i32($i23);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i6, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i16;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i23, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} list_del($p32);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i23, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i34 := list_empty($p12);
    call {:si_unique_call 498} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i36 := $i28;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i15 := $i36;
    goto $bb6;

  $bb22:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb22_dummy;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ipmi_free_smi_msg($p20);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb17;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p26 := spinlock_check($p25);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i27 := _raw_spin_lock_irqsave($p26);
    call {:si_unique_call 494} {:cexpr "flags"} boogie_si_record_i64($i27);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb14;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} spin_unlock_irqrestore($p22, $i16);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p9 := spinlock_check($p8);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 486} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  $bb22_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;
}



const handle_one_recv_msg: ref;

axiom handle_one_recv_msg == $sub.ref(0, 397467);

procedure handle_one_recv_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.42, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_one_recv_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p25: ref;
  var $p27: ref;
  var $i28: i8;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $p82: ref;
  var $p84: ref;
  var $i85: i8;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $i138: i8;
  var $p140: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i1;
  var $p148: ref;
  var $i149: i8;
  var $i150: i32;
  var $i151: i1;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i64;
  var $p164: ref;
  var $i165: i8;
  var $i166: i32;
  var $i167: i1;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $p172: ref;
  var $i173: i8;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i179: i32;
  var $i178: i32;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i189: i32;
  var $i188: i32;
  var $i190: i64;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i1;
  var $i197: i64;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i180: i32;
  var $p208: ref;
  var $i209: i8;
  var $i210: i32;
  var $i211: i1;
  var $p213: ref;
  var $i214: i8;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i219: i32;
  var $i218: i32;
  var $i206: i32;
  var $i141: i32;
  var $i111: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i38 := $ashr.i32($i37, 2);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i43 := $ashr.i32($i42, 2);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 1);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i38, $i44);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i45 == 1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i49, $i53);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.1, $p92);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 28);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.1, $p143);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 28);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.1, $p208);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 28);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i219 := handle_bmc_rsp($p0, $p1);
    call {:si_unique_call 527} {:cexpr "requeue"} boogie_si_record_i32($i219);
    assume {:verifier.code 0} true;
    $i218 := $i219;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i206 := $i218;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i141 := $i206;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i111 := $i141;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $r := $i111;
    return;

  $bb72:
    assume $i211 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.1, $p213);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 53);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb74;

  $bb75:
    assume $i216 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i217 := handle_read_event_rsp($p0, $p1);
    call {:si_unique_call 529} {:cexpr "requeue"} boogie_si_record_i32($i217);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i218 := $i217;
    goto $bb77;

  $bb34:
    assume $i146 == 1;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.1, $p148);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 51);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb36;

  $bb37:
    assume $i151 == 1;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.1, $p153);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 15);
    call {:si_unique_call 515} {:cexpr "chan"} boogie_si_record_i32($i156);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i157 := $sgt.i32($i156, 15);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.1, $p158);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i160 := $sle.i32($i159, 15);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64($i156);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i161, 4)), $mul.ref(0, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.1, $p164);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i166, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i166, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i166, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb50, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i156);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i190, 4)), $mul.ref(0, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.1, $p193);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i196 := $ugt.i32($i195, 95);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i205 := 0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i180 := $i205;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i206 := $i180;
    goto $bb71;

  $bb64:
    assume $i196 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i156);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i197, 4)), $mul.ref(0, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.1, $p200);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i202 := $sext.i8.i32($i201);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i203 := $sge.i32($i202, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb66;

  $bb67:
    assume $i203 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i204 := handle_oem_get_msg_cmd($p0, $p1);
    call {:si_unique_call 525} {:cexpr "requeue"} boogie_si_record_i32($i204);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i205 := $i204;
    goto $bb69;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.1, $p182);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 4);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i186 == 1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i189 := handle_lan_get_msg_cmd($p0, $p1);
    call {:si_unique_call 523} {:cexpr "requeue"} boogie_si_record_i32($i189);
    assume {:verifier.code 0} true;
    $i188 := $i189;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i180 := $i188;
    goto $bb59;

  $bb60:
    assume $i186 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i187 := handle_lan_get_msg_rsp($p0, $p1);
    call {:si_unique_call 521} {:cexpr "requeue"} boogie_si_record_i32($i187);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i188 := $i187;
    goto $bb62;

  $bb48:
    assume $i168 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i166, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb53;

  $bb54:
    assume $i170 == 1;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.1, $p172);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 4);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i176 == 1);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i179 := handle_ipmb_get_msg_cmd($p0, $p1);
    call {:si_unique_call 519} {:cexpr "requeue"} boogie_si_record_i32($i179);
    assume {:verifier.code 0} true;
    $i178 := $i179;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i180 := $i178;
    goto $bb59;

  $bb56:
    assume $i176 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i177 := handle_ipmb_get_msg_rsp($p0, $p1);
    call {:si_unique_call 517} {:cexpr "requeue"} boogie_si_record_i32($i177);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i178 := $i177;
    goto $bb58;

  $bb42:
    assume $i160 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb19;

  $bb39:
    assume $i157 == 1;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb19;

  $bb10:
    assume $i95 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 52);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb12;

  $bb13:
    assume $i100 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.1, $p101);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb12;

  $bb15:
    assume $i104 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.1, $p105);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.1, $p108);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i110 := $sle.i32($i109, 1);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 15);
    call {:si_unique_call 513} {:cexpr "chan"} boogie_si_record_i32($i116);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i117 := $sgt.i32($i116, 15);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p107);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i122, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i123 == 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.1, $p126);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb19;

  $bb30:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p129, 4);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p133, $p130);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p135, 1);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.1, $p137);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 384)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p140, $i138);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} deliver_response($p107);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i141 := 0;
    goto $bb33;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb28;

  $bb24:
    assume $i119 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb19;

  $bb21:
    assume $i117 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb19;

  $bb17:
    assume $i110 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb19;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i59 := $ashr.i32($i58, 2);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p62);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i69 := $ashr.i32($i68, 2);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.1, $p71);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_73 := printk.ref.i32.i32.i32.i32(.str.26, $i60, $i64, $i69, $i73);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.1, $p76);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, 4);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p82, $i80);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p87, $i85);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p89, $sub.i8(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p90, 3);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i8, 2);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_72 := printk.ref.i32.i32.i32(.str.25, $i10, $i14, $i16);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 4);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, $i23);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i28);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $sub.i8(0, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, 3);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 398499);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 531} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 533} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 399531);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 535} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i3 := atomic_read($p0);
    call {:si_unique_call 537} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 539} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 541} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 543} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 545} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 400563);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 547} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 548} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 549} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 550} $i4 := devirtbounce.17(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 551} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const handle_ipmb_get_msg_rsp: ref;

axiom handle_ipmb_get_msg_rsp == $sub.ref(0, 401595);

procedure handle_ipmb_get_msg_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.42, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_ipmb_get_msg_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i16;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 10);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $i18);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i16($i22);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i23);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 15);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p27, $i26);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(7, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 3);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, $i33);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(7, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i39 := $ashr.i32($i38, 2);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 15);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(8, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i56 := $ashr.i32($i55, 2);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 254);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p2);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i60 := intf_find_seq($p0, $i40, $i46, $i51, $i58, $p59, $p3);
    call {:si_unique_call 556} {:cexpr "tmp"} boogie_si_record_i32($i60);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.42, $p3);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(9, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, $sub.i32(0, 9));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.1;
    cmdloc_dummy_var_34 := $M.1;
    call {:si_unique_call 558} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p67, $p70, $i74, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_35;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.1, $p76);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i79 := $ashr.i32($i78, 2);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.42, $p3);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p81, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p83, $i80);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.42, $p3);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.42, $p3);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p87, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p89, $p85);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 65526);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.42, $p3);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p98, $i95);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.42, $p3);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p100, 1);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(10, 4));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} atomic_inc($p103);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.42, $p3);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} deliver_response($p104);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i61 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(12, 4));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} atomic_inc($p64);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(11, 4));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} atomic_inc($p9);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const handle_ipmb_get_msg_cmd: ref;

axiom handle_ipmb_get_msg_cmd == $sub.ref(0, 402627);

procedure handle_ipmb_get_msg_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.56, $M.59, $M.34, $M.35, $M.42, $M.69, $M.70, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation handle_ipmb_get_msg_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $i22: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i8;
  var $p55: ref;
  var $p57: ref;
  var $i58: i8;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i8;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $p80: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i64;
  var $p89: ref;
  var $i90: i8;
  var $p92: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $p106: ref;
  var $p108: ref;
  var $i109: i8;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $i142: i8;
  var $p143: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i8;
  var $p150: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i16;
  var $i155: i32;
  var $i156: i32;
  var $i157: i16;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i32;
  var $i166: i64;
  var $p167: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i8;
  var $p175: ref;
  var $p177: ref;
  var $i178: i8;
  var $p180: ref;
  var $p181: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i16;
  var $i188: i32;
  var $i189: i32;
  var $i190: i16;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i201: i64;
  var $i136: i32;
  var $i127: i32;
  var $i8: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 9);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i17, 2);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 562} {:cexpr "netfn"} boogie_si_record_i8($i19);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(8, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    call {:si_unique_call 563} {:cexpr "cmd"} boogie_si_record_i8($i22);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 15);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 564} {:cexpr "chan"} boogie_si_record_i8($i28);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} rcu_read_lock();
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i19);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i22);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i28);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p35 := find_cmd_rcvr($p0, $i30, $i32, $i34);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p41 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} rcu_read_unlock();
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(21, 4));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} atomic_inc($p130);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p131 := ipmi_alloc_recv_msg();
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i133 == 1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p139, 1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.1, $p141);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p138, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p143, $i142);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(7, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.1, $p145);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 3);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p138, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p150, $i149);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.1, $p152);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i16($i153);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i155 := $sext.i16.i32($i154);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 15);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i16($i156);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p138, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p158, $i157);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p159, $p41);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p160, 3);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(7, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.1, $p162);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i165 := $ashr.i32($i164, 2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i166 := $sext.i32.i64($i165);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(72, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p167, $i166);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.1, $p169);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i172 := $ashr.i32($i171, 2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i8($i172);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p175, $i173);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(8, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.1, $p177);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p180, $i178);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p184, $p181);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.1, $p185);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i16($i186);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i187);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i188, 65526);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i189);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p192, $i190);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p131, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p196, $mul.ref(9, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.1, $p198);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i199, $sub.i32(0, 10));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i200);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.1;
    cmdloc_dummy_var_37 := $M.1;
    call {:si_unique_call 578} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p194, $p197, $i201, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_38;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} deliver_response($p131);
    assume {:verifier.code 0} true;
    $i136 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i127 := $i136;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i8 := $i127;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb17:
    assume $i133 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p41, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_74 := kref_put($p134, free_user);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i136 := 1;
    goto $bb19;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(23, 4));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} atomic_inc($p46);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, 24);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, 52);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, $i53);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(3, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p60, $i58);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i19);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 2);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(7, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i69 := $sext.i8.i32($i68);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 3);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i65, $i70);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(4, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p74, $i72);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(3, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i78 := ipmb_checksum($p77, 2);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(5, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p80, $i78);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.1, $p82);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 15);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i86, 4)), $mul.ref(2, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(6, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p92, $i90);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(7, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.1, $p94);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i96 := $sext.i8.i32($i95);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, $sub.i32(0, 4));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.1, $p99);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i101 := $sext.i8.i32($i100);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 3);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i97, $i102);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(7, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, $i104);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(8, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.1, $p108);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(8, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p111, $i109);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(9, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p113, $sub.i8(0, 63));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(6, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i117 := ipmb_checksum($p116, 4);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(10, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p119, $i117);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p120, 11);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} rcu_read_lock();
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i122);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i123 == 1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} smi_send($p0, $p125, $p1, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32(0, 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} rcu_read_unlock();
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb16;

  $bb13:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i126 := 0;
    goto $bb15;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.43, $p38);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} kref_get($p40);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p41 := $p39;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(22, 4));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} atomic_inc($p7);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const handle_lan_get_msg_rsp: ref;

axiom handle_lan_get_msg_rsp == $sub.ref(0, 403659);

procedure handle_lan_get_msg_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.42, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_lan_get_msg_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i64;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 12);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 4);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $i18);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(8, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i22);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(5, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i26);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i16($i30);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i32 := $sext.i16.i32($i31);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 15);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p35, $i34);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i40 := $ashr.i32($i39, 4);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, $i41);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(9, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 3);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p49, $i48);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(9, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i54 := $ashr.i32($i53, 2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 15);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(10, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i71 := $ashr.i32($i70, 2);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 254);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p2);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i75 := intf_find_seq($p0, $i55, $i61, $i66, $i73, $p74, $p3);
    call {:si_unique_call 584} {:cexpr "tmp"} boogie_si_record_i32($i75);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.42, $p3);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(11, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p86);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, $sub.i32(0, 11));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.1;
    cmdloc_dummy_var_40 := $M.1;
    call {:si_unique_call 586} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p82, $p85, $i89, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_41;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.1, $p91);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i94 := $ashr.i32($i93, 2);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.42, $p3);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p98, $i95);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.42, $p3);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.42, $p3);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p102, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, $p100);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p105);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 65524);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.42, $p3);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p111, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p113, $i110);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.42, $p3);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p115, 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p117, $mul.ref(18, 4));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} atomic_inc($p118);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.42, $p3);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} deliver_response($p119);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i76 == 1;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(20, 4));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} atomic_inc($p79);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(19, 4));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} atomic_inc($p9);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const handle_lan_get_msg_cmd: ref;

axiom handle_lan_get_msg_cmd == $sub.ref(0, 404691);

procedure handle_lan_get_msg_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.56, $M.59, $M.34, $M.35, $M.42, $M.69, $M.70, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation handle_lan_get_msg_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $i22: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i8;
  var $p63: ref;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $p71: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p86: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i64;
  var $p102: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $p110: ref;
  var $p112: ref;
  var $i113: i8;
  var $p115: ref;
  var $p116: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i16;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i64;
  var $i56: i32;
  var $i47: i32;
  var $i8: i32;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 11);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i17, 2);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 590} {:cexpr "netfn"} boogie_si_record_i8($i19);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(10, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    call {:si_unique_call 591} {:cexpr "cmd"} boogie_si_record_i8($i22);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 15);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 592} {:cexpr "chan"} boogie_si_record_i8($i28);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} rcu_read_lock();
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i19);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i22);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i28);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p35 := find_cmd_rcvr($p0, $i30, $i32, $i34);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p41 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} rcu_read_unlock();
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(21, 4));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} atomic_inc($p50);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p51 := ipmi_alloc_recv_msg();
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 4);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p63, $i62);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(8, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, $i66);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(5, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p71, $i70);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(9, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.1, $p73);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 3);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p78, $i77);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i16($i81);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i83 := $sext.i16.i32($i82);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 15);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p86, $i85);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i91 := $ashr.i32($i90, 4);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p58, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, $i92);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p94, $p41);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p95, 3);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(9, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i100 := $ashr.i32($i99, 2);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(72, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p102, $i101);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.1, $p104);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i107 := $ashr.i32($i106, 2);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p110, $i108);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(10, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p115, $i113);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p119, $p116);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i121);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, 65524);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p127, $i125);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p131, $mul.ref(11, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.1, $p133);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, $sub.i32(0, 12));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i135);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.1;
    cmdloc_dummy_var_43 := $M.1;
    call {:si_unique_call 601} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p129, $p132, $i136, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_44;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} deliver_response($p51);
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i47 := $i56;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i8 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_75 := kref_put($p54, free_user);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb16;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(23, 4));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} atomic_inc($p46);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb13;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} kref_get($p40);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p41 := $p39;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(22, 4));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} atomic_inc($p7);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const handle_oem_get_msg_cmd: ref;

axiom handle_oem_get_msg_cmd == $sub.ref(0, 405723);

procedure handle_oem_get_msg_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.56, $M.59, $M.34, $M.35, $M.42, $M.69, $M.70, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation handle_oem_get_msg_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $i22: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p78: ref;
  var $p80: ref;
  var $i81: i8;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i16;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $i56: i32;
  var $i47: i32;
  var $i8: i32;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 3);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i17, 2);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 604} {:cexpr "netfn"} boogie_si_record_i8($i19);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    call {:si_unique_call 605} {:cexpr "cmd"} boogie_si_record_i8($i22);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 15);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 606} {:cexpr "chan"} boogie_si_record_i8($i28);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} rcu_read_lock();
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i19);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i22);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i28);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p35 := find_cmd_rcvr($p0, $i30, $i32, $i34);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p41 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} rcu_read_unlock();
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(21, 4));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} atomic_inc($p50);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p51 := ipmi_alloc_recv_msg();
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 12);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p60, 15);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p62);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 3);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p58, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, $i66);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p68, $p41);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, $0.ref);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 5);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i75 := $ashr.i32($i74, 2);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p78, $i76);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p83, $i81);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p87, $p84);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.1, $p88);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 65532);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p95, $i93);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p51, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(4, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i102, $sub.i32(0, 4));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.1;
    cmdloc_dummy_var_46 := $M.1;
    call {:si_unique_call 615} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p97, $p100, $i104, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_47;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} deliver_response($p51);
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i47 := $i56;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i8 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_76 := kref_put($p54, free_user);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb16;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(23, 4));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} atomic_inc($p46);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb13;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} kref_get($p40);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p41 := $p39;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(22, 4));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} atomic_inc($p7);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const handle_read_event_rsp: ref;

axiom handle_read_event_rsp == $sub.ref(0, 406755);

procedure handle_read_event_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.34, $M.35, $M.42, $M.69, $M.70, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation handle_read_event_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p61: ref;
  var $p62: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i46: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $i41: i32;
  var $p42: ref;
  var $i89: i32;
  var $i40: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p102: ref;
  var $p103: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $i71: i32;
  var $p130: ref;
  var $i13: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 18);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} INIT_LIST_HEAD($p2);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3928, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p20 := spinlock_check($p19);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 626} {:cexpr "flags"} boogie_si_record_i64($i21);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(25, 4));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} atomic_inc($p24);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} rcu_read_lock();
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p27);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __read_once_size($p28, $p30, 8);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.44, $p31);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i33 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 631} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(32, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i36, $i38);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i40 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} rcu_read_unlock();
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i40, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4016, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i114 := $ule.i32($i113, 24);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i114 == 1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4021, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.1, $p124);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i126 := $sext.i8.i32($i125);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3928, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} spin_unlock_irqrestore($p130, $i21);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i13 := $i71;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb49:
    assume $i127 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_77 := printk.ref(.str.27);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4021, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p129, 1);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume $i114 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p115 := ipmi_alloc_recv_msg();
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i116, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} copy_event_into_recv_msg($p115, $p1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p115, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4000, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} list_add_tail($p118, $p119);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4016, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, 1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4016, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p123, $i122);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i117 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i71 := 1;
    goto $bb27;

  $bb32:
    assume $i90 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p93, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p2);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i99, $i100);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i101 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p102, $p103 := $p92, $p96;
    goto $bb37;

  $bb37:
    call $p104, $p106, $p107, $p109, $i110, $i111, $p102, $p103 := handle_read_event_rsp_loop_$bb37($i100, $p104, $p106, $p107, $p109, $i110, $i111, $p102, $p103);
    goto $bb37_last;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p102, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} list_del($p104);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} deliver_response($p102);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p103, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p103, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, $i100);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i111 == 1);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $p102, $p103 := $p103, $p107;
    goto $bb39_dummy;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i41, $p42 := 0, $p32;
    goto $bb11;

  $bb11:
    call $p43, $i44, $i45, $p47, $i48, $i49, $i72, $p73, $p74, $p75, $i46, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $i41, $p42, $i89 := handle_read_event_rsp_loop_$bb11($p1, $p2, $p5, $p6, $i38, $p43, $i44, $i45, $p47, $i48, $i49, $i72, $p73, $p74, $p75, $i46, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $i41, $p42, $i89);
    goto $bb11_last;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i46 := $i41;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p78);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p5);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p6);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __read_once_size($p79, $p81, 8);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p6);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.45, $p82);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i84 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 634} {:cexpr "tmp___1"} boogie_si_record_i32($i84);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p83);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, $i38);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i89 := $i46;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i40 := $i89;
    goto $bb10;

  $bb29:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i41, $p42 := $i46, $p83;
    goto $bb29_dummy;

  $bb13:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p47 := ipmi_alloc_recv_msg();
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i41, 1);
    call {:si_unique_call 640} {:cexpr "deliver_count"} boogie_si_record_i32($i72);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} copy_event_into_recv_msg($p47, $p1);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p47, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, $p42);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} kref_get($p74);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p47, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} list_add_tail($p75, $p2);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i46 := $i72;
    goto $bb15;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} rcu_read_unlock();
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p52, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p2);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i58, $i59);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i71 := 1;
    goto $bb27;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p61, $p62 := $p51, $p55;
    goto $bb22;

  $bb22:
    call $p63, $p65, $p66, $p68, $i69, $i70, $p61, $p62 := handle_read_event_rsp_loop_$bb22($i59, $p63, $p65, $p66, $p68, $i69, $i70, $p61, $p62);
    goto $bb22_last;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p61, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} list_del($p63);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ipmi_free_recv_msg($p61);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p62, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $i59);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p61, $p62 := $p62, $p66;
    goto $bb24_dummy;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(24, 4));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} atomic_inc($p12);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4732;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4681;

  $bb29_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4638;
}



const handle_bmc_rsp: ref;

axiom handle_bmc_rsp == $sub.ref(0, 407787);

procedure handle_bmc_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_bmc_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p43: ref;
  var $p45: ref;
  var $i46: i8;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i16;
  var $p69: ref;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(2, 4));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} atomic_inc($p20);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p22);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(72, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p24, $i23);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, 12);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p28, 15);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 3);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, $i34);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i40 := $ashr.i32($i39, 2);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p43, $i41);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, $i46);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(2, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $sub.i32(0, 2));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.1;
    cmdloc_dummy_var_49 := $M.1;
    call {:si_unique_call 653} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p50, $p53, $i57, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_50;
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, $p58);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.1, $p62);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 65534);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p69, $i67);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} deliver_response($p4);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(3, 4));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} atomic_inc($p17);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} ipmi_free_recv_msg($p4);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_78 := printk.ref(.str.28);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const copy_event_into_recv_msg: ref;

axiom copy_event_into_recv_msg == $sub.ref(0, 408819);

procedure copy_event_into_recv_msg($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation copy_event_into_recv_msg($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p22: ref;
  var $p24: ref;
  var $i25: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $p48: ref;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(72, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 12);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p6, 15);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 3);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i12);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, 2);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 2);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, $i20);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i25);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(3, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, $sub.i32(0, 3));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.1;
    cmdloc_dummy_var_52 := $M.1;
    call {:si_unique_call 657} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p29, $p32, $i36, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_53;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $p37);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 65533);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p48, $i46);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    return;
}



const intf_find_seq: ref;

axiom intf_find_seq == $sub.ref(0, 409851);

procedure intf_find_seq($p0: ref, $i1: i8, $i2: i16, $i3: i8, $i4: i8, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.1;



implementation intf_find_seq($p0: ref, $i1: i8, $i2: i16, $i3: i8, $i4: i8, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "intf_find_seq:arg:seq"} boogie_si_record_i8($i1);
    call {:si_unique_call 659} {:cexpr "intf_find_seq:arg:channel"} boogie_si_record_i16($i2);
    call {:si_unique_call 660} {:cexpr "intf_find_seq:arg:cmd"} boogie_si_record_i8($i3);
    call {:si_unique_call 661} {:cexpr "intf_find_seq:arg:netfn"} boogie_si_record_i8($i4);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 63);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p11 := spinlock_check($p10);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 664} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i14, 48));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, 1);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 19);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} spin_unlock_irqrestore($p59, $i12);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i9 := $i58;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i23, 48)), $mul.ref(40, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 384)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i31 := $sext.i16.i32($i30);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i32 := $sext.i16.i32($i2);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, $i32);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 19);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb18;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i3);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i37, $i38);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb9;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i4);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i43, $i44);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb9;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p27, $mul.ref(0, 384)), $mul.ref(32, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i47 := ipmi_addr_equal($p5, $p46);
    call {:si_unique_call 666} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb17;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p6, $p27);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i50, 48));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i55 := $and.i8($i54, $sub.i8(0, 2));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, $i55);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb16;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const ipmi_addr_equal: ref;

axiom ipmi_addr_equal == $sub.ref(0, 410883);

procedure ipmi_addr_equal($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ipmi_addr_equal($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i39: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i59: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i79: i1;
  var $i101: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i3, $i5);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i10 := $sext.i16.i32($i9);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i13 := $sext.i16.i32($i12);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i10, $i13);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 12);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i28 := is_ipmb_addr($p0);
    call {:si_unique_call 669} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i48 := is_ipmb_bcast_addr($p0);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i68 := is_lan_addr($p0);
    call {:si_unique_call 673} {:cexpr "tmp___1"} boogie_si_record_i32($i68);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p1);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p71, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i74, $i77);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i79 := 0;
    assume {:branchcond $i78} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i32($i79);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i7 := $i101;
    goto $bb3;

  $bb25:
    assume $i78 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p70, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p71, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.1, $p83);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i82, $i85);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i79 := 0;
    assume {:branchcond $i86} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb27;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p70, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p71, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i89, $i92);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i79 := 0;
    assume {:branchcond $i93} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb27;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p70, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.1, $p94);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p71, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i96, $i99);
    assume {:verifier.code 0} true;
    $i79 := $i100;
    goto $bb27;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p1);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p51, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.1, $p55);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i54, $i57);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i59 := 0;
    assume {:branchcond $i58} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i59);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i7 := $i67;
    goto $bb3;

  $bb18:
    assume $i58 == 1;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p50, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p51, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i62, $i65);
    assume {:verifier.code 0} true;
    $i59 := $i66;
    goto $bb20;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p31, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i34, $i37);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i39 := 0;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i39);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i7 := $i47;
    goto $bb3;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p31, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i42, $i45);
    assume {:verifier.code 0} true;
    $i39 := $i46;
    goto $bb15;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i22, $i25);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const ipmi_register_smi: ref;

axiom ipmi_register_smi == $sub.ref(0, 411915);

procedure ipmi_register_smi($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8) returns ($r: i32);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 412947);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 413979);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 415011);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);



const smi_recv_tasklet: ref;

axiom smi_recv_tasklet == $sub.ref(0, 416043);

procedure smi_recv_tasklet($i0: i64);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.42, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation smi_recv_tasklet($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p22: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "smi_recv_tasklet:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    call {:si_unique_call 675} {:cexpr "run_to_completion"} boogie_si_record_i32($i3);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3728, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i3, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p35);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} handle_new_recv_msgs($p1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    call {:si_unique_call 685} devirtbounce.15($p43, $p45, $p35);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3640, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} spin_unlock_irqrestore($p37, $i8);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3736, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i17 := list_empty($p16);
    call {:si_unique_call 680} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3712, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i24 := list_empty($p23);
    call {:si_unique_call 682} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p29 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p22 := $p29;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p22);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $p34 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb18;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} list_del($p22);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3728, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p22);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p34 := $p22;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3712, 1)), $mul.ref(0, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p29 := $p28;
    goto $bb14;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3736, 1)), $mul.ref(0, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4344)), $mul.ref(3640, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p6 := spinlock_check($p5);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 678} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 417075);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 418107);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);



const list_add_tail_rcu: ref;

axiom list_add_tail_rcu == $sub.ref(0, 419139);

procedure list_add_tail_rcu($p0: ref, $p1: ref);



const get_guid: ref;

axiom get_guid == $sub.ref(0, 420171);

procedure get_guid($p0: ref);



const channel_handler: ref;

axiom channel_handler == $sub.ref(0, 421203);

procedure channel_handler($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.69, $M.70;



implementation channel_handler($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i64;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i75: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $p83: ref;
  var $p84: ref;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 12);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 7);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 66);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i39, 3);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    call {:si_unique_call 688} {:cexpr "chan"} boogie_si_record_i32($i42);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(2, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 127);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i42);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i51, 4)), $mul.ref(0, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, $i50);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(3, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 31);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i42);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i63, 4)), $mul.ref(1, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p66, $i62);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, $i69);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i72, 15);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i73 == 1);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i78 := send_channel_info_cmd($p0, $i77);
    call {:si_unique_call 691} {:cexpr "rv"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    $i75 := $i78;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i75, 0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_79 := printk.ref.i32.i32(.str.30, $i81, $i75);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p83, 16);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(56, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __wake_up($p84, 3, 1, $0.ref);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i73 == 1;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(56, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __wake_up($p74, 3, 1, $0.ref);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb21;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 193);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, 1);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4136, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, 16);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(56, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} __wake_up($p35, 3, 1, $0.ref);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const send_channel_info_cmd: ref;

axiom send_channel_info_cmd == $sub.ref(0, 422235);

procedure send_channel_info_cmd($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.1, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.69, $M.70;



implementation send_channel_info_cmd($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 697} {:cexpr "send_channel_info_cmd:arg:chan"} boogie_si_record_i32($i1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p5, 12);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, $p6, 15);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p7, 0);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p8, 6);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p9, 66);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p11, $p3);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $M.52 := $store.i16($M.52, $p12, 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i1);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p14, $i13);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i29 := i_ipmi_request($0.ref, $p0, $p15, 0, $p2, $p16, $0.ref, $0.ref, 0, $i22, $i28, $sub.i32(0, 1), 0);
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 423267);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 424299);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const schedule: ref;

axiom schedule == $sub.ref(0, 425331);

procedure schedule();



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 426363);

procedure finish_wait($p0: ref, $p1: ref);



const add_proc_entries: ref;

axiom add_proc_entries == $sub.ref(0, 427395);

procedure add_proc_entries($p0: ref, $i1: i32) returns ($r: i32);



const ipmi_bmc_register: ref;

axiom ipmi_bmc_register == $sub.ref(0, 428427);

procedure ipmi_bmc_register($p0: ref, $i1: i32) returns ($r: i32);



const remove_proc_entries: ref;

axiom remove_proc_entries == $sub.ref(0, 429459);

procedure remove_proc_entries($p0: ref);



const call_smi_watchers: ref;

axiom call_smi_watchers == $sub.ref(0, 430491);

procedure call_smi_watchers($i0: i32, $p1: ref);



const ldv_try_module_get_5: ref;

axiom ldv_try_module_get_5 == $sub.ref(0, 431523);

procedure ldv_try_module_get_5($p0: ref) returns ($r: i1);



const ldv_module_put_6: ref;

axiom ldv_module_put_6 == $sub.ref(0, 432555);

procedure ldv_module_put_6($p0: ref);



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 433587);

procedure remove_proc_entry($p0: ref, $p1: ref);



const ipmi_find_bmc_guid: ref;

axiom ipmi_find_bmc_guid == $sub.ref(0, 434619);

procedure ipmi_find_bmc_guid($p0: ref, $p1: ref) returns ($r: ref);



const ipmi_find_bmc_prod_dev_id: ref;

axiom ipmi_find_bmc_prod_dev_id == $sub.ref(0, 435651);

procedure ipmi_find_bmc_prod_dev_id($p0: ref, $i1: i32, $i2: i8) returns ($r: ref);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 436683);

procedure snprintf.ref.i64.ref.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



const release_bmc_device: ref;

axiom release_bmc_device == $sub.ref(0, 437715);

procedure release_bmc_device($p0: ref);
  free requires assertsPassed;



implementation release_bmc_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 16), 1544));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} kfree($p3);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_register: ref;

axiom platform_device_register == $sub.ref(0, 438747);

procedure platform_device_register($p0: ref) returns ($r: i32);



const put_device: ref;

axiom put_device == $sub.ref(0, 439779);

procedure put_device($p0: ref);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 440811);

procedure _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);



const sysfs_create_link: ref;

axiom sysfs_create_link == $sub.ref(0, 441843);

procedure sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const kasprintf: ref;

axiom kasprintf == $sub.ref(0, 442875);

procedure kasprintf.i32.ref.i32($i0: i32, $p1: ref, p.2: i32) returns ($r: ref);



const ipmi_bmc_unregister: ref;

axiom ipmi_bmc_unregister == $sub.ref(0, 443907);

procedure ipmi_bmc_unregister($p0: ref);



const sysfs_remove_link: ref;

axiom sysfs_remove_link == $sub.ref(0, 444939);

procedure sysfs_remove_link($p0: ref, $p1: ref);



const cleanup_bmc_device: ref;

axiom cleanup_bmc_device == $sub.ref(0, 445971);

procedure cleanup_bmc_device($p0: ref);
  free requires assertsPassed;



implementation cleanup_bmc_device($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1532), 1544)), $mul.ref(0, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} platform_device_unregister($p3);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 447003);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    return;
}



const __find_bmc_prod_dev_id: ref;

axiom __find_bmc_prod_dev_id == $sub.ref(0, 448035);

procedure __find_bmc_prod_dev_id($p0: ref, $p1: ref) returns ($r: i32);



const driver_find_device: ref;

axiom driver_find_device == $sub.ref(0, 449067);

procedure driver_find_device($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);



const __find_bmc_guid: ref;

axiom __find_bmc_guid == $sub.ref(0, 450099);

procedure __find_bmc_guid($p0: ref, $p1: ref) returns ($r: i32);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 451131);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 452163);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 453195);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 703} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    return;
}



const guid_handler: ref;

axiom guid_handler == $sub.ref(0, 454227);

procedure guid_handler($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation guid_handler($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 12);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 7);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 8);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.1, $p26);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i29 := $ule.i32($i28, 16);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(144, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1544)), $mul.ref(1504, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.1;
    cmdloc_dummy_var_55 := $M.1;
    call {:si_unique_call 706} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p41, $p44, 16, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_56;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(144, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1544)), $mul.ref(1520, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, 1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(56, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __wake_up($p48, 3, 1, $0.ref);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(144, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1544)), $mul.ref(1520, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, 0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(2, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.1, $p34);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_80 := printk.ref.i32(.str.29, $i36);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(144, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1544)), $mul.ref(1520, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 0);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const send_guid_cmd: ref;

axiom send_guid_cmd == $sub.ref(0, 455259);

procedure send_guid_cmd($p0: ref, $i1: i32) returns ($r: i32);



const ipmi_unregister_smi: ref;

axiom ipmi_unregister_smi == $sub.ref(0, 456291);

procedure ipmi_unregister_smi($p0: ref) returns ($r: i32);



const cleanup_smi_msgs: ref;

axiom cleanup_smi_msgs == $sub.ref(0, 457323);

procedure cleanup_smi_msgs($p0: ref);



const ldv_module_put_10: ref;

axiom ldv_module_put_10 == $sub.ref(0, 458355);

procedure ldv_module_put_10($p0: ref);



const list_splice_tail: ref;

axiom list_splice_tail == $sub.ref(0, 459387);

procedure list_splice_tail($p0: ref, $p1: ref);



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 460419);

procedure schedule_timeout($i0: i64) returns ($r: i64);



const deliver_smi_err_response: ref;

axiom deliver_smi_err_response == $sub.ref(0, 461451);

procedure deliver_smi_err_response($p0: ref, $p1: ref, $i2: i8);



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 462483);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);



const ipmi_smi_msg_received: ref;

axiom ipmi_smi_msg_received == $sub.ref(0, 463515);

procedure ipmi_smi_msg_received($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.42, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_smi_msg_received($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i64;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $p85: ref;
  var $i86: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $i96: i1;
  var $p97: ref;
  var $i88: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i1;
  var $p110: ref;
  var $i111: i1;
  var $i112: i64;
  var $p113: ref;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    call {:si_unique_call 707} {:cexpr "run_to_completion"} boogie_si_record_i32($i3);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 1);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i3, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3576, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} list_add_tail($p94, $p95);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i3, 0);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i88 := $i93;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i3, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i88;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3728, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p1);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i105, $i106);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i3, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i3, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i111 == 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3600, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} tasklet_schedule($p113);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    return;

  $bb53:
    assume $i111 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} smi_recv_tasklet($i112);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i109 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3640, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} spin_unlock_irqrestore($p110, $i102);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i107 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3728, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p108, $0.ref);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i98 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3640, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $p100 := spinlock_check($p99);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i101 := _raw_spin_lock_irqsave($p100);
    call {:si_unique_call 721} {:cexpr "flags"} boogie_si_record_i64($i101);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb46;

  $bb41:
    assume $i96 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} spin_unlock_irqrestore($p97, $i93);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p91 := spinlock_check($p90);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i92 := _raw_spin_lock_irqsave($p91);
    call {:si_unique_call 716} {:cexpr "flags"} boogie_si_record_i64($i92);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb40;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 24);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 52);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(24, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 2);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.1, $p85);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_81 := intf_start_seq_timer($p0, $i86);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} ipmi_free_smi_msg($p1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i88 := 0;
    goto $bb37;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 192);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 129);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb16;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 130);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 131);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb16;

  $bb25:
    assume $i51 == 1;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(3, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 15);
    call {:si_unique_call 710} {:cexpr "chan"} boogie_si_record_i32($i56);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 15);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i56);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i58, 4)), $mul.ref(0, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 4);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i64 == 1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i56);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref($i65, 4)), $mul.ref(0, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 5);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i71 == 1);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(5, 4));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} atomic_inc($p77);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(16, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.1, $p78);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.1, $p81);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_82 := intf_err_seq($p0, $i79, $i83);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4228, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(14, 4));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} atomic_inc($p74);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb31;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const intf_err_seq: ref;

axiom intf_err_seq == $sub.ref(0, 464547);

procedure intf_err_seq($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation intf_err_seq($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} {:cexpr "intf_err_seq:arg:msgid"} boogie_si_record_i64($i1);
    call {:si_unique_call 726} {:cexpr "intf_err_seq:arg:err"} boogie_si_record_i32($i2);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i64($i1, 26);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i8($i3);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 727} {:cexpr "seq"} boogie_si_record_i8($i7);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i1, 4194303);
    call {:si_unique_call 728} {:cexpr "seqid"} boogie_si_record_i64($i8);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p10 := spinlock_check($p9);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 731} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i7);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i13, 48));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, 1);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i37, $p38 := $sub.i32(0, 19), $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} spin_unlock_irqrestore($p39, $i11);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p38);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} deliver_err_response($p38, $i2);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i7);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i22, 48)), $mul.ref(32, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.1, $p25);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, $i8);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i7);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref($i30, 48));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i34 := $and.i8($i33, $sub.i8(0, 2));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $i34);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p29, $mul.ref($i30, 48)), $mul.ref(40, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i37, $p38 := 0, $p36;
    goto $bb6;
}



const intf_start_seq_timer: ref;

axiom intf_start_seq_timer == $sub.ref(0, 465579);

procedure intf_start_seq_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation intf_start_seq_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} {:cexpr "intf_start_seq_timer:arg:msgid"} boogie_si_record_i64($i1);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i1, 26);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i8($i2);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 63);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 735} {:cexpr "seq"} boogie_si_record_i8($i6);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i1, 4194303);
    call {:si_unique_call 736} {:cexpr "seqid"} boogie_si_record_i64($i7);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p9 := spinlock_check($p8);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 739} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i6);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i12, 48));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, 1);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(352, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} spin_unlock_irqrestore($p35, $i10);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i6);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref($i21, 48)), $mul.ref(32, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, $i7);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(424, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i6);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref($i29, 48)), $mul.ref(16, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref($i29, 48)), $mul.ref(8, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p33, $i32);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb6;
}



const ipmi_smi_watchdog_pretimeout: ref;

axiom ipmi_smi_watchdog_pretimeout == $sub.ref(0, 466611);

procedure ipmi_smi_watchdog_pretimeout($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ipmi_smi_watchdog_pretimeout($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(8, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3592, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} atomic_set($p4, 1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(3600, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} tasklet_schedule($p5);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 467643);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 744} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 746} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 468675);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 747} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 748} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 749} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const smi_stats_proc_open: ref;

axiom smi_stats_proc_open == $sub.ref(0, 469707);

procedure smi_stats_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation smi_stats_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p2 := PDE_DATA($p0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i3 := single_open($p1, smi_stats_proc_show, $p2);
    call {:si_unique_call 752} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 470739);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const PDE_DATA: ref;

axiom PDE_DATA == $sub.ref(0, 471771);

procedure PDE_DATA($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation PDE_DATA($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p1 := external_alloc();
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const smi_stats_proc_show: ref;

axiom smi_stats_proc_show == $sub.ref(0, 472803);

procedure smi_stats_proc_show($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 473835);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 756} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 757} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 474867);

procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const smi_ipmb_proc_open: ref;

axiom smi_ipmb_proc_open == $sub.ref(0, 475899);

procedure smi_ipmb_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation smi_ipmb_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p2 := PDE_DATA($p0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i3 := single_open($p1, smi_ipmb_proc_show, $p2);
    call {:si_unique_call 760} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const smi_ipmb_proc_show: ref;

axiom smi_ipmb_proc_show == $sub.ref(0, 476931);

procedure smi_ipmb_proc_show($p0: ref, $p1: ref) returns ($r: i32);



const seq_putc: ref;

axiom seq_putc == $sub.ref(0, 477963);

procedure seq_putc($p0: ref, $i1: i8) returns ($r: i32);



const smi_version_proc_open: ref;

axiom smi_version_proc_open == $sub.ref(0, 478995);

procedure smi_version_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation smi_version_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p2 := PDE_DATA($p0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i3 := single_open($p1, smi_version_proc_show, $p2);
    call {:si_unique_call 763} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const smi_version_proc_show: ref;

axiom smi_version_proc_show == $sub.ref(0, 480027);

procedure smi_version_proc_show($p0: ref, $p1: ref) returns ($r: i32);



const bmc_dev_attr_is_visible: ref;

axiom bmc_dev_attr_is_visible == $sub.ref(0, 481059);

procedure bmc_dev_attr_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation bmc_dev_attr_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i18: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} {:cexpr "bmc_dev_attr_is_visible:arg:idx"} boogie_si_record_i32($i2);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p3 := kobj_to_dev($p0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 1544));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    call {:si_unique_call 766} {:cexpr "mode"} boogie_si_record_i16($i7);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, $p2i.ref.i64(dev_attr_aux_firmware_revision));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, $p2i.ref.i64(dev_attr_guid));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1520, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i18 := $i26;
    goto $bb6;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i7);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1492, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i7);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb5;
}



const kobj_to_dev: ref;

axiom kobj_to_dev == $sub.ref(0, 482091);

procedure kobj_to_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobj_to_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 16), 1424));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const device_id_show: ref;

axiom device_id_show == $sub.ref(0, 483123);

procedure device_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation device_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(0, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i9 := snprintf.ref.i64.ref.i32($p2, 10, .str.65, $i8);
    call {:si_unique_call 768} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const provides_device_sdrs_show: ref;

axiom provides_device_sdrs_show == $sub.ref(0, 484155);

procedure provides_device_sdrs_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation provides_device_sdrs_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(1, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i8, 7);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i10 := snprintf.ref.i64.ref.i32($p2, 10, .str.65, $i9);
    call {:si_unique_call 770} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const revision_show: ref;

axiom revision_show == $sub.ref(0, 485187);

procedure revision_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation revision_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(1, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i10 := snprintf.ref.i64.ref.i32($p2, 20, .str.65, $i9);
    call {:si_unique_call 772} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const firmware_revision_show: ref;

axiom firmware_revision_show == $sub.ref(0, 486219);

procedure firmware_revision_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation firmware_revision_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(2, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(3, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i13 := snprintf.ref.i64.ref.i32.i32($p2, 20, .str.103, $i8, $i12);
    call {:si_unique_call 774} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const ipmi_version_show: ref;

axiom ipmi_version_show == $sub.ref(0, 487251);

procedure ipmi_version_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ipmi_version_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(4, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(4, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i32($i13, 4);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i15 := snprintf.ref.i64.ref.i32.i32($p2, 20, .str.72, $i9, $i14);
    call {:si_unique_call 776} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const add_dev_support_show: ref;

axiom add_dev_support_show == $sub.ref(0, 488283);

procedure add_dev_support_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation add_dev_support_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(5, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i9 := snprintf.ref.i64.ref.i32($p2, 10, .str.101, $i8);
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const manufacturer_id_show: ref;

axiom manufacturer_id_show == $sub.ref(0, 489315);

procedure manufacturer_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation manufacturer_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(8, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i8 := snprintf.ref.i64.ref.i32($p2, 20, .str.66, $i7);
    call {:si_unique_call 780} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const product_id_show: ref;

axiom product_id_show == $sub.ref(0, 490347);

procedure product_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation product_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(12, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i8 := snprintf.ref.i64.ref.i32($p2, 10, .str.71, $i7);
    call {:si_unique_call 782} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const aux_firmware_rev_show: ref;

axiom aux_firmware_rev_show == $sub.ref(0, 491379);

procedure aux_firmware_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation aux_firmware_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1480, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i25 := snprintf.ref.i64.ref.i32.i32.i32.i32($p2, 21, .str.104, $i9, $i14, $i19, $i24);
    call {:si_unique_call 784} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;
}



const guid_show: ref;

axiom guid_show == $sub.ref(0, 492411);

procedure guid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation guid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1504, 1)), $mul.ref(0, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i64($i7);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1544)), $mul.ref(1504, 1)), $mul.ref(8, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i64($i11);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i13 := snprintf.ref.i64.ref.i64.i64($p2, 100, .str.102, $i8, $i12);
    call {:si_unique_call 786} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const panic_event: ref;

axiom panic_event == $sub.ref(0, 493443);

procedure panic_event($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.1, $M.59, $CurrAddr, $M.69, $M.70, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation panic_event($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 791} {:cexpr "panic_event:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i7 := $M.56;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 792} {:cexpr "has_panicked"} boogie_si_record_i32(1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, ipmi_interfaces);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p9);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} __read_once_size($p10, $p12, 8);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.57, $p13);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i15 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 795} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} send_panic_events($p2);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p21 := $p17;
    goto $bb8;

  $bb8:
    call $p22, $p23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $i41, $p42, $p43, $p44, $i45, $i46, $p21 := panic_event_loop_$bb8($p5, $p6, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $i41, $p42, $p43, $p44, $i45, $i46, $p21);
    goto $bb8_last;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.58, $p22);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.59 := $store.i32($M.59, $p26, 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.58, $p27);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.60, $p29);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.61, $p31);
    call {:si_unique_call 799} devirtbounce.8($p30, $p32, 1);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.62, $p34);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p35);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p5);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p6);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __read_once_size($p36, $p38, 8);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p6);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.63, $p39);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i41 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p40);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p43;
    goto $bb14_dummy;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5855;
}



const send_panic_events: ref;

axiom send_panic_events == $sub.ref(0, 494475);

procedure send_panic_events($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.69, $M.70, $CurrAddr, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation send_panic_events($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p48: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $p134: ref;
  var $p135: ref;
  var $i136: i8;
  var $p137: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p138: ref;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i1;
  var $i158: i64;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p167: ref;
  var $i168: i8;
  var $p169: ref;
  var $i170: i32;
  var $i171: i8;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i176: i64;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i1;
  var $i156: i32;
  var $p157: ref;
  var $p155: ref;
  var $p92: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p88: ref;
  var vslice_dummy_var_83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, 12);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, 15);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 4);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 2);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $p2);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p20, 8);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 65);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, 3);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 32);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 111);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, $sub.i8(0, 95));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, ipmi_interfaces);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p36);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __read_once_size($p37, $p39, 8);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.64, $p40);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i42 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 814} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p41);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, ipmi_interfaces);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p76);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p8);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p9);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __read_once_size($p77, $p79, 8);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p9);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.67, $p80);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i82 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 822} {:cexpr "tmp___1"} boogie_si_record_i32($i82);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p81);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i87 == 1;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p88 := $p84;
    goto $bb23;

  $bb23:
    call $p89, $i90, $i91, $p93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $p125, $i126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $p134, $p135, $i136, $p137, $p139, $i140, $i141, $i142, $p143, $p144, $p145, $p146, $p138, $p147, $p148, $p150, $p151, $i152, $i153, $i154, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p167, $i168, $p169, $i170, $i171, $p172, $p173, $p174, $i176, $p177, $i178, $i179, $i180, $i156, $p157, $p155, $p92, $p182, $p183, $p184, $p185, $p186, $p187, $p188, $i189, $p190, $p191, $p192, $i193, $i194, $p88, vslice_dummy_var_83 := send_panic_events_loop_$bb23($p0, $p1, $p2, $p3, $p10, $p11, $p89, $i90, $i91, $p93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $p125, $i126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $p134, $p135, $i136, $p137, $p139, $i140, $i141, $i142, $p143, $p144, $p145, $p146, $p138, $p147, $p148, $p150, $p151, $i152, $i153, $i154, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p167, $i168, $p169, $i170, $i171, $p172, $p173, $p174, $i176, $p177, $i178, $i179, $i180, $i156, $p157, $p155, $p92, $p182, $p183, $p184, $p185, $p186, $p187, $p188, $i189, $p190, $p191, $p192, $i193, $i194, $p88, vslice_dummy_var_83);
    goto $bb23_last;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(0, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, $sub.i32(0, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call {:si_unique_call 826} devirtbounce.3(0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4038, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, 0);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4039, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, 0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p95, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p96, 6);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p97, 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, $0.ref);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p99, 0);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p100, device_id_fetcher);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ipmi_panic_request_and_wait($p88, $p3, $p1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4039, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.1, $p101);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p110, $0.ref);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.1, $p111);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 1);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4038, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.1, $p139);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i142 == 1);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p92 := $p88;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p92, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.1, $p182);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p183);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p10);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p11);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __read_once_size($p184, $p186, 8);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p11);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.68, $p187);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i189 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 825} {:cexpr "tmp___4"} boogie_si_record_i32($i189);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p188);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p190, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i194 == 1);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb54:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    $p88 := $p191;
    goto $bb54_dummy;

  $bb40:
    assume $i142 == 1;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p3);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p144, 12);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p143, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p145, 15);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p143, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p146, 0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p138 := $p88;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p147, 10);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p148, 68);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p150, $p2);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p151, 16);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.1, $p0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i153 := $sext.i8.i32($i152);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p155 := $p138;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p92 := $p155;
    goto $bb27;

  $bb43:
    assume $i154 == 1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i156, $p157 := 0, $p0;
    goto $bb46;

  $bb46:
    call $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p167, $i168, $p169, $i170, $i171, $p172, $p173, $p174, $i176, $p177, $i178, $i179, $i180, $i156, $p157, vslice_dummy_var_83 := send_panic_events_loop_$bb46($p1, $p2, $p3, $p138, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p167, $i168, $p169, $i170, $i171, $p172, $p173, $p174, $i176, $p177, $i178, $i179, $i180, $i156, $p157, vslice_dummy_var_83);
    goto $bb46_last;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i158 := strlen($p157);
    call {:si_unique_call 830} {:cexpr "tmp___2"} boogie_si_record_i64($i158);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i64.i32($i158);
    call {:si_unique_call 831} {:cexpr "size"} boogie_si_record_i32($i159);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, 11);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $i159;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p162, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p163, 0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p164, $sub.i8(0, 16));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p138, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.1, $p167);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p169, $i168);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i156, 1);
    call {:si_unique_call 832} {:cexpr "j"} boogie_si_record_i32($i170);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i8($i156);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p172, $i171);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p2);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(5, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_83 := strncpy($p174, $p157, 11);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i161);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p157, $mul.ref($i176, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ipmi_panic_request_and_wait($p138, $p3, $p1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.1, $p177);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i179 := $sext.i8.i32($i178);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i179, 0);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i180 == 1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p155 := $p138;
    goto $bb45;

  $bb51:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i156, $p157 := $i170, $p177;
    goto $bb51_dummy;

  $bb48:
    assume $i160 == 1;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i161 := 11;
    goto $bb50;

  $bb32:
    assume $i115 == 1;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.1, $p116);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb34;

  $bb35:
    assume $i119 == 1;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.1, $p120);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.1, $p125);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i122, $i127);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb34;

  $bb37:
    assume $i128 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p3);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p130, 1);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p129, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p131, 0);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4037, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.1, $p132);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p129, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p134, $i133);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.1, $p135);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p129, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p137, $i136);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p138 := $p88;
    goto $bb39;

  $bb29:
    assume $i104 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p105, 4);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, 1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, $0.ref);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p108, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p88, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p109, event_receiver_fetcher);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ipmi_panic_request_and_wait($p88, $p3, $p1);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i91 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p92 := $p88;
    goto $bb27;

  $bb16:
    assume $i75 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p48 := $p44;
    goto $bb7;

  $bb7:
    call $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $p48 := send_panic_events_loop_$bb7($p1, $p3, $p6, $p7, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $p48);
    goto $bb7_last;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p48, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, 1);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p48, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.65, $p56);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p48, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    call {:si_unique_call 818} devirtbounce.8($p57, $p59, 1);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ipmi_panic_request_and_wait($p48, $p3, $p1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p62);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p6);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p7);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __read_once_size($p63, $p65, 8);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p7);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.66, $p66);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i68 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 817} {:cexpr "tmp___0"} boogie_si_record_i32($i68);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p67);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i73 == 1);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p48 := $p70;
    goto $bb13_dummy;

  $bb9:
    assume $i52 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i28);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $i31);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, $i34);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  $bb54_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6012;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5953;
}



const ipmi_panic_request_and_wait: ref;

axiom ipmi_panic_request_and_wait == $sub.ref(0, 495507);

procedure ipmi_panic_request_and_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.69, $M.70, $M.1, $M.34, $M.35, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation ipmi_panic_request_and_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p3 := $alloc($mul.ref(592, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p4 := $alloc($mul.ref(384, $zext.i32.i64(1)));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(584, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p5, dummy_smi_done_handler);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $M.70 := $store.ref($M.70, $p6, dummy_recv_done_handler);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} atomic_add(2, panic_done_count);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i21 := i_ipmi_request($0.ref, $p0, $p1, 0, $p2, $p7, $p8, $p4, 0, $i14, $i20, 0, 1);
    call {:si_unique_call 839} {:cexpr "rv"} boogie_si_record_i32($i21);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i23 := atomic_read(panic_done_count);
    call {:si_unique_call 842} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i25, $i26 := ipmi_panic_request_and_wait_loop_$bb7($p0, $i25, $i26);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ipmi_poll($p0);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i25 := atomic_read(panic_done_count);
    call {:si_unique_call 845} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb9_dummy;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} atomic_sub(2, panic_done_count);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const device_id_fetcher: ref;

axiom device_id_fetcher == $sub.ref(0, 496539);

procedure device_id_fetcher($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation device_id_fetcher($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 12);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 7);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(6, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i27, 2);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4038, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, $i30);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(6, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i38 := $ashr.i32($i37, 5);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4039, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, $i40);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const event_receiver_fetcher: ref;

axiom event_receiver_fetcher == $sub.ref(0, 497571);

procedure event_receiver_fetcher($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation event_receiver_fetcher($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 12);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 5);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(1, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(1, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i26);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 384)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(2, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 3);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4344)), $mul.ref(4037, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, $i35);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 498603);

procedure strlen($p0: ref) returns ($r: i64);



const strncpy: ref;

axiom strncpy == $sub.ref(0, 499635);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const dummy_smi_done_handler: ref;

axiom dummy_smi_done_handler == $sub.ref(0, 500667);

procedure dummy_smi_done_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation dummy_smi_done_handler($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} atomic_dec(panic_done_count);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    return;
}



const dummy_recv_done_handler: ref;

axiom dummy_recv_done_handler == $sub.ref(0, 501699);

procedure dummy_recv_done_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation dummy_recv_done_handler($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} atomic_dec(panic_done_count);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 502731);

procedure atomic_add($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} {:cexpr "atomic_add:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 849} devirtbounce.11(0, $p2, $i0, $p2);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub: ref;

axiom atomic_sub == $sub.ref(0, 503763);

procedure atomic_sub($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_sub($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} {:cexpr "atomic_sub:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 851} devirtbounce.11(0, $p2, $i0, $p2);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 504795);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p1 := calloc(1, $i0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 854} __VERIFIER_assume($i4);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 505827);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.71;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 856} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.71;
    call {:si_unique_call 857} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.71 := cmdloc_dummy_var_58;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 506859);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 507891);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 858} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 859} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 860} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 861} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_16: ref;

axiom ldv_file_operations_16 == $sub.ref(0, 508923);

procedure ldv_file_operations_16();
  free requires assertsPassed;
  modifies $M.72, $M.73, $M.1, $CurrAddr;



implementation ldv_file_operations_16()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.72 := $p0;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.73 := $p2;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 509955);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.11;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.13;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.15;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p22 := $M.14;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 867} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p16 := $M.12;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 866} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p10 := $M.10;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 865} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p4 := $M.8;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 864} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_file_operations_15: ref;

axiom ldv_file_operations_15 == $sub.ref(0, 510987);

procedure ldv_file_operations_15();
  free requires assertsPassed;
  modifies $M.74, $M.75, $M.1, $CurrAddr;



implementation ldv_file_operations_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $M.74 := $p0;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $M.75 := $p2;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 512019);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.1, $M.17, $M.18, $M.8, $M.7, $M.10, $M.12, $M.14, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.69, $M.70;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 870} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 871} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 872} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_stop();
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i18 := $M.15;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 879} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i20 := $M.15;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p21 := $M.14;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_timer_1($i20, $p21);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i14 := $M.13;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 877} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i16 := $M.13;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p17 := $M.12;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_timer_1($i16, $p17);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $M.11 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i12 := $M.11;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p13 := $M.10;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_timer_1($i12, $p13);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 873} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i8 := $M.9;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p9 := $M.8;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_timer_1($i8, $p9);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 513051);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.18, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.69, $M.70;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.7, $p2);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ipmi_timeout($i3);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 514083);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_file_operations_14: ref;

axiom ldv_file_operations_14 == $sub.ref(0, 515115);

procedure ldv_file_operations_14();
  free requires assertsPassed;
  modifies $M.77, $M.78, $M.1, $CurrAddr;



implementation ldv_file_operations_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.77 := $p0;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $M.78 := $p2;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 516147);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.71, $M.79, $M.80, $M.81, $M.9, $M.11, $M.13, $M.15, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.56, $M.1, $M.59, $M.97, $M.72, $M.73, $M.77, $M.78, $M.74, $M.75, $M.98, $M.99, $M.100, $M.103, $M.107, $M.108, $M.7, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.6, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.0, $M.3, $M.12, $M.8, $M.10, $M.14, $M.16, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $CurrAddr, $M.69, $M.70, $M.17, $M.18, assertsPassed, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.42;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i64;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i1;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i64;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i64;
  var $i183: i32;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i64;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i64;
  var $i254: i32;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i1;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $p276: ref;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i64;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i64;
  var $i289: i32;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i32;
  var $i297: i1;
  var $i298: i32;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var vslice_dummy_var_84: ref;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: ref;
  var vslice_dummy_var_87: ref;
  var vslice_dummy_var_88: ref;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: ref;
  var vslice_dummy_var_91: ref;
  var vslice_dummy_var_92: ref;
  var vslice_dummy_var_93: ref;
  var vslice_dummy_var_94: ref;
  var vslice_dummy_var_95: i64;
  var vslice_dummy_var_96: i64;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i64;
  var vslice_dummy_var_100: i64;
  var vslice_dummy_var_101: i64;
  var vslice_dummy_var_102: i64;
  var vslice_dummy_var_103: i16;
  var vslice_dummy_var_104: i64;
  var vslice_dummy_var_105: i64;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i64;
  var vslice_dummy_var_108: i64;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i64;
  var vslice_dummy_var_111: i64;
  var vslice_dummy_var_112: i64;
  var vslice_dummy_var_113: i64;
  var vslice_dummy_var_114: i64;
  var vslice_dummy_var_115: i64;

  $bb0:
    call {:si_unique_call 888} $initialize();
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p12 := ldv_init_zalloc(1416);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p14 := ldv_init_zalloc(48);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p17 := ldv_init_zalloc(1416);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p19 := ldv_init_zalloc(48);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p21 := ldv_init_zalloc(1);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p22 := ldv_init_zalloc(24);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p24 := ldv_init_zalloc(8);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p26 := ldv_init_zalloc(1);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p27 := ldv_init_zalloc(1416);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p29 := ldv_init_zalloc(48);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p33 := ldv_init_zalloc(1416);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p35 := ldv_init_zalloc(48);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p37 := ldv_init_zalloc(296);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p39 := ldv_init_zalloc(32);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p42 := ldv_init_zalloc(48);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p44 := ldv_init_zalloc(1416);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p46 := ldv_init_zalloc(1);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p47 := ldv_init_zalloc(1416);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p49 := ldv_init_zalloc(48);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p51 := ldv_init_zalloc(8);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p53 := ldv_init_zalloc(1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p54 := ldv_init_zalloc(8);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p56 := ldv_init_zalloc(1);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p57 := ldv_init_zalloc(1416);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p59 := ldv_init_zalloc(48);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p61 := ldv_init_zalloc(1);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p62 := ldv_init_zalloc(1);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p63 := ldv_init_zalloc(1416);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p65 := ldv_init_zalloc(48);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p67 := ldv_init_zalloc(1416);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p69 := ldv_init_zalloc(48);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p71 := ldv_init_zalloc(1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p72 := ldv_init_zalloc(1416);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p74 := ldv_init_zalloc(1);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p75 := ldv_init_zalloc(48);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_initialize();
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_84 := ldv_memset($p77, 0, 8);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p1);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_85 := ldv_memset($p79, 0, 8);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p2);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_86 := ldv_memset($p81, 0, 8);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p3);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_87 := ldv_memset($p83, 0, 4);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p4);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_88 := ldv_memset($p85, 0, 4);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p5);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_89 := ldv_memset($p87, 0, 8);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p6);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_90 := ldv_memset($p89, 0, 4);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p7);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_91 := ldv_memset($p91, 0, 8);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p8);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_92 := ldv_memset($p93, 0, 8);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p9);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_93 := ldv_memset($p95, 0, 8);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p10);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_94 := ldv_memset($p97, 0, 4);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} timer_init_1();
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 958} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 962} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i172, $i173, $i174, $i175, $p176, $i177, $i179, $i180, $p181, $i182, $i183, $i185, $i186, $p187, $p188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i201, $i202, $i203, $i204, $i205, $i206, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i216, $i217, $i218, $i219, $i220, $i221, $i223, $i224, $i225, $i226, $i227, $i228, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $p240, $p241, $i243, $i244, $i245, $i246, $p247, $i248, $i250, $i251, $p252, $i253, $i254, $i256, $i257, $p258, $p259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $p275, $p276, $i278, $i279, $i280, $i281, $p282, $i283, $i285, $i286, $p287, $i288, $i289, $i291, $i292, $p293, $p294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i307, $i308, $i309, $i310, $i311, $i312, $i314, $i315, $i316, $i317, $i318, $i319, $i321, $i322, $i323, $i324, $i325, $i326, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p13, $p15, $p16, $p18, $p20, $p21, $p23, $p25, $p26, $p28, $p30, $p31, $p32, $p34, $p36, $p38, $p40, $p41, $p43, $p45, $p46, $p48, $p50, $p52, $p53, $p55, $p56, $p58, $p60, $p61, $p62, $p64, $p66, $p68, $p70, $p71, $p73, $p74, $p76, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i172, $i173, $i174, $i175, $p176, $i177, $i179, $i180, $p181, $i182, $i183, $i185, $i186, $p187, $p188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i201, $i202, $i203, $i204, $i205, $i206, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i216, $i217, $i218, $i219, $i220, $i221, $i223, $i224, $i225, $i226, $i227, $i228, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $p240, $p241, $i243, $i244, $i245, $i246, $p247, $i248, $i250, $i251, $p252, $i253, $i254, $i256, $i257, $p258, $p259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $p275, $p276, $i278, $i279, $i280, $i281, $p282, $i283, $i285, $i286, $p287, $i288, $i289, $i291, $i292, $p293, $p294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i307, $i308, $i309, $i310, $i311, $i312, $i314, $i315, $i316, $i317, $i318, $i319, $i321, $i322, $i323, $i324, $i325, $i326, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i99, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i99, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i99, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i99, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i99, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_stop();
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb52_dummy;

  $bb13:
    assume $i105 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i321 := $M.96;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb305:
    assume $i322 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} $i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 1117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i323);
    call {:si_unique_call 1118} {:cexpr "tmp___55"} boogie_si_record_i32($i323);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_stop();
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb308:
    assume $i324 == 1;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i325 := $M.96;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb310:
    assume $i326 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_115 := aux_firmware_rev_show($p73, $p76, $p74);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb11:
    assume $i104 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i314 := $M.95;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb293:
    assume $i315 == 1;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} $i316 := __VERIFIER_nondet_int();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i316);
    call {:si_unique_call 1112} {:cexpr "tmp___54"} boogie_si_record_i32($i316);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_stop();
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb296:
    assume $i317 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i318 := $M.95;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 1);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb298:
    assume $i319 == 1;
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_114 := firmware_revision_show($p68, $p70, $p71);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb9:
    assume $i103 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i307 := $M.94;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb281:
    assume $i308 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i309 := __VERIFIER_nondet_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i309);
    call {:si_unique_call 1106} {:cexpr "tmp___53"} boogie_si_record_i32($i309);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_stop();
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb284:
    assume $i310 == 1;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i311 := $M.94;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 1);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb286:
    assume $i312 == 1;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_113 := guid_show($p64, $p66, $p62);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb7:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i99, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i106 == 1);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i300 := $M.93;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb269:
    assume $i301 == 1;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} $i302 := __VERIFIER_nondet_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i302);
    call {:si_unique_call 1100} {:cexpr "tmp___52"} boogie_si_record_i32($i302);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_stop();
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb272:
    assume $i303 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i304 := $M.93;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 1);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb274:
    assume $i305 == 1;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_112 := add_dev_support_show($p58, $p60, $p61);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1102} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb16:
    assume $i106 == 1;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i265 := $M.92;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb236:
    assume $i266 == 1;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} $i267 := __VERIFIER_nondet_int();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i267);
    call {:si_unique_call 1085} {:cexpr "tmp___51"} boogie_si_record_i32($i267);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i267, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i267, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i267, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_stop();
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb243:
    assume $i270 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i291 := $M.92;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 1);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb260:
    assume $i292 == 1;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p293 := $M.74;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p294 := $M.75;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i295 := smi_version_proc_open($p293, $p294);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.100 := $i295;
    call {:si_unique_call 1094} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i295);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i296 := $M.100;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb262:
    assume $i297 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1095} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i298 := $M.83;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i299 := $add.i32($i298, 1);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.83 := $i299;
    call {:si_unique_call 1096} {:cexpr "ref_cnt"} boogie_si_record_i32($i299);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb241:
    assume $i269 == 1;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i285 := $M.92;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 2);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb257:
    assume $i286 == 1;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p287 := $M.75;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i288 := $load.i64($M.71, $p9);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.71, $p10);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_111 := seq_lseek($p287, $i288, $i289);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1092} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb239:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i271 == 1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i280 := $M.92;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb254:
    assume $i281 == 1;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p282 := $M.75;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i283 := $load.i64($M.71, $p8);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_110 := seq_read($p282, $p56, $i283, $p55);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1090} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb246:
    assume $i271 == 1;
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i267, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb245;

  $bb248:
    assume $i272 == 1;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i273 := $M.92;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 2);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb250:
    assume $i274 == 1;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p275 := $M.74;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p276 := $M.75;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} vslice_dummy_var_109 := single_release($p275, $p276);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1087} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i278 := $M.83;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i279 := $sub.i32($i278, 1);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $M.83 := $i279;
    call {:si_unique_call 1088} {:cexpr "ref_cnt"} boogie_si_record_i32($i279);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb5:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i99, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i99, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i108 == 1);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i230 := $M.91;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb203:
    assume $i231 == 1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} $i232 := __VERIFIER_nondet_int();
    call {:si_unique_call 1069} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i232);
    call {:si_unique_call 1070} {:cexpr "tmp___50"} boogie_si_record_i32($i232);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i232, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    $i234 := $slt.i32($i232, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i232, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_stop();
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb210:
    assume $i235 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i256 := $M.91;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb227:
    assume $i257 == 1;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p258 := $M.77;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p259 := $M.78;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i260 := smi_stats_proc_open($p258, $p259);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.99 := $i260;
    call {:si_unique_call 1079} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i260);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i261 := $M.99;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb229:
    assume $i262 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i263 := $M.83;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i264 := $add.i32($i263, 1);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $M.83 := $i264;
    call {:si_unique_call 1081} {:cexpr "ref_cnt"} boogie_si_record_i32($i264);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb208:
    assume $i234 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i250 := $M.91;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 2);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb224:
    assume $i251 == 1;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p252 := $M.78;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i253 := $load.i64($M.71, $p7);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.71, $p6);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_108 := seq_lseek($p252, $i253, $i254);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1077} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb206:
    assume $i233 == 1;
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i232, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i236 == 1);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i245 := $M.91;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 2);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb221:
    assume $i246 == 1;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p247 := $M.78;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i248 := $load.i64($M.71, $p5);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_107 := seq_read($p247, $p53, $i248, $p52);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1075} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb213:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i232, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb212;

  $bb215:
    assume $i237 == 1;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i238 := $M.91;
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 2);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb217:
    assume $i239 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p240 := $M.77;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p241 := $M.78;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_106 := single_release($p240, $p241);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i243 := $M.83;
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i244 := $sub.i32($i243, 1);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.83 := $i244;
    call {:si_unique_call 1073} {:cexpr "ref_cnt"} boogie_si_record_i32($i244);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb20:
    assume $i108 == 1;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i223 := $M.90;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb191:
    assume $i224 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} $i225 := __VERIFIER_nondet_int();
    call {:si_unique_call 1063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i225);
    call {:si_unique_call 1064} {:cexpr "tmp___49"} boogie_si_record_i32($i225);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_stop();
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb194:
    assume $i226 == 1;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i227 := $M.90;
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 1);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb196:
    assume $i228 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_105 := provides_device_sdrs_show($p48, $p50, $p46);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb18:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i99, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i109 == 1);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i216 := $M.89;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb179:
    assume $i217 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1056} $i218 := __VERIFIER_nondet_int();
    call {:si_unique_call 1057} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i218);
    call {:si_unique_call 1058} {:cexpr "tmp___48"} boogie_si_record_i32($i218);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_stop();
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb182:
    assume $i219 == 1;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i220 := $M.89;
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 1);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb184:
    assume $i221 == 1;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_104 := ipmi_version_show($p45, $p43, $p41);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb22:
    assume $i109 == 1;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i208 := $M.88;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb167:
    assume $i209 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1050} $i210 := __VERIFIER_nondet_int();
    call {:si_unique_call 1051} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i210);
    call {:si_unique_call 1052} {:cexpr "tmp___47"} boogie_si_record_i32($i210);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_stop();
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb170:
    assume $i211 == 1;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i212 := $M.88;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i213 == 1;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.71, $p4);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_103 := bmc_dev_attr_is_visible($p38, $p40, $i214);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb3:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i99, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i99, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i99, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i112 == 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i201 := $M.87;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb155:
    assume $i202 == 1;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} $i203 := __VERIFIER_nondet_int();
    call {:si_unique_call 1045} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i203);
    call {:si_unique_call 1046} {:cexpr "tmp___46"} boogie_si_record_i32($i203);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_stop();
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb158:
    assume $i204 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i205 := $M.87;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 1);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i206 == 1;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_102 := product_id_show($p34, $p36, $p32);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb28:
    assume $i112 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i194 := $M.86;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb143:
    assume $i195 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} $i196 := __VERIFIER_nondet_int();
    call {:si_unique_call 1039} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i196);
    call {:si_unique_call 1040} {:cexpr "tmp___45"} boogie_si_record_i32($i196);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_stop();
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb146:
    assume $i197 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i198 := $M.86;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 1);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb148:
    assume $i199 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_101 := device_id_show($p28, $p30, $p31);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1042} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb26:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i99, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i113 == 1);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i159 := $M.85;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb110:
    assume $i160 == 1;
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} $i161 := __VERIFIER_nondet_int();
    call {:si_unique_call 1024} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i161);
    call {:si_unique_call 1025} {:cexpr "tmp___44"} boogie_si_record_i32($i161);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i161, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i161, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i161, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_stop();
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb117:
    assume $i164 == 1;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i185 := $M.85;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb134:
    assume $i186 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p187 := $M.72;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p188 := $M.73;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i189 := smi_ipmb_proc_open($p187, $p188);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.98 := $i189;
    call {:si_unique_call 1034} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i189);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i190 := $M.98;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 0);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i191 == 1;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i192 := $M.83;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i192, 1);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.83 := $i193;
    call {:si_unique_call 1036} {:cexpr "ref_cnt"} boogie_si_record_i32($i193);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb115:
    assume $i163 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i179 := $M.85;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb131:
    assume $i180 == 1;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p181 := $M.73;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.71, $p1);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.71, $p3);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_100 := seq_lseek($p181, $i182, $i183);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb113:
    assume $i162 == 1;
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i161, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i165 == 1);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i174 := $M.85;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 2);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb128:
    assume $i175 == 1;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p176 := $M.73;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.71, $p2);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_99 := seq_read($p176, $p26, $i177, $p25);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb120:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i161, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb119;

  $bb122:
    assume $i166 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i167 := $M.85;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i168 == 1;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p169 := $M.72;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p170 := $M.73;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_98 := single_release($p169, $p170);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i172 := $M.83;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i173 := $sub.i32($i172, 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.83 := $i173;
    call {:si_unique_call 1028} {:cexpr "ref_cnt"} boogie_si_record_i32($i173);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb30:
    assume $i113 == 1;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i142 := $M.84;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb80:
    assume $i143 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 994} $i144 := __VERIFIER_nondet_int();
    call {:si_unique_call 995} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i144);
    call {:si_unique_call 996} {:cexpr "tmp___43"} boogie_si_record_i32($i144);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i144, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i144, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_stop();
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb85:
    assume $i146 == 1;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i152 := $M.84;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb98:
    assume $i153 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i154 := ipmi_init_msghandler_mod();
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $M.97 := $i154;
    call {:si_unique_call 1001} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i154);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i155 := $M.97;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i157 := $M.97;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i158 == 1;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1021} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i156 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1003} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} ldv_file_operations_16();
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ldv_file_operations_14();
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_file_operations_15();
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb83:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i144, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb87;

  $bb88:
    assume $i147 == 1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i148 := $M.84;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb90:
    assume $i149 == 1;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i150 := $M.83;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb92;

  $bb93:
    assume $i151 == 1;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} cleanup_ipmi();
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb24:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i99, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i115 == 1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i140 := $M.82;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb77:
    assume $i141 == 1;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} choose_timer_1();
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb34:
    assume $i115 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i132 := $M.81;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb65:
    assume $i133 == 1;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} $i134 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i134);
    call {:si_unique_call 989} {:cexpr "tmp___42"} boogie_si_record_i32($i134);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ldv_stop();
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb68:
    assume $i135 == 1;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i136 := $M.81;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i137 == 1;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.71, $p0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_97 := panic_event($p23, $i138, $p21);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb32:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i116 == 1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i125 := $M.80;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i126 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 981} $i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 982} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i127);
    call {:si_unique_call 983} {:cexpr "tmp___41"} boogie_si_record_i32($i127);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_stop();
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i128 == 1;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i129 := $M.80;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i130 == 1;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_96 := manufacturer_id_show($p18, $p20, $p16);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb36:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb15;

  $bb38:
    assume $i117 == 1;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i118 := $M.79;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb40:
    assume $i119 == 1;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 976} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i120);
    call {:si_unique_call 977} {:cexpr "tmp___40"} boogie_si_record_i32($i120);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_stop();
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume $i121 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i122 := $M.79;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i123 == 1;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_95 := revision_show($p13, $p15, $p11);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb52_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} $i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 973} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
    call {:si_unique_call 974} {:cexpr "tmp___39"} boogie_si_record_i32($i99);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 517179);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    return;
}



const cleanup_ipmi: ref;

axiom cleanup_ipmi == $sub.ref(0, 518211);

procedure cleanup_ipmi();
  free requires assertsPassed;
  modifies $M.3, $M.1, $M.9, $M.11, $M.13, $M.15, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.10, $M.12, $M.14, $M.69, $M.70;



implementation cleanup_ipmi()
{
  var $i0: i32;
  var $i1: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_116 := atomic_notifier_chain_unregister(panic_notifier_list, panic_block);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} atomic_inc(stop_operation);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_117 := ldv_del_timer_sync_14(ipmi_timer);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p4 := $M.6;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} proc_remove($p4);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} driver_unregister($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1128} {:cexpr "initialized"} boogie_si_record_i32(0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i5 := atomic_read(smi_msg_inuse_count);
    call {:si_unique_call 1130} {:cexpr "count"} boogie_si_record_i32($i5);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i8 := atomic_read(recv_msg_inuse_count);
    call {:si_unique_call 1133} {:cexpr "count"} boogie_si_record_i32($i8);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_119 := printk.ref.i32(.str.68, $i8);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_118 := printk.ref.i32(.str.67, $i5);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ipmi_init_msghandler_mod: ref;

axiom ipmi_init_msghandler_mod == $sub.ref(0, 519243);

procedure ipmi_init_msghandler_mod() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.3, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15;



implementation ipmi_init_msghandler_mod() returns ($r: i32)
{
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_120 := ipmi_init_msghandler();
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 520275);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const atomic_notifier_chain_unregister: ref;

axiom atomic_notifier_chain_unregister == $sub.ref(0, 521307);

procedure atomic_notifier_chain_unregister($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_notifier_chain_unregister($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1137} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_del_timer_sync_14: ref;

axiom ldv_del_timer_sync_14 == $sub.ref(0, 522339);

procedure ldv_del_timer_sync_14($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation ldv_del_timer_sync_14($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1140} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} disable_suitable_timer_1($p0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const proc_remove: ref;

axiom proc_remove == $sub.ref(0, 523371);

procedure proc_remove($p0: ref);
  free requires assertsPassed;



implementation proc_remove($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 524403);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1142} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1143} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 525435);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1144} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 1} true;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 526467);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 527499);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 528531);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 529563);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 530595);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 531627);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 532659);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 533691);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 534723);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 535755);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 536787);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 537819);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 538851);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1145} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1146} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1147} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} __VERIFIER_assume($i4);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 539883);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 540915);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 541947);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 542979);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 544011);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1149} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1150} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1151} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1152} __VERIFIER_assume($i4);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 545043);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 546075);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 547107);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 548139);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 549171);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1153} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1154} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1155} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1156} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1157} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1158} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1159} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1160} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1161} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1162} __VERIFIER_assume($i7);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} __VERIFIER_assume($i11);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 550203);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 551235);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 552267);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 553299);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 554331);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 555363);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 556395);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 557427);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 558459);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1164} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1166} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} __VERIFIER_assume($i10);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 559491);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1168} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1169} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1170} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 560523);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1171} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1172} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 561555);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 562587);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1173} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1174} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 563619);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 564651);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 565683);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1175} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1176} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p6 := malloc($i5);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.1;
    call {:si_unique_call 1180} cmdloc_dummy_var_60 := $memset.i8(cmdloc_dummy_var_59, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_60;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 566715);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 567747);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.103, $M.1, $M.56, $M.107, $M.108, $M.7, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.6, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.0, $M.99, $M.100, $M.98, $M.97, $M.3, $M.94, $M.77, $M.80, $M.75, $M.82, $M.83, $M.73, $M.88, $M.89, $M.9, $M.79, $M.91, $M.74, $M.90, $M.12, $M.11, $M.81, $M.86, $M.85, $M.13, $M.96, $M.84, $M.72, $M.78, $M.8, $M.87, $M.10, $M.95, $M.15, $M.14, $M.92, $M.93, $M.16, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1181} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.103 := $store.i8($M.103, __kstrtab_ipmi_addr_src_to_str, 105);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(5, 1)), 97);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(7, 1)), 100);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(12, 1)), 99);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(17, 1)), 115);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(19, 1)), 114);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(__kstrtab_ipmi_addr_src_to_str, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, panic_done_count, 0);
    $M.56 := 0;
    call {:si_unique_call 1182} {:cexpr "has_panicked"} boogie_si_record_i32(0);
    $M.1 := $store.i32($M.1, stop_operation, 0);
    $M.107 := $store.i8($M.107, __kstrtab_ipmi_free_recv_msg, 105);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(1, 1)), 112);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(5, 1)), 102);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(12, 1)), 99);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(13, 1)), 118);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(15, 1)), 109);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(16, 1)), 115);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(17, 1)), 103);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_ipmi_free_recv_msg, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.108 := $store.i8($M.108, __kstrtab_ipmi_alloc_smi_msg, 105);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(1, 1)), 112);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(6, 1)), 108);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(7, 1)), 108);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(9, 1)), 99);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(11, 1)), 115);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(12, 1)), 109);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(13, 1)), 105);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(15, 1)), 109);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(16, 1)), 115);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(17, 1)), 103);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(__kstrtab_ipmi_alloc_smi_msg, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i32($M.1, smi_msg_inuse_count, 0);
    $M.7 := $store.ref($M.7, ipmi_timer, $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i64($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.i64($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(44, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(48, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(ipmi_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.109 := $store.i8($M.109, __kstrtab_ipmi_smi_watchdog_pretimeout, 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(1, 1)), 112);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(2, 1)), 109);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(3, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(4, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(5, 1)), 115);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(6, 1)), 109);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(8, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(9, 1)), 119);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(10, 1)), 97);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(11, 1)), 116);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(12, 1)), 99);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(13, 1)), 104);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(15, 1)), 111);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(16, 1)), 103);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(18, 1)), 112);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(19, 1)), 114);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(20, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(21, 1)), 116);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(22, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(23, 1)), 109);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(24, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(25, 1)), 111);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(26, 1)), 117);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(27, 1)), 116);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_ipmi_smi_watchdog_pretimeout, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.110 := $store.i8($M.110, __kstrtab_ipmi_smi_msg_received, 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(1, 1)), 112);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(6, 1)), 109);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(9, 1)), 109);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(10, 1)), 115);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(11, 1)), 103);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(15, 1)), 99);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(17, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(18, 1)), 118);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(__kstrtab_ipmi_smi_msg_received, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.111 := $store.i8($M.111, __kstrtab_ipmi_unregister_smi, 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(5, 1)), 117);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(6, 1)), 110);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(9, 1)), 103);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(10, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(11, 1)), 115);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(16, 1)), 115);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(17, 1)), 109);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(18, 1)), 105);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(__kstrtab_ipmi_unregister_smi, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.112 := $store.i8($M.112, __kstrtab_ipmi_register_smi, 105);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(5, 1)), 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(7, 1)), 103);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(14, 1)), 115);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(16, 1)), 105);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(__kstrtab_ipmi_register_smi, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.ref($M.1, dev_attr_guid, .str.58);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(32, 1)), guid_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_guid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_aux_firmware_revision, .str.57);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(32, 1)), aux_firmware_rev_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_aux_firmware_revision, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_product_id, .str.56);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(32, 1)), product_id_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_manufacturer_id, .str.55);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(32, 1)), manufacturer_id_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_manufacturer_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_additional_device_support, .str.54);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(32, 1)), add_dev_support_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_additional_device_support, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_ipmi_version, .str.53);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(32, 1)), ipmi_version_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ipmi_version, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_firmware_revision, .str.52);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(32, 1)), firmware_revision_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_firmware_revision, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_revision, .str.51);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(32, 1)), revision_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_revision, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_provides_device_sdrs, .str.50);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(32, 1)), provides_device_sdrs_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_provides_device_sdrs, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_device_id, .str.49);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(32, 1)), device_id_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_device_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, bmc_dev_attrs, dev_attr_device_id);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(1, 8)), dev_attr_provides_device_sdrs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(2, 8)), dev_attr_revision);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(3, 8)), dev_attr_firmware_revision);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(4, 8)), dev_attr_ipmi_version);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(5, 8)), dev_attr_additional_device_support);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(6, 8)), dev_attr_manufacturer_id);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(7, 8)), dev_attr_product_id);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(8, 8)), dev_attr_aux_firmware_revision);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(9, 8)), dev_attr_guid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attrs, $mul.ref(0, 88)), $mul.ref(10, 8)), $0.ref);
    $M.1 := $store.ref($M.1, bmc_dev_attr_group, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attr_group, $mul.ref(0, 32)), $mul.ref(8, 1)), bmc_dev_attr_is_visible);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attr_group, $mul.ref(0, 32)), $mul.ref(16, 1)), bmc_dev_attrs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attr_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, bmc_dev_attr_groups, bmc_dev_attr_group);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_dev_attr_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, bmc_device_type, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_device_type, $mul.ref(0, 48)), $mul.ref(8, 1)), bmc_dev_attr_groups);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_device_type, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_device_type, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_device_type, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(bmc_device_type, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, ipmidriver, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.48);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(8, 1)), platform_bus_type);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ipmidriver, $mul.ref(0, 176)), $mul.ref(168, 1)), 0);
    $M.1 := $store.i32($M.1, ipmidriver_mutex, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.46);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(ipmidriver_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(ipmidriver_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), ipmidriver_mutex);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.47);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(ipmidriver_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.113 := $store.ref($M.113, smi_version_proc_ops, $0.ref);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), smi_version_proc_open);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(smi_version_proc_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.113 := $store.ref($M.113, smi_ipmb_proc_ops, $0.ref);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), smi_ipmb_proc_open);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(smi_ipmb_proc_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.113 := $store.ref($M.113, smi_stats_proc_ops, $0.ref);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(96, 1)), smi_stats_proc_open);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(smi_stats_proc_ops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.6 := $0.ref;
    $M.141 := $store.i8($M.141, __kstrtab_ipmi_poll_interface, 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(5, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(6, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(7, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(8, 1)), 108);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(10, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(11, 1)), 110);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(15, 1)), 102);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_ipmi_poll_interface, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_ipmi_smi_add_proc_entry, 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(1, 1)), 112);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(3, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(5, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(6, 1)), 109);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(8, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(9, 1)), 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(10, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(11, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(13, 1)), 112);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(14, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(15, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(16, 1)), 99);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(19, 1)), 110);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(21, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(22, 1)), 121);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_ipmi_smi_add_proc_entry, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_ipmi_request_supply_msgs, 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(1, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(3, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(4, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(5, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(7, 1)), 113);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(8, 1)), 117);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(9, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(10, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(14, 1)), 117);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(15, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(16, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(17, 1)), 108);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(18, 1)), 121);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(20, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(21, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(22, 1)), 103);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(23, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_ipmi_request_supply_msgs, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.144 := $store.i8($M.144, __kstrtab_ipmi_request_settime, 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(5, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(7, 1)), 113);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(18, 1)), 109);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_ipmi_request_settime, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, recv_msg_inuse_count, 0);
    $M.145 := $store.i8($M.145, __kstrtab_ipmi_unregister_for_cmd, 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(1, 1)), 112);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(3, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(5, 1)), 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(6, 1)), 110);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(7, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(9, 1)), 103);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(10, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(11, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(12, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(14, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(16, 1)), 102);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(18, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(19, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(20, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(21, 1)), 109);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(22, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_ipmi_unregister_for_cmd, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.146 := $store.i8($M.146, __kstrtab_ipmi_register_for_cmd, 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(1, 1)), 112);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(5, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(6, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(7, 1)), 103);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(8, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(14, 1)), 102);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(15, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(16, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(18, 1)), 99);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(19, 1)), 109);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_ipmi_register_for_cmd, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.147 := $store.i8($M.147, __kstrtab_ipmi_set_gets_events, 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(8, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(9, 1)), 103);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(15, 1)), 118);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_ipmi_set_gets_events, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.148 := $store.i8($M.148, __kstrtab_ipmi_set_maintenance_mode, 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(1, 1)), 112);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(3, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(9, 1)), 109);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(10, 1)), 97);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(11, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(16, 1)), 97);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(18, 1)), 99);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(20, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(21, 1)), 109);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(22, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(23, 1)), 100);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_ipmi_set_maintenance_mode, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.149 := $store.i8($M.149, __kstrtab_ipmi_get_maintenance_mode, 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(1, 1)), 112);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(3, 1)), 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(5, 1)), 103);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(9, 1)), 109);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(10, 1)), 97);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(11, 1)), 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(16, 1)), 97);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(18, 1)), 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(20, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(21, 1)), 109);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(22, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(23, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_ipmi_get_maintenance_mode, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.150 := $store.i8($M.150, __kstrtab_ipmi_get_my_LUN, 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(1, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(5, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(10, 1)), 121);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(12, 1)), 76);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(13, 1)), 85);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(14, 1)), 78);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_ipmi_get_my_LUN, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.151 := $store.i8($M.151, __kstrtab_ipmi_set_my_LUN, 105);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(1, 1)), 112);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(5, 1)), 115);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(10, 1)), 121);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(12, 1)), 76);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(13, 1)), 85);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(14, 1)), 78);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_ipmi_set_my_LUN, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.152 := $store.i8($M.152, __kstrtab_ipmi_get_my_address, 105);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(5, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(9, 1)), 109);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(10, 1)), 121);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(12, 1)), 97);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(14, 1)), 100);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(17, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_ipmi_get_my_address, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.153 := $store.i8($M.153, __kstrtab_ipmi_set_my_address, 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(1, 1)), 112);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(9, 1)), 109);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(10, 1)), 121);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(12, 1)), 97);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(14, 1)), 100);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(17, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_ipmi_set_my_address, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.154 := $store.i8($M.154, __kstrtab_ipmi_get_version, 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(2, 1)), 109);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(5, 1)), 103);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(9, 1)), 118);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_ipmi_get_version, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.155 := $store.i8($M.155, __kstrtab_ipmi_destroy_user, 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(5, 1)), 100);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(7, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(9, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(11, 1)), 121);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(13, 1)), 117);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(14, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_ipmi_destroy_user, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_ipmi_get_smi_info, 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(5, 1)), 103);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(7, 1)), 116);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(10, 1)), 109);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(14, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(15, 1)), 102);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(16, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_ipmi_get_smi_info, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.157 := $store.i8($M.157, __kstrtab_ipmi_create_user, 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(2, 1)), 109);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(12, 1)), 117);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(15, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_ipmi_create_user, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.158 := $store.i8($M.158, __kstrtab_ipmi_addr_length, 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(2, 1)), 109);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(5, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(7, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(10, 1)), 108);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(12, 1)), 110);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(13, 1)), 103);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(14, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(15, 1)), 104);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_ipmi_addr_length, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i8($M.159, __kstrtab_ipmi_validate_addr, 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(1, 1)), 112);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(5, 1)), 118);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(7, 1)), 108);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(9, 1)), 100);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(15, 1)), 100);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(16, 1)), 100);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_ipmi_validate_addr, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.160 := $store.i8($M.160, __kstrtab_ipmi_smi_watcher_unregister, 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(1, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(2, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(3, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(5, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(7, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(8, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(9, 1)), 119);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(10, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(11, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(12, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(13, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(15, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(17, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(18, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(19, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(20, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(21, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(22, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(23, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(24, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(25, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(26, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_unregister, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.161 := $store.i8($M.161, __kstrtab_ipmi_smi_watcher_register, 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(1, 1)), 112);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(3, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(6, 1)), 109);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(9, 1)), 119);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(10, 1)), 97);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(11, 1)), 116);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(12, 1)), 99);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(13, 1)), 104);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(15, 1)), 114);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(17, 1)), 114);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(19, 1)), 103);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(21, 1)), 115);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_ipmi_smi_watcher_register, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.1 := $store.ref($M.1, smi_watchers, smi_watchers);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(smi_watchers, $mul.ref(0, 16)), $mul.ref(8, 1)), smi_watchers);
    $M.1 := $store.ref($M.1, ipmi_interfaces, ipmi_interfaces);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmi_interfaces, $mul.ref(0, 16)), $mul.ref(8, 1)), ipmi_interfaces);
    $M.1 := $store.i32($M.1, ipmi_interfaces_mutex, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.22);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(ipmi_interfaces_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(ipmi_interfaces_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), ipmi_interfaces_mutex);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.23);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(ipmi_interfaces_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, smi_watchers_mutex, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.20);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(smi_watchers_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(smi_watchers_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), smi_watchers_mutex);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.21);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(smi_watchers_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, addr_src_to_str, .str.11);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(1, 8)), .str.12);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(2, 8)), .str.13);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(3, 8)), .str.14);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(4, 8)), .str.15);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(5, 8)), .str.16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(6, 8)), .str.17);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(7, 8)), .str.18);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(addr_src_to_str, $mul.ref(0, 72)), $mul.ref(8, 8)), .str.19);
    $M.99 := 0;
    call {:si_unique_call 1183} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 1184} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 1185} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 1186} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1187} {:cexpr "initialized"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1188} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.80 := 0;
    call {:si_unique_call 1189} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.75 := $0.ref;
    $M.82 := 0;
    call {:si_unique_call 1190} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1191} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.88 := 0;
    call {:si_unique_call 1192} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1193} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1194} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1195} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1196} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.90 := 0;
    call {:si_unique_call 1197} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.12 := $0.ref;
    $M.11 := 0;
    call {:si_unique_call 1198} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1199} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1200} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1201} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 1202} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1203} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1204} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.72 := $0.ref;
    $M.78 := $0.ref;
    $M.8 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.95 := 0;
    call {:si_unique_call 1206} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1207} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.14 := $0.ref;
    $M.92 := 0;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1209} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.16 := 1;
    call {:si_unique_call 1210} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.216 := $store.i8($M.216, .str.36, 105);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(1, 1)), 112);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(5, 1)), 98);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(6, 1)), 109);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(8, 1)), 46);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(10, 1)), 52);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(11, 1)), 46);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(12, 1)), 52);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(13, 1)), 120);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.217 := $store.i8($M.217, .str.31, 37);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.31, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.31, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.218 := $store.i8($M.218, .str.73, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(6, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(7, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(8, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(9, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(10, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(11, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(13, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(14, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(15, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(16, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(17, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(18, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(19, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(21, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.73, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.74, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(5, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(6, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(7, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(8, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(9, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(10, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(11, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(12, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(13, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(14, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(15, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(16, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(17, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(18, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(19, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.74, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.75, 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(3, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(8, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(9, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(10, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(11, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(12, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(13, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(14, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(15, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(16, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(17, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(18, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(19, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(23, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.75, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.76, 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(2, 1)), 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(4, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(6, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(7, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(8, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(10, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(11, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(12, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(13, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(14, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(15, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(16, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(18, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(19, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(20, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(21, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(23, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(24, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(25, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.76, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.77, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(6, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(7, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(8, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(10, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(11, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(13, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(14, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(15, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(16, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(17, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(18, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.77, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.78, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(6, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(7, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(8, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(10, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(11, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(13, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(14, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(15, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(16, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(17, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(18, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(19, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(20, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(21, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(22, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.78, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.79, 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(2, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(3, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(4, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(5, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(6, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(7, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(8, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(9, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(11, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(12, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(13, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(14, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(15, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(16, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(17, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(18, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(19, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(20, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(21, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(22, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(23, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(24, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(25, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(26, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(27, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.79, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.80, 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(2, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(3, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(4, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(5, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(6, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(7, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(8, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(10, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(11, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(13, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(14, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(15, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(16, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(17, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(18, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(19, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(20, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(21, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(23, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.80, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.81, 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(2, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(3, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(4, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(5, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(6, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(7, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(8, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(10, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(11, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(13, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(14, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(15, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(16, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(17, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(18, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(19, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(20, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(21, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(23, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(24, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(25, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.82, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(6, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(7, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(8, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(10, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(11, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(12, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(13, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(14, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(15, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(16, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(18, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(19, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.82, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.83, 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(3, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(8, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(9, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(10, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(11, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(13, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(14, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(16, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(17, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(18, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(19, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(20, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(21, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(22, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.83, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.84, 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(2, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(8, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(9, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(10, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(11, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(13, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(14, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(16, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(17, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(18, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(19, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(20, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(21, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(22, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.84, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.85, 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(2, 1)), 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(4, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(6, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(7, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(8, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(10, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(11, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(13, 1)), 98);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(14, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(15, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(16, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(17, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(18, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(19, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(20, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(21, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(22, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(23, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(24, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.85, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.86, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(5, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(6, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(7, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(8, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(9, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(10, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(11, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(13, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(14, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(15, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(16, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(17, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.87, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(5, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(6, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(7, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(8, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(9, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(10, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(11, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(13, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(14, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(15, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(18, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(19, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(21, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.87, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.88, 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(2, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(3, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(4, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(5, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(6, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(7, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(8, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(9, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(11, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(12, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(13, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(14, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(15, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(16, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(17, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(18, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(19, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(20, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(21, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(22, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(23, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(24, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(25, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(26, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.88, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.89, 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(2, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(3, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(4, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(5, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(6, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(7, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(8, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(10, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(11, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(12, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(13, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(14, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(15, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(16, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(17, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(18, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(19, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(20, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(21, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(22, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.89, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.90, 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(3, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(5, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(6, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(7, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(8, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(9, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(10, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(11, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(12, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(13, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(14, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(16, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(17, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(18, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.90, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.91, 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(3, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(8, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(9, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(10, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(11, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(12, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(13, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(14, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(15, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(16, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(17, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(18, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(19, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(21, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.91, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.92, 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(2, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(8, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(9, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(10, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(11, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(12, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(13, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(14, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(15, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(16, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(17, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(18, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(19, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(21, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.92, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.93, 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(2, 1)), 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(4, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(6, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(7, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(8, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(10, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(11, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(12, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(13, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(14, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(15, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(16, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(17, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(18, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(19, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(23, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.93, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.94, 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(2, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(3, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(8, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(9, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(10, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(11, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(12, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(13, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(14, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(16, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.94, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.95, 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(2, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(8, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(9, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(10, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(11, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(12, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(13, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(14, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(16, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.95, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.96, 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(2, 1)), 104);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(4, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(6, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(7, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(8, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(9, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(10, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(11, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(13, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(14, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(15, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(16, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(17, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(18, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.96, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.97, 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(1, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(2, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(3, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(4, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(5, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(6, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(9, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(10, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(11, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(12, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(13, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(14, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(15, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(16, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.97, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.98, 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(1, 1)), 118);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(2, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(3, 1)), 110);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(4, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(5, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(6, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(7, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(8, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(9, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(10, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(11, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(12, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(13, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(14, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(15, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(16, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(22, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.98, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.99, 102);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(2, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(3, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(4, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(6, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(7, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(9, 1)), 120);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(10, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(11, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(12, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(13, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(14, 1)), 76);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(15, 1)), 65);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(16, 1)), 78);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(18, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(19, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(20, 1)), 103);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(21, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(22, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.99, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.100, 102);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(2, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(3, 1)), 108);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(4, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(6, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(7, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(9, 1)), 120);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(10, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(11, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(12, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(13, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(14, 1)), 73);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(15, 1)), 80);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(16, 1)), 77);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(17, 1)), 66);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(19, 1)), 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(21, 1)), 103);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(23, 1)), 58);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(29, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(30, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(31, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.100, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.218 := $store.i8($M.218, .str.69, 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.69, $mul.ref(0, 3)), $mul.ref(1, 1)), 120);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.69, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.218 := $store.i8($M.218, .str.70, 32);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.70, $mul.ref(0, 4)), $mul.ref(1, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.70, $mul.ref(0, 4)), $mul.ref(2, 1)), 120);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.70, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.218 := $store.i8($M.218, .str.72, 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(1, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(3, 1)), 37);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.72, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.219 := $store.i8($M.219, .str.65, 37);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.220 := $store.i8($M.220, .str.103, 37);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(1, 1)), 117);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(3, 1)), 37);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(4, 1)), 120);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.103, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.221 := $store.i8($M.221, .str.101, 48);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.101, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.222 := $store.i8($M.222, .str.66, 48);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(1, 1)), 120);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(3, 1)), 54);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(4, 1)), 46);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(5, 1)), 54);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(6, 1)), 120);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(7, 1)), 10);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.66, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.223 := $store.i8($M.223, .str.71, 48);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(1, 1)), 120);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(4, 1)), 46);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(5, 1)), 52);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(6, 1)), 120);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(7, 1)), 10);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.224 := $store.i8($M.224, .str.104, 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(1, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(2, 1)), 37);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(3, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(4, 1)), 50);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(5, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(6, 1)), 32);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(7, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(8, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(9, 1)), 37);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(10, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(11, 1)), 50);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(12, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(13, 1)), 32);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(14, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(15, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(16, 1)), 37);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(17, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(18, 1)), 50);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(19, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(21, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(22, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(23, 1)), 37);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(24, 1)), 48);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(25, 1)), 50);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(26, 1)), 120);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(27, 1)), 10);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(.str.104, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.225 := $store.i8($M.225, .str.102, 37);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(1, 1)), 76);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(2, 1)), 120);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(3, 1)), 37);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(4, 1)), 76);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(.str.102, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    call {:si_unique_call 1211} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 568779);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: ref);



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 569811);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(dummy_recv_done_handler, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(dummy_smi_done_handler, $p0);
    assume {:branchcond $i18} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(ipmi_smi_watchdog_pretimeout, $p0);
    assume {:branchcond $i17} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(cleanup_bmc_device, $p0);
    assume {:branchcond $i16} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(release_bmc_device, $p0);
    assume {:branchcond $i15} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(ipmi_poll_interface, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(free_recv_msg, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i13 == 1);
    $i12 := $eq.ref(free_smi_msg, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i12 == 1);
    $i11 := $eq.ref(free_user, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(ipmi_free_recv_msg, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(intf_free, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 1212} intf_free(arg);
    return;

  $bb3:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1213} ipmi_free_recv_msg($p1);
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 1214} free_user(arg);
    return;

  $bb5:
    assume $i12 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1215} free_smi_msg($p2);
    return;

  $bb6:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1216} free_recv_msg($p3);
    return;

  $bb7:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1217} ipmi_poll_interface($p4);
    return;

  $bb8:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1218} release_bmc_device($p5);
    return;

  $bb9:
    assume $i16 == 1;
    call {:si_unique_call 1219} cleanup_bmc_device(arg);
    return;

  $bb10:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1220} ipmi_smi_watchdog_pretimeout($p6);
    return;

  $bb11:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1221} dummy_smi_done_handler($p7);
    return;

  $bb12:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1222} dummy_recv_done_handler($p8);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 570843);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 571875);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(synchronize_rcu, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1223} synchronize_rcu();
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 572907);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(dummy_recv_done_handler, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(dummy_smi_done_handler, $p0);
    assume {:branchcond $i18} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(ipmi_smi_watchdog_pretimeout, $p0);
    assume {:branchcond $i17} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(cleanup_bmc_device, $p0);
    assume {:branchcond $i16} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(release_bmc_device, $p0);
    assume {:branchcond $i15} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(ipmi_poll_interface, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(free_recv_msg, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i13 == 1);
    $i12 := $eq.ref(free_smi_msg, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i12 == 1);
    $i11 := $eq.ref(free_user, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(ipmi_free_recv_msg, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(intf_free, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1224} intf_free($p1);
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 1225} ipmi_free_recv_msg(arg);
    return;

  $bb4:
    assume $i11 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1226} free_user($p2);
    return;

  $bb5:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1227} free_smi_msg($p3);
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 1228} free_recv_msg(arg);
    return;

  $bb7:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1229} ipmi_poll_interface($p4);
    return;

  $bb8:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1230} release_bmc_device($p5);
    return;

  $bb9:
    assume $i16 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1231} cleanup_bmc_device($p6);
    return;

  $bb10:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1232} ipmi_smi_watchdog_pretimeout($p7);
    return;

  $bb11:
    assume $i18 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1233} dummy_smi_done_handler($p8);
    return;

  $bb12:
    assume $i19 == 1;
    call {:si_unique_call 1234} dummy_recv_done_handler(arg);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 573939);

procedure devirtbounce.5(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.5(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(dummy_recv_done_handler, $p0);
    assume {:branchcond $i20} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(dummy_smi_done_handler, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i19 == 1);
    $i18 := $eq.ref(ipmi_smi_watchdog_pretimeout, $p0);
    assume {:branchcond $i18} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i18 == 1);
    $i17 := $eq.ref(cleanup_bmc_device, $p0);
    assume {:branchcond $i17} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i17 == 1);
    $i16 := $eq.ref(release_bmc_device, $p0);
    assume {:branchcond $i16} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i16 == 1);
    $i15 := $eq.ref(ipmi_poll_interface, $p0);
    assume {:branchcond $i15} true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i15 == 1);
    $i14 := $eq.ref(free_recv_msg, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(free_smi_msg, $p0);
    assume {:branchcond $i13} true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i13 == 1);
    $i12 := $eq.ref(free_user, $p0);
    assume {:branchcond $i12} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(ipmi_free_recv_msg, $p0);
    assume {:branchcond $i11} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(intf_free, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1235} intf_free($p1);
    return;

  $bb3:
    assume $i11 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1236} ipmi_free_recv_msg($p2);
    return;

  $bb4:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1237} free_user($p3);
    return;

  $bb5:
    assume $i13 == 1;
    call {:si_unique_call 1238} free_smi_msg(arg);
    return;

  $bb6:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1239} free_recv_msg($p4);
    return;

  $bb7:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1240} ipmi_poll_interface($p5);
    return;

  $bb8:
    assume $i16 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1241} release_bmc_device($p6);
    return;

  $bb9:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1242} cleanup_bmc_device($p7);
    return;

  $bb10:
    assume $i18 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1243} ipmi_smi_watchdog_pretimeout($p8);
    return;

  $bb11:
    assume $i19 == 1;
    call {:si_unique_call 1244} dummy_smi_done_handler(arg);
    return;

  $bb12:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1245} dummy_recv_done_handler($p9);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 574971);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.56, $M.59, $CurrAddr, $M.69, $M.70, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(panic_event, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i13 == 1);
    $i12 := $eq.ref(ipmi_get_my_LUN, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i12 == 1);
    $i11 := $eq.ref(ipmi_get_my_address, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1246} $i3 := ipmi_get_my_address($p1, arg1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1247} $i6 := ipmi_get_my_LUN($p4, arg1, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i13 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $i8 := $zext.i32.i64(arg1);
    $p9 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1248} $i10 := panic_event($p7, $i8, $p9);
    $r := $i10;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 576003);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 577035);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i1);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i1)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 578067);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(dummy_recv_done_handler, $p0);
    assume {:branchcond $i22} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(dummy_smi_done_handler, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(ipmi_smi_watchdog_pretimeout, $p0);
    assume {:branchcond $i20} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(cleanup_bmc_device, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(release_bmc_device, $p0);
    assume {:branchcond $i18} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(ipmi_poll_interface, $p0);
    assume {:branchcond $i17} true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(free_recv_msg, $p0);
    assume {:branchcond $i16} true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(free_smi_msg, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(free_user, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(ipmi_free_recv_msg, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(intf_free, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1249} intf_free($p1);
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1250} ipmi_free_recv_msg($p2);
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1251} free_user($p3);
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1252} free_smi_msg($p4);
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1253} free_recv_msg($p5);
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1254} ipmi_poll_interface($p6);
    return;

  $bb8:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1255} release_bmc_device($p7);
    return;

  $bb9:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1256} cleanup_bmc_device($p8);
    return;

  $bb10:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1257} ipmi_smi_watchdog_pretimeout($p9);
    return;

  $bb11:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1258} dummy_smi_done_handler($p10);
    return;

  $bb12:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1259} dummy_recv_done_handler($p11);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 579099);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(event_receiver_fetcher, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(device_id_fetcher, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(ipmi_smi_msg_received, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(guid_handler, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(channel_handler, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1260} channel_handler($p1, $p2);
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1261} guid_handler($p3, $p4);
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1262} ipmi_smi_msg_received($p5, $p6);
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1263} device_id_fetcher($p7, $p8);
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1264} event_receiver_fetcher($p9, $p10);
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 580131);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 581163);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 582195);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(event_receiver_fetcher, $p0);
    assume {:branchcond $i6} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i6 == 1);
    $i5 := $eq.ref(device_id_fetcher, $p0);
    assume {:branchcond $i5} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i5 == 1);
    $i4 := $eq.ref(ipmi_smi_msg_received, $p0);
    assume {:branchcond $i4} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i4 == 1);
    $i3 := $eq.ref(guid_handler, $p0);
    assume {:branchcond $i3} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i3 == 1);
    $i2 := $eq.ref(channel_handler, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1265} channel_handler(arg, arg1);
    return;

  $bb3:
    assume $i3 == 1;
    call {:si_unique_call 1266} guid_handler(arg, arg1);
    return;

  $bb4:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1267} ipmi_smi_msg_received(arg, $p1);
    return;

  $bb5:
    assume $i5 == 1;
    call {:si_unique_call 1268} device_id_fetcher(arg, arg1);
    return;

  $bb6:
    assume $i6 == 1;
    call {:si_unique_call 1269} event_receiver_fetcher(arg, arg1);
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 583227);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(event_receiver_fetcher, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(device_id_fetcher, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(ipmi_smi_msg_received, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(guid_handler, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(channel_handler, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1270} channel_handler($p1, $p2);
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1271} guid_handler($p3, $p4);
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1272} ipmi_smi_msg_received($p5, $p6);
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1273} device_id_fetcher($p7, $p8);
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1274} event_receiver_fetcher($p9, $p10);
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 584259);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(event_receiver_fetcher, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(device_id_fetcher, $p0);
    assume {:branchcond $i13} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(ipmi_smi_msg_received, $p0);
    assume {:branchcond $i12} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(guid_handler, $p0);
    assume {:branchcond $i11} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(channel_handler, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1275} channel_handler($p1, $p2);
    return;

  $bb3:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1276} guid_handler($p3, $p4);
    return;

  $bb4:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1277} ipmi_smi_msg_received($p5, arg1);
    return;

  $bb5:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1278} device_id_fetcher($p6, $p7);
    return;

  $bb6:
    assume $i14 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1279} event_receiver_fetcher($p8, $p9);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 585291);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 586323);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 587355);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 588387);

procedure devirtbounce.19(funcPtr: ref, arg: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.103, $M.1, $M.56, $M.107, $M.108, $M.7, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.6, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.0, $M.99, $M.100, $M.98, $M.97, $M.3, $M.94, $M.77, $M.80, $M.75, $M.82, $M.83, $M.73, $M.88, $M.89, $M.9, $M.79, $M.91, $M.74, $M.90, $M.12, $M.11, $M.81, $M.86, $M.85, $M.13, $M.96, $M.84, $M.72, $M.78, $M.8, $M.87, $M.10, $M.95, $M.15, $M.14, $M.92, $M.93, $M.16, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1280} __SMACK_static_init();
    call {:si_unique_call 1281} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.71, $M.79, $M.80, $M.81, $M.9, $M.11, $M.13, $M.15, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.56, $M.1, $M.59, $M.97, $M.72, $M.73, $M.77, $M.78, $M.74, $M.75, $M.98, $M.99, $M.100, $M.103, $M.107, $M.108, $M.7, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.6, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.0, $M.3, $M.12, $M.8, $M.10, $M.14, $M.16, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $CurrAddr, $M.69, $M.70, $M.17, $M.18, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.42;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation clean_up_interface_data_loop_$bb4(in_$i17: i64, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p19: ref, in_$p20: ref) returns (out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p19: ref, out_$p20: ref)
{

  entry:
    out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p19, out_$p20 := in_$p21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p19, in_$p20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p24, out_$p19;
    goto $bb6_dummy;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i17);
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.1, out_$p23);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree(out_$p21);
    goto corral_source_split_131;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p19, out_$p20 := clean_up_interface_data_loop_$bb4(in_$i17, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p19, out_$p20);
    return;

  exit:
    return;
}



procedure clean_up_interface_data_loop_$bb4(in_$i17: i64, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p19: ref, in_$p20: ref) returns (out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p19: ref, out_$p20: ref);



implementation free_smi_msg_list_loop_$bb4(in_$i10: i64, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p12: ref, out_$p13: ref)
{

  entry:
    out_$p14, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p12, out_$p13 := in_$p14, in_$p16, in_$p17, in_$p19, in_$i20, in_$i21, in_$p12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$p13 := out_$p17, out_$p12;
    goto $bb6_dummy;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, in_$i10);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 592)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ipmi_free_smi_msg(out_$p13);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} list_del(out_$p14);
    goto corral_source_split_1312;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p14, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p12, out_$p13 := free_smi_msg_list_loop_$bb4(in_$i10, out_$p14, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p12, out_$p13);
    return;

  exit:
    return;
}



procedure free_smi_msg_list_loop_$bb4(in_$i10: i64, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p12: ref, out_$p13: ref);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation free_recv_msg_list_loop_$bb4(in_$i10: i64, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p12: ref, out_$p13: ref)
{

  entry:
    out_$p14, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p12, out_$p13 := in_$p14, in_$p16, in_$p17, in_$p19, in_$i20, in_$i21, in_$p12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$p13 := out_$p17, out_$p12;
    goto $bb6_dummy;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, in_$i10);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} ipmi_free_recv_msg(out_$p13);
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} list_del(out_$p14);
    goto corral_source_split_1340;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p14, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p12, out_$p13 := free_recv_msg_list_loop_$bb4(in_$i10, out_$p14, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p12, out_$p13);
    return;

  exit:
    return;
}



procedure free_recv_msg_list_loop_$bb4(in_$i10: i64, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p12: ref, out_$p13: ref);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_timeout_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p20: ref, in_$i21: i32, in_$i71: i32) returns (out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p20: ref, out_$i21: i32, out_$i71: i32)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p20, out_$i21, out_$i71 := in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p20, in_$i21, in_$i71;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  $bb22:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$i21 := out_$p67, out_$i56;
    goto $bb22_dummy;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i56;
    assume true;
    goto $bb22;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} out_$i65 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 230} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.1, out_$p63);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} __read_once_size(out_$p60, out_$p62, 8);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p3, out_$p59);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.1, out_$p58);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i21, out_$i38);
    call {:si_unique_call 227} {:cexpr "nt"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p55, out_$i38);
    goto corral_source_split_1842;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4032, 1));
    goto corral_source_split_1841;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i38, 0);
    call {:si_unique_call 226} devirtbounce.8(out_$p51, out_$p53, out_$i54);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.1, out_$p52);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_1836;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_1833;

  $bb19:
    assume out_$i47 == 1;
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_1825;

  $bb16:
    assume out_$i41 == 1;
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, out_$i38);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.1, out_$p39);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4032, 1));
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i32(out_$i37);
    call {:si_unique_call 225} {:cexpr "lnt"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, out_$i34);
    call {:si_unique_call 224} {:cexpr "lnt"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} out_$i35 := ipmi_timeout_handler(out_$p20, 1000);
    call {:si_unique_call 223} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1816;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1815;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb15;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(0, 1);
    call {:si_unique_call 221} {:cexpr "lnt"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1813;

  $bb13:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p32, 1);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} ipmi_request_event(out_$p20);
    goto corral_source_split_1809;

  $bb12:
    assume out_$i31 == 1;
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, out_$p29);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p28, out_$i27);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i32(out_$i26, 1);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.1, out_$p25);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4028, 1));
    goto corral_source_split_1799;

  $bb10:
    assume out_$i24 == 1;
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i23 := atomic_read(out_$p22);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1795;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref(0, 4344)), $mul.ref(4024, 1));
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p20, out_$i21, out_$i71 := ipmi_timeout_loop_$bb8(in_$p3, in_$p4, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p20, out_$i21, out_$i71);
    return;

  exit:
    return;
}



procedure ipmi_timeout_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p20: ref, in_$i21: i32, in_$i71: i32) returns (out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p20: ref, out_$i21: i32, out_$i71: i32);
  modifies $M.1, $M.17, $M.18, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ipmi_timeout_handler_loop_$bb9(in_$i26: i64, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p28: ref, in_$p29: ref) returns (out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p28: ref, out_$p29: ref)
{

  entry:
    out_$p31, out_$p32, out_$p34, out_$i35, out_$i36, out_$p28, out_$p29 := in_$p31, in_$p32, in_$p34, in_$i35, in_$i36, in_$p28, in_$p29;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  $bb11:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$p28, out_$p29 := out_$p32, out_$p28;
    goto $bb11_dummy;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, in_$i26);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p28, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.1, out_$p31);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1966;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} deliver_err_response(out_$p29, 195);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$p34, out_$i35, out_$i36, out_$p28, out_$p29 := ipmi_timeout_handler_loop_$bb9(in_$i26, out_$p31, out_$p32, out_$p34, out_$i35, out_$i36, out_$p28, out_$p29);
    return;

  exit:
    return;
}



procedure ipmi_timeout_handler_loop_$bb9(in_$i26: i64, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p28: ref, in_$p29: ref) returns (out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p28: ref, out_$p29: ref);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation {:SIextraRecBound 64} ipmi_timeout_handler_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1937;

  $bb3:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb3_dummy;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$i14 := $sle.i32(out_$i13, 63);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i8, 1);
    call {:si_unique_call 257} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} check_msg_timeout(in_$p0, out_$p12, in_$p2, in_$i1, out_$i8, in_$p3, in_$p4);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 48));
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_1940;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4344)), $mul.ref(424, 1));
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i8 := ipmi_timeout_handler_loop_$bb1(in_$p0, in_$i1, in_$p2, in_$p3, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i8);
    return;

  exit:
    return;
}



procedure ipmi_timeout_handler_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32);
  modifies $M.1, $M.17, $M.18, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation find_cmd_rcvr_loop_$bb4(in_$i1: i8, in_$i2: i8, in_$i3: i8, in_$p6: ref, in_$p7: ref, in_$i21: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p23: ref) returns (out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p23: ref)
{

  entry:
    out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p23 := in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;

  $bb15:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p49;
    goto $bb15_dummy;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i21);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} out_$i50 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 374} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __read_once_size(out_$p45, out_$p47, 8);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p6, out_$p44);
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_2511;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb8;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p23;
    assume true;
    goto $bb12;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i35, out_$i37);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$i37 := $shl.i32(1, out_$i36);
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(in_$i3);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.1, out_$p34);
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p23, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_2499;

  $bb9:
    assume out_$i33 == 1;
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, out_$i32);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(in_$i2);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.1, out_$p29);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p23, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_2492;

  $bb6:
    assume out_$i28 == 1;
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, out_$i27);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(in_$i1);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.1, out_$p24);
    goto corral_source_split_2486;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p23 := find_cmd_rcvr_loop_$bb4(in_$i1, in_$i2, in_$i3, in_$p6, in_$p7, in_$i21, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p23);
    return;

  exit:
    return;
}



procedure find_cmd_rcvr_loop_$bb4(in_$i1: i8, in_$i2: i8, in_$i3: i8, in_$p6: ref, in_$p7: ref, in_$i21: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p23: ref) returns (out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p23: ref);
  modifies $M.1;



implementation intf_next_seq_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i15: i32, in_$i32: i32) returns (out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i15: i32, out_$i32: i32)
{

  entry:
    out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i15, out_$i32 := in_$i16, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i15, in_$i32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i27;
    goto $bb10_dummy;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i27;
    assume true;
    goto $bb10;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i29, out_$i30);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, in_$p11);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 63);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, 1);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 63);
    call {:si_unique_call 463} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3221;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i15, 1);
    goto corral_source_split_3220;

  $bb7:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i15;
    assume true;
    goto $bb7;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i21);
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i8(out_$i20, 1);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.1, out_$p19);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4344)), $mul.ref(424, 1)), $mul.ref(out_$i16, 48));
    goto corral_source_split_3202;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i15, out_$i32 := intf_next_seq_loop_$bb4(in_$p0, in_$p11, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i15, out_$i32);
    return;

  exit:
    return;
}



procedure intf_next_seq_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i15: i32, in_$i32: i32) returns (out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i15: i32, out_$i32: i32);



implementation ipmb_checksum_loop_$bb4(in_$i7: i8, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i8, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p4: ref, in_$i5: i32, in_$i6: i8, in_$i15: i8) returns (out_$i7: i8, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i8, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p4: ref, out_$i5: i32, out_$i6: i8, out_$i15: i8)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p4, out_$i5, out_$i6, out_$i15 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p4, in_$i5, in_$i6, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3383;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p4, out_$i5, out_$i6 := out_$p13, out_$i12, out_$i11;
    goto $bb6_dummy;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i11;
    assume true;
    goto $bb6;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i14 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p4, $mul.ref(1, 1));
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 473} {:cexpr "size"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i32.i8(out_$i10);
    call {:si_unique_call 472} {:cexpr "csum"} boogie_si_record_i8(out_$i11);
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i8, out_$i9);
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(out_$i6);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i8.i32(out_$i7);
    goto corral_source_split_3386;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i8($M.1, out_$p4);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p4, out_$i5, out_$i6, out_$i15 := ipmb_checksum_loop_$bb4(out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p4, out_$i5, out_$i6, out_$i15);
    return;

  exit:
    return;
}



procedure ipmb_checksum_loop_$bb4(in_$i7: i8, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i8, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p4: ref, in_$i5: i32, in_$i6: i8, in_$i15: i8) returns (out_$i7: i8, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i8, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p4: ref, out_$i5: i32, out_$i6: i8, out_$i15: i8);



implementation handle_new_recv_msgs_loop_$bb33(in_$p3: ref, in_$p4: ref, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p57: ref) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p57: ref)
{

  entry:
    out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p57 := in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p57;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  $bb38:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p57 := out_$p77;
    goto $bb38_dummy;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, in_$i55);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_3541;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_$i78 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 509} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.41, out_$p76);
    goto corral_source_split_3539;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3538;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __read_once_size(out_$p73, out_$p75, 8);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3535;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3534;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p3, out_$p72);
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.40, out_$p71);
    goto corral_source_split_3532;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3531;

  $bb36:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.39, out_$p68);
    call {:si_unique_call 506} devirtbounce.9(out_$p67, out_$p69);
    goto corral_source_split_3529;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p57, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.38, out_$p66);
    goto corral_source_split_3527;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.37, out_$p64);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p57, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3524;

  $bb35:
    assume out_$i63 == 1;
    goto corral_source_split_3523;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.38, out_$p60);
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.37, out_$p58);
    goto corral_source_split_3517;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p57 := handle_new_recv_msgs_loop_$bb33(in_$p3, in_$p4, in_$i55, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p57);
    return;

  exit:
    return;
}



procedure handle_new_recv_msgs_loop_$bb33(in_$p3: ref, in_$p4: ref, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p57: ref) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p57: ref);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_new_recv_msgs_loop_$bb7(in_$p0: ref, in_$i6: i32, in_$p12: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p32: ref, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i16: i64, in_$i36: i64) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p32: ref, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i16: i64, out_$i36: i64)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i16, out_$i36 := in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i16, in_$i36;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;

  $bb22:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i28;
    goto $bb22_dummy;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i28;
    assume true;
    goto $bb22;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_3481;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i34 := list_empty(in_$p12);
    call {:si_unique_call 498} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3480;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ipmi_free_smi_msg(out_$p20);
    goto corral_source_split_3478;

  $bb18:
    assume out_$i33 == 1;
    goto corral_source_split_3477;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i23, 0);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} list_del(out_$p32);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p20, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  $bb16:
    assume !(out_$i29 == 1);
    goto corral_source_split_3469;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i28;
    assume true;
    goto $bb16;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i29 := $sgt.i32(out_$i23, 0);
    goto corral_source_split_3465;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  $bb13:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := out_$i16;
    goto $bb14;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i27;
    goto $bb14;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} out_$i27 := _raw_spin_lock_irqsave(out_$p26);
    call {:si_unique_call 494} {:cexpr "flags"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$p26 := spinlock_check(out_$p25);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_3460;

  $bb12:
    assume out_$i24 == 1;
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(in_$i6, 0);
    goto corral_source_split_3457;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} out_$i23 := handle_one_recv_msg(in_$p0, out_$p20);
    call {:si_unique_call 491} {:cexpr "rv"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3456;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} spin_unlock_irqrestore(out_$p22, out_$i16);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4344)), $mul.ref(3504, 1));
    goto corral_source_split_3453;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(in_$i6, 0);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_3448;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4344)), $mul.ref(3576, 1)), $mul.ref(0, 1));
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i16, out_$i36 := handle_new_recv_msgs_loop_$bb7(in_$p0, in_$i6, in_$p12, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i16, out_$i36);
    return;

  exit:
    return;
}



procedure handle_new_recv_msgs_loop_$bb7(in_$p0: ref, in_$i6: i32, in_$p12: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p32: ref, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i16: i64, in_$i36: i64) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p32: ref, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i16: i64, out_$i36: i64);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 545} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_3831;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_3830;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 543} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 541} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3821;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_3820;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation handle_read_event_rsp_loop_$bb37(in_$i100: i64, in_$p104: ref, in_$p106: ref, in_$p107: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p102: ref, in_$p103: ref) returns (out_$p104: ref, out_$p106: ref, out_$p107: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p102: ref, out_$p103: ref)
{

  entry:
    out_$p104, out_$p106, out_$p107, out_$p109, out_$i110, out_$i111, out_$p102, out_$p103 := in_$p104, in_$p106, in_$p107, in_$p109, in_$i110, in_$i111, in_$p102, in_$p103;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4732;

  $bb39:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$p102, out_$p103 := out_$p103, out_$p107;
    goto $bb39_dummy;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, in_$i100);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p103, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.1, out_$p106);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(out_$p103, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} deliver_response(out_$p102);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} list_del(out_$p104);
    goto corral_source_split_4735;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p102, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p104, out_$p106, out_$p107, out_$p109, out_$i110, out_$i111, out_$p102, out_$p103 := handle_read_event_rsp_loop_$bb37(in_$i100, out_$p104, out_$p106, out_$p107, out_$p109, out_$i110, out_$i111, out_$p102, out_$p103);
    return;

  exit:
    return;
}



procedure handle_read_event_rsp_loop_$bb37(in_$i100: i64, in_$p104: ref, in_$p106: ref, in_$p107: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p102: ref, in_$p103: ref) returns (out_$p104: ref, out_$p106: ref, out_$p107: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p102: ref, out_$p103: ref);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.34, $M.35, $CurrAddr, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_read_event_rsp_loop_$bb22(in_$i59: i64, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p61: ref, in_$p62: ref) returns (out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p61: ref, out_$p62: ref)
{

  entry:
    out_$p63, out_$p65, out_$p66, out_$p68, out_$i69, out_$i70, out_$p61, out_$p62 := in_$p63, in_$p65, in_$p66, in_$p68, in_$i69, in_$i70, in_$p61, in_$p62;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4681;

  $bb24:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p61, out_$p62 := out_$p62, out_$p66;
    goto $bb24_dummy;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, in_$i59);
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p62, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(0, 384)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ipmi_free_recv_msg(out_$p61);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} list_del(out_$p63);
    goto corral_source_split_4684;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p61, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p63, out_$p65, out_$p66, out_$p68, out_$i69, out_$i70, out_$p61, out_$p62 := handle_read_event_rsp_loop_$bb22(in_$i59, out_$p63, out_$p65, out_$p66, out_$p68, out_$i69, out_$i70, out_$p61, out_$p62);
    return;

  exit:
    return;
}



procedure handle_read_event_rsp_loop_$bb22(in_$i59: i64, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p61: ref, in_$p62: ref) returns (out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p61: ref, out_$p62: ref);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.56, $M.59, $M.42, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation handle_read_event_rsp_loop_$bb11(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p6: ref, in_$i38: i64, in_$p43: ref, in_$i44: i8, in_$i45: i1, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i46: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1, in_$i41: i32, in_$p42: ref, in_$i89: i32) returns (out_$p43: ref, out_$i44: i8, out_$i45: i1, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i46: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1, out_$i41: i32, out_$p42: ref, out_$i89: i32)
{

  entry:
    out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i72, out_$p73, out_$p74, out_$p75, out_$i46, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i41, out_$p42, out_$i89 := in_$p43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$i72, in_$p73, in_$p74, in_$p75, in_$i46, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i41, in_$p42, in_$i89;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4638;

  $bb29:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$p42 := out_$i46, out_$p83;
    goto $bb29_dummy;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i46;
    assume true;
    goto $bb29;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, in_$i38);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$i87 := $p2i.ref.i64(out_$p86);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p85, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} out_$i84 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 634} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.45, out_$p82);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __read_once_size(out_$p79, out_$p81, 8);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p5, out_$p78);
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.1, out_$p77);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4647;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i41;
    goto $bb15;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i72;
    goto $bb15;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} list_add_tail(out_$p75, in_$p2);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p47, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} kref_get(out_$p74);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p42, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p73, out_$p42);
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p47, $mul.ref(0, 384)), $mul.ref(24, 1));
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} copy_event_into_recv_msg(out_$p47, in_$p1);
    goto corral_source_split_4700;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i41, 1);
    call {:si_unique_call 640} {:cexpr "deliver_count"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_4699;

  $bb18:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i64(out_$i48, 0);
    goto corral_source_split_4664;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_4663;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$p47 := ipmi_alloc_recv_msg();
    goto corral_source_split_4662;

  $bb13:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.1, out_$p43);
    goto corral_source_split_4641;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume !(out_$i45 == 1);
    goto corral_source_split_4644;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i72, out_$p73, out_$p74, out_$p75, out_$i46, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i41, out_$p42, out_$i89 := handle_read_event_rsp_loop_$bb11(in_$p1, in_$p2, in_$p5, in_$p6, in_$i38, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i72, out_$p73, out_$p74, out_$p75, out_$i46, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i41, out_$p42, out_$i89);
    return;

  exit:
    return;
}



procedure handle_read_event_rsp_loop_$bb11(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p6: ref, in_$i38: i64, in_$p43: ref, in_$i44: i8, in_$i45: i1, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i46: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1, in_$i41: i32, in_$p42: ref, in_$i89: i32) returns (out_$p43: ref, out_$i44: i8, out_$i45: i1, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i46: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1, out_$i41: i32, out_$p42: ref, out_$i89: i32);
  modifies $M.1, $M.56, $M.59, $CurrAddr, $M.69, $M.70, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation panic_event_loop_$bb8(in_$p5: ref, in_$p6: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p21: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p21 := in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5855;

  $bb14:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p43;
    goto $bb14_dummy;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p42, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} out_$i41 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.63, out_$p39);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __read_once_size(out_$p36, out_$p38, 8);
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_5869;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p5, out_$p35);
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.62, out_$p34);
    goto corral_source_split_5865;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5864;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i25 == 1;
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.58, out_$p22);
    goto corral_source_split_5858;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.61, out_$p31);
    call {:si_unique_call 799} devirtbounce.8(out_$p30, out_$p32, 1);
    goto corral_source_split_5887;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p21, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.60, out_$p29);
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.58, out_$p27);
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p21, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.59 := $store.i32($M.59, out_$p26, 1);
    goto corral_source_split_5881;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p21, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_5880;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p21 := panic_event_loop_$bb8(in_$p5, in_$p6, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p21);
    return;

  exit:
    return;
}



procedure panic_event_loop_$bb8(in_$p5: ref, in_$p6: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p21: ref);
  modifies $M.1, $M.59;



implementation send_panic_events_loop_$bb46(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p138: ref, in_$i158: i64, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p167: ref, in_$i168: i8, in_$p169: ref, in_$i170: i32, in_$i171: i8, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i176: i64, in_$p177: ref, in_$i178: i8, in_$i179: i32, in_$i180: i1, in_$i156: i32, in_$p157: ref, in_vslice_dummy_var_83: ref) returns (out_$i158: i64, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p167: ref, out_$i168: i8, out_$p169: ref, out_$i170: i32, out_$i171: i8, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i176: i64, out_$p177: ref, out_$i178: i8, out_$i179: i32, out_$i180: i1, out_$i156: i32, out_$p157: ref, out_vslice_dummy_var_83: ref)
{

  entry:
    out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_vslice_dummy_var_83 := in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p164, in_$p167, in_$i168, in_$p169, in_$i170, in_$i171, in_$p172, in_$p173, in_$p174, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i156, in_$p157, in_vslice_dummy_var_83;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  $bb51:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i156, out_$p157 := out_$i170, out_$p177;
    goto $bb51_dummy;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i180 := $ne.i32(out_$i179, 0);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i8.i32(out_$i178);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i8($M.1, out_$p177);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ipmi_panic_request_and_wait(in_$p138, in_$p3, in_$p1);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref(out_$p157, $mul.ref(out_$i176, 1));
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i176 := $sext.i32.i64(out_$i161);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_vslice_dummy_var_83 := strncpy(out_$p174, out_$p157, 11);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p173, $mul.ref(5, 1));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p172, out_$i171);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i171 := $trunc.i32.i8(out_$i156);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i170 := $add.i32(out_$i156, 1);
    call {:si_unique_call 832} {:cexpr "j"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p169, out_$i168);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i8($M.1, out_$p167);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref($add.ref($add.ref(in_$p138, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p164, $sub.i8(0, 16));
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p163, 0);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p162, 0);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  $bb49:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := out_$i159;
    goto $bb50;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i161 := 11;
    goto $bb50;

  $bb48:
    assume out_$i160 == 1;
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, 11);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i64.i32(out_$i158);
    call {:si_unique_call 831} {:cexpr "size"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_6146;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} out_$i158 := strlen(out_$p157);
    call {:si_unique_call 830} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i158);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_vslice_dummy_var_83 := send_panic_events_loop_$bb46(in_$p1, in_$p2, in_$p3, in_$p138, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_vslice_dummy_var_83);
    return;

  exit:
    return;
}



procedure send_panic_events_loop_$bb46(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p138: ref, in_$i158: i64, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p167: ref, in_$i168: i8, in_$p169: ref, in_$i170: i32, in_$i171: i8, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i176: i64, in_$p177: ref, in_$i178: i8, in_$i179: i32, in_$i180: i1, in_$i156: i32, in_$p157: ref, in_vslice_dummy_var_83: ref) returns (out_$i158: i64, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p167: ref, out_$i168: i8, out_$p169: ref, out_$i170: i32, out_$i171: i8, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i176: i64, out_$p177: ref, out_$i178: i8, out_$i179: i32, out_$i180: i1, out_$i156: i32, out_$p157: ref, out_vslice_dummy_var_83: ref);
  modifies $M.69, $M.70, $M.1, $M.34, $M.35, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation send_panic_events_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i8, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i8, in_$p134: ref, in_$p135: ref, in_$i136: i8, in_$p137: ref, in_$p139: ref, in_$i140: i8, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p138: ref, in_$p147: ref, in_$p148: ref, in_$p150: ref, in_$p151: ref, in_$i152: i8, in_$i153: i32, in_$i154: i1, in_$i158: i64, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p167: ref, in_$i168: i8, in_$p169: ref, in_$i170: i32, in_$i171: i8, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i176: i64, in_$p177: ref, in_$i178: i8, in_$i179: i32, in_$i180: i1, in_$i156: i32, in_$p157: ref, in_$p155: ref, in_$p92: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i64, in_$i194: i1, in_$p88: ref, in_vslice_dummy_var_83: ref) returns (out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i8, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i8, out_$p134: ref, out_$p135: ref, out_$i136: i8, out_$p137: ref, out_$p139: ref, out_$i140: i8, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p138: ref, out_$p147: ref, out_$p148: ref, out_$p150: ref, out_$p151: ref, out_$i152: i8, out_$i153: i32, out_$i154: i1, out_$i158: i64, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p167: ref, out_$i168: i8, out_$p169: ref, out_$i170: i32, out_$i171: i8, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i176: i64, out_$p177: ref, out_$i178: i8, out_$i179: i32, out_$i180: i1, out_$i156: i32, out_$p157: ref, out_$p155: ref, out_$p92: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i64, out_$i194: i1, out_$p88: ref, out_vslice_dummy_var_83: ref)
{

  entry:
    out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p138, out_$p147, out_$p148, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_$p155, out_$p92, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$p88, out_vslice_dummy_var_83 := in_$p89, in_$i90, in_$i91, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p125, in_$i126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$p134, in_$p135, in_$i136, in_$p137, in_$p139, in_$i140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p138, in_$p147, in_$p148, in_$p150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p164, in_$p167, in_$i168, in_$p169, in_$i170, in_$i171, in_$p172, in_$p173, in_$p174, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i156, in_$p157, in_$p155, in_$p92, in_$p182, in_$p183, in_$p184, in_$p185, in_$p186, in_$p187, in_$p188, in_$i189, in_$p190, in_$p191, in_$p192, in_$i193, in_$i194, in_$p88, in_vslice_dummy_var_83;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6012;

  $bb54:
    assume out_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$p88 := out_$p191;
    goto $bb54_dummy;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i64(out_$i193, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i193 := $p2i.ref.i64(out_$p192);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p190, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref(out_$p190, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$p190 := $bitcast.ref.ref(out_$p188);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} out_$i189 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 825} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$p188 := $load.ref($M.68, out_$p187);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$p187 := $bitcast.ref.ref(in_$p11);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __read_once_size(out_$p184, out_$p186, 8);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$p186 := $bitcast.ref.ref(out_$p185);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$p185 := $bitcast.ref.ref(in_$p11);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p10, out_$p183);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.1, out_$p182);
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref($add.ref(out_$p92, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6021;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$p92 := out_$p88;
    goto $bb27;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p92 := out_$p155;
    goto $bb27;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$p92 := out_$p88;
    goto $bb27;

  $bb25:
    assume out_$i91 == 1;
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, $sub.i32(0, 1));
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.1, out_$p89);
    goto corral_source_split_6015;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(0, 1));
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i154 == 1);
    goto $bb45;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p138;
    goto $bb45;

  $bb52:
    assume !(out_$i180 == 1);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i180 := $ne.i32(out_$i179, 0);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i8.i32(out_$i178);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i8($M.1, out_$p177);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ipmi_panic_request_and_wait(out_$p138, in_$p3, in_$p1);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref(out_$p157, $mul.ref(out_$i176, 1));
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i176 := $sext.i32.i64(out_$i161);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_vslice_dummy_var_83 := strncpy(out_$p174, out_$p157, 11);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p173, $mul.ref(5, 1));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p172, out_$i171);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i171 := $trunc.i32.i8(out_$i156);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i170 := $add.i32(out_$i156, 1);
    call {:si_unique_call 832} {:cexpr "j"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p169, out_$i168);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i8($M.1, out_$p167);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref($add.ref($add.ref(out_$p138, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p164, $sub.i8(0, 16));
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p163, 0);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p162, 0);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  $bb49:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := out_$i159;
    goto $bb50;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i161 := 11;
    goto $bb50;

  $bb48:
    assume out_$i160 == 1;
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, 11);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i64.i32(out_$i158);
    call {:si_unique_call 831} {:cexpr "size"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_6146;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} out_$i158 := strlen(out_$p157);
    call {:si_unique_call 830} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i158);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    call out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_vslice_dummy_var_83 := send_panic_events_loop_$bb46(in_$p1, in_$p2, in_$p3, out_$p138, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_vslice_dummy_var_83);
    goto $bb46_last;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i156, out_$p157 := 0, in_$p0;
    goto $bb46;

  $bb51:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i156, out_$p157 := out_$i170, out_$p177;
    assume false;
    return;

  $bb43:
    assume out_$i154 == 1;
    goto corral_source_split_6141;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p155 := out_$p138;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i153 := $sext.i8.i32(out_$i152);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i8($M.1, in_$p0);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p151, 16);
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p150, in_$p2);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p148, 68);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p147, 10);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6117;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6116;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p138 := out_$p88;
    goto $bb39;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p138 := out_$p88;
    goto $bb39;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p137, out_$i136);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p129, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i8($M.1, out_$p135);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p134, out_$i133);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p129, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i8($M.1, out_$p132);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4037, 1));
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p131, 0);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p129, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p130, 1);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p129, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p129 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_6102;

  $bb37:
    assume out_$i128 == 1;
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i122, out_$i127);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.1, out_$p125);
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4140, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i32(out_$i121);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i8($M.1, out_$p120);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6093;

  $bb35:
    assume out_$i119 == 1;
    goto corral_source_split_6092;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i117);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i8($M.1, out_$p116);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6082;

  $bb32:
    assume out_$i115 == 1;
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_6079;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    out_$i114 := $and.i32(out_$i113, 1);
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.1, out_$p111);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p110, $0.ref);
    goto corral_source_split_6074;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_6073;

  $bb30:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ipmi_panic_request_and_wait(out_$p88, in_$p3, in_$p1);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p109, event_receiver_fetcher);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p108, 0);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p107, $0.ref);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p106, 1);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p105, 4);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6061;

  $bb29:
    assume out_$i104 == 1;
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.1, out_$p101);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4039, 1));
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ipmi_panic_request_and_wait(out_$p88, in_$p3, in_$p1);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p100, device_id_fetcher);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4128, 1));
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p99, 0);
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p98, $0.ref);
    goto corral_source_split_6049;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p97, 1);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p96, 6);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p95, 0);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4036, 1));
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p94, 0);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4039, 1));
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p93, 0);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4038, 1));
    goto corral_source_split_6038;

  $bb28:
    call {:si_unique_call 826} devirtbounce.3(0);
    goto corral_source_split_6037;

  $bb26:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p146, 0);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p143, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p145, 15);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p143, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p144, 12);
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_6131;

  $bb40:
    assume out_$i142 == 1;
    goto corral_source_split_6130;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i32(out_$i141, 0);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i8.i32(out_$i140);
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i8($M.1, out_$p139);
    goto corral_source_split_6088;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p88, $mul.ref(0, 4344)), $mul.ref(4038, 1));
    goto corral_source_split_6087;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i115 == 1);
    goto $bb34;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i119 == 1);
    goto $bb34;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb34;

  $bb41:
    assume !(out_$i142 == 1);
    goto corral_source_split_6139;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p138, out_$p147, out_$p148, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_$p155, out_$p92, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$p88, out_vslice_dummy_var_83 := send_panic_events_loop_$bb23(in_$p0, in_$p1, in_$p2, in_$p3, in_$p10, in_$p11, out_$p89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p138, out_$p147, out_$p148, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i156, out_$p157, out_$p155, out_$p92, out_$p182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$p88, out_vslice_dummy_var_83);
    return;

  exit:
    return;
}



procedure send_panic_events_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i8, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i8, in_$p134: ref, in_$p135: ref, in_$i136: i8, in_$p137: ref, in_$p139: ref, in_$i140: i8, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p138: ref, in_$p147: ref, in_$p148: ref, in_$p150: ref, in_$p151: ref, in_$i152: i8, in_$i153: i32, in_$i154: i1, in_$i158: i64, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p167: ref, in_$i168: i8, in_$p169: ref, in_$i170: i32, in_$i171: i8, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i176: i64, in_$p177: ref, in_$i178: i8, in_$i179: i32, in_$i180: i1, in_$i156: i32, in_$p157: ref, in_$p155: ref, in_$p92: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i64, in_$i194: i1, in_$p88: ref, in_vslice_dummy_var_83: ref) returns (out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i8, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i8, out_$p134: ref, out_$p135: ref, out_$i136: i8, out_$p137: ref, out_$p139: ref, out_$i140: i8, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p138: ref, out_$p147: ref, out_$p148: ref, out_$p150: ref, out_$p151: ref, out_$i152: i8, out_$i153: i32, out_$i154: i1, out_$i158: i64, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p167: ref, out_$i168: i8, out_$p169: ref, out_$i170: i32, out_$i171: i8, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i176: i64, out_$p177: ref, out_$i178: i8, out_$i179: i32, out_$i180: i1, out_$i156: i32, out_$p157: ref, out_$p155: ref, out_$p92: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i64, out_$i194: i1, out_$p88: ref, out_vslice_dummy_var_83: ref);
  modifies $M.1, $M.69, $M.70, $M.34, $M.35, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation send_panic_events_loop_$bb7(in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p48: ref) returns (out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p48: ref)
{

  entry:
    out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p48 := in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p48;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5953;

  $bb13:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p48 := out_$p70;
    goto $bb13_dummy;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, $p2i.ref.i64(ipmi_interfaces));
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p69, $mul.ref($sub.ref(0, 16), 4344)), $mul.ref(16, 1));
    goto corral_source_split_5974;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p69, $mul.ref($sub.ref(0, 16), 4344));
    goto corral_source_split_5973;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_5972;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_$i68 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 817} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_5971;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.66, out_$p66);
    goto corral_source_split_5970;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_5969;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __read_once_size(out_$p63, out_$p65, 8);
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, in_$p6, out_$p62);
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_5963;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 4344)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5962;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i52 == 1;
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i64(out_$i51, 0);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.1, out_$p49);
    goto corral_source_split_5956;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ipmi_panic_request_and_wait(out_$p48, in_$p3, in_$p1);
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.1, out_$p58);
    call {:si_unique_call 818} devirtbounce.8(out_$p57, out_$p59, 1);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p48, $mul.ref(0, 4344)), $mul.ref(168, 1));
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.65, out_$p56);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p48, $mul.ref(0, 4344)), $mul.ref(160, 1));
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p53, 1);
    goto corral_source_split_5979;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p48, $mul.ref(0, 4344)), $mul.ref(4340, 1));
    goto corral_source_split_5978;

  $bb10:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p48 := send_panic_events_loop_$bb7(in_$p1, in_$p3, in_$p6, in_$p7, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p48);
    return;

  exit:
    return;
}



procedure send_panic_events_loop_$bb7(in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p48: ref) returns (out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p48: ref);
  modifies $M.1, $M.69, $M.70, $M.34, $M.35, $CurrAddr, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42;



implementation ipmi_panic_request_and_wait_loop_$bb7(in_$p0: ref, in_$i25: i32, in_$i26: i1) returns (out_$i25: i32, out_$i26: i1)
{

  entry:
    out_$i25, out_$i26 := in_$i25, in_$i26;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb9_dummy;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} out_$i25 := atomic_read(panic_done_count);
    call {:si_unique_call 845} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_6208;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ipmi_poll(in_$p0);
    goto corral_source_split_6207;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26 := ipmi_panic_request_and_wait_loop_$bb7(in_$p0, out_$i25, out_$i26);
    return;

  exit:
    return;
}



procedure ipmi_panic_request_and_wait_loop_$bb7(in_$p0: ref, in_$i25: i32, in_$i26: i1) returns (out_$i25: i32, out_$i26: i1);
  modifies $M.1, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, $M.34, $M.35, $M.42, $M.56, $M.59, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.69, $M.70;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i64, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i64, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i64, in_$i183: i32, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i64, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i64, in_$i254: i32, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$p276: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i64, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i64, in_$i289: i32, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$i297: i1, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i64, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i64, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i64, in_vslice_dummy_var_103: i16, in_vslice_dummy_var_104: i64, in_vslice_dummy_var_105: i64, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i64, in_vslice_dummy_var_108: i64, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i64, in_vslice_dummy_var_111: i64, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i64, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i64) returns (out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i64, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i64, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i64, out_$i183: i32, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i64, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i64, out_$i254: i32, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$p276: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i64, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i64, out_$i289: i32, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$i297: i1, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i64, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i64, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i64, out_vslice_dummy_var_103: i16, out_vslice_dummy_var_104: i64, out_vslice_dummy_var_105: i64, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i64, out_vslice_dummy_var_108: i64, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i64, out_vslice_dummy_var_111: i64, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i64, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i64)
{

  entry:
    out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i177, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i256, out_$i257, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i278, out_$i279, out_$i280, out_$i281, out_$p282, out_$i283, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$i172, in_$i173, in_$i174, in_$i175, in_$p176, in_$i177, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i185, in_$i186, in_$p187, in_$p188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$p240, in_$p241, in_$i243, in_$i244, in_$i245, in_$i246, in_$p247, in_$i248, in_$i250, in_$i251, in_$p252, in_$i253, in_$i254, in_$i256, in_$i257, in_$p258, in_$p259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$p275, in_$p276, in_$i278, in_$i279, in_$i280, in_$i281, in_$p282, in_$i283, in_$i285, in_$i286, in_$p287, in_$i288, in_$i289, in_$i291, in_$i292, in_$p293, in_$p294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} out_$i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 973} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i99);
    call {:si_unique_call 974} {:cexpr "tmp___39"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb52_dummy;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} out_vslice_dummy_var_95 := revision_show(in_$p13, in_$p15, in_$p11);
    goto corral_source_split_6641;

  $bb45:
    assume out_$i123 == 1;
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 1);
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$i122 := $M.79;
    goto corral_source_split_6637;

  $bb43:
    assume out_$i121 == 1;
    goto corral_source_split_6636;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_6634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} out_$i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 976} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i120);
    call {:si_unique_call 977} {:cexpr "tmp___40"} boogie_si_record_i32(out_$i120);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i119 == 1;
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$i118 := $M.79;
    goto corral_source_split_6631;

  $bb38:
    assume out_$i117 == 1;
    goto corral_source_split_6630;

  $bb36:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb32:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb24:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb3:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i99, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_stop();
    goto corral_source_split_6644;

  $bb44:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb54:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_96 := manufacturer_id_show(in_$p18, in_$p20, in_$p16);
    goto corral_source_split_6653;

  $bb58:
    assume out_$i130 == 1;
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i129 := $M.80;
    goto corral_source_split_6649;

  $bb56:
    assume out_$i128 == 1;
    goto corral_source_split_6648;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 981} out_$i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 982} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i127);
    call {:si_unique_call 983} {:cexpr "tmp___41"} boogie_si_record_i32(out_$i127);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i126 == 1;
    goto corral_source_split_6646;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_6628;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    out_$i125 := $M.80;
    goto corral_source_split_6627;

  $bb37:
    assume !(out_$i116 == 1);
    goto corral_source_split_6626;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_stop();
    goto corral_source_split_6656;

  $bb57:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb66:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_vslice_dummy_var_97 := panic_event(in_$p23, out_$i138, in_$p21);
    goto corral_source_split_6666;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.71, in_$p0);
    goto corral_source_split_6665;

  $bb70:
    assume out_$i137 == 1;
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 1);
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i136 := $M.81;
    goto corral_source_split_6661;

  $bb68:
    assume out_$i135 == 1;
    goto corral_source_split_6660;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_6658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} out_$i134 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i134);
    call {:si_unique_call 989} {:cexpr "tmp___42"} boogie_si_record_i32(out_$i134);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i133 == 1;
    goto corral_source_split_6658;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_6620;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    out_$i132 := $M.81;
    goto corral_source_split_6619;

  $bb34:
    assume out_$i115 == 1;
    goto corral_source_split_6618;

  $bb33:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i99, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ldv_stop();
    goto corral_source_split_6669;

  $bb69:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb78:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} choose_timer_1();
    goto corral_source_split_6672;

  $bb77:
    assume out_$i141 == 1;
    goto corral_source_split_6671;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i141 := $ne.i32(out_$i140, 0);
    goto corral_source_split_6624;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    out_$i140 := $M.82;
    goto corral_source_split_6623;

  $bb35:
    assume !(out_$i115 == 1);
    goto corral_source_split_6622;

  $bb81:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume {:verifier.code 0} true;
    assume !(out_$i149 == 1);
    goto $bb92;

  $bb94:
    assume {:verifier.code 0} true;
    assume !(out_$i151 == 1);
    goto $bb92;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 0);
    goto corral_source_split_6686;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i150 := $M.83;
    goto corral_source_split_6685;

  $bb90:
    assume out_$i149 == 1;
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$i148 := $M.84;
    goto corral_source_split_6681;

  $bb88:
    assume out_$i147 == 1;
    goto corral_source_split_6680;

  $bb83:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i144, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i144, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_6674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 994} out_$i144 := __VERIFIER_nondet_int();
    call {:si_unique_call 995} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i144);
    call {:si_unique_call 996} {:cexpr "tmp___43"} boogie_si_record_i32(out_$i144);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume out_$i143 == 1;
    goto corral_source_split_6674;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i142, 0);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i142 := $M.84;
    goto corral_source_split_6611;

  $bb30:
    assume out_$i113 == 1;
    goto corral_source_split_6610;

  $bb26:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i99, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb25:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i99, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb99:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_6722;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i157 := $M.97;
    goto corral_source_split_6721;

  $bb101:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6719;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6716;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6715;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_file_operations_15();
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ldv_file_operations_14();
    goto corral_source_split_6710;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} ldv_file_operations_16();
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6704;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1003} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6701;

  $bb100:
    assume out_$i156 == 1;
    goto corral_source_split_6700;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 0);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i155 := $M.97;
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $M.97 := out_$i154;
    call {:si_unique_call 1001} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} out_$i154 := ipmi_init_msghandler_mod();
    goto corral_source_split_6695;

  $bb98:
    assume out_$i153 == 1;
    goto corral_source_split_6694;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i152 := $M.84;
    goto corral_source_split_6677;

  $bb85:
    assume out_$i146 == 1;
    goto corral_source_split_6676;

  $bb84:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i144, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_stop();
    goto corral_source_split_6727;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb87;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb87;

  $bb111:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb125:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.83 := out_$i173;
    call {:si_unique_call 1028} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i173 := $sub.i32(out_$i172, 1);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i172 := $M.83;
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} out_vslice_dummy_var_98 := single_release(out_$p169, out_$p170);
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$p170 := $M.73;
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$p169 := $M.72;
    goto corral_source_split_6748;

  $bb124:
    assume out_$i168 == 1;
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i167 := $M.85;
    goto corral_source_split_6744;

  $bb122:
    assume out_$i166 == 1;
    goto corral_source_split_6743;

  $bb120:
    assume out_$i165 == 1;
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i161, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb113:
    assume out_$i162 == 1;
    assume {:verifier.code 0} true;
    out_$i165 := $slt.i32(out_$i161, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i162 := $slt.i32(out_$i161, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} out_$i161 := __VERIFIER_nondet_int();
    call {:si_unique_call 1024} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i161);
    call {:si_unique_call 1025} {:cexpr "tmp___44"} boogie_si_record_i32(out_$i161);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb110:
    assume out_$i160 == 1;
    goto corral_source_split_6729;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i160 := $ne.i32(out_$i159, 0);
    goto corral_source_split_6616;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$i159 := $M.85;
    goto corral_source_split_6615;

  $bb31:
    assume !(out_$i113 == 1);
    goto corral_source_split_6614;

  $bb129:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} out_vslice_dummy_var_99 := seq_read(out_$p176, in_$p26, out_$i177, in_$p25);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i64($M.71, in_$p2);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$p176 := $M.73;
    goto corral_source_split_6757;

  $bb128:
    assume out_$i175 == 1;
    goto corral_source_split_6756;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 2);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i174 := $M.85;
    goto corral_source_split_6740;

  $bb121:
    assume !(out_$i165 == 1);
    goto corral_source_split_6739;

  $bb132:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} out_vslice_dummy_var_100 := seq_lseek(out_$p181, out_$i182, out_$i183);
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i32($M.71, in_$p3);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i64($M.71, in_$p1);
    goto corral_source_split_6764;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    out_$p181 := $M.73;
    goto corral_source_split_6763;

  $bb131:
    assume out_$i180 == 1;
    goto corral_source_split_6762;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i179 := $M.85;
    goto corral_source_split_6732;

  $bb115:
    assume out_$i163 == 1;
    goto corral_source_split_6731;

  $bb114:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    out_$i163 := $slt.i32(out_$i161, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb135:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.83 := out_$i193;
    call {:si_unique_call 1036} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i193 := $add.i32(out_$i192, 1);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$i192 := $M.83;
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_6778;

  $bb136:
    assume out_$i191 == 1;
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 0);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$i190 := $M.98;
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.98 := out_$i189;
    call {:si_unique_call 1034} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$i189 := smi_ipmb_proc_open(out_$p187, out_$p188);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$p188 := $M.73;
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$p187 := $M.72;
    goto corral_source_split_6770;

  $bb134:
    assume out_$i186 == 1;
    goto corral_source_split_6769;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 1);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i185 := $M.85;
    goto corral_source_split_6736;

  $bb117:
    assume out_$i164 == 1;
    goto corral_source_split_6735;

  $bb116:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i161, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_stop();
    goto corral_source_split_6783;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb119;

  $bb123:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb119;

  $bb144:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1042} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_vslice_dummy_var_101 := device_id_show(in_$p28, in_$p30, in_$p31);
    goto corral_source_split_6792;

  $bb148:
    assume out_$i199 == 1;
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 1);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i198 := $M.86;
    goto corral_source_split_6788;

  $bb146:
    assume out_$i197 == 1;
    goto corral_source_split_6787;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} out_$i196 := __VERIFIER_nondet_int();
    call {:si_unique_call 1039} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i196);
    call {:si_unique_call 1040} {:cexpr "tmp___45"} boogie_si_record_i32(out_$i196);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume out_$i195 == 1;
    goto corral_source_split_6785;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i195 := $ne.i32(out_$i194, 0);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i194 := $M.86;
    goto corral_source_split_6603;

  $bb28:
    assume out_$i112 == 1;
    goto corral_source_split_6602;

  $bb27:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i99, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_stop();
    goto corral_source_split_6795;

  $bb147:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb156:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} out_vslice_dummy_var_102 := product_id_show(in_$p34, in_$p36, in_$p32);
    goto corral_source_split_6804;

  $bb160:
    assume out_$i206 == 1;
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 1);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$i205 := $M.87;
    goto corral_source_split_6800;

  $bb158:
    assume out_$i204 == 1;
    goto corral_source_split_6799;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_6797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} out_$i203 := __VERIFIER_nondet_int();
    call {:si_unique_call 1045} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i203);
    call {:si_unique_call 1046} {:cexpr "tmp___46"} boogie_si_record_i32(out_$i203);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb155:
    assume out_$i202 == 1;
    goto corral_source_split_6797;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i202 := $ne.i32(out_$i201, 0);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i201 := $M.87;
    goto corral_source_split_6607;

  $bb29:
    assume !(out_$i112 == 1);
    goto corral_source_split_6606;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_stop();
    goto corral_source_split_6807;

  $bb159:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb168:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb173:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} out_vslice_dummy_var_103 := bmc_dev_attr_is_visible(in_$p38, in_$p40, out_$i214);
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.71, in_$p4);
    goto corral_source_split_6816;

  $bb172:
    assume out_$i213 == 1;
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i212 := $M.88;
    goto corral_source_split_6812;

  $bb170:
    assume out_$i211 == 1;
    goto corral_source_split_6811;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_6809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1050} out_$i210 := __VERIFIER_nondet_int();
    call {:si_unique_call 1051} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i210);
    call {:si_unique_call 1052} {:cexpr "tmp___47"} boogie_si_record_i32(out_$i210);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb167:
    assume out_$i209 == 1;
    goto corral_source_split_6809;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i209 := $ne.i32(out_$i208, 0);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i208 := $M.88;
    goto corral_source_split_6595;

  $bb22:
    assume out_$i109 == 1;
    goto corral_source_split_6594;

  $bb18:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i99, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb5:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i99, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb4:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i99, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_stop();
    goto corral_source_split_6820;

  $bb171:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb180:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb185:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} out_vslice_dummy_var_104 := ipmi_version_show(in_$p45, in_$p43, in_$p41);
    goto corral_source_split_6829;

  $bb184:
    assume out_$i221 == 1;
    goto corral_source_split_6828;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 1);
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i220 := $M.89;
    goto corral_source_split_6825;

  $bb182:
    assume out_$i219 == 1;
    goto corral_source_split_6824;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_6822:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1056} out_$i218 := __VERIFIER_nondet_int();
    call {:si_unique_call 1057} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i218);
    call {:si_unique_call 1058} {:cexpr "tmp___48"} boogie_si_record_i32(out_$i218);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume out_$i217 == 1;
    goto corral_source_split_6822;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i217 := $ne.i32(out_$i216, 0);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i216 := $M.89;
    goto corral_source_split_6599;

  $bb23:
    assume !(out_$i109 == 1);
    goto corral_source_split_6598;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_stop();
    goto corral_source_split_6832;

  $bb183:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb192:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_vslice_dummy_var_105 := provides_device_sdrs_show(in_$p48, in_$p50, in_$p46);
    goto corral_source_split_6841;

  $bb196:
    assume out_$i228 == 1;
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 1);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i227 := $M.90;
    goto corral_source_split_6837;

  $bb194:
    assume out_$i226 == 1;
    goto corral_source_split_6836;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_6834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} out_$i225 := __VERIFIER_nondet_int();
    call {:si_unique_call 1063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i225);
    call {:si_unique_call 1064} {:cexpr "tmp___49"} boogie_si_record_i32(out_$i225);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume out_$i224 == 1;
    goto corral_source_split_6834;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i224 := $ne.i32(out_$i223, 0);
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$i223 := $M.90;
    goto corral_source_split_6587;

  $bb20:
    assume out_$i108 == 1;
    goto corral_source_split_6586;

  $bb19:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i99, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_stop();
    goto corral_source_split_6844;

  $bb195:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb204:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb218:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.83 := out_$i244;
    call {:si_unique_call 1073} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$i244 := $sub.i32(out_$i243, 1);
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    out_$i243 := $M.83;
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} out_vslice_dummy_var_106 := single_release(out_$p240, out_$p241);
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    out_$p241 := $M.78;
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$p240 := $M.77;
    goto corral_source_split_6865;

  $bb217:
    assume out_$i239 == 1;
    goto corral_source_split_6864;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 2);
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i238 := $M.91;
    goto corral_source_split_6861;

  $bb215:
    assume out_$i237 == 1;
    goto corral_source_split_6860;

  $bb213:
    assume out_$i236 == 1;
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i232, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb206:
    assume out_$i233 == 1;
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i32(out_$i232, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i233 := $slt.i32(out_$i232, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_6846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} out_$i232 := __VERIFIER_nondet_int();
    call {:si_unique_call 1069} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i232);
    call {:si_unique_call 1070} {:cexpr "tmp___50"} boogie_si_record_i32(out_$i232);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb203:
    assume out_$i231 == 1;
    goto corral_source_split_6846;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i231 := $ne.i32(out_$i230, 0);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i230 := $M.91;
    goto corral_source_split_6591;

  $bb21:
    assume !(out_$i108 == 1);
    goto corral_source_split_6590;

  $bb222:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1075} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_vslice_dummy_var_107 := seq_read(out_$p247, in_$p53, out_$i248, in_$p52);
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i64($M.71, in_$p5);
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$p247 := $M.78;
    goto corral_source_split_6874;

  $bb221:
    assume out_$i246 == 1;
    goto corral_source_split_6873;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 2);
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i245 := $M.91;
    goto corral_source_split_6857;

  $bb214:
    assume !(out_$i236 == 1);
    goto corral_source_split_6856;

  $bb225:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1077} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} out_vslice_dummy_var_108 := seq_lseek(out_$p252, out_$i253, out_$i254);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i32($M.71, in_$p6);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i253 := $load.i64($M.71, in_$p7);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$p252 := $M.78;
    goto corral_source_split_6880;

  $bb224:
    assume out_$i251 == 1;
    goto corral_source_split_6879;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 2);
    goto corral_source_split_6850;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$i250 := $M.91;
    goto corral_source_split_6849;

  $bb208:
    assume out_$i234 == 1;
    goto corral_source_split_6848;

  $bb207:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    out_$i234 := $slt.i32(out_$i232, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb228:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb230:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $M.83 := out_$i264;
    call {:si_unique_call 1081} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_6898;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i264 := $add.i32(out_$i263, 1);
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    out_$i263 := $M.83;
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(2);
    goto corral_source_split_6895;

  $bb229:
    assume out_$i262 == 1;
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 0);
    goto corral_source_split_6892;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i261 := $M.99;
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.99 := out_$i260;
    call {:si_unique_call 1079} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i260);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i260 := smi_stats_proc_open(out_$p258, out_$p259);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$p259 := $M.78;
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$p258 := $M.77;
    goto corral_source_split_6887;

  $bb227:
    assume out_$i257 == 1;
    goto corral_source_split_6886;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i256 := $M.91;
    goto corral_source_split_6853;

  $bb210:
    assume out_$i235 == 1;
    goto corral_source_split_6852;

  $bb209:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i232, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_stop();
    goto corral_source_split_6900;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb211:
    assume {:verifier.code 0} true;
    assume !(out_$i235 == 1);
    goto $bb212;

  $bb216:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb212;

  $bb237:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb251:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $M.83 := out_$i279;
    call {:si_unique_call 1088} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i279);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i279 := $sub.i32(out_$i278, 1);
    goto corral_source_split_6926;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i278 := $M.83;
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1087} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} out_vslice_dummy_var_109 := single_release(out_$p275, out_$p276);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$p276 := $M.75;
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$p275 := $M.74;
    goto corral_source_split_6921;

  $bb250:
    assume out_$i274 == 1;
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 2);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$i273 := $M.92;
    goto corral_source_split_6917;

  $bb248:
    assume out_$i272 == 1;
    goto corral_source_split_6916;

  $bb246:
    assume out_$i271 == 1;
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i267, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb239:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i271 := $slt.i32(out_$i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb238:
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i267, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_6902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} out_$i267 := __VERIFIER_nondet_int();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i267);
    call {:si_unique_call 1085} {:cexpr "tmp___51"} boogie_si_record_i32(out_$i267);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb236:
    assume out_$i266 == 1;
    goto corral_source_split_6902;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i266 := $ne.i32(out_$i265, 0);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    out_$i265 := $M.92;
    goto corral_source_split_6579;

  $bb16:
    assume out_$i106 == 1;
    goto corral_source_split_6578;

  $bb7:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i99, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i99, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb255:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1090} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} out_vslice_dummy_var_110 := seq_read(out_$p282, in_$p56, out_$i283, in_$p55);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i64($M.71, in_$p8);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$p282 := $M.75;
    goto corral_source_split_6930;

  $bb254:
    assume out_$i281 == 1;
    goto corral_source_split_6929;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 2);
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$i280 := $M.92;
    goto corral_source_split_6913;

  $bb247:
    assume !(out_$i271 == 1);
    goto corral_source_split_6912;

  $bb258:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1092} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_vslice_dummy_var_111 := seq_lseek(out_$p287, out_$i288, out_$i289);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.71, in_$p10);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i288 := $load.i64($M.71, in_$p9);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$p287 := $M.75;
    goto corral_source_split_6936;

  $bb257:
    assume out_$i286 == 1;
    goto corral_source_split_6935;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 2);
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i285 := $M.92;
    goto corral_source_split_6905;

  $bb241:
    assume out_$i269 == 1;
    goto corral_source_split_6904;

  $bb240:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i269 := $slt.i32(out_$i267, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb261:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb263:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.83 := out_$i299;
    call {:si_unique_call 1096} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i299);
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    out_$i299 := $add.i32(out_$i298, 1);
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    out_$i298 := $M.83;
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 1095} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_6951;

  $bb262:
    assume out_$i297 == 1;
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 0);
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$i296 := $M.100;
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.100 := out_$i295;
    call {:si_unique_call 1094} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i295);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_$i295 := smi_version_proc_open(out_$p293, out_$p294);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$p294 := $M.75;
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$p293 := $M.74;
    goto corral_source_split_6943;

  $bb260:
    assume out_$i292 == 1;
    goto corral_source_split_6942;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 1);
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    out_$i291 := $M.92;
    goto corral_source_split_6909;

  $bb243:
    assume out_$i270 == 1;
    goto corral_source_split_6908;

  $bb242:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i267, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_stop();
    goto corral_source_split_6956;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb244:
    assume {:verifier.code 0} true;
    assume !(out_$i270 == 1);
    goto $bb245;

  $bb249:
    assume {:verifier.code 0} true;
    assume !(out_$i272 == 1);
    goto $bb245;

  $bb270:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb275:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1102} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} out_vslice_dummy_var_112 := add_dev_support_show(in_$p58, in_$p60, in_$p61);
    goto corral_source_split_6965;

  $bb274:
    assume out_$i305 == 1;
    goto corral_source_split_6964;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 1);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$i304 := $M.93;
    goto corral_source_split_6961;

  $bb272:
    assume out_$i303 == 1;
    goto corral_source_split_6960;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_6958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} out_$i302 := __VERIFIER_nondet_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i302);
    call {:si_unique_call 1100} {:cexpr "tmp___52"} boogie_si_record_i32(out_$i302);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume out_$i301 == 1;
    goto corral_source_split_6958;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i301 := $ne.i32(out_$i300, 0);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$i300 := $M.93;
    goto corral_source_split_6583;

  $bb17:
    assume !(out_$i106 == 1);
    goto corral_source_split_6582;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_stop();
    goto corral_source_split_6968;

  $bb273:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb282:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb287:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} out_vslice_dummy_var_113 := guid_show(in_$p64, in_$p66, in_$p62);
    goto corral_source_split_6977;

  $bb286:
    assume out_$i312 == 1;
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 1);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i311 := $M.94;
    goto corral_source_split_6973;

  $bb284:
    assume out_$i310 == 1;
    goto corral_source_split_6972;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_6970:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} out_$i309 := __VERIFIER_nondet_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i309);
    call {:si_unique_call 1106} {:cexpr "tmp___53"} boogie_si_record_i32(out_$i309);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb281:
    assume out_$i308 == 1;
    goto corral_source_split_6970;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$i308 := $ne.i32(out_$i307, 0);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    out_$i307 := $M.94;
    goto corral_source_split_6567;

  $bb9:
    assume out_$i103 == 1;
    goto corral_source_split_6566;

  $bb8:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i99, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_stop();
    goto corral_source_split_6980;

  $bb285:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb294:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb299:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_vslice_dummy_var_114 := firmware_revision_show(in_$p68, in_$p70, in_$p71);
    goto corral_source_split_6989;

  $bb298:
    assume out_$i319 == 1;
    goto corral_source_split_6988;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 1);
    goto corral_source_split_6986;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$i318 := $M.95;
    goto corral_source_split_6985;

  $bb296:
    assume out_$i317 == 1;
    goto corral_source_split_6984;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_6982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} out_$i316 := __VERIFIER_nondet_int();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i316);
    call {:si_unique_call 1112} {:cexpr "tmp___54"} boogie_si_record_i32(out_$i316);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb293:
    assume out_$i315 == 1;
    goto corral_source_split_6982;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i315 := $ne.i32(out_$i314, 0);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i314 := $M.95;
    goto corral_source_split_6571;

  $bb11:
    assume out_$i104 == 1;
    goto corral_source_split_6570;

  $bb10:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i99, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_stop();
    goto corral_source_split_6992;

  $bb297:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb306:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb311:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_vslice_dummy_var_115 := aux_firmware_rev_show(in_$p73, in_$p76, in_$p74);
    goto corral_source_split_7001;

  $bb310:
    assume out_$i326 == 1;
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i325 := $M.96;
    goto corral_source_split_6997;

  $bb308:
    assume out_$i324 == 1;
    goto corral_source_split_6996;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_6994:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} out_$i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 1117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i323);
    call {:si_unique_call 1118} {:cexpr "tmp___55"} boogie_si_record_i32(out_$i323);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb305:
    assume out_$i322 == 1;
    goto corral_source_split_6994;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i32(out_$i321, 0);
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i321 := $M.96;
    goto corral_source_split_6575;

  $bb13:
    assume out_$i105 == 1;
    goto corral_source_split_6574;

  $bb12:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i99, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_stop();
    goto corral_source_split_7004;

  $bb309:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_stop();
    goto corral_source_split_7006;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb15;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i117 == 1);
    goto $bb15;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i177, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i256, out_$i257, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i278, out_$i279, out_$i280, out_$i281, out_$p282, out_$i283, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p13, in_$p15, in_$p16, in_$p18, in_$p20, in_$p21, in_$p23, in_$p25, in_$p26, in_$p28, in_$p30, in_$p31, in_$p32, in_$p34, in_$p36, in_$p38, in_$p40, in_$p41, in_$p43, in_$p45, in_$p46, in_$p48, in_$p50, in_$p52, in_$p53, in_$p55, in_$p56, in_$p58, in_$p60, in_$p61, in_$p62, in_$p64, in_$p66, in_$p68, in_$p70, in_$p71, in_$p73, in_$p74, in_$p76, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i177, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i256, out_$i257, out_$p258, out_$p259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i278, out_$i279, out_$i280, out_$i281, out_$p282, out_$i283, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i64, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i64, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i64, in_$i183: i32, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i64, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i64, in_$i254: i32, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$p276: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i64, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i64, in_$i289: i32, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$i297: i1, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i64, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i64, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i64, in_vslice_dummy_var_103: i16, in_vslice_dummy_var_104: i64, in_vslice_dummy_var_105: i64, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i64, in_vslice_dummy_var_108: i64, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i64, in_vslice_dummy_var_111: i64, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i64, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i64) returns (out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i64, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i64, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i64, out_$i183: i32, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i64, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i64, out_$i254: i32, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$p276: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i64, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i64, out_$i289: i32, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$i297: i1, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i64, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i64, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i64, out_vslice_dummy_var_103: i16, out_vslice_dummy_var_104: i64, out_vslice_dummy_var_105: i64, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i64, out_vslice_dummy_var_108: i64, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i64, out_vslice_dummy_var_111: i64, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i64, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i64);
  modifies $M.79, $M.80, $M.81, $M.56, $M.1, $M.59, $CurrAddr, $M.69, $M.70, $M.34, $M.35, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.42, $M.17, $M.18, $M.87, $M.88, $M.89, $M.90, $M.74, $M.75, $M.92, $M.77, $M.78, $M.91, $M.93, $M.94, $M.72, $M.73, $M.85, $M.86, $M.95, $M.96, $M.84, $M.97, $M.6, $M.3, $M.83, $M.98, $M.99, $M.100;


